

Microchip Technology PIC18 PRO Macro Assembler V1.41 build -162212810 
                                                                                               Wed May 28 17:10:21 2025

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	18XPS1103
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	config,global,class=CONFIG,delta=1
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    51                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    52                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    54                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    55                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    56                           	psect	pa_nodes0,global,class=CODE,delta=1
    57  0000                     
    58                           ; Version 1.41
    59                           ; Generated 25/01/2017 GMT
    60                           ; 
    61                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    62                           ; All rights reserved.
    63                           ; 
    64                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    65                           ; 
    66                           ; Redistribution and use in source and binary forms, with or without modification, are
    67                           ; permitted provided that the following conditions are met:
    68                           ; 
    69                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    70                           ;        conditions and the following disclaimer.
    71                           ; 
    72                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    73                           ;        of conditions and the following disclaimer in the documentation and/or other
    74                           ;        materials provided with the distribution.
    75                           ; 
    76                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    77                           ;        software without specific prior written permission.
    78                           ; 
    79                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    80                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    81                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    82                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    83                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    84                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    85                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    86                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    87                           ; 
    88                           ; 
    89                           ; Code-generator required, PIC18F2510 Definitions
    90                           ; 
    91                           ; SFR Addresses
    92  0000                     tblptrh	equ	0xFF7
    93                           tblptrl	equ	0xFF6
    94                           tablat	equ	0xFF5
    95                           prodl	equ	0xFF3
    96                           intcon	equ	0xFF2
    97                           intcon2	equ	0xFF1
    98                           intcon3	equ	0xFF0
    99                           wreg	equ	0xFE8
   100                           indf2	equ	0xFDF
   101                           postinc2	equ	0xFDE
   102                           postdec2	equ	0xFDD
   103                           fsr2h	equ	0xFDA
   104                           fsr2l	equ	0xFD9
   105                           status	equ	0xFD8
   106                           
   107                           	psect	config
   108  300000                     	org	0	;# 
   109  300000                     config_word1:
   110                           	opt stack 0
   111                           
   112                           ;# 
   113  300000  FFFC               	dw	65532	;# 
   114  300002                     	org	2	;# 
   115  300002                     config_word2:
   116                           	opt stack 0
   117                           
   118                           ;# 
   119  300002  FF27               	dw	65319	;# 
   120                           tblptrh	equ	0xFF7
   121                           tblptrl	equ	0xFF6
   122                           tablat	equ	0xFF5
   123                           prodl	equ	0xFF3
   124                           intcon	equ	0xFF2
   125                           intcon2	equ	0xFF1
   126                           intcon3	equ	0xFF0
   127                           wreg	equ	0xFE8
   128                           indf2	equ	0xFDF
   129                           postinc2	equ	0xFDE
   130                           postdec2	equ	0xFDD
   131                           fsr2h	equ	0xFDA
   132                           fsr2l	equ	0xFD9
   133                           status	equ	0xFD8
   134                           
   135                           	psect	idataCOMRAM
   136  001C78                     __pidataCOMRAM:
   137                           	opt stack 0
   138                           
   139                           ;initializer for _pw_t
   140  001C78  001E               	dw	30
   141  001C7A  0000               	dw	0
   142                           
   143                           ;initializer for _ui_ld
   144  001C7C  0A                 	db	10
   145  001C7D  0A                 	db	10
   146  001C7E  0A                 	db	10
   147                           
   148                           ;initializer for _bat
   149  001C7F  01                 	db	1
   150  001C80  01A4               	dw	420
   151                           
   152                           ;initializer for _pwm_bat
   153  001C82  012C               	dw	300
   154                           
   155                           ;initializer for _cfg_flag
   156  001C84  01                 	db	1
   157                           
   158                           ;initializer for _pw_add_flag
   159  001C85  01                 	db	1
   160                           
   161                           ;initializer for _key_o
   162  001C86  01                 	db	1
   163                           
   164                           ;initializer for _chrging
   165  001C87  01                 	db	1
   166                           
   167                           ;initializer for _zz
   168  001C88  1E                 	db	30
   169                           
   170                           ;initializer for _pw
   171  001C89  08                 	db	8
   172                           tblptrh	equ	0xFF7
   173                           tblptrl	equ	0xFF6
   174                           tablat	equ	0xFF5
   175                           prodl	equ	0xFF3
   176                           intcon	equ	0xFF2
   177                           intcon2	equ	0xFF1
   178                           intcon3	equ	0xFF0
   179                           wreg	equ	0xFE8
   180                           indf2	equ	0xFDF
   181                           postinc2	equ	0xFDE
   182                           postdec2	equ	0xFDD
   183                           fsr2h	equ	0xFDA
   184                           fsr2l	equ	0xFD9
   185                           status	equ	0xFD8
   186                           
   187                           	psect	idataBANK0
   188  001C9A                     __pidataBANK0:
   189                           	opt stack 0
   190                           
   191                           ;initializer for _pwm
   192  001C9A  00                 	db	0
   193  001C9B  00                 	db	0
   194  001C9C  00                 	db	0
   195  001C9D  00                 	db	0
   196  001C9E  00                 	db	0
   197  001C9F  050D               	dw	1293
   198  001CA1  012C               	dw	300
   199                           tblptrh	equ	0xFF7
   200                           tblptrl	equ	0xFF6
   201                           tablat	equ	0xFF5
   202                           prodl	equ	0xFF3
   203                           intcon	equ	0xFF2
   204                           intcon2	equ	0xFF1
   205                           intcon3	equ	0xFF0
   206                           wreg	equ	0xFE8
   207                           indf2	equ	0xFDF
   208                           postinc2	equ	0xFDE
   209                           postdec2	equ	0xFDD
   210                           fsr2h	equ	0xFDA
   211                           fsr2l	equ	0xFD9
   212                           status	equ	0xFD8
   213                           
   214                           	psect	smallconst
   215  000100                     __psmallconst:
   216                           	opt stack 0
   217  000100  00                 	db	0
   218  000101                     _nixienum:
   219                           	opt stack 0
   220  000101  7D                 	db	125
   221  000102  0C                 	db	12
   222  000103  B5                 	db	181
   223  000104  9D                 	db	157
   224  000105  CC                 	db	204
   225  000106  D9                 	db	217
   226  000107  F9                 	db	249
   227  000108  0D                 	db	13
   228  000109  FD                 	db	253
   229  00010A  DD                 	db	221
   230  00010B                     __end_of_nixienum:
   231                           	opt stack 0
   232  00010B  00                 	db	0	; dummy byte at the end
   233  0000                     tblptrh	equ	0xFF7
   234                           tblptrl	equ	0xFF6
   235                           tablat	equ	0xFF5
   236                           prodl	equ	0xFF3
   237                           intcon	equ	0xFF2
   238                           intcon2	equ	0xFF1
   239                           intcon3	equ	0xFF0
   240                           wreg	equ	0xFE8
   241                           indf2	equ	0xFDF
   242                           postinc2	equ	0xFDE
   243                           postdec2	equ	0xFDD
   244                           fsr2h	equ	0xFDA
   245                           fsr2l	equ	0xFD9
   246                           status	equ	0xFD8
   247                           
   248                           ; #config settings
   249                           
   250                           	psect	cinit
   251  00190E                     __pcinit:
   252                           	opt stack 0
   253  00190E                     start_initialization:
   254                           	opt stack 0
   255  00190E                     __initialization:
   256                           	opt stack 0
   257                           
   258                           ; Initialize objects allocated to BANK0 (9 bytes)
   259                           ; load TBLPTR registers with __pidataBANK0
   260  00190E  0E9A               	movlw	low __pidataBANK0
   261  001910  6EF6               	movwf	tblptrl,c
   262  001912  0E1C               	movlw	high __pidataBANK0
   263  001914  6EF7               	movwf	tblptrh,c
   264  001916  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   265  001918  6EF8               	movwf	tblptru,c
   266  00191A  EE00  F0D2         	lfsr	0,__pdataBANK0
   267  00191E  EE10 F009          	lfsr	1,9
   268  001922                     copy_data0:
   269  001922  0009               	tblrd		*+
   270  001924  CFF5 FFEE          	movff	tablat,postinc0
   271  001928  50E5               	movf	postdec1,w,c
   272  00192A  50E1               	movf	fsr1l,w,c
   273  00192C  E1FA               	bnz	copy_data0
   274                           
   275                           ; Initialize objects allocated to COMRAM (18 bytes)
   276                           ; load TBLPTR registers with __pidataCOMRAM
   277  00192E  0E78               	movlw	low __pidataCOMRAM
   278  001930  6EF6               	movwf	tblptrl,c
   279  001932  0E1C               	movlw	high __pidataCOMRAM
   280  001934  6EF7               	movwf	tblptrh,c
   281  001936  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   282  001938  6EF8               	movwf	tblptru,c
   283  00193A  EE00  F06A         	lfsr	0,__pdataCOMRAM
   284  00193E  EE10 F012          	lfsr	1,18
   285  001942                     copy_data1:
   286  001942  0009               	tblrd		*+
   287  001944  CFF5 FFEE          	movff	tablat,postinc0
   288  001948  50E5               	movf	postdec1,w,c
   289  00194A  50E1               	movf	fsr1l,w,c
   290  00194C  E1FA               	bnz	copy_data1
   291                           
   292                           ; Clear objects allocated to BANK0 (82 bytes)
   293  00194E  EE00  F080         	lfsr	0,__pbssBANK0
   294  001952  0E52               	movlw	82
   295  001954                     clear_0:
   296  001954  6AEE               	clrf	postinc0,c
   297  001956  06E8               	decf	wreg,f,c
   298  001958  E1FD               	bnz	clear_0
   299                           
   300                           ; Clear objects allocated to COMRAM (60 bytes)
   301  00195A  EE00  F001         	lfsr	0,__pbssCOMRAM
   302  00195E  0E3C               	movlw	60
   303  001960                     clear_1:
   304  001960  6AEE               	clrf	postinc0,c
   305  001962  06E8               	decf	wreg,f,c
   306  001964  E1FD               	bnz	clear_1
   307  001966                     end_of_initialization:
   308                           	opt stack 0
   309  001966                     __end_of__initialization:
   310                           	opt stack 0
   311  001966  907C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   312  001968  927C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   313  00196A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   314  00196C  6EF8               	movwf	tblptru,c
   315  00196E  0100               	movlb	0
   316  001970  EF86  F000         	goto	_main	;jump to C main() function
   317                           tblptru	equ	0xFF8
   318                           tblptrh	equ	0xFF7
   319                           tblptrl	equ	0xFF6
   320                           tablat	equ	0xFF5
   321                           prodl	equ	0xFF3
   322                           intcon	equ	0xFF2
   323                           intcon2	equ	0xFF1
   324                           intcon3	equ	0xFF0
   325                           postinc0	equ	0xFEE
   326                           wreg	equ	0xFE8
   327                           postdec1	equ	0xFE5
   328                           fsr1l	equ	0xFE1
   329                           indf2	equ	0xFDF
   330                           postinc2	equ	0xFDE
   331                           postdec2	equ	0xFDD
   332                           fsr2h	equ	0xFDA
   333                           fsr2l	equ	0xFD9
   334                           status	equ	0xFD8
   335                           
   336                           	psect	bssCOMRAM
   337  000001                     __pbssCOMRAM:
   338                           	opt stack 0
   339  000001                     _nixie_z:
   340                           	opt stack 0
   341  000001                     	ds	18
   342  000013                     _ui:
   343                           	opt stack 0
   344  000013                     	ds	10
   345  00001D                     _si_mic_flag:
   346                           	opt stack 0
   347  00001D                     	ds	5
   348  000022                     _tim_ui:
   349                           	opt stack 0
   350  000022                     	ds	3
   351  000025                     _kl_init:
   352                           	opt stack 0
   353  000025                     	ds	1
   354  000026                     _smoing:
   355                           	opt stack 0
   356  000026                     	ds	1
   357  000027                     _timout:
   358                           	opt stack 0
   359  000027                     	ds	1
   360  000028                     _si_mic_state:
   361                           	opt stack 0
   362  000028                     	ds	1
   363  000029                     _USART_BUF:
   364                           	opt stack 0
   365  000029                     	ds	1
   366  00002A                     _pwm_cnt:
   367                           	opt stack 0
   368  00002A                     	ds	1
   369  00002B                     _adc_begin:
   370                           	opt stack 0
   371  00002B                     	ds	1
   372  00002C                     _adc_cnt:
   373                           	opt stack 0
   374  00002C                     	ds	1
   375  00002D                     _adc_flag:
   376                           	opt stack 0
   377  00002D                     	ds	1
   378  00002E                     _pwm_flag:
   379                           	opt stack 0
   380  00002E                     	ds	1
   381  00002F                     _lowbat_init:
   382                           	opt stack 0
   383  00002F                     	ds	1
   384  000030                     _pw_mode:
   385                           	opt stack 0
   386  000030                     	ds	1
   387  000031                     _ts_cnt:
   388                           	opt stack 0
   389  000031                     	ds	1
   390  000032                     _key_cnt_flag:
   391                           	opt stack 0
   392  000032                     	ds	1
   393  000033                     _key_cnt:
   394                           	opt stack 0
   395  000033                     	ds	1
   396  000034                     _ts:
   397                           	opt stack 0
   398  000034                     	ds	1
   399  000035                     _chrg_cnt:
   400                           	opt stack 0
   401  000035                     	ds	1
   402  000036                     _full:
   403                           	opt stack 0
   404  000036                     	ds	1
   405  000037                     _chrg_o:
   406                           	opt stack 0
   407  000037                     	ds	1
   408  000038                     _yd:
   409                           	opt stack 0
   410  000038                     	ds	1
   411  000039                     _cb_o:
   412                           	opt stack 0
   413  000039                     	ds	1
   414  00003A                     _zz_p:
   415                           	opt stack 0
   416  00003A                     	ds	1
   417  00003B                     _zz_begin:
   418                           	opt stack 0
   419  00003B                     	ds	1
   420  00003C                     _ui_id:
   421                           	opt stack 0
   422  00003C                     	ds	1
   423                           tblptru	equ	0xFF8
   424                           tblptrh	equ	0xFF7
   425                           tblptrl	equ	0xFF6
   426                           tablat	equ	0xFF5
   427                           prodl	equ	0xFF3
   428                           intcon	equ	0xFF2
   429                           intcon2	equ	0xFF1
   430                           intcon3	equ	0xFF0
   431                           postinc0	equ	0xFEE
   432                           wreg	equ	0xFE8
   433                           postdec1	equ	0xFE5
   434                           fsr1l	equ	0xFE1
   435                           indf2	equ	0xFDF
   436                           postinc2	equ	0xFDE
   437                           postdec2	equ	0xFDD
   438                           fsr2h	equ	0xFDA
   439                           fsr2l	equ	0xFD9
   440                           status	equ	0xFD8
   441                           
   442                           	psect	dataCOMRAM
   443  00006A                     __pdataCOMRAM:
   444                           	opt stack 0
   445  00006A                     _pw_t:
   446                           	opt stack 0
   447  00006A                     	ds	4
   448  00006E                     _ui_ld:
   449                           	opt stack 0
   450  00006E                     	ds	3
   451  000071                     _bat:
   452                           	opt stack 0
   453  000071                     	ds	3
   454  000074                     _pwm_bat:
   455                           	opt stack 0
   456  000074                     	ds	2
   457  000076                     _cfg_flag:
   458                           	opt stack 0
   459  000076                     	ds	1
   460  000077                     _pw_add_flag:
   461                           	opt stack 0
   462  000077                     	ds	1
   463  000078                     _key_o:
   464                           	opt stack 0
   465  000078                     	ds	1
   466  000079                     _chrging:
   467                           	opt stack 0
   468  000079                     	ds	1
   469  00007A                     _zz:
   470                           	opt stack 0
   471  00007A                     	ds	1
   472  00007B                     _pw:
   473                           	opt stack 0
   474  00007B                     	ds	1
   475                           tblptru	equ	0xFF8
   476                           tblptrh	equ	0xFF7
   477                           tblptrl	equ	0xFF6
   478                           tablat	equ	0xFF5
   479                           prodl	equ	0xFF3
   480                           intcon	equ	0xFF2
   481                           intcon2	equ	0xFF1
   482                           intcon3	equ	0xFF0
   483                           postinc0	equ	0xFEE
   484                           wreg	equ	0xFE8
   485                           postdec1	equ	0xFE5
   486                           fsr1l	equ	0xFE1
   487                           indf2	equ	0xFDF
   488                           postinc2	equ	0xFDE
   489                           postdec2	equ	0xFDD
   490                           fsr2h	equ	0xFDA
   491                           fsr2l	equ	0xFD9
   492                           status	equ	0xFD8
   493                           
   494                           	psect	bssBANK0
   495  000080                     __pbssBANK0:
   496                           	opt stack 0
   497  000080                     _zz_:
   498                           	opt stack 0
   499  000080                     	ds	6
   500  000086                     _tim_cnt:
   501                           	opt stack 0
   502  000086                     	ds	4
   503  00008A                     _task_list:
   504                           	opt stack 0
   505  00008A                     	ds	72
   506                           tblptru	equ	0xFF8
   507                           tblptrh	equ	0xFF7
   508                           tblptrl	equ	0xFF6
   509                           tablat	equ	0xFF5
   510                           prodl	equ	0xFF3
   511                           intcon	equ	0xFF2
   512                           intcon2	equ	0xFF1
   513                           intcon3	equ	0xFF0
   514                           postinc0	equ	0xFEE
   515                           wreg	equ	0xFE8
   516                           postdec1	equ	0xFE5
   517                           fsr1l	equ	0xFE1
   518                           indf2	equ	0xFDF
   519                           postinc2	equ	0xFDE
   520                           postdec2	equ	0xFDD
   521                           fsr2h	equ	0xFDA
   522                           fsr2l	equ	0xFD9
   523                           status	equ	0xFD8
   524                           
   525                           	psect	dataBANK0
   526  0000D2                     __pdataBANK0:
   527                           	opt stack 0
   528  0000D2                     _pwm:
   529                           	opt stack 0
   530  0000D2                     	ds	9
   531                           tblptru	equ	0xFF8
   532                           tblptrh	equ	0xFF7
   533                           tblptrl	equ	0xFF6
   534                           tablat	equ	0xFF5
   535                           prodl	equ	0xFF3
   536                           intcon	equ	0xFF2
   537                           intcon2	equ	0xFF1
   538                           intcon3	equ	0xFF0
   539                           postinc0	equ	0xFEE
   540                           wreg	equ	0xFE8
   541                           postdec1	equ	0xFE5
   542                           fsr1l	equ	0xFE1
   543                           indf2	equ	0xFDF
   544                           postinc2	equ	0xFDE
   545                           postdec2	equ	0xFDD
   546                           fsr2h	equ	0xFDA
   547                           fsr2l	equ	0xFD9
   548                           status	equ	0xFD8
   549                           
   550                           	psect	cstackCOMRAM
   551  00003D                     __pcstackCOMRAM:
   552                           	opt stack 0
   553  00003D                     ??_ISR_l:
   554  00003D                     
   555                           ; 1 bytes @ 0x0
   556  00003D                     	ds	1
   557  00003E                     ??_new_nixie:
   558  00003E                     ?___lmul:
   559                           	opt stack 0
   560  00003E                     sleep_task@task_:
   561                           	opt stack 0
   562  00003E                     task_init@i:
   563                           	opt stack 0
   564  00003E                     ldz@a:
   565                           	opt stack 0
   566  00003E                     ___lbdiv@divisor:
   567                           	opt stack 0
   568  00003E                     add_task_id@interval_ms:
   569                           	opt stack 0
   570  00003E                     ___lmul@multiplier:
   571                           	opt stack 0
   572                           
   573                           ; 4 bytes @ 0x1
   574  00003E                     	ds	1
   575  00003F                     ??_sleep_task:
   576  00003F                     ___lbdiv@dividend:
   577                           	opt stack 0
   578                           
   579                           ; 1 bytes @ 0x2
   580  00003F                     	ds	1
   581  000040                     ___lbdiv@counter:
   582                           	opt stack 0
   583  000040                     _new_nixie$6535:
   584                           	opt stack 0
   585                           
   586                           ; 2 bytes @ 0x3
   587  000040                     	ds	1
   588  000041                     ___lbdiv@quotient:
   589                           	opt stack 0
   590                           
   591                           ; 1 bytes @ 0x4
   592  000041                     	ds	1
   593  000042                     add_task_id@suc_max:
   594                           	opt stack 0
   595  000042                     new_nixie@temp:
   596                           	opt stack 0
   597  000042                     ___lbmod@divisor:
   598                           	opt stack 0
   599  000042                     ___lmul@multiplicand:
   600                           	opt stack 0
   601                           
   602                           ; 4 bytes @ 0x5
   603  000042                     	ds	1
   604  000043                     add_task_id@task_id:
   605                           	opt stack 0
   606  000043                     ui_chrg@task_:
   607                           	opt stack 0
   608  000043                     ui_chrgfree@task_:
   609                           	opt stack 0
   610  000043                     ui_chrgfull@task_:
   611                           	opt stack 0
   612  000043                     ui_smoing@task_:
   613                           	opt stack 0
   614  000043                     ui_kl@task_:
   615                           	opt stack 0
   616  000043                     ui_timout@task_:
   617                           	opt stack 0
   618  000043                     ui_begin@task_:
   619                           	opt stack 0
   620  000043                     ___lbmod@dividend:
   621                           	opt stack 0
   622                           
   623                           ; 1 bytes @ 0x6
   624  000043                     	ds	1
   625  000044                     ??_add_task_id:
   626  000044                     ??_ui_smoing:
   627  000044                     ??_ui_begin:
   628  000044                     ___lbmod@counter:
   629                           	opt stack 0
   630  000044                     _ui_chrg$6558:
   631                           	opt stack 0
   632                           
   633                           ; 2 bytes @ 0x7
   634  000044                     	ds	1
   635  000045                     ___lbmod@rem:
   636                           	opt stack 0
   637                           
   638                           ; 1 bytes @ 0x8
   639  000045                     	ds	1
   640  000046                     _ui_chrg$6559:
   641                           	opt stack 0
   642  000046                     ___lmul@product:
   643                           	opt stack 0
   644                           
   645                           ; 4 bytes @ 0x9
   646  000046                     	ds	2
   647  000048                     add_task_id@id:
   648                           	opt stack 0
   649                           
   650                           ; 1 bytes @ 0xB
   651  000048                     	ds	1
   652  000049                     add_task_id@interval_ticks:
   653                           	opt stack 0
   654                           
   655                           ; 2 bytes @ 0xC
   656  000049                     	ds	1
   657  00004A                     ?___lldiv:
   658                           	opt stack 0
   659  00004A                     ___lldiv@dividend:
   660                           	opt stack 0
   661                           
   662                           ; 4 bytes @ 0xD
   663  00004A                     	ds	1
   664  00004B                     key_task@task_:
   665                           	opt stack 0
   666  00004B                     ui_cb@task_:
   667                           	opt stack 0
   668  00004B                     ui_smoend_dl_getup@task_:
   669                           	opt stack 0
   670  00004B                     ui_ts_on@task_:
   671                           	opt stack 0
   672  00004B                     ui_ts_off@task_:
   673                           	opt stack 0
   674                           
   675                           ; 1 bytes @ 0xE
   676  00004B                     	ds	1
   677  00004C                     ??_ui_cb:
   678  00004C                     ??_ui_smoend_dl_getup:
   679  00004C                     ??_ui_ts_on:
   680  00004C                     
   681                           ; 1 bytes @ 0xF
   682  00004C                     	ds	2
   683  00004E                     ___lldiv@divisor:
   684                           	opt stack 0
   685                           
   686                           ; 4 bytes @ 0x11
   687  00004E                     	ds	4
   688  000052                     ___lldiv@quotient:
   689                           	opt stack 0
   690                           
   691                           ; 4 bytes @ 0x15
   692  000052                     	ds	4
   693  000056                     ___lldiv@counter:
   694                           	opt stack 0
   695                           
   696                           ; 1 bytes @ 0x19
   697  000056                     	ds	1
   698  000057                     ??_get_load:
   699  000057                     ?_get_bat:
   700                           	opt stack 0
   701                           
   702                           ; 2 bytes @ 0x1A
   703  000057                     	ds	2
   704  000059                     ??_get_bat:
   705  000059                     get_load@temp:
   706                           	opt stack 0
   707                           
   708                           ; 4 bytes @ 0x1C
   709  000059                     	ds	2
   710  00005B                     get_bat@ttt:
   711                           	opt stack 0
   712                           
   713                           ; 4 bytes @ 0x1E
   714  00005B                     	ds	2
   715  00005D                     cb_task@task_:
   716                           	opt stack 0
   717                           
   718                           ; 1 bytes @ 0x20
   719  00005D                     	ds	1
   720  00005E                     ??_cb_task:
   721                           
   722                           ; 1 bytes @ 0x21
   723  00005E                     	ds	1
   724  00005F                     bat_task@task_:
   725                           	opt stack 0
   726  00005F                     chrg_task@task_:
   727                           	opt stack 0
   728  00005F                     si_mic_task@task_:
   729                           	opt stack 0
   730                           
   731                           ; 1 bytes @ 0x22
   732  00005F                     	ds	1
   733  000060                     ??_si_mic_task:
   734  000060                     ??_bat_task:
   735  000060                     cb_task@zz_t:
   736                           	opt stack 0
   737                           
   738                           ; 2 bytes @ 0x23
   739  000060                     	ds	1
   740  000061                     _si_mic_task$4366:
   741                           	opt stack 0
   742                           
   743                           ; 4 bytes @ 0x24
   744  000061                     	ds	1
   745  000062                     bat_task@b:
   746                           	opt stack 0
   747                           
   748                           ; 2 bytes @ 0x25
   749  000062                     	ds	3
   750  000065                     find_task@task_:
   751                           	opt stack 0
   752                           
   753                           ; 1 bytes @ 0x28
   754  000065                     	ds	1
   755  000066                     ??_main:
   756                           
   757                           ; 1 bytes @ 0x29
   758  000066                     	ds	2
   759  000068                     main@b_:
   760                           	opt stack 0
   761                           
   762                           ; 2 bytes @ 0x2B
   763  000068                     	ds	2
   764                           tblptru	equ	0xFF8
   765                           tblptrh	equ	0xFF7
   766                           tblptrl	equ	0xFF6
   767                           tablat	equ	0xFF5
   768                           prodl	equ	0xFF3
   769                           intcon	equ	0xFF2
   770                           intcon2	equ	0xFF1
   771                           intcon3	equ	0xFF0
   772                           postinc0	equ	0xFEE
   773                           wreg	equ	0xFE8
   774                           postdec1	equ	0xFE5
   775                           fsr1l	equ	0xFE1
   776                           indf2	equ	0xFDF
   777                           postinc2	equ	0xFDE
   778                           postdec2	equ	0xFDD
   779                           fsr2h	equ	0xFDA
   780                           fsr2l	equ	0xFD9
   781                           status	equ	0xFD8
   782                           
   783 ;;
   784 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   785 ;;
   786 ;; *************** function _main *****************
   787 ;; Defined at:
   788 ;;		line 71 in file ".\src\main.c"
   789 ;; Parameters:    Size  Location     Type
   790 ;;		None
   791 ;; Auto vars:     Size  Location     Type
   792 ;;  b_              2   43[COMRAM] unsigned int 
   793 ;; Return value:  Size  Location     Type
   794 ;;                  1    wreg      void 
   795 ;; Registers used:
   796 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   797 ;; Tracked objects:
   798 ;;		On entry : 0/0
   799 ;;		On exit  : 3F/0
   800 ;;		Unchanged: 0/0
   801 ;; Data sizes:     COMRAM   BANK0
   802 ;;      Params:         0       0
   803 ;;      Locals:         2       0
   804 ;;      Temps:          2       0
   805 ;;      Totals:         4       0
   806 ;;Total ram usage:        4 bytes
   807 ;; Hardware stack levels required when called:    6
   808 ;; This function calls:
   809 ;;		___lldiv
   810 ;;		___lmul
   811 ;;		_add_task_id
   812 ;;		_bat_task
   813 ;;		_cb_task
   814 ;;		_chrg_task
   815 ;;		_cmp0_init
   816 ;;		_find_task
   817 ;;		_get_bat
   818 ;;		_gpio_init
   819 ;;		_key_task
   820 ;;		_si_mic_task
   821 ;;		_sleep_task
   822 ;;		_task_init
   823 ;;		_timer0_init
   824 ;;		_timer1_init
   825 ;;		_timer2_init
   826 ;; This function is called by:
   827 ;;		Startup code after reset
   828 ;; This function uses a non-reentrant model
   829 ;;
   830                           
   831                           	psect	text0
   832  00010C                     __ptext0:
   833                           	opt stack 0
   834  00010C                     _main:
   835                           	opt stack 2
   836                           
   837                           ;main.c: 73: gpio_init();
   838                           
   839                           ;incstack = 0
   840  00010C  ECE9  F00D         	call	_gpio_init	;wreg free
   841                           
   842                           ;main.c: 74: timer0_init();
   843  000110  EC32  F00E         	call	_timer0_init	;wreg free
   844                           
   845                           ;main.c: 76: timer1_init();
   846  000114  EC0D  F00E         	call	_timer1_init	;wreg free
   847                           
   848                           ;main.c: 77: cmp0_init();
   849  000118  EC1B  F00E         	call	_cmp0_init	;wreg free
   850                           
   851                           ;main.c: 78: timer2_init();
   852  00011C  EC27  F00E         	call	_timer2_init	;wreg free
   853                           
   854                           ;main.c: 79: task_init();
   855  000120  ECFC  F00D         	call	_task_init	;wreg free
   856                           
   857                           ;main.c: 85: cb_o=PINB1;
   858  000124  EC49  F00A         	call	PL44	;call to abstracted procedure
   859                           
   860                           ;main.c: 159: ui_id=6;
   861  000128  0E06               	movlw	6
   862  00012A  6E3C               	movwf	_ui_id,c
   863                           
   864                           ;main.c: 160: add_task_id(9,40,0,0);
   865  00012C  0E28               	movlw	40
   866  00012E  EC94  F005         	call	PL6	;call to abstracted procedure
   867  000132  6A42               	clrf	add_task_id@suc_max,c
   868  000134  6A43               	clrf	add_task_id@task_id,c
   869  000136  0E09               	movlw	9
   870  000138  EC53  F00A         	call	_add_task_id
   871                           
   872                           ;main.c: 162: add_task_id(14,1000,0,1);
   873  00013C  0EE8               	movlw	232
   874  00013E  6E3E               	movwf	add_task_id@interval_ms,c
   875  000140  0E03               	movlw	3
   876  000142  6E3F               	movwf	add_task_id@interval_ms+1,c
   877  000144  6A40               	clrf	add_task_id@interval_ms+2,c
   878  000146  6A41               	clrf	add_task_id@interval_ms+3,c
   879  000148  6A42               	clrf	add_task_id@suc_max,c
   880  00014A  0E01               	movlw	1
   881  00014C  6E43               	movwf	add_task_id@task_id,c
   882  00014E  0E0E               	movlw	14
   883  000150  EC53  F00A         	call	_add_task_id
   884                           
   885                           ;main.c: 163: unsigned int b_=get_bat();
   886  000154  ECE8  F00C         	call	_get_bat	;wreg free
   887  000158  C057  F068         	movff	?_get_bat,main@b_
   888  00015C  C058  F069         	movff	?_get_bat+1,main@b_+1
   889                           
   890                           ;main.c: 165: if((bat.bat>b_)||((bat.bat+50)<=b_))
   891  000160  5072               	movf	_bat+1,w,c
   892  000162  5C68               	subwf	main@b_,w,c
   893  000164  5073               	movf	_bat+2,w,c
   894  000166  5869               	subwfb	main@b_+1,w,c
   895  000168  E30B               	bnc	l5144
   896  00016A  0E32               	movlw	50
   897  00016C  2472               	addwf	_bat+1,w,c
   898  00016E  6E66               	movwf	??_main& (0+255),c
   899  000170  0E00               	movlw	0
   900  000172  2073               	addwfc	_bat+2,w,c
   901  000174  6E67               	movwf	(??_main+1)& (0+255),c
   902  000176  5066               	movf	??_main,w,c
   903  000178  5C68               	subwf	main@b_,w,c
   904  00017A  5067               	movf	??_main+1,w,c
   905  00017C  5869               	subwfb	main@b_+1,w,c
   906  00017E  E304               	bnc	l16495
   907  000180                     l5144:
   908                           
   909                           ;main.c: 166: {
   910                           ;main.c: 167: bat.bat=b_;
   911  000180  C068  F072         	movff	main@b_,_bat+1
   912  000184  C069  F073         	movff	main@b_+1,_bat+2
   913  000188                     l16495:
   914                           
   915                           ;main.c: 168: }
   916                           ;main.c: 169: if( bat.bat<=317)
   917  000188  DBDA               	call	PL78	;call to abstracted procedure
   918  00018A  E202               	bc	l16499
   919                           
   920                           ;main.c: 170: {
   921                           ;main.c: 171: bat.dian=0;
   922  00018C  6A71               	clrf	_bat,c
   923                           
   924                           ;main.c: 176: }
   925  00018E  D00D               	goto	l16513
   926  000190                     l16499:
   927                           
   928                           ;main.c: 177: else if ( bat.bat<=345)
   929  000190  DBDB               	call	PL80	;call to abstracted procedure
   930  000192  E202               	bc	l16503
   931                           
   932                           ;main.c: 178: {
   933                           ;main.c: 179: bat.dian=1;
   934  000194  0E01               	movlw	1
   935  000196  D008               	goto	L1
   936  000198                     l16503:
   937                           
   938                           ;main.c: 184: else if ( bat.bat<=370)
   939  000198  DBB9               	call	PL62	;call to abstracted procedure
   940  00019A  E202               	bc	l16507
   941                           
   942                           ;main.c: 185: {
   943                           ;main.c: 186: bat.dian=2;
   944  00019C  0E02               	movlw	2
   945  00019E  D004               	goto	L1
   946  0001A0                     l16507:
   947                           
   948                           ;main.c: 191: else if ( bat.bat<=390)
   949  0001A0  DBBA               	call	PL64	;call to abstracted procedure
   950                           
   951                           ;main.c: 192: {
   952                           ;main.c: 193: bat.dian=3;
   953  0001A2  0E03               	movlw	3
   954  0001A4  B0D8               	btfsc	status,0,c
   955                           
   956                           ;main.c: 198: else
   957                           ;main.c: 199: {
   958                           ;main.c: 200: bat.dian=4;
   959  0001A6  0E04               	movlw	4
   960  0001A8                     L1:
   961  0001A8  6E71               	movwf	_bat,c
   962  0001AA                     l16513:
   963                           
   964                           ;main.c: 204: }
   965                           ;main.c: 213: if((get_bat()<=330)&&PINA4)
   966  0001AA  ECE8  F00C         	call	_get_bat	;wreg free
   967  0001AE  0E4B               	movlw	75
   968  0001B0  5C57               	subwf	?_get_bat,w,c
   969  0001B2  0E01               	movlw	1
   970  0001B4  5858               	subwfb	?_get_bat+1,w,c
   971  0001B6  E206               	bc	l16525
   972  0001B8  A886               	btfss	3974,4,c	;volatile
   973  0001BA  D004               	goto	l16525
   974                           
   975                           ;main.c: 214: {
   976                           ;main.c: 215: bat.bat=315;
   977  0001BC  0E01               	movlw	1
   978  0001BE  6E73               	movwf	_bat+2,c
   979  0001C0  0E3B               	movlw	59
   980                           
   981                           ;main.c: 216: bat.dian=0;
   982                           
   983                           ;main.c: 217: pwm.duty=0;
   984                           
   985                           ; BSR set to: 0
   986                           ;main.c: 218: lowbat_init=0;
   987  0001C2  DB95               	call	PL50	;call to abstracted procedure
   988  0001C4                     l16525:
   989                           
   990                           ;main.c: 219: }
   991                           ;main.c: 223: add_task_id(13,40,0,2);
   992  0001C4  0E28               	movlw	40
   993  0001C6  EC94  F005         	call	PL6	;call to abstracted procedure
   994  0001CA  6A42               	clrf	add_task_id@suc_max,c
   995  0001CC  0E02               	movlw	2
   996  0001CE  6E43               	movwf	add_task_id@task_id,c
   997  0001D0  0E0D               	movlw	13
   998  0001D2  EC53  F00A         	call	_add_task_id
   999                           
  1000                           ;main.c: 224: add_task_id(12,100,0,3);
  1001  0001D6  0E64               	movlw	100
  1002  0001D8  EC94  F005         	call	PL6	;call to abstracted procedure
  1003  0001DC  6A42               	clrf	add_task_id@suc_max,c
  1004  0001DE  0E03               	movlw	3
  1005  0001E0  6E43               	movwf	add_task_id@task_id,c
  1006  0001E2  0E0C               	movlw	12
  1007  0001E4  EC53  F00A         	call	_add_task_id
  1008                           
  1009                           ;main.c: 225: add_task_id(11,70,0,4);
  1010  0001E8  0E46               	movlw	70
  1011  0001EA  EC94  F005         	call	PL6	;call to abstracted procedure
  1012  0001EE  6A42               	clrf	add_task_id@suc_max,c
  1013  0001F0  0E04               	movlw	4
  1014  0001F2  6E43               	movwf	add_task_id@task_id,c
  1015  0001F4  0E0B               	movlw	11
  1016  0001F6  EC53  F00A         	call	_add_task_id
  1017                           
  1018                           ;main.c: 226: add_task_id(15,200,0,5);
  1019  0001FA  0EC8               	movlw	200
  1020  0001FC  EC94  F005         	call	PL6	;call to abstracted procedure
  1021  000200  6A42               	clrf	add_task_id@suc_max,c
  1022  000202  0E05               	movlw	5
  1023  000204  6E43               	movwf	add_task_id@task_id,c
  1024  000206  0E0F               	movlw	15
  1025  000208  EC53  F00A         	call	_add_task_id
  1026                           
  1027                           ;main.c: 229: add_task_id(16,300,3,ui_id);
  1028  00020C  0E2C               	movlw	44
  1029  00020E  DB46               	call	PL8	;call to abstracted procedure
  1030  000210  DB91               	call	PL76	;call to abstracted procedure
  1031  000212  0E10               	movlw	16
  1032  000214  EC53  F00A         	call	_add_task_id
  1033                           
  1034                           ;main.c: 232: pwm.load_t=300;
  1035  000218  0E01               	movlw	1
  1036  00021A  0100               	movlb	0	; () banked
  1037  00021C  6FDA               	movwf	(_pwm+8)& (0+255),b
  1038  00021E  0E2C               	movlw	44
  1039  000220  6FD9               	movwf	(_pwm+7)& (0+255),b
  1040                           
  1041                           ; BSR set to: 0
  1042                           ;main.c: 233: yd=PINB1;
  1043  000222  DB7E               	call	PL66	;call to abstracted procedure
  1044  000224                     l16539:
  1045                           
  1046                           ; BSR set to: 0
  1047                           ;main.c: 267: {
  1048                           ;main.c: 268: if(task_list[0].active && task_list[0].ready) { GIE=0;PEIE=0; task_list[0]
      +                          .ready = 0; GIE=1;PEIE=1; si_mic_task(&task_list[0]); if(task_list[0].maxSuc) { task_lis
      +                          t[0].sucCnt++; if(task_list[0].sucCnt==task_list[0].maxSuc) { task_list[0].active=0; } }
  1049  000224  518F               	movf	(_task_list+5)& (0+255),w,b
  1050  000226  E014               	bz	l16555
  1051                           
  1052                           ; BSR set to: 0
  1053  000228  5190               	movf	(_task_list+6)& (0+255),w,b
  1054  00022A  E012               	bz	l16555
  1055                           
  1056                           ; BSR set to: 0
  1057  00022C  9EF2               	bcf	intcon,7,c	;volatile
  1058  00022E  9CF2               	bcf	intcon,6,c	;volatile
  1059  000230  6B90               	clrf	(_task_list+6)& (0+255),b
  1060  000232  8EF2               	bsf	intcon,7,c	;volatile
  1061  000234  8CF2               	bsf	intcon,6,c	;volatile
  1062                           
  1063                           ; BSR set to: 0
  1064  000236  0E8A               	movlw	low _task_list
  1065  000238  6E5F               	movwf	si_mic_task@task_,c
  1066  00023A  ECAD  F004         	call	_si_mic_task	;wreg free
  1067  00023E  0100               	movlb	0	; () banked
  1068  000240  5191               	movf	(_task_list+7)& (0+255),w,b
  1069  000242  E047               	bz	l16603
  1070                           
  1071                           ; BSR set to: 0
  1072  000244  2B92               	incf	(_task_list+8)& (0+255),f,b
  1073                           
  1074                           ; BSR set to: 0
  1075  000246  5191               	movf	(_task_list+7)& (0+255),w,b
  1076  000248  1992               	xorwf	(_task_list+8)& (0+255),w,b
  1077  00024A  E143               	bnz	l16603
  1078                           
  1079                           ; BSR set to: 0
  1080  00024C  6B8F               	clrf	(_task_list+5)& (0+255),b
  1081  00024E  D041               	goto	l16603
  1082  000250                     l16555:
  1083                           
  1084                           ; BSR set to: 0
  1085  000250  5198               	movf	(_task_list+14)& (0+255),w,b
  1086  000252  E014               	bz	l16571
  1087                           
  1088                           ; BSR set to: 0
  1089  000254  5199               	movf	(_task_list+15)& (0+255),w,b
  1090  000256  E012               	bz	l16571
  1091                           
  1092                           ; BSR set to: 0
  1093  000258  9EF2               	bcf	intcon,7,c	;volatile
  1094  00025A  9CF2               	bcf	intcon,6,c	;volatile
  1095  00025C  6B99               	clrf	(_task_list+15)& (0+255),b
  1096  00025E  8EF2               	bsf	intcon,7,c	;volatile
  1097  000260  8CF2               	bsf	intcon,6,c	;volatile
  1098                           
  1099                           ; BSR set to: 0
  1100  000262  0E93               	movlw	low (_task_list+9)
  1101  000264  6E5F               	movwf	bat_task@task_,c
  1102  000266  EC25  F00B         	call	_bat_task	;wreg free
  1103  00026A  0100               	movlb	0	; () banked
  1104  00026C  519A               	movf	(_task_list+16)& (0+255),w,b
  1105  00026E  E031               	bz	l16603
  1106                           
  1107                           ; BSR set to: 0
  1108  000270  2B9B               	incf	(_task_list+17)& (0+255),f,b
  1109                           
  1110                           ; BSR set to: 0
  1111  000272  519A               	movf	(_task_list+16)& (0+255),w,b
  1112  000274  199B               	xorwf	(_task_list+17)& (0+255),w,b
  1113  000276  E12D               	bnz	l16603
  1114                           
  1115                           ; BSR set to: 0
  1116  000278  6B98               	clrf	(_task_list+14)& (0+255),b
  1117  00027A  D02B               	goto	l16603
  1118  00027C                     l16571:
  1119                           
  1120                           ; BSR set to: 0
  1121  00027C  51A1               	movf	(_task_list+23)& (0+255),w,b
  1122  00027E  E014               	bz	l16587
  1123                           
  1124                           ; BSR set to: 0
  1125  000280  51A2               	movf	(_task_list+24)& (0+255),w,b
  1126  000282  E012               	bz	l16587
  1127                           
  1128                           ; BSR set to: 0
  1129  000284  9EF2               	bcf	intcon,7,c	;volatile
  1130  000286  9CF2               	bcf	intcon,6,c	;volatile
  1131  000288  6BA2               	clrf	(_task_list+24)& (0+255),b
  1132  00028A  8EF2               	bsf	intcon,7,c	;volatile
  1133  00028C  8CF2               	bsf	intcon,6,c	;volatile
  1134                           
  1135                           ; BSR set to: 0
  1136  00028E  0E9C               	movlw	low (_task_list+18)
  1137  000290  6E4B               	movwf	key_task@task_,c
  1138  000292  EC08  F007         	call	_key_task	;wreg free
  1139  000296  0100               	movlb	0	; () banked
  1140  000298  51A3               	movf	(_task_list+25)& (0+255),w,b
  1141  00029A  E01B               	bz	l16603
  1142                           
  1143                           ; BSR set to: 0
  1144  00029C  2BA4               	incf	(_task_list+26)& (0+255),f,b
  1145                           
  1146                           ; BSR set to: 0
  1147  00029E  51A3               	movf	(_task_list+25)& (0+255),w,b
  1148  0002A0  19A4               	xorwf	(_task_list+26)& (0+255),w,b
  1149  0002A2  E117               	bnz	l16603
  1150                           
  1151                           ; BSR set to: 0
  1152  0002A4  6BA1               	clrf	(_task_list+23)& (0+255),b
  1153  0002A6  D015               	goto	l16603
  1154  0002A8                     l16587:
  1155                           
  1156                           ; BSR set to: 0
  1157  0002A8  51AA               	movf	(_task_list+32)& (0+255),w,b
  1158  0002AA  E013               	bz	l16603
  1159                           
  1160                           ; BSR set to: 0
  1161  0002AC  51AB               	movf	(_task_list+33)& (0+255),w,b
  1162  0002AE  E011               	bz	l16603
  1163                           
  1164                           ; BSR set to: 0
  1165  0002B0  9EF2               	bcf	intcon,7,c	;volatile
  1166  0002B2  9CF2               	bcf	intcon,6,c	;volatile
  1167  0002B4  6BAB               	clrf	(_task_list+33)& (0+255),b
  1168  0002B6  8EF2               	bsf	intcon,7,c	;volatile
  1169  0002B8  8CF2               	bsf	intcon,6,c	;volatile
  1170                           
  1171                           ; BSR set to: 0
  1172  0002BA  0EA5               	movlw	low (_task_list+27)
  1173  0002BC  6E5F               	movwf	chrg_task@task_,c
  1174  0002BE  ECBC  F008         	call	_chrg_task	;wreg free
  1175  0002C2  0100               	movlb	0	; () banked
  1176  0002C4  51AC               	movf	(_task_list+34)& (0+255),w,b
  1177  0002C6  E005               	bz	l16603
  1178                           
  1179                           ; BSR set to: 0
  1180  0002C8  2BAD               	incf	(_task_list+35)& (0+255),f,b
  1181                           
  1182                           ; BSR set to: 0
  1183  0002CA  51AC               	movf	(_task_list+34)& (0+255),w,b
  1184  0002CC  19AD               	xorwf	(_task_list+35)& (0+255),w,b
  1185  0002CE  E101               	bnz	l16603
  1186                           
  1187                           ; BSR set to: 0
  1188  0002D0  6BAA               	clrf	(_task_list+32)& (0+255),b
  1189  0002D2                     l16603:
  1190                           
  1191                           ; BSR set to: 0
  1192  0002D2  51B3               	movf	(_task_list+41)& (0+255),w,b
  1193  0002D4  E014               	bz	l16619
  1194                           
  1195                           ; BSR set to: 0
  1196  0002D6  51B4               	movf	(_task_list+42)& (0+255),w,b
  1197  0002D8  E012               	bz	l16619
  1198                           
  1199                           ; BSR set to: 0
  1200  0002DA  9EF2               	bcf	intcon,7,c	;volatile
  1201  0002DC  9CF2               	bcf	intcon,6,c	;volatile
  1202  0002DE  6BB4               	clrf	(_task_list+42)& (0+255),b
  1203  0002E0  8EF2               	bsf	intcon,7,c	;volatile
  1204  0002E2  8CF2               	bsf	intcon,6,c	;volatile
  1205                           
  1206                           ; BSR set to: 0
  1207  0002E4  0EAE               	movlw	low (_task_list+36)
  1208  0002E6  6E5D               	movwf	cb_task@task_,c
  1209  0002E8  EC03  F00A         	call	_cb_task	;wreg free
  1210  0002EC  0100               	movlb	0	; () banked
  1211  0002EE  51B5               	movf	(_task_list+43)& (0+255),w,b
  1212  0002F0  E031               	bz	l16651
  1213                           
  1214                           ; BSR set to: 0
  1215  0002F2  2BB6               	incf	(_task_list+44)& (0+255),f,b
  1216                           
  1217                           ; BSR set to: 0
  1218  0002F4  51B5               	movf	(_task_list+43)& (0+255),w,b
  1219  0002F6  19B6               	xorwf	(_task_list+44)& (0+255),w,b
  1220  0002F8  E12D               	bnz	l16651
  1221                           
  1222                           ; BSR set to: 0
  1223  0002FA  6BB3               	clrf	(_task_list+41)& (0+255),b
  1224  0002FC  D02B               	goto	l16651
  1225  0002FE                     l16619:
  1226                           
  1227                           ; BSR set to: 0
  1228  0002FE  51BC               	movf	(_task_list+50)& (0+255),w,b
  1229  000300  E014               	bz	l16635
  1230                           
  1231                           ; BSR set to: 0
  1232  000302  51BD               	movf	(_task_list+51)& (0+255),w,b
  1233  000304  E012               	bz	l16635
  1234                           
  1235                           ; BSR set to: 0
  1236  000306  9EF2               	bcf	intcon,7,c	;volatile
  1237  000308  9CF2               	bcf	intcon,6,c	;volatile
  1238  00030A  6BBD               	clrf	(_task_list+51)& (0+255),b
  1239  00030C  8EF2               	bsf	intcon,7,c	;volatile
  1240  00030E  8CF2               	bsf	intcon,6,c	;volatile
  1241                           
  1242                           ; BSR set to: 0
  1243  000310  0EB7               	movlw	low (_task_list+45)
  1244  000312  6E3E               	movwf	sleep_task@task_,c
  1245  000314  EC52  F00C         	call	_sleep_task	;wreg free
  1246  000318  0100               	movlb	0	; () banked
  1247  00031A  51BE               	movf	(_task_list+52)& (0+255),w,b
  1248  00031C  E01B               	bz	l16651
  1249                           
  1250                           ; BSR set to: 0
  1251  00031E  2BBF               	incf	(_task_list+53)& (0+255),f,b
  1252                           
  1253                           ; BSR set to: 0
  1254  000320  51BE               	movf	(_task_list+52)& (0+255),w,b
  1255  000322  19BF               	xorwf	(_task_list+53)& (0+255),w,b
  1256  000324  E117               	bnz	l16651
  1257                           
  1258                           ; BSR set to: 0
  1259  000326  6BBC               	clrf	(_task_list+50)& (0+255),b
  1260  000328  D015               	goto	l16651
  1261  00032A                     l16635:
  1262                           
  1263                           ; BSR set to: 0
  1264  00032A  51C5               	movf	(_task_list+59)& (0+255),w,b
  1265  00032C  E013               	bz	l16651
  1266                           
  1267                           ; BSR set to: 0
  1268  00032E  51C6               	movf	(_task_list+60)& (0+255),w,b
  1269  000330  E011               	bz	l16651
  1270                           
  1271                           ; BSR set to: 0
  1272  000332  9EF2               	bcf	intcon,7,c	;volatile
  1273  000334  9CF2               	bcf	intcon,6,c	;volatile
  1274  000336  6BC6               	clrf	(_task_list+60)& (0+255),b
  1275  000338  8EF2               	bsf	intcon,7,c	;volatile
  1276  00033A  8CF2               	bsf	intcon,6,c	;volatile
  1277                           
  1278                           ; BSR set to: 0
  1279  00033C  0EC0               	movlw	low (_task_list+54)
  1280  00033E  6E65               	movwf	find_task@task_,c
  1281  000340  EC3B  F009         	call	_find_task	;wreg free
  1282  000344  0100               	movlb	0	; () banked
  1283  000346  51C7               	movf	(_task_list+61)& (0+255),w,b
  1284  000348  E005               	bz	l16651
  1285                           
  1286                           ; BSR set to: 0
  1287  00034A  2BC8               	incf	(_task_list+62)& (0+255),f,b
  1288                           
  1289                           ; BSR set to: 0
  1290  00034C  51C7               	movf	(_task_list+61)& (0+255),w,b
  1291  00034E  19C8               	xorwf	(_task_list+62)& (0+255),w,b
  1292  000350  E101               	bnz	l16651
  1293                           
  1294                           ; BSR set to: 0
  1295  000352  6BC5               	clrf	(_task_list+59)& (0+255),b
  1296  000354                     l16651:
  1297                           
  1298                           ; BSR set to: 0
  1299                           ;main.c: 269: if(pwm_flag)
  1300  000354  502E               	movf	_pwm_flag,w,c
  1301  000356  E019               	bz	l16681
  1302                           
  1303                           ; BSR set to: 0
  1304                           ;main.c: 270: {
  1305                           ;main.c: 271: pwm_flag=0;
  1306  000358  6A2E               	clrf	_pwm_flag,c
  1307                           
  1308                           ; BSR set to: 0
  1309                           ;main.c: 272: if(pwm.duty) { if(pwm.duty<100) { PR3=pwm.duty_t; TMR3=0; T3CON0=0x9b;TMR3
      +                          IF=0;TMR3IE=1;PEIE=1;GIE=1;TMR3ON=1; PA0=0; CMP0IF=0;CMP0IE=1; } else { PA0=0; CMP0IF=0;
      +                          CMP0IE=1; } adc_flag=1; } else { PA0=1; CMP0IE=0;CMP0IF=0; };
  1310  00035A  51D2               	movf	_pwm& (0+255),w,b
  1311  00035C  E013               	bz	l5182
  1312                           
  1313                           ; BSR set to: 0
  1314  00035E  0E64               	movlw	100
  1315  000360  61D2               	cpfslt	_pwm& (0+255),b
  1316  000362  D00A               	goto	l5183
  1317                           
  1318                           ; BSR set to: 0
  1319  000364  C0D3  FFB9         	movff	_pwm+1,4025	;volatile
  1320  000368  6ABA               	clrf	4026,c	;volatile
  1321                           
  1322                           ; BSR set to: 0
  1323  00036A  0E9B               	movlw	155
  1324  00036C  6EB8               	movwf	4024,c	;volatile
  1325                           
  1326                           ; BSR set to: 0
  1327  00036E  9AAA               	bcf	4010,5,c	;volatile
  1328                           
  1329                           ; BSR set to: 0
  1330  000370  8AA9               	bsf	4009,5,c	;volatile
  1331                           
  1332                           ; BSR set to: 0
  1333  000372  8CF2               	bsf	intcon,6,c	;volatile
  1334                           
  1335                           ; BSR set to: 0
  1336  000374  8EF2               	bsf	intcon,7,c	;volatile
  1337                           
  1338                           ; BSR set to: 0
  1339  000376  84B8               	bsf	4024,2,c	;volatile
  1340  000378                     l5183:
  1341                           
  1342                           ; BSR set to: 0
  1343  000378  9080               	bcf	3968,0,c	;volatile
  1344  00037A  96AA               	bcf	4010,3,c	;volatile
  1345  00037C  86A9               	bsf	4009,3,c	;volatile
  1346                           
  1347                           ; BSR set to: 0
  1348  00037E  0E01               	movlw	1
  1349  000380  6E2D               	movwf	_adc_flag,c
  1350  000382  D003               	goto	l16681
  1351  000384                     l5182:
  1352                           
  1353                           ; BSR set to: 0
  1354  000384  8080               	bsf	3968,0,c	;volatile
  1355  000386  96A9               	bcf	4009,3,c	;volatile
  1356  000388  96AA               	bcf	4010,3,c	;volatile
  1357  00038A                     l16681:
  1358                           
  1359                           ; BSR set to: 0
  1360                           ;main.c: 273: }
  1361                           ;main.c: 274: if(tim_ui.ok)
  1362  00038A  5024               	movf	_tim_ui+2,w,c	;volatile
  1363  00038C  E101 D211          	bz	l17065
  1364                           
  1365                           ; BSR set to: 0
  1366                           ;main.c: 275: {
  1367                           ;main.c: 276: TRISC0=1; TRISC1=1; TRISC2=1; TRISC3=1; TRISC4=1; TRISC5=1; TRISB5=1; TRIS
      +                          B4=1; TRISB3=1; TRISB2=1; PME=0; T2CON0=4; T2CON1=2;
  1368  000390  808B               	bsf	3979,0,c	;volatile
  1369  000392  828B               	bsf	3979,1,c	;volatile
  1370  000394  848B               	bsf	3979,2,c	;volatile
  1371  000396  868B               	bsf	3979,3,c	;volatile
  1372  000398  888B               	bsf	3979,4,c	;volatile
  1373  00039A  8A8B               	bsf	3979,5,c	;volatile
  1374  00039C  8A8A               	bsf	3978,5,c	;volatile
  1375  00039E  888A               	bsf	3978,4,c	;volatile
  1376  0003A0  868A               	bsf	3978,3,c	;volatile
  1377  0003A2  848A               	bsf	3978,2,c	;volatile
  1378  0003A4  6ABD               	clrf	4029,c	;volatile
  1379                           
  1380                           ; BSR set to: 0
  1381  0003A6  0E04               	movlw	4
  1382  0003A8  6EC1               	movwf	4033,c	;volatile
  1383  0003AA  0E02               	movlw	2
  1384  0003AC  6EC0               	movwf	4032,c	;volatile
  1385                           
  1386                           ;main.c: 277: if(adc_begin)
  1387  0003AE  502B               	movf	_adc_begin,w,c
  1388  0003B0  E101 D1D7          	bz	l17057
  1389                           
  1390                           ; BSR set to: 0
  1391                           ;main.c: 278: {
  1392                           ;main.c: 281: adc_begin=0;
  1393  0003B4  6A2B               	clrf	_adc_begin,c
  1394                           
  1395                           ; BSR set to: 0
  1396                           ;main.c: 286: ADCON1=0x60;
  1397                           
  1398                           ;main.c: 288: ADCON0=0x39; ADIF=0; ADIE=0; GO=1; while(GO==1);
  1399  0003B6  DA8E               	call	PL26	;call to abstracted procedure
  1400                           
  1401                           ; BSR set to: 0
  1402                           
  1403                           ; BSR set to: 0
  1404                           
  1405                           ; BSR set to: 0
  1406                           
  1407                           ;main.c: 293: ADIF=0;
  1408                           
  1409                           ;main.c: 294: pwm.bat_t=((ADRESH&0x0f)<<8)|ADRESL;
  1410  0003B8  DA77               	call	PL12	;call to abstracted procedure
  1411  0003BA  DAA2               	call	PL58	;call to abstracted procedure
  1412  0003BC  6FD7               	movwf	(_pwm+5)& (0+255),b
  1413  0003BE  5067               	movf	??_main+1,w,c
  1414  0003C0  6FD8               	movwf	(_pwm+6)& (0+255),b
  1415                           
  1416                           ; BSR set to: 0
  1417                           ;main.c: 299: ADCON1=0x60;
  1418                           
  1419                           ; BSR set to: 0
  1420                           ;main.c: 301: ADCON0=0x15;
  1421  0003C2  DA85               	call	PL24	;call to abstracted procedure
  1422                           
  1423                           ; BSR set to: 0
  1424                           ;main.c: 302: ADIF=0;
  1425                           
  1426                           ; BSR set to: 0
  1427                           ;main.c: 303: ADIE=0;
  1428                           
  1429                           ; BSR set to: 0
  1430                           ;main.c: 304: GO=1;
  1431                           
  1432                           ;main.c: 305: while(GO==1);
  1433                           
  1434                           ;main.c: 306: ADIF=0;
  1435                           
  1436                           ;main.c: 307: pwm.load_t=((ADRESH&0x0f)<<8)|ADRESL;
  1437  0003C4  DA71               	call	PL12	;call to abstracted procedure
  1438  0003C6  DA9C               	call	PL58	;call to abstracted procedure
  1439  0003C8  6FD9               	movwf	(_pwm+7)& (0+255),b
  1440  0003CA  5067               	movf	??_main+1,w,c
  1441  0003CC  6FDA               	movwf	(_pwm+8)& (0+255),b
  1442                           
  1443                           ; BSR set to: 0
  1444                           ;main.c: 308: pwm.adc_ok=1;
  1445  0003CE  0E01               	movlw	1
  1446  0003D0  6FD4               	movwf	(_pwm+2)& (0+255),b
  1447                           
  1448                           ; BSR set to: 0
  1449                           ;main.c: 309: if( pwm.load_t>=4094)
  1450  0003D2  0EFE               	movlw	254
  1451  0003D4  5DD9               	subwf	(_pwm+7)& (0+255),w,b
  1452  0003D6  0E0F               	movlw	15
  1453  0003D8  59DA               	subwfb	(_pwm+8)& (0+255),w,b
  1454  0003DA  E201 D1C2          	bnc	l17057
  1455                           
  1456                           ; BSR set to: 0
  1457                           ;main.c: 310: {
  1458                           ;main.c: 311: si_mic_flag.kl=1;
  1459  0003DE  0E01               	movlw	1
  1460  0003E0  6E1E               	movwf	_si_mic_flag+1,c
  1461                           
  1462                           ; BSR set to: 0
  1463                           ;main.c: 312: pwm.duty=0;
  1464  0003E2  6BD2               	clrf	_pwm& (0+255),b
  1465                           
  1466                           ; BSR set to: 0
  1467                           ;main.c: 313: CMP0IE=0;CMP0IF=0;
  1468  0003E4  96A9               	bcf	4009,3,c	;volatile
  1469                           
  1470                           ; BSR set to: 0
  1471  0003E6  96AA               	bcf	4010,3,c	;volatile
  1472  0003E8  D1BC               	goto	l17057
  1473  0003EA                     l16723:
  1474                           
  1475                           ; BSR set to: 0
  1476  0003EA  506F               	movf	_ui_ld+1,w,c
  1477  0003EC  E101 D1DB          	bz	l17059
  1478                           
  1479                           ; BSR set to: 0
  1480  0003F0  0E0A               	movlw	10
  1481  0003F2  606F               	cpfslt	_ui_ld+1,c
  1482  0003F4  D003               	goto	l16731
  1483                           
  1484                           ; BSR set to: 0
  1485  0003F6  80BD               	bsf	4029,0,c	;volatile
  1486                           
  1487                           ; BSR set to: 0
  1488  0003F8  DA98               	call	PL72	;call to abstracted procedure
  1489  0003FA  6EC6               	movwf	4038,c	;volatile
  1490  0003FC                     l16731:
  1491                           
  1492                           ; BSR set to: 0
  1493  0003FC  9082               	bcf	3970,0,c	;volatile
  1494                           
  1495                           ; BSR set to: 0
  1496  0003FE  908B               	bcf	3979,0,c	;volatile
  1497                           
  1498                           ; BSR set to: 0
  1499  000400  A201               	btfss	_nixie_z,1,c	;volatile
  1500  000402  D002               	goto	l5199
  1501                           
  1502                           ; BSR set to: 0
  1503  000404  8282               	bsf	3970,1,c	;volatile
  1504  000406  928B               	bcf	3979,1,c	;volatile
  1505  000408                     l5199:
  1506                           
  1507                           ; BSR set to: 0
  1508  000408  A401               	btfss	_nixie_z,2,c	;volatile
  1509  00040A  D002               	goto	l5200
  1510                           
  1511                           ; BSR set to: 0
  1512  00040C  8482               	bsf	3970,2,c	;volatile
  1513  00040E  948B               	bcf	3979,2,c	;volatile
  1514  000410                     l5200:
  1515                           
  1516                           ; BSR set to: 0
  1517  000410  A601               	btfss	_nixie_z,3,c	;volatile
  1518  000412  D002               	goto	l5201
  1519                           
  1520                           ; BSR set to: 0
  1521  000414  8682               	bsf	3970,3,c	;volatile
  1522  000416  968B               	bcf	3979,3,c	;volatile
  1523  000418                     l5201:
  1524                           
  1525                           ; BSR set to: 0
  1526  000418  A801               	btfss	_nixie_z,4,c	;volatile
  1527  00041A  D002               	goto	l5202
  1528                           
  1529                           ; BSR set to: 0
  1530  00041C  8882               	bsf	3970,4,c	;volatile
  1531  00041E  988B               	bcf	3979,4,c	;volatile
  1532  000420                     l5202:
  1533                           
  1534                           ; BSR set to: 0
  1535  000420  AA01               	btfss	_nixie_z,5,c	;volatile
  1536  000422  D002               	goto	l5203
  1537                           
  1538                           ; BSR set to: 0
  1539  000424  8A82               	bsf	3970,5,c	;volatile
  1540  000426  9A8B               	bcf	3979,5,c	;volatile
  1541  000428                     l5203:
  1542                           
  1543                           ; BSR set to: 0
  1544  000428  AC01               	btfss	_nixie_z,6,c	;volatile
  1545  00042A  D002               	goto	l5204
  1546                           
  1547                           ; BSR set to: 0
  1548  00042C  8A81               	bsf	3969,5,c	;volatile
  1549  00042E  9A8A               	bcf	3978,5,c	;volatile
  1550  000430                     l5204:
  1551                           
  1552                           ; BSR set to: 0
  1553  000430  AE01               	btfss	_nixie_z,7,c	;volatile
  1554  000432  D002               	goto	l5205
  1555                           
  1556                           ; BSR set to: 0
  1557  000434  8881               	bsf	3969,4,c	;volatile
  1558  000436  988A               	bcf	3978,4,c	;volatile
  1559  000438                     l5205:
  1560                           
  1561                           ; BSR set to: 0
  1562  000438  A002               	btfss	_nixie_z+1,0,c	;volatile
  1563  00043A  D002               	goto	l5206
  1564                           
  1565                           ; BSR set to: 0
  1566  00043C  8681               	bsf	3969,3,c	;volatile
  1567  00043E  968A               	bcf	3978,3,c	;volatile
  1568  000440                     l5206:
  1569                           
  1570                           ; BSR set to: 0
  1571  000440  A202               	btfss	_nixie_z+1,1,c	;volatile
  1572  000442  D1B1               	goto	l17059
  1573  000444                     l16753:
  1574                           
  1575                           ; BSR set to: 0
  1576  000444  8481               	bsf	3969,2,c	;volatile
  1577  000446  948A               	bcf	3978,2,c	;volatile
  1578  000448  D1AE               	goto	l17059
  1579  00044A                     l16755:
  1580                           
  1581                           ; BSR set to: 0
  1582  00044A  506F               	movf	_ui_ld+1,w,c
  1583  00044C  E101 D1AB          	bz	l17059
  1584                           
  1585                           ; BSR set to: 0
  1586  000450  0E0A               	movlw	10
  1587  000452  606F               	cpfslt	_ui_ld+1,c
  1588  000454  D005               	goto	l16765
  1589                           
  1590                           ; BSR set to: 0
  1591  000456  82BD               	bsf	4029,1,c	;volatile
  1592                           
  1593                           ; BSR set to: 0
  1594  000458  0EC0               	movlw	192
  1595  00045A  6EBE               	movwf	4030,c	;volatile
  1596                           
  1597                           ; BSR set to: 0
  1598  00045C  386F               	swapf	_ui_ld+1,w,c
  1599  00045E  DA79               	call	PL82	;call to abstracted procedure
  1600  000460                     l16765:
  1601                           
  1602                           ; BSR set to: 0
  1603  000460  9282               	bcf	3970,1,c	;volatile
  1604                           
  1605                           ; BSR set to: 0
  1606  000462  928B               	bcf	3979,1,c	;volatile
  1607                           
  1608                           ; BSR set to: 0
  1609  000464  A003               	btfss	_nixie_z+2,0,c	;volatile
  1610  000466  D002               	goto	l5212
  1611                           
  1612                           ; BSR set to: 0
  1613  000468  8082               	bsf	3970,0,c	;volatile
  1614  00046A  908B               	bcf	3979,0,c	;volatile
  1615  00046C                     l5212:
  1616                           
  1617                           ; BSR set to: 0
  1618  00046C  A403               	btfss	_nixie_z+2,2,c	;volatile
  1619  00046E  D002               	goto	l5213
  1620                           
  1621                           ; BSR set to: 0
  1622  000470  8482               	bsf	3970,2,c	;volatile
  1623  000472  948B               	bcf	3979,2,c	;volatile
  1624  000474                     l5213:
  1625                           
  1626                           ; BSR set to: 0
  1627  000474  A603               	btfss	_nixie_z+2,3,c	;volatile
  1628  000476  D002               	goto	l5214
  1629                           
  1630                           ; BSR set to: 0
  1631  000478  8682               	bsf	3970,3,c	;volatile
  1632  00047A  968B               	bcf	3979,3,c	;volatile
  1633  00047C                     l5214:
  1634                           
  1635                           ; BSR set to: 0
  1636  00047C  A803               	btfss	_nixie_z+2,4,c	;volatile
  1637  00047E  D002               	goto	l5215
  1638                           
  1639                           ; BSR set to: 0
  1640  000480  8882               	bsf	3970,4,c	;volatile
  1641  000482  988B               	bcf	3979,4,c	;volatile
  1642  000484                     l5215:
  1643                           
  1644                           ; BSR set to: 0
  1645  000484  AA03               	btfss	_nixie_z+2,5,c	;volatile
  1646  000486  D002               	goto	l5216
  1647                           
  1648                           ; BSR set to: 0
  1649  000488  8A82               	bsf	3970,5,c	;volatile
  1650  00048A  9A8B               	bcf	3979,5,c	;volatile
  1651  00048C                     l5216:
  1652                           
  1653                           ; BSR set to: 0
  1654  00048C  AC03               	btfss	_nixie_z+2,6,c	;volatile
  1655  00048E  D002               	goto	l5217
  1656                           
  1657                           ; BSR set to: 0
  1658  000490  8A81               	bsf	3969,5,c	;volatile
  1659  000492  9A8A               	bcf	3978,5,c	;volatile
  1660  000494                     l5217:
  1661                           
  1662                           ; BSR set to: 0
  1663  000494  AE03               	btfss	_nixie_z+2,7,c	;volatile
  1664  000496  D002               	goto	l5218
  1665                           
  1666                           ; BSR set to: 0
  1667  000498  8881               	bsf	3969,4,c	;volatile
  1668  00049A  988A               	bcf	3978,4,c	;volatile
  1669  00049C                     l5218:
  1670                           
  1671                           ; BSR set to: 0
  1672  00049C  A004               	btfss	_nixie_z+3,0,c	;volatile
  1673  00049E  D183               	goto	l17059
  1674  0004A0                     l16785:
  1675                           
  1676                           ; BSR set to: 0
  1677  0004A0  8681               	bsf	3969,3,c	;volatile
  1678  0004A2  968A               	bcf	3978,3,c	;volatile
  1679  0004A4  D180               	goto	l17059
  1680  0004A6                     l16787:
  1681                           
  1682                           ; BSR set to: 0
  1683  0004A6  5070               	movf	_ui_ld+2,w,c
  1684  0004A8  E101 D17D          	bz	l17059
  1685                           
  1686                           ; BSR set to: 0
  1687  0004AC  0E0A               	movlw	10
  1688  0004AE  6070               	cpfslt	_ui_ld+2,c
  1689  0004B0  D005               	goto	l16797
  1690                           
  1691                           ; BSR set to: 0
  1692  0004B2  82BD               	bsf	4029,1,c	;volatile
  1693                           
  1694                           ; BSR set to: 0
  1695  0004B4  0EC0               	movlw	192
  1696  0004B6  6EBE               	movwf	4030,c	;volatile
  1697                           
  1698                           ; BSR set to: 0
  1699  0004B8  3870               	swapf	_ui_ld+2,w,c
  1700  0004BA  DA4B               	call	PL82	;call to abstracted procedure
  1701  0004BC                     l16797:
  1702                           
  1703                           ; BSR set to: 0
  1704  0004BC  9282               	bcf	3970,1,c	;volatile
  1705                           
  1706                           ; BSR set to: 0
  1707  0004BE  928B               	bcf	3979,1,c	;volatile
  1708                           
  1709                           ; BSR set to: 0
  1710  0004C0  A204               	btfss	_nixie_z+3,1,c	;volatile
  1711  0004C2  D171               	goto	l17059
  1712  0004C4  D7BF               	goto	l16753
  1713  0004C6                     l16805:
  1714                           
  1715                           ; BSR set to: 0
  1716  0004C6  506E               	movf	_ui_ld,w,c
  1717  0004C8  E101 D16D          	bz	l17059
  1718                           
  1719                           ; BSR set to: 0
  1720  0004CC  0E0A               	movlw	10
  1721  0004CE  606E               	cpfslt	_ui_ld,c
  1722  0004D0  D003               	goto	l16813
  1723                           
  1724                           ; BSR set to: 0
  1725  0004D2  84BD               	bsf	4029,2,c	;volatile
  1726  0004D4  68BE               	setf	4030,c	;volatile
  1727                           
  1728                           ; BSR set to: 0
  1729  0004D6  DA06               	call	PL48	;call to abstracted procedure
  1730  0004D8                     l16813:
  1731                           
  1732                           ; BSR set to: 0
  1733  0004D8  9482               	bcf	3970,2,c	;volatile
  1734                           
  1735                           ; BSR set to: 0
  1736  0004DA  948B               	bcf	3979,2,c	;volatile
  1737                           
  1738                           ; BSR set to: 0
  1739  0004DC  A005               	btfss	_nixie_z+4,0,c	;volatile
  1740  0004DE  D002               	goto	l5227
  1741                           
  1742                           ; BSR set to: 0
  1743  0004E0  8082               	bsf	3970,0,c	;volatile
  1744  0004E2  908B               	bcf	3979,0,c	;volatile
  1745  0004E4                     l5227:
  1746                           
  1747                           ; BSR set to: 0
  1748  0004E4  A205               	btfss	_nixie_z+4,1,c	;volatile
  1749  0004E6  D002               	goto	l5228
  1750                           
  1751                           ; BSR set to: 0
  1752  0004E8  8282               	bsf	3970,1,c	;volatile
  1753  0004EA  928B               	bcf	3979,1,c	;volatile
  1754  0004EC                     l5228:
  1755                           
  1756                           ; BSR set to: 0
  1757  0004EC  A605               	btfss	_nixie_z+4,3,c	;volatile
  1758  0004EE  D002               	goto	l5229
  1759                           
  1760                           ; BSR set to: 0
  1761  0004F0  8682               	bsf	3970,3,c	;volatile
  1762  0004F2  968B               	bcf	3979,3,c	;volatile
  1763  0004F4                     l5229:
  1764                           
  1765                           ; BSR set to: 0
  1766  0004F4  A805               	btfss	_nixie_z+4,4,c	;volatile
  1767  0004F6  D002               	goto	l5230
  1768                           
  1769                           ; BSR set to: 0
  1770  0004F8  8882               	bsf	3970,4,c	;volatile
  1771  0004FA  988B               	bcf	3979,4,c	;volatile
  1772  0004FC                     l5230:
  1773                           
  1774                           ; BSR set to: 0
  1775  0004FC  AA05               	btfss	_nixie_z+4,5,c	;volatile
  1776  0004FE  D002               	goto	l5231
  1777                           
  1778                           ; BSR set to: 0
  1779  000500  8A82               	bsf	3970,5,c	;volatile
  1780  000502  9A8B               	bcf	3979,5,c	;volatile
  1781  000504                     l5231:
  1782                           
  1783                           ; BSR set to: 0
  1784  000504  AC05               	btfss	_nixie_z+4,6,c	;volatile
  1785  000506  D002               	goto	l5232
  1786                           
  1787                           ; BSR set to: 0
  1788  000508  8A81               	bsf	3969,5,c	;volatile
  1789  00050A  9A8A               	bcf	3978,5,c	;volatile
  1790  00050C                     l5232:
  1791                           
  1792                           ; BSR set to: 0
  1793  00050C  AE05               	btfss	_nixie_z+4,7,c	;volatile
  1794  00050E  D14B               	goto	l17059
  1795  000510                     l16831:
  1796                           
  1797                           ; BSR set to: 0
  1798  000510  8881               	bsf	3969,4,c	;volatile
  1799  000512  988A               	bcf	3978,4,c	;volatile
  1800  000514  D148               	goto	l17059
  1801  000516                     l16833:
  1802                           
  1803                           ; BSR set to: 0
  1804  000516  506F               	movf	_ui_ld+1,w,c
  1805  000518  E101 D145          	bz	l17059
  1806                           
  1807                           ; BSR set to: 0
  1808  00051C  0E0A               	movlw	10
  1809  00051E  606F               	cpfslt	_ui_ld+1,c
  1810  000520  D003               	goto	l16841
  1811                           
  1812                           ; BSR set to: 0
  1813  000522  84BD               	bsf	4029,2,c	;volatile
  1814                           
  1815                           ; BSR set to: 0
  1816  000524  DA02               	call	PL72	;call to abstracted procedure
  1817  000526  6EC4               	movwf	4036,c	;volatile
  1818  000528                     l16841:
  1819                           
  1820                           ; BSR set to: 0
  1821  000528  9482               	bcf	3970,2,c	;volatile
  1822                           
  1823                           ; BSR set to: 0
  1824  00052A  948B               	bcf	3979,2,c	;volatile
  1825                           
  1826                           ; BSR set to: 0
  1827  00052C  A006               	btfss	_nixie_z+5,0,c	;volatile
  1828  00052E  D13B               	goto	l17059
  1829  000530  D7B7               	goto	l16785
  1830  000532                     l16849:
  1831                           
  1832                           ; BSR set to: 0
  1833  000532  506E               	movf	_ui_ld,w,c
  1834  000534  E101 D137          	bz	l17059
  1835                           
  1836                           ; BSR set to: 0
  1837  000538  0E0A               	movlw	10
  1838  00053A  606E               	cpfslt	_ui_ld,c
  1839  00053C  D004               	goto	l16859
  1840                           
  1841                           ; BSR set to: 0
  1842  00053E  86BD               	bsf	4029,3,c	;volatile
  1843                           
  1844                           ; BSR set to: 0
  1845  000540  0EC0               	movlw	192
  1846  000542  6EBE               	movwf	4030,c	;volatile
  1847                           
  1848                           ; BSR set to: 0
  1849  000544  D9CF               	call	PL48	;call to abstracted procedure
  1850  000546                     l16859:
  1851                           
  1852                           ; BSR set to: 0
  1853  000546  9682               	bcf	3970,3,c	;volatile
  1854                           
  1855                           ; BSR set to: 0
  1856  000548  968B               	bcf	3979,3,c	;volatile
  1857                           
  1858                           ; BSR set to: 0
  1859  00054A  A007               	btfss	_nixie_z+6,0,c	;volatile
  1860  00054C  D002               	goto	l5241
  1861                           
  1862                           ; BSR set to: 0
  1863  00054E  8082               	bsf	3970,0,c	;volatile
  1864  000550  908B               	bcf	3979,0,c	;volatile
  1865  000552                     l5241:
  1866                           
  1867                           ; BSR set to: 0
  1868  000552  A207               	btfss	_nixie_z+6,1,c	;volatile
  1869  000554  D002               	goto	l5242
  1870                           
  1871                           ; BSR set to: 0
  1872  000556  8282               	bsf	3970,1,c	;volatile
  1873  000558  928B               	bcf	3979,1,c	;volatile
  1874  00055A                     l5242:
  1875                           
  1876                           ; BSR set to: 0
  1877  00055A  A407               	btfss	_nixie_z+6,2,c	;volatile
  1878  00055C  D002               	goto	l5243
  1879                           
  1880                           ; BSR set to: 0
  1881  00055E  8482               	bsf	3970,2,c	;volatile
  1882  000560  948B               	bcf	3979,2,c	;volatile
  1883  000562                     l5243:
  1884                           
  1885                           ; BSR set to: 0
  1886  000562  A807               	btfss	_nixie_z+6,4,c	;volatile
  1887  000564  D002               	goto	l5244
  1888                           
  1889                           ; BSR set to: 0
  1890  000566  8882               	bsf	3970,4,c	;volatile
  1891  000568  988B               	bcf	3979,4,c	;volatile
  1892  00056A                     l5244:
  1893                           
  1894                           ; BSR set to: 0
  1895  00056A  AA07               	btfss	_nixie_z+6,5,c	;volatile
  1896  00056C  D002               	goto	l5245
  1897                           
  1898                           ; BSR set to: 0
  1899  00056E  8A82               	bsf	3970,5,c	;volatile
  1900  000570  9A8B               	bcf	3979,5,c	;volatile
  1901  000572                     l5245:
  1902                           
  1903                           ; BSR set to: 0
  1904  000572  AC07               	btfss	_nixie_z+6,6,c	;volatile
  1905  000574  D002               	goto	l5246
  1906                           
  1907                           ; BSR set to: 0
  1908  000576  8A81               	bsf	3969,5,c	;volatile
  1909  000578  9A8A               	bcf	3978,5,c	;volatile
  1910  00057A                     l5246:
  1911                           
  1912                           ; BSR set to: 0
  1913  00057A  AE07               	btfss	_nixie_z+6,7,c	;volatile
  1914  00057C  D114               	goto	l17059
  1915  00057E  D7C8               	goto	l16831
  1916  000580                     l16879:
  1917                           
  1918                           ; BSR set to: 0
  1919  000580  506E               	movf	_ui_ld,w,c
  1920  000582  E101 D110          	bz	l17059
  1921                           
  1922                           ; BSR set to: 0
  1923  000586  0E0A               	movlw	10
  1924  000588  606E               	cpfslt	_ui_ld,c
  1925  00058A  D003               	goto	l16887
  1926                           
  1927                           ; BSR set to: 0
  1928  00058C  88BD               	bsf	4029,4,c	;volatile
  1929  00058E  68BE               	setf	4030,c	;volatile
  1930                           
  1931                           ; BSR set to: 0
  1932  000590  D9A4               	call	PL40	;call to abstracted procedure
  1933  000592                     l16887:
  1934                           
  1935                           ; BSR set to: 0
  1936  000592  9882               	bcf	3970,4,c	;volatile
  1937                           
  1938                           ; BSR set to: 0
  1939  000594  988B               	bcf	3979,4,c	;volatile
  1940                           
  1941                           ; BSR set to: 0
  1942  000596  A009               	btfss	_nixie_z+8,0,c	;volatile
  1943  000598  D002               	goto	l5251
  1944                           
  1945                           ; BSR set to: 0
  1946  00059A  8082               	bsf	3970,0,c	;volatile
  1947  00059C  908B               	bcf	3979,0,c	;volatile
  1948  00059E                     l5251:
  1949                           
  1950                           ; BSR set to: 0
  1951  00059E  A209               	btfss	_nixie_z+8,1,c	;volatile
  1952  0005A0  D002               	goto	l5252
  1953                           
  1954                           ; BSR set to: 0
  1955  0005A2  8282               	bsf	3970,1,c	;volatile
  1956  0005A4  928B               	bcf	3979,1,c	;volatile
  1957  0005A6                     l5252:
  1958                           
  1959                           ; BSR set to: 0
  1960  0005A6  A409               	btfss	_nixie_z+8,2,c	;volatile
  1961  0005A8  D002               	goto	l5253
  1962                           
  1963                           ; BSR set to: 0
  1964  0005AA  8482               	bsf	3970,2,c	;volatile
  1965  0005AC  948B               	bcf	3979,2,c	;volatile
  1966  0005AE                     l5253:
  1967                           
  1968                           ; BSR set to: 0
  1969  0005AE  A609               	btfss	_nixie_z+8,3,c	;volatile
  1970  0005B0  D002               	goto	l5254
  1971                           
  1972                           ; BSR set to: 0
  1973  0005B2  8682               	bsf	3970,3,c	;volatile
  1974  0005B4  968B               	bcf	3979,3,c	;volatile
  1975  0005B6                     l5254:
  1976                           
  1977                           ; BSR set to: 0
  1978  0005B6  AA09               	btfss	_nixie_z+8,5,c	;volatile
  1979  0005B8  D002               	goto	l5255
  1980                           
  1981                           ; BSR set to: 0
  1982  0005BA  8A82               	bsf	3970,5,c	;volatile
  1983  0005BC  9A8B               	bcf	3979,5,c	;volatile
  1984  0005BE                     l5255:
  1985                           
  1986                           ; BSR set to: 0
  1987  0005BE  AC09               	btfss	_nixie_z+8,6,c	;volatile
  1988  0005C0  D002               	goto	l5256
  1989                           
  1990                           ; BSR set to: 0
  1991  0005C2  8A81               	bsf	3969,5,c	;volatile
  1992  0005C4  9A8A               	bcf	3978,5,c	;volatile
  1993  0005C6                     l5256:
  1994                           
  1995                           ; BSR set to: 0
  1996  0005C6  AE09               	btfss	_nixie_z+8,7,c	;volatile
  1997  0005C8  D002               	goto	l5257
  1998                           
  1999                           ; BSR set to: 0
  2000  0005CA  8881               	bsf	3969,4,c	;volatile
  2001  0005CC  988A               	bcf	3978,4,c	;volatile
  2002  0005CE                     l5257:
  2003                           
  2004                           ; BSR set to: 0
  2005  0005CE  A00A               	btfss	_nixie_z+9,0,c	;volatile
  2006  0005D0  D002               	goto	l5258
  2007                           
  2008                           ; BSR set to: 0
  2009  0005D2  8681               	bsf	3969,3,c	;volatile
  2010  0005D4  968A               	bcf	3978,3,c	;volatile
  2011  0005D6                     l5258:
  2012                           
  2013                           ; BSR set to: 0
  2014  0005D6  A20A               	btfss	_nixie_z+9,1,c	;volatile
  2015  0005D8  D0E6               	goto	l17059
  2016  0005DA  D734               	goto	l16753
  2017  0005DC                     l16911:
  2018                           
  2019                           ; BSR set to: 0
  2020  0005DC  506E               	movf	_ui_ld,w,c
  2021  0005DE  E101 D0E2          	bz	l17059
  2022                           
  2023                           ; BSR set to: 0
  2024  0005E2  0E0A               	movlw	10
  2025  0005E4  606E               	cpfslt	_ui_ld,c
  2026  0005E6  D004               	goto	l16921
  2027                           
  2028                           ; BSR set to: 0
  2029  0005E8  8ABD               	bsf	4029,5,c	;volatile
  2030                           
  2031                           ; BSR set to: 0
  2032  0005EA  0EC0               	movlw	192
  2033  0005EC  6EBE               	movwf	4030,c	;volatile
  2034                           
  2035                           ; BSR set to: 0
  2036  0005EE  D975               	call	PL40	;call to abstracted procedure
  2037  0005F0                     l16921:
  2038                           
  2039                           ; BSR set to: 0
  2040  0005F0  9A82               	bcf	3970,5,c	;volatile
  2041                           
  2042                           ; BSR set to: 0
  2043  0005F2  9A8B               	bcf	3979,5,c	;volatile
  2044                           
  2045                           ; BSR set to: 0
  2046  0005F4  A00B               	btfss	_nixie_z+10,0,c	;volatile
  2047  0005F6  D002               	goto	l5263
  2048                           
  2049                           ; BSR set to: 0
  2050  0005F8  8082               	bsf	3970,0,c	;volatile
  2051  0005FA  908B               	bcf	3979,0,c	;volatile
  2052  0005FC                     l5263:
  2053                           
  2054                           ; BSR set to: 0
  2055  0005FC  A20B               	btfss	_nixie_z+10,1,c	;volatile
  2056  0005FE  D002               	goto	l5264
  2057                           
  2058                           ; BSR set to: 0
  2059  000600  8282               	bsf	3970,1,c	;volatile
  2060  000602  928B               	bcf	3979,1,c	;volatile
  2061  000604                     l5264:
  2062                           
  2063                           ; BSR set to: 0
  2064  000604  A40B               	btfss	_nixie_z+10,2,c	;volatile
  2065  000606  D002               	goto	l5265
  2066                           
  2067                           ; BSR set to: 0
  2068  000608  8482               	bsf	3970,2,c	;volatile
  2069  00060A  948B               	bcf	3979,2,c	;volatile
  2070  00060C                     l5265:
  2071                           
  2072                           ; BSR set to: 0
  2073  00060C  A60B               	btfss	_nixie_z+10,3,c	;volatile
  2074  00060E  D002               	goto	l5266
  2075                           
  2076                           ; BSR set to: 0
  2077  000610  8682               	bsf	3970,3,c	;volatile
  2078  000612  968B               	bcf	3979,3,c	;volatile
  2079  000614                     l5266:
  2080                           
  2081                           ; BSR set to: 0
  2082  000614  A80B               	btfss	_nixie_z+10,4,c	;volatile
  2083  000616  D002               	goto	l5267
  2084                           
  2085                           ; BSR set to: 0
  2086  000618  8882               	bsf	3970,4,c	;volatile
  2087  00061A  988B               	bcf	3979,4,c	;volatile
  2088  00061C                     l5267:
  2089                           
  2090                           ; BSR set to: 0
  2091  00061C  AC0B               	btfss	_nixie_z+10,6,c	;volatile
  2092  00061E  D002               	goto	l5268
  2093                           
  2094                           ; BSR set to: 0
  2095  000620  8A81               	bsf	3969,5,c	;volatile
  2096  000622  9A8A               	bcf	3978,5,c	;volatile
  2097  000624                     l5268:
  2098                           
  2099                           ; BSR set to: 0
  2100  000624  AE0B               	btfss	_nixie_z+10,7,c	;volatile
  2101  000626  D002               	goto	l5269
  2102                           
  2103                           ; BSR set to: 0
  2104  000628  8881               	bsf	3969,4,c	;volatile
  2105  00062A  988A               	bcf	3978,4,c	;volatile
  2106  00062C                     l5269:
  2107                           
  2108                           ; BSR set to: 0
  2109  00062C  A00C               	btfss	_nixie_z+11,0,c	;volatile
  2110  00062E  D002               	goto	l5270
  2111                           
  2112                           ; BSR set to: 0
  2113  000630  8681               	bsf	3969,3,c	;volatile
  2114  000632  968A               	bcf	3978,3,c	;volatile
  2115  000634                     l5270:
  2116                           
  2117                           ; BSR set to: 0
  2118  000634  A20C               	btfss	_nixie_z+11,1,c	;volatile
  2119  000636  D0B7               	goto	l17059
  2120  000638  D705               	goto	l16753
  2121  00063A                     l16945:
  2122                           
  2123                           ; BSR set to: 0
  2124  00063A  506E               	movf	_ui_ld,w,c
  2125  00063C  E101 D0B3          	bz	l17059
  2126                           
  2127                           ; BSR set to: 0
  2128  000640  0E0A               	movlw	10
  2129  000642  606E               	cpfslt	_ui_ld,c
  2130  000644  D003               	goto	l16953
  2131                           
  2132                           ; BSR set to: 0
  2133  000646  86BD               	bsf	4029,3,c	;volatile
  2134  000648  6ABE               	clrf	4030,c	;volatile
  2135                           
  2136                           ; BSR set to: 0
  2137  00064A  D94C               	call	PL48	;call to abstracted procedure
  2138  00064C                     l16953:
  2139                           
  2140                           ; BSR set to: 0
  2141  00064C  9A81               	bcf	3969,5,c	;volatile
  2142                           
  2143                           ; BSR set to: 0
  2144  00064E  9A8A               	bcf	3978,5,c	;volatile
  2145                           
  2146                           ; BSR set to: 0
  2147  000650  A00D               	btfss	_nixie_z+12,0,c	;volatile
  2148  000652  D002               	goto	l5275
  2149                           
  2150                           ; BSR set to: 0
  2151  000654  8082               	bsf	3970,0,c	;volatile
  2152  000656  908B               	bcf	3979,0,c	;volatile
  2153  000658                     l5275:
  2154                           
  2155                           ; BSR set to: 0
  2156  000658  A20D               	btfss	_nixie_z+12,1,c	;volatile
  2157  00065A  D002               	goto	l5276
  2158                           
  2159                           ; BSR set to: 0
  2160  00065C  8282               	bsf	3970,1,c	;volatile
  2161  00065E  928B               	bcf	3979,1,c	;volatile
  2162  000660                     l5276:
  2163                           
  2164                           ; BSR set to: 0
  2165  000660  A40D               	btfss	_nixie_z+12,2,c	;volatile
  2166  000662  D002               	goto	l5277
  2167                           
  2168                           ; BSR set to: 0
  2169  000664  8482               	bsf	3970,2,c	;volatile
  2170  000666  948B               	bcf	3979,2,c	;volatile
  2171  000668                     l5277:
  2172                           
  2173                           ; BSR set to: 0
  2174  000668  A60D               	btfss	_nixie_z+12,3,c	;volatile
  2175  00066A  D002               	goto	l5278
  2176                           
  2177                           ; BSR set to: 0
  2178  00066C  8682               	bsf	3970,3,c	;volatile
  2179  00066E  968B               	bcf	3979,3,c	;volatile
  2180  000670                     l5278:
  2181                           
  2182                           ; BSR set to: 0
  2183  000670  A80D               	btfss	_nixie_z+12,4,c	;volatile
  2184  000672  D002               	goto	l5279
  2185                           
  2186                           ; BSR set to: 0
  2187  000674  8882               	bsf	3970,4,c	;volatile
  2188  000676  988B               	bcf	3979,4,c	;volatile
  2189  000678                     l5279:
  2190                           
  2191                           ; BSR set to: 0
  2192  000678  AA0D               	btfss	_nixie_z+12,5,c	;volatile
  2193  00067A  D002               	goto	l5280
  2194                           
  2195                           ; BSR set to: 0
  2196  00067C  8A82               	bsf	3970,5,c	;volatile
  2197  00067E  9A8B               	bcf	3979,5,c	;volatile
  2198  000680                     l5280:
  2199                           
  2200                           ; BSR set to: 0
  2201  000680  AE0D               	btfss	_nixie_z+12,7,c	;volatile
  2202  000682  D002               	goto	l5281
  2203                           
  2204                           ; BSR set to: 0
  2205  000684  8881               	bsf	3969,4,c	;volatile
  2206  000686  988A               	bcf	3978,4,c	;volatile
  2207  000688                     l5281:
  2208                           
  2209                           ; BSR set to: 0
  2210  000688  A00E               	btfss	_nixie_z+13,0,c	;volatile
  2211  00068A  D002               	goto	l5282
  2212                           
  2213                           ; BSR set to: 0
  2214  00068C  8681               	bsf	3969,3,c	;volatile
  2215  00068E  968A               	bcf	3978,3,c	;volatile
  2216  000690                     l5282:
  2217                           
  2218                           ; BSR set to: 0
  2219  000690  A20E               	btfss	_nixie_z+13,1,c	;volatile
  2220  000692  D089               	goto	l17059
  2221  000694  D6D7               	goto	l16753
  2222  000696                     l16977:
  2223                           
  2224                           ; BSR set to: 0
  2225  000696  506E               	movf	_ui_ld,w,c
  2226  000698  E101 D085          	bz	l17059
  2227                           
  2228                           ; BSR set to: 0
  2229  00069C  0E0A               	movlw	10
  2230  00069E  606E               	cpfslt	_ui_ld,c
  2231  0006A0  D004               	goto	l16987
  2232                           
  2233                           ; BSR set to: 0
  2234  0006A2  88BD               	bsf	4029,4,c	;volatile
  2235                           
  2236                           ; BSR set to: 0
  2237  0006A4  0E3F               	movlw	63
  2238  0006A6  6EBE               	movwf	4030,c	;volatile
  2239                           
  2240                           ; BSR set to: 0
  2241  0006A8  D918               	call	PL40	;call to abstracted procedure
  2242  0006AA                     l16987:
  2243                           
  2244                           ; BSR set to: 0
  2245  0006AA  9881               	bcf	3969,4,c	;volatile
  2246                           
  2247                           ; BSR set to: 0
  2248  0006AC  988A               	bcf	3978,4,c	;volatile
  2249                           
  2250                           ; BSR set to: 0
  2251  0006AE  A00F               	btfss	_nixie_z+14,0,c	;volatile
  2252  0006B0  D002               	goto	l5287
  2253                           
  2254                           ; BSR set to: 0
  2255  0006B2  8082               	bsf	3970,0,c	;volatile
  2256  0006B4  908B               	bcf	3979,0,c	;volatile
  2257  0006B6                     l5287:
  2258                           
  2259                           ; BSR set to: 0
  2260  0006B6  A20F               	btfss	_nixie_z+14,1,c	;volatile
  2261  0006B8  D002               	goto	l5288
  2262                           
  2263                           ; BSR set to: 0
  2264  0006BA  8282               	bsf	3970,1,c	;volatile
  2265  0006BC  928B               	bcf	3979,1,c	;volatile
  2266  0006BE                     l5288:
  2267                           
  2268                           ; BSR set to: 0
  2269  0006BE  A40F               	btfss	_nixie_z+14,2,c	;volatile
  2270  0006C0  D002               	goto	l5289
  2271                           
  2272                           ; BSR set to: 0
  2273  0006C2  8482               	bsf	3970,2,c	;volatile
  2274  0006C4  948B               	bcf	3979,2,c	;volatile
  2275  0006C6                     l5289:
  2276                           
  2277                           ; BSR set to: 0
  2278  0006C6  A60F               	btfss	_nixie_z+14,3,c	;volatile
  2279  0006C8  D002               	goto	l5290
  2280                           
  2281                           ; BSR set to: 0
  2282  0006CA  8682               	bsf	3970,3,c	;volatile
  2283  0006CC  968B               	bcf	3979,3,c	;volatile
  2284  0006CE                     l5290:
  2285                           
  2286                           ; BSR set to: 0
  2287  0006CE  A80F               	btfss	_nixie_z+14,4,c	;volatile
  2288  0006D0  D002               	goto	l5291
  2289                           
  2290                           ; BSR set to: 0
  2291  0006D2  8882               	bsf	3970,4,c	;volatile
  2292  0006D4  988B               	bcf	3979,4,c	;volatile
  2293  0006D6                     l5291:
  2294                           
  2295                           ; BSR set to: 0
  2296  0006D6  AA0F               	btfss	_nixie_z+14,5,c	;volatile
  2297  0006D8  D002               	goto	l5292
  2298                           
  2299                           ; BSR set to: 0
  2300  0006DA  8A82               	bsf	3970,5,c	;volatile
  2301  0006DC  9A8B               	bcf	3979,5,c	;volatile
  2302  0006DE                     l5292:
  2303                           
  2304                           ; BSR set to: 0
  2305  0006DE  AC0F               	btfss	_nixie_z+14,6,c	;volatile
  2306  0006E0  D002               	goto	l5293
  2307                           
  2308                           ; BSR set to: 0
  2309  0006E2  8A81               	bsf	3969,5,c	;volatile
  2310  0006E4  9A8A               	bcf	3978,5,c	;volatile
  2311  0006E6                     l5293:
  2312                           
  2313                           ; BSR set to: 0
  2314  0006E6  A010               	btfss	_nixie_z+15,0,c	;volatile
  2315  0006E8  D002               	goto	l5294
  2316                           
  2317                           ; BSR set to: 0
  2318  0006EA  8681               	bsf	3969,3,c	;volatile
  2319  0006EC  968A               	bcf	3978,3,c	;volatile
  2320  0006EE                     l5294:
  2321                           
  2322                           ; BSR set to: 0
  2323  0006EE  A210               	btfss	_nixie_z+15,1,c	;volatile
  2324  0006F0  D05A               	goto	l17059
  2325  0006F2  D6A8               	goto	l16753
  2326  0006F4                     l17011:
  2327                           
  2328                           ; BSR set to: 0
  2329  0006F4  506F               	movf	_ui_ld+1,w,c
  2330  0006F6  E057               	bz	l17059
  2331                           
  2332                           ; BSR set to: 0
  2333  0006F8  0E0A               	movlw	10
  2334  0006FA  606F               	cpfslt	_ui_ld+1,c
  2335  0006FC  D006               	goto	l17019
  2336                           
  2337                           ; BSR set to: 0
  2338  0006FE  8ABD               	bsf	4029,5,c	;volatile
  2339  000700  6ABE               	clrf	4030,c	;volatile
  2340                           
  2341                           ; BSR set to: 0
  2342  000702  386F               	swapf	_ui_ld+1,w,c
  2343  000704  42E8               	rrncf	wreg,f,c
  2344  000706  0BF8               	andlw	248
  2345  000708  6EC2               	movwf	4034,c	;volatile
  2346  00070A                     l17019:
  2347                           
  2348                           ; BSR set to: 0
  2349  00070A  9681               	bcf	3969,3,c	;volatile
  2350                           
  2351                           ; BSR set to: 0
  2352  00070C  968A               	bcf	3978,3,c	;volatile
  2353                           
  2354                           ; BSR set to: 0
  2355  00070E  A011               	btfss	_nixie_z+16,0,c	;volatile
  2356  000710  D002               	goto	l5299
  2357                           
  2358                           ; BSR set to: 0
  2359  000712  8082               	bsf	3970,0,c	;volatile
  2360  000714  908B               	bcf	3979,0,c	;volatile
  2361  000716                     l5299:
  2362                           
  2363                           ; BSR set to: 0
  2364  000716  A211               	btfss	_nixie_z+16,1,c	;volatile
  2365  000718  D002               	goto	l5300
  2366                           
  2367                           ; BSR set to: 0
  2368  00071A  8282               	bsf	3970,1,c	;volatile
  2369  00071C  928B               	bcf	3979,1,c	;volatile
  2370  00071E                     l5300:
  2371                           
  2372                           ; BSR set to: 0
  2373  00071E  A411               	btfss	_nixie_z+16,2,c	;volatile
  2374  000720  D002               	goto	l5301
  2375                           
  2376                           ; BSR set to: 0
  2377  000722  8482               	bsf	3970,2,c	;volatile
  2378  000724  948B               	bcf	3979,2,c	;volatile
  2379  000726                     l5301:
  2380                           
  2381                           ; BSR set to: 0
  2382  000726  A611               	btfss	_nixie_z+16,3,c	;volatile
  2383  000728  D002               	goto	l5302
  2384                           
  2385                           ; BSR set to: 0
  2386  00072A  8682               	bsf	3970,3,c	;volatile
  2387  00072C  968B               	bcf	3979,3,c	;volatile
  2388  00072E                     l5302:
  2389                           
  2390                           ; BSR set to: 0
  2391  00072E  A811               	btfss	_nixie_z+16,4,c	;volatile
  2392  000730  D03A               	goto	l17059
  2393                           
  2394                           ; BSR set to: 0
  2395  000732  8882               	bsf	3970,4,c	;volatile
  2396  000734  988B               	bcf	3979,4,c	;volatile
  2397  000736  D037               	goto	l17059
  2398  000738                     l17035:
  2399                           
  2400                           ; BSR set to: 0
  2401  000738  506E               	movf	_ui_ld,w,c
  2402  00073A  E035               	bz	l17059
  2403                           
  2404                           ; BSR set to: 0
  2405  00073C  0E0A               	movlw	10
  2406  00073E  606E               	cpfslt	_ui_ld,c
  2407  000740  D003               	goto	l17043
  2408                           
  2409                           ; BSR set to: 0
  2410  000742  8ABD               	bsf	4029,5,c	;volatile
  2411  000744  6ABE               	clrf	4030,c	;volatile
  2412                           
  2413                           ; BSR set to: 0
  2414  000746  D8C9               	call	PL40	;call to abstracted procedure
  2415  000748                     l17043:
  2416                           
  2417                           ; BSR set to: 0
  2418  000748  9681               	bcf	3969,3,c	;volatile
  2419                           
  2420                           ; BSR set to: 0
  2421  00074A  968A               	bcf	3978,3,c	;volatile
  2422                           
  2423                           ; BSR set to: 0
  2424  00074C  AA11               	btfss	_nixie_z+16,5,c	;volatile
  2425  00074E  D002               	goto	l5307
  2426                           
  2427                           ; BSR set to: 0
  2428  000750  8A82               	bsf	3970,5,c	;volatile
  2429  000752  9A8B               	bcf	3979,5,c	;volatile
  2430  000754                     l5307:
  2431                           
  2432                           ; BSR set to: 0
  2433  000754  AC11               	btfss	_nixie_z+16,6,c	;volatile
  2434  000756  D002               	goto	l5308
  2435                           
  2436                           ; BSR set to: 0
  2437  000758  8A81               	bsf	3969,5,c	;volatile
  2438  00075A  9A8A               	bcf	3978,5,c	;volatile
  2439  00075C                     l5308:
  2440                           
  2441                           ; BSR set to: 0
  2442  00075C  AE11               	btfss	_nixie_z+16,7,c	;volatile
  2443  00075E  D023               	goto	l17059
  2444  000760  D6D7               	goto	l16831
  2445  000762                     l17057:
  2446                           
  2447                           ; BSR set to: 0
  2448  000762  5022               	movf	_tim_ui,w,c	;volatile
  2449                           
  2450                           ; Switch size 1, requested type "space"
  2451                           ; Number of cases is 12, Range of values is 0 to 11
  2452                           ; switch strategies available:
  2453                           ; Name         Instructions Cycles
  2454                           ; simple_byte           37    19 (average)
  2455                           ;	Chosen strategy is simple_byte
  2456  000764  E101 D641          	bz	l16723
  2457  000768  0A01               	xorlw	1	; case 1
  2458  00076A  E101 D66E          	bz	l16755
  2459  00076E  0A03               	xorlw	3	; case 2
  2460  000770  E101 D699          	bz	l16787
  2461  000774  0A01               	xorlw	1	; case 3
  2462  000776  E101 D6A6          	bz	l16805
  2463  00077A  0A07               	xorlw	7	; case 4
  2464  00077C  E101 D6CB          	bz	l16833
  2465  000780  0A01               	xorlw	1	; case 5
  2466  000782  E101 D6D6          	bz	l16849
  2467  000786  0A03               	xorlw	3	; case 6
  2468  000788  E101 D6FA          	bz	l16879
  2469  00078C  0A01               	xorlw	1	; case 7
  2470  00078E  E101 D725          	bz	l16911
  2471  000792  0A0F               	xorlw	15	; case 8
  2472  000794  E101 D751          	bz	l16945
  2473  000798  0A01               	xorlw	1	; case 9
  2474  00079A  E101 D77C          	bz	l16977
  2475  00079E  0A03               	xorlw	3	; case 10
  2476  0007A0  E0A9               	bz	l17011
  2477  0007A2  0A01               	xorlw	1	; case 11
  2478  0007A4  E0C9               	bz	l17035
  2479  0007A6                     l17059:
  2480                           
  2481                           ; BSR set to: 0
  2482  0007A6  2A22               	incf	_tim_ui,f,c	;volatile
  2483                           
  2484                           ; BSR set to: 0
  2485  0007A8  0E0B               	movlw	11
  2486  0007AA  6422               	cpfsgt	_tim_ui,c	;volatile
  2487  0007AC  D001               	goto	l5311
  2488                           
  2489                           ; BSR set to: 0
  2490  0007AE  6A22               	clrf	_tim_ui,c	;volatile
  2491  0007B0                     l5311:
  2492                           
  2493                           ; BSR set to: 0
  2494                           ;main.c: 324: tim_ui.ok=0;
  2495  0007B0  6A24               	clrf	_tim_ui+2,c	;volatile
  2496  0007B2                     l17065:
  2497                           
  2498                           ; BSR set to: 0
  2499                           ;main.c: 325: }
  2500                           ;main.c: 326: if(pwm.adc_ok)
  2501  0007B2  51D4               	movf	(_pwm+2)& (0+255),w,b
  2502  0007B4  E101 D536          	bz	l16539
  2503                           
  2504                           ; BSR set to: 0
  2505                           ;main.c: 327: {
  2506                           ;main.c: 328: pwm_cnt++;
  2507  0007B8  2A2A               	incf	_pwm_cnt,f,c
  2508                           
  2509                           ; BSR set to: 0
  2510                           ;main.c: 329: if(pwm_cnt==2)
  2511  0007BA  0E02               	movlw	2
  2512  0007BC  182A               	xorwf	_pwm_cnt,w,c
  2513  0007BE  E134               	bnz	l17091
  2514                           
  2515                           ; BSR set to: 0
  2516                           ;main.c: 330: {
  2517                           ;main.c: 331: if(pwm.load_t>2500)
  2518  0007C0  0EC5               	movlw	197
  2519  0007C2  5DD9               	subwf	(_pwm+7)& (0+255),w,b
  2520  0007C4  0E09               	movlw	9
  2521  0007C6  59DA               	subwfb	(_pwm+8)& (0+255),w,b
  2522  0007C8  E31F               	bnc	l17077
  2523                           
  2524                           ; BSR set to: 0
  2525                           ;main.c: 332: {
  2526                           ;main.c: 333: pwm_bat=120*(unsigned long)pwm.load_t/pwm.bat_t;
  2527  0007CA  C0D9  F03E         	movff	_pwm+7,___lmul@multiplier
  2528  0007CE  C0DA  F03F         	movff	_pwm+8,___lmul@multiplier+1
  2529  0007D2  6A40               	clrf	___lmul@multiplier+2,c
  2530  0007D4  6A41               	clrf	___lmul@multiplier+3,c
  2531  0007D6  0E78               	movlw	120
  2532  0007D8  6E42               	movwf	___lmul@multiplicand,c
  2533  0007DA  6A43               	clrf	___lmul@multiplicand+1,c
  2534  0007DC  6A44               	clrf	___lmul@multiplicand+2,c
  2535  0007DE  6A45               	clrf	___lmul@multiplicand+3,c
  2536  0007E0  EC42  F00D         	call	___lmul	;wreg free
  2537  0007E4  D86B               	call	PL22	;call to abstracted procedure
  2538  0007E6  C0D7  F04E         	movff	_pwm+5,___lldiv@divisor
  2539  0007EA  C0D8  F04F         	movff	_pwm+6,___lldiv@divisor+1
  2540  0007EE  6A50               	clrf	___lldiv@divisor+2,c
  2541  0007F0  6A51               	clrf	___lldiv@divisor+3,c
  2542  0007F2  ECDE  F00B         	call	___lldiv	;wreg free
  2543  0007F6  C04A  F074         	movff	?___lldiv,_pwm_bat
  2544  0007FA  C04B  F075         	movff	?___lldiv+1,_pwm_bat+1
  2545                           
  2546                           ;main.c: 335: pwm_bat-=13;
  2547  0007FE  0E0D               	movlw	13
  2548  000800  5E74               	subwf	_pwm_bat,f,c
  2549  000802  0E00               	movlw	0
  2550  000804  5A75               	subwfb	_pwm_bat+1,f,c
  2551                           
  2552                           ;main.c: 336: }
  2553  000806  D004               	goto	l17079
  2554  000808                     l17077:
  2555                           
  2556                           ; BSR set to: 0
  2557                           ;main.c: 337: else{
  2558                           ;main.c: 338: pwm_bat=310;
  2559  000808  0E01               	movlw	1
  2560  00080A  6E75               	movwf	_pwm_bat+1,c
  2561  00080C  0E36               	movlw	54
  2562  00080E  6E74               	movwf	_pwm_bat,c
  2563  000810                     l17079:
  2564                           
  2565                           ;main.c: 339: }
  2566                           ;main.c: 340: if(pwm_bat<=200&&pwm_bat>=180)
  2567  000810  5075               	movf	_pwm_bat+1,w,c
  2568  000812  E10A               	bnz	l17091
  2569  000814  0EC9               	movlw	201
  2570  000816  5C74               	subwf	_pwm_bat,w,c
  2571  000818  E207               	bc	l17091
  2572  00081A  5075               	movf	_pwm_bat+1,w,c
  2573  00081C  E103               	bnz	u6760
  2574  00081E  0EB4               	movlw	180
  2575  000820  5C74               	subwf	_pwm_bat,w,c
  2576  000822  E302               	bnc	l17091
  2577  000824                     u6760:
  2578                           
  2579                           ;main.c: 341: {
  2580                           ;main.c: 342: bat.bat=310;
  2581  000824  D86A               	call	PL54	;call to abstracted procedure
  2582                           
  2583                           ;main.c: 343: bat.dian=0;
  2584                           
  2585                           ;main.c: 344: pwm.duty=0;
  2586                           
  2587                           ; BSR set to: 0
  2588                           ;main.c: 345: lowbat_init=0;
  2589  000826  D863               	call	PL50	;call to abstracted procedure
  2590  000828                     l17091:
  2591                           
  2592                           ;main.c: 351: }
  2593                           ;main.c: 352: }
  2594                           ;main.c: 353: if(pwm_cnt>=5)
  2595  000828  0E04               	movlw	4
  2596  00082A  642A               	cpfsgt	_pwm_cnt,c
  2597  00082C  D034               	goto	l17101
  2598                           
  2599                           ;main.c: 354: {
  2600                           ;main.c: 356: pw_t=300000ul*pw/((unsigned long)pwm_bat*pwm_bat);
  2601  00082E  507B               	movf	_pw,w,c
  2602  000830  6E3E               	movwf	___lmul@multiplier,c
  2603  000832  6A3F               	clrf	___lmul@multiplier+1,c
  2604  000834  6A40               	clrf	___lmul@multiplier+2,c
  2605  000836  6A41               	clrf	___lmul@multiplier+3,c
  2606  000838  0EE0               	movlw	224
  2607  00083A  6E42               	movwf	___lmul@multiplicand,c
  2608  00083C  0E93               	movlw	147
  2609  00083E  6E43               	movwf	___lmul@multiplicand+1,c
  2610  000840  0E04               	movlw	4
  2611  000842  6E44               	movwf	___lmul@multiplicand+2,c
  2612  000844  6A45               	clrf	___lmul@multiplicand+3,c
  2613  000846  EC42  F00D         	call	___lmul	;wreg free
  2614  00084A  D838               	call	PL22	;call to abstracted procedure
  2615  00084C  C074  F03E         	movff	_pwm_bat,___lmul@multiplier
  2616  000850  C075  F03F         	movff	_pwm_bat+1,___lmul@multiplier+1
  2617  000854  6A40               	clrf	___lmul@multiplier+2,c
  2618  000856  6A41               	clrf	___lmul@multiplier+3,c
  2619  000858  C074  F042         	movff	_pwm_bat,___lmul@multiplicand
  2620  00085C  C075  F043         	movff	_pwm_bat+1,___lmul@multiplicand+1
  2621  000860  6A44               	clrf	___lmul@multiplicand+2,c
  2622  000862  6A45               	clrf	___lmul@multiplicand+3,c
  2623  000864  EC42  F00D         	call	___lmul	;wreg free
  2624  000868  C03E  F04E         	movff	?___lmul,___lldiv@divisor
  2625  00086C  C03F  F04F         	movff	?___lmul+1,___lldiv@divisor+1
  2626  000870  C040  F050         	movff	?___lmul+2,___lldiv@divisor+2
  2627  000874  C041  F051         	movff	?___lmul+3,___lldiv@divisor+3
  2628  000878  ECDE  F00B         	call	___lldiv	;wreg free
  2629  00087C  C04A  F06A         	movff	?___lldiv,_pw_t
  2630  000880  C04B  F06B         	movff	?___lldiv+1,_pw_t+1
  2631  000884  C04C  F06C         	movff	?___lldiv+2,_pw_t+2
  2632  000888  C04D  F06D         	movff	?___lldiv+3,_pw_t+3
  2633                           
  2634                           ;main.c: 357: cfg_flag=1;
  2635  00088C  0E01               	movlw	1
  2636  00088E  6E76               	movwf	_cfg_flag,c
  2637                           
  2638                           ;main.c: 358: pwm_cnt=0;
  2639  000890  6A2A               	clrf	_pwm_cnt,c
  2640                           
  2641                           ;main.c: 359: pwm.adc_ok=0;
  2642  000892  0100               	movlb	0	; () banked
  2643  000894  6BD4               	clrf	(_pwm+2)& (0+255),b
  2644  000896                     l17101:
  2645                           
  2646                           ;main.c: 361: }
  2647                           ;main.c: 365: pwm.adc_ok=0;
  2648  000896  0100               	movlb	0	; () banked
  2649  000898  6BD4               	clrf	(_pwm+2)& (0+255),b
  2650  00089A  D4C4               	goto	l16539
  2651  00089C                     __end_of_main:
  2652                           	opt stack 0
  2653  00089C                     PL8:
  2654                           	opt stack 2
  2655  00089C  6E3E               	movwf	add_task_id@interval_ms,c
  2656  00089E  0E01               	movlw	1
  2657  0008A0  6E3F               	movwf	add_task_id@interval_ms+1,c
  2658  0008A2  6A40               	clrf	add_task_id@interval_ms+2,c
  2659  0008A4  6A41               	clrf	add_task_id@interval_ms+3,c
  2660  0008A6  0C01               	retlw	1
  2661  0008A8                     __end_ofPL8:
  2662                           	opt stack 0
  2663  0008A8                     PL12:
  2664                           	opt stack 3
  2665  0008A8  6EA1               	movwf	4001,c	;volatile
  2666  0008AA  94AA               	bcf	4010,2,c	;volatile
  2667  0008AC  94A9               	bcf	4009,2,c	;volatile
  2668  0008AE  82A1               	bsf	4001,1,c	;volatile
  2669  0008B0                     l2012:
  2670  0008B0  B2A1               	btfsc	4001,1,c	;volatile
  2671  0008B2  D7FE               	goto	l2012
  2672  0008B4  94AA               	bcf	4010,2,c	;volatile
  2673  0008B6  50A3               	movf	4003,w,c	;volatile
  2674  0008B8  0B0F               	andlw	15
  2675  0008BA  0012               	return	
  2676  0008BC                     __end_ofPL12:
  2677                           	opt stack 0
  2678  0008BC                     PL22:
  2679                           	opt stack 3
  2680  0008BC  C03E  F04A         	movff	?___lmul,___lldiv@dividend
  2681  0008C0  C03F  F04B         	movff	?___lmul+1,___lldiv@dividend+1
  2682  0008C4  C040  F04C         	movff	?___lmul+2,___lldiv@dividend+2
  2683  0008C8  C041  F04D         	movff	?___lmul+3,___lldiv@dividend+3
  2684  0008CC  0012               	return	
  2685  0008CE                     __end_ofPL22:
  2686                           	opt stack 0
  2687  0008CE                     PL24:
  2688                           	opt stack 3
  2689  0008CE  0E60               	movlw	96
  2690  0008D0  6EA0               	movwf	4000,c	;volatile
  2691  0008D2  0C15               	retlw	21
  2692  0008D4                     __end_ofPL24:
  2693                           	opt stack 0
  2694  0008D4                     PL26:
  2695                           	opt stack 3
  2696  0008D4  0E60               	movlw	96
  2697  0008D6  6EA0               	movwf	4000,c	;volatile
  2698  0008D8  0C39               	retlw	57
  2699  0008DA                     __end_ofPL26:
  2700                           	opt stack 0
  2701  0008DA                     PL40:
  2702                           	opt stack 2
  2703  0008DA  386E               	swapf	_ui_ld,w,c
  2704  0008DC  42E8               	rrncf	wreg,f,c
  2705  0008DE  0BF8               	andlw	248
  2706  0008E0  6EC2               	movwf	4034,c	;volatile
  2707  0008E2  0012               	return	
  2708  0008E4                     __end_ofPL40:
  2709                           	opt stack 0
  2710  0008E4                     PL48:
  2711                           	opt stack 2
  2712  0008E4  386E               	swapf	_ui_ld,w,c
  2713  0008E6  42E8               	rrncf	wreg,f,c
  2714  0008E8  0BF8               	andlw	248
  2715  0008EA  6EC4               	movwf	4036,c	;volatile
  2716  0008EC  0012               	return	
  2717  0008EE                     __end_ofPL48:
  2718                           	opt stack 0
  2719  0008EE                     PL50:
  2720                           	opt stack 2
  2721  0008EE  6E72               	movwf	_bat+1,c
  2722  0008F0  6A71               	clrf	_bat,c
  2723  0008F2  0100               	movlb	0	; () banked
  2724  0008F4  6BD2               	clrf	_pwm& (0+255),b
  2725  0008F6  6A2F               	clrf	_lowbat_init,c
  2726  0008F8  0012               	return	
  2727  0008FA                     __end_ofPL50:
  2728                           	opt stack 0
  2729  0008FA                     PL54:
  2730                           	opt stack 3
  2731  0008FA  0E01               	movlw	1
  2732  0008FC  6E73               	movwf	_bat+2,c
  2733  0008FE  0C36               	retlw	54
  2734  000900                     __end_ofPL54:
  2735                           	opt stack 0
  2736  000900                     PL58:
  2737                           	opt stack 2
  2738  000900  6E67               	movwf	(??_main+1)& (0+255),c
  2739  000902  6A66               	clrf	??_main& (0+255),c
  2740  000904  50A2               	movf	4002,w,c	;volatile
  2741  000906  1066               	iorwf	??_main,w,c
  2742  000908  0100               	movlb	0	; () banked
  2743  00090A  0012               	return	
  2744  00090C                     __end_ofPL58:
  2745                           	opt stack 0
  2746  00090C                     PL62:
  2747                           	opt stack 2
  2748  00090C  0E73               	movlw	115
  2749  00090E  5C72               	subwf	_bat+1,w,c
  2750  000910  0E01               	movlw	1
  2751  000912  5873               	subwfb	_bat+2,w,c
  2752  000914  0012               	return	
  2753  000916                     __end_ofPL62:
  2754                           	opt stack 0
  2755  000916                     PL64:
  2756                           	opt stack 2
  2757  000916  0E87               	movlw	135
  2758  000918  5C72               	subwf	_bat+1,w,c
  2759  00091A  0E01               	movlw	1
  2760  00091C  5873               	subwfb	_bat+2,w,c
  2761  00091E  0012               	return	
  2762  000920                     __end_ofPL64:
  2763                           	opt stack 0
  2764  000920                     PL66:
  2765                           	opt stack 3
  2766  000920  0E00               	movlw	0
  2767  000922  B287               	btfsc	3975,1,c	;volatile
  2768  000924  0E01               	movlw	1
  2769  000926  6E38               	movwf	_yd,c
  2770  000928  0012               	return	
  2771  00092A                     __end_ofPL66:
  2772                           	opt stack 0
  2773  00092A                     PL72:
  2774                           	opt stack 2
  2775  00092A  68BE               	setf	4030,c	;volatile
  2776  00092C  386F               	swapf	_ui_ld+1,w,c
  2777  00092E  42E8               	rrncf	wreg,f,c
  2778  000930  0BF8               	andlw	248
  2779  000932  0012               	return	
  2780  000934                     __end_ofPL72:
  2781                           	opt stack 0
  2782  000934                     PL76:
  2783                           	opt stack 2
  2784  000934  0E03               	movlw	3
  2785  000936  6E42               	movwf	add_task_id@suc_max,c
  2786  000938  C03C  F043         	movff	_ui_id,add_task_id@task_id
  2787  00093C  0C03               	retlw	3
  2788  00093E                     __end_ofPL76:
  2789                           	opt stack 0
  2790  00093E                     PL78:
  2791                           	opt stack 2
  2792  00093E  0E3E               	movlw	62
  2793  000940  5C72               	subwf	_bat+1,w,c
  2794  000942  0E01               	movlw	1
  2795  000944  5873               	subwfb	_bat+2,w,c
  2796  000946  0012               	return	
  2797  000948                     __end_ofPL78:
  2798                           	opt stack 0
  2799  000948                     PL80:
  2800                           	opt stack 2
  2801  000948  0E5A               	movlw	90
  2802  00094A  5C72               	subwf	_bat+1,w,c
  2803  00094C  0E01               	movlw	1
  2804  00094E  5873               	subwfb	_bat+2,w,c
  2805  000950  0012               	return	
  2806  000952                     __end_ofPL80:
  2807                           	opt stack 0
  2808  000952                     PL82:
  2809                           	opt stack 2
  2810  000952  42E8               	rrncf	wreg,f,c
  2811  000954  0BF8               	andlw	248
  2812  000956  6EC6               	movwf	4038,c	;volatile
  2813  000958  0012               	return	
  2814  00095A                     __end_ofPL82:
  2815                           	opt stack 0
  2816                           tblptru	equ	0xFF8
  2817                           tblptrh	equ	0xFF7
  2818                           tblptrl	equ	0xFF6
  2819                           tablat	equ	0xFF5
  2820                           prodl	equ	0xFF3
  2821                           intcon	equ	0xFF2
  2822                           intcon2	equ	0xFF1
  2823                           intcon3	equ	0xFF0
  2824                           postinc0	equ	0xFEE
  2825                           wreg	equ	0xFE8
  2826                           postdec1	equ	0xFE5
  2827                           fsr1l	equ	0xFE1
  2828                           indf2	equ	0xFDF
  2829                           postinc2	equ	0xFDE
  2830                           postdec2	equ	0xFDD
  2831                           fsr2h	equ	0xFDA
  2832                           fsr2l	equ	0xFD9
  2833                           status	equ	0xFD8
  2834                           
  2835 ;; *************** function _task_init *****************
  2836 ;; Defined at:
  2837 ;;		line 7 in file ".\src\task.c"
  2838 ;; Parameters:    Size  Location     Type
  2839 ;;		None
  2840 ;; Auto vars:     Size  Location     Type
  2841 ;;  i               1    1[COMRAM] unsigned char 
  2842 ;; Return value:  Size  Location     Type
  2843 ;;                  1    wreg      void 
  2844 ;; Registers used:
  2845 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2846 ;; Tracked objects:
  2847 ;;		On entry : 0/0
  2848 ;;		On exit  : 0/0
  2849 ;;		Unchanged: 0/0
  2850 ;; Data sizes:     COMRAM   BANK0
  2851 ;;      Params:         0       0
  2852 ;;      Locals:         1       0
  2853 ;;      Temps:          0       0
  2854 ;;      Totals:         1       0
  2855 ;;Total ram usage:        1 bytes
  2856 ;; Hardware stack levels used:    1
  2857 ;; Hardware stack levels required when called:    2
  2858 ;; This function calls:
  2859 ;;		Nothing
  2860 ;; This function is called by:
  2861 ;;		_main
  2862 ;; This function uses a non-reentrant model
  2863 ;;
  2864                           
  2865                           	psect	text1
  2866  001BF8                     __ptext1:
  2867                           	opt stack 0
  2868  001BF8                     _task_init:
  2869                           	opt stack 5
  2870                           
  2871                           ;task.c: 8: for(unsigned char i=0; i<8; i++) {
  2872                           
  2873                           ; BSR set to: 0
  2874                           ;incstack = 0
  2875  001BF8  6A3E               	clrf	task_init@i,c
  2876  001BFA                     l16431:
  2877                           
  2878                           ;task.c: 9: task_list[i].active = 0;
  2879  001BFA  503E               	movf	task_init@i,w,c
  2880  001BFC  EC99  F005         	call	PL16	;call to abstracted procedure
  2881  001C00  6ADF               	clrf	indf2,c
  2882                           
  2883                           ;task.c: 10: task_list[i].ready = 0;
  2884  001C02  503E               	movf	task_init@i,w,c
  2885  001C04  0D09               	mullw	9
  2886  001C06  50F3               	movf	prodl,w,c
  2887  001C08  0F90               	addlw	low (_task_list+6)
  2888  001C0A  6ED9               	movwf	fsr2l,c
  2889  001C0C  6ADA               	clrf	fsr2h,c
  2890  001C0E  6ADF               	clrf	indf2,c
  2891  001C10  2A3E               	incf	task_init@i,f,c
  2892  001C12  0E07               	movlw	7
  2893  001C14  643E               	cpfsgt	task_init@i,c
  2894  001C16  D7F1               	goto	l16431
  2895  001C18  0C07               	retlw	7
  2896  001C1A                     __end_of_task_init:
  2897                           	opt stack 0
  2898                           tblptru	equ	0xFF8
  2899                           tblptrh	equ	0xFF7
  2900                           tblptrl	equ	0xFF6
  2901                           tablat	equ	0xFF5
  2902                           prodl	equ	0xFF3
  2903                           intcon	equ	0xFF2
  2904                           intcon2	equ	0xFF1
  2905                           intcon3	equ	0xFF0
  2906                           postinc0	equ	0xFEE
  2907                           wreg	equ	0xFE8
  2908                           postdec1	equ	0xFE5
  2909                           fsr1l	equ	0xFE1
  2910                           indf2	equ	0xFDF
  2911                           postinc2	equ	0xFDE
  2912                           postdec2	equ	0xFDD
  2913                           fsr2h	equ	0xFDA
  2914                           fsr2l	equ	0xFD9
  2915                           status	equ	0xFD8
  2916                           
  2917 ;; *************** function _find_task *****************
  2918 ;; Defined at:
  2919 ;;		line 64 in file ".\src\task.c"
  2920 ;; Parameters:    Size  Location     Type
  2921 ;;  task_           1   40[COMRAM] PTR struct task
  2922 ;;		 -> task_list(72), 
  2923 ;; Auto vars:     Size  Location     Type
  2924 ;;		None
  2925 ;; Return value:  Size  Location     Type
  2926 ;;                  1    wreg      void 
  2927 ;; Registers used:
  2928 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2929 ;; Tracked objects:
  2930 ;;		On entry : 3F/0
  2931 ;;		On exit  : 0/0
  2932 ;;		Unchanged: 0/0
  2933 ;; Data sizes:     COMRAM   BANK0
  2934 ;;      Params:         1       0
  2935 ;;      Locals:         0       0
  2936 ;;      Temps:          0       0
  2937 ;;      Totals:         1       0
  2938 ;;Total ram usage:        1 bytes
  2939 ;; Hardware stack levels used:    1
  2940 ;; Hardware stack levels required when called:    5
  2941 ;; This function calls:
  2942 ;;		_bat_task
  2943 ;;		_cb_task
  2944 ;;		_chrg_task
  2945 ;;		_key_task
  2946 ;;		_si_mic_task
  2947 ;;		_sleep_task
  2948 ;;		_ui_begin
  2949 ;;		_ui_cb
  2950 ;;		_ui_chrg
  2951 ;;		_ui_chrgfree
  2952 ;;		_ui_chrgfull
  2953 ;;		_ui_kl
  2954 ;;		_ui_smoend_dl_getup
  2955 ;;		_ui_smoing
  2956 ;;		_ui_timout
  2957 ;;		_ui_ts_off
  2958 ;;		_ui_ts_on
  2959 ;; This function is called by:
  2960 ;;		_main
  2961 ;; This function uses a non-reentrant model
  2962 ;;
  2963                           
  2964                           	psect	text2
  2965  001276                     __ptext2:
  2966                           	opt stack 0
  2967  001276                     _find_task:
  2968                           	opt stack 2
  2969                           
  2970                           ; BSR set to: 0
  2971                           ;task.c: 116: switch (task_->id)
  2972                           
  2973                           ;incstack = 0
  2974  001276  D044               	goto	l16475
  2975  001278                     l16439:
  2976                           
  2977                           ; BSR set to: 0
  2978                           ;task.c: 119: ui_cb(task_);
  2979  001278  C065  F04B         	movff	find_task@task_,ui_cb@task_
  2980  00127C  EF36  F008         	goto	_ui_cb	;wreg free
  2981  001280                     l16441:
  2982                           
  2983                           ; BSR set to: 0
  2984                           ;task.c: 122: ui_chrg(task_);
  2985  001280  C065  F043         	movff	find_task@task_,ui_chrg@task_
  2986  001284  EF64  F00B         	goto	_ui_chrg	;wreg free
  2987  001288                     l16443:
  2988                           
  2989                           ; BSR set to: 0
  2990                           ;task.c: 125: ui_chrgfree(task_);
  2991  001288  C065  F043         	movff	find_task@task_,ui_chrgfree@task_
  2992  00128C  EFC1  F00D         	goto	_ui_chrgfree	;wreg free
  2993  001290                     l16445:
  2994                           
  2995                           ; BSR set to: 0
  2996                           ;task.c: 128: ui_chrgfull(task_);
  2997  001290  C065  F043         	movff	find_task@task_,ui_chrgfull@task_
  2998  001294  EF8A  F00D         	goto	_ui_chrgfull	;wreg free
  2999  001298                     l16447:
  3000                           
  3001                           ; BSR set to: 0
  3002                           ;task.c: 131: ui_smoing(task_);
  3003  001298  C065  F043         	movff	find_task@task_,ui_smoing@task_
  3004  00129C  EF19  F00C         	goto	_ui_smoing	;wreg free
  3005  0012A0                     l16449:
  3006                           
  3007                           ; BSR set to: 0
  3008                           ;task.c: 134: ui_smoend_dl_getup(task_);
  3009  0012A0  C065  F04B         	movff	find_task@task_,ui_smoend_dl_getup@task_
  3010  0012A4  EFA2  F00B         	goto	_ui_smoend_dl_getup	;wreg free
  3011  0012A8                     l16451:
  3012                           
  3013                           ; BSR set to: 0
  3014                           ;task.c: 137: ui_kl(task_);
  3015  0012A8  C065  F043         	movff	find_task@task_,ui_kl@task_
  3016  0012AC  EF16  F00D         	goto	_ui_kl	;wreg free
  3017  0012B0                     l16453:
  3018                           
  3019                           ; BSR set to: 0
  3020                           ;task.c: 140: ui_ts_on(task_);
  3021  0012B0  C065  F04B         	movff	find_task@task_,ui_ts_on@task_
  3022  0012B4  EFA7  F009         	goto	_ui_ts_on	;wreg free
  3023  0012B8                     l16455:
  3024                           
  3025                           ; BSR set to: 0
  3026                           ;task.c: 143: ui_ts_off(task_);
  3027  0012B8  C065  F04B         	movff	find_task@task_,ui_ts_off@task_
  3028  0012BC  EF5B  F006         	goto	_ui_ts_off	;wreg free
  3029  0012C0                     l16457:
  3030                           
  3031                           ; BSR set to: 0
  3032                           ;task.c: 146: si_mic_task(task_);
  3033  0012C0  C065  F05F         	movff	find_task@task_,si_mic_task@task_
  3034  0012C4  EFAD  F004         	goto	_si_mic_task	;wreg free
  3035  0012C8                     l16459:
  3036                           
  3037                           ; BSR set to: 0
  3038                           ;task.c: 149: ui_timout(task_);
  3039  0012C8  C065  F043         	movff	find_task@task_,ui_timout@task_
  3040  0012CC  EF68  F00D         	goto	_ui_timout	;wreg free
  3041  0012D0                     l16461:
  3042                           
  3043                           ; BSR set to: 0
  3044                           ;task.c: 152: cb_task(task_);
  3045  0012D0  C065  F05D         	movff	find_task@task_,cb_task@task_
  3046  0012D4  EF03  F00A         	goto	_cb_task	;wreg free
  3047  0012D8                     l16463:
  3048                           
  3049                           ; BSR set to: 0
  3050                           ;task.c: 155: chrg_task(task_);
  3051  0012D8  C065  F05F         	movff	find_task@task_,chrg_task@task_
  3052  0012DC  EFBC  F008         	goto	_chrg_task	;wreg free
  3053  0012E0                     l16465:
  3054                           
  3055                           ; BSR set to: 0
  3056                           ;task.c: 158: key_task(task_);
  3057  0012E0  C065  F04B         	movff	find_task@task_,key_task@task_
  3058  0012E4  EF08  F007         	goto	_key_task	;wreg free
  3059  0012E8                     l16467:
  3060                           
  3061                           ; BSR set to: 0
  3062                           ;task.c: 161: bat_task(task_);
  3063  0012E8  C065  F05F         	movff	find_task@task_,bat_task@task_
  3064  0012EC  EF25  F00B         	goto	_bat_task	;wreg free
  3065  0012F0                     l16469:
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;task.c: 164: sleep_task(task_);
  3069  0012F0  C065  F03E         	movff	find_task@task_,sleep_task@task_
  3070  0012F4  EF52  F00C         	goto	_sleep_task	;wreg free
  3071  0012F8                     l16471:
  3072                           
  3073                           ; BSR set to: 0
  3074                           ;task.c: 167: ui_begin(task_);
  3075  0012F8  C065  F043         	movff	find_task@task_,ui_begin@task_
  3076  0012FC  EFA2  F00A         	goto	_ui_begin	;wreg free
  3077  001300                     l16475:
  3078                           
  3079                           ; BSR set to: 0
  3080  001300  5065               	movf	find_task@task_,w,c
  3081  001302  6ED9               	movwf	fsr2l,c
  3082  001304  6ADA               	clrf	fsr2h,c
  3083  001306  50DF               	movf	indf2,w,c
  3084                           
  3085                           ; Switch size 1, requested type "space"
  3086                           ; Number of cases is 18, Range of values is 0 to 17
  3087                           ; switch strategies available:
  3088                           ; Name         Instructions Cycles
  3089                           ; simple_byte           55    28 (average)
  3090                           ;	Chosen strategy is simple_byte
  3091  001308  E0B7               	bz	l16439
  3092  00130A  0A01               	xorlw	1	; case 1
  3093  00130C  E0B9               	bz	l16441
  3094  00130E  0A03               	xorlw	3	; case 2
  3095  001310  E0BB               	bz	l16443
  3096  001312  0A01               	xorlw	1	; case 3
  3097  001314  E0BD               	bz	l16445
  3098  001316  0A07               	xorlw	7	; case 4
  3099  001318  E0BF               	bz	l16447
  3100  00131A  0A01               	xorlw	1	; case 5
  3101  00131C  E0C1               	bz	l16449
  3102  00131E  0A03               	xorlw	3	; case 6
  3103  001320  E0C3               	bz	l16451
  3104  001322  0A01               	xorlw	1	; case 7
  3105  001324  E0C5               	bz	l16453
  3106  001326  0A0F               	xorlw	15	; case 8
  3107  001328  E0C7               	bz	l16455
  3108  00132A  0A01               	xorlw	1	; case 9
  3109  00132C  E0C9               	bz	l16457
  3110  00132E  0A03               	xorlw	3	; case 10
  3111  001330  E0CB               	bz	l16459
  3112  001332  0A01               	xorlw	1	; case 11
  3113  001334  E0CD               	bz	l16461
  3114  001336  0A07               	xorlw	7	; case 12
  3115  001338  E0CF               	bz	l16463
  3116  00133A  0A01               	xorlw	1	; case 13
  3117  00133C  E0D1               	bz	l16465
  3118  00133E  0A03               	xorlw	3	; case 14
  3119  001340  E0D3               	bz	l16467
  3120  001342  0A01               	xorlw	1	; case 15
  3121  001344  E0D5               	bz	l16469
  3122  001346  0A1F               	xorlw	31	; case 16
  3123  001348  E0D7               	bz	l16471
  3124  00134A  0A01               	xorlw	1	; case 17
  3125  00134C  0012               	return	
  3126  00134E                     __end_of_find_task:
  3127                           	opt stack 0
  3128                           tblptru	equ	0xFF8
  3129                           tblptrh	equ	0xFF7
  3130                           tblptrl	equ	0xFF6
  3131                           tablat	equ	0xFF5
  3132                           prodl	equ	0xFF3
  3133                           intcon	equ	0xFF2
  3134                           intcon2	equ	0xFF1
  3135                           intcon3	equ	0xFF0
  3136                           postinc0	equ	0xFEE
  3137                           wreg	equ	0xFE8
  3138                           postdec1	equ	0xFE5
  3139                           fsr1l	equ	0xFE1
  3140                           indf2	equ	0xFDF
  3141                           postinc2	equ	0xFDE
  3142                           postdec2	equ	0xFDD
  3143                           fsr2h	equ	0xFDA
  3144                           fsr2l	equ	0xFD9
  3145                           status	equ	0xFD8
  3146                           
  3147 ;; *************** function _ui_ts_on *****************
  3148 ;; Defined at:
  3149 ;;		line 443 in file ".\src\ui.c"
  3150 ;; Parameters:    Size  Location     Type
  3151 ;;  task_           1   14[COMRAM] PTR struct task
  3152 ;;		 -> task_list(72), 
  3153 ;; Auto vars:     Size  Location     Type
  3154 ;;		None
  3155 ;; Return value:  Size  Location     Type
  3156 ;;                  1    wreg      void 
  3157 ;; Registers used:
  3158 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3159 ;; Tracked objects:
  3160 ;;		On entry : 3F/0
  3161 ;;		On exit  : 0/0
  3162 ;;		Unchanged: 0/0
  3163 ;; Data sizes:     COMRAM   BANK0
  3164 ;;      Params:         1       0
  3165 ;;      Locals:         0       0
  3166 ;;      Temps:          1       0
  3167 ;;      Totals:         2       0
  3168 ;;Total ram usage:        2 bytes
  3169 ;; Hardware stack levels used:    1
  3170 ;; Hardware stack levels required when called:    3
  3171 ;; This function calls:
  3172 ;;		___lbdiv
  3173 ;;		_add_task_id
  3174 ;;		_ldz
  3175 ;;		_new_nixie
  3176 ;; This function is called by:
  3177 ;;		_find_task
  3178 ;; This function uses a non-reentrant model
  3179 ;;
  3180                           
  3181                           	psect	text3
  3182  00134E                     __ptext3:
  3183                           	opt stack 0
  3184  00134E                     _ui_ts_on:
  3185                           	opt stack 3
  3186                           
  3187                           ; BSR set to: 0
  3188                           ;ui.c: 445: if(task_->sucCnt<=9)
  3189                           
  3190                           ;incstack = 0
  3191  00134E  504B               	movf	ui_ts_on@task_,w,c
  3192  001350  D84B               	call	PL2	;call to abstracted procedure
  3193  001352  0E0A               	movlw	10
  3194  001354  60DF               	cpfslt	indf2,c
  3195  001356  D00F               	goto	l16263
  3196                           
  3197                           ; BSR set to: 0
  3198                           ;ui.c: 446: {
  3199                           ;ui.c: 447: if(task_->sucCnt==0)
  3200  001358  504B               	movf	ui_ts_on@task_,w,c
  3201  00135A  D846               	call	PL2	;call to abstracted procedure
  3202  00135C  50DF               	movf	indf2,w,c
  3203  00135E  E127               	bnz	l12638
  3204                           
  3205                           ; BSR set to: 0
  3206                           ;ui.c: 448: {
  3207                           ;ui.c: 449: ui.w1 =1;
  3208  001360  0E01               	movlw	1
  3209  001362  6E13               	movwf	_ui,c	;volatile
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;ui.c: 450: ui.w2 =0;
  3213  001364  6A14               	clrf	_ui+1,c	;volatile
  3214                           
  3215                           ; BSR set to: 0
  3216                           ;ui.c: 452: ui.ou_d =0;
  3217  001366  6A17               	clrf	_ui+4,c	;volatile
  3218                           
  3219                           ;ui.c: 453: ui.wa =1;
  3220  001368  0E01               	movlw	1
  3221  00136A  6E18               	movwf	_ui+5,c	;volatile
  3222                           
  3223                           ;ui.c: 454: ui.ts =1;
  3224  00136C  6E19               	movwf	_ui+6,c	;volatile
  3225                           
  3226                           ; BSR set to: 0
  3227                           ;ui.c: 455: ui.yd =yd;
  3228  00136E  C038  F01A         	movff	_yd,_ui+7	;volatile
  3229                           
  3230                           ;ui.c: 457: ui.dian_s =1;
  3231  001372  6E1C               	movwf	_ui+9,c	;volatile
  3232  001374  D01C               	goto	l12638
  3233  001376                     l16263:
  3234                           
  3235                           ; BSR set to: 0
  3236                           ;ui.c: 461: else if(task_->sucCnt<=19)
  3237  001376  504B               	movf	ui_ts_on@task_,w,c
  3238  001378  D837               	call	PL2	;call to abstracted procedure
  3239  00137A  0E14               	movlw	20
  3240  00137C  60DF               	cpfslt	indf2,c
  3241  00137E  D00A               	goto	l16269
  3242                           
  3243                           ; BSR set to: 0
  3244                           ;ui.c: 462: {
  3245                           ;ui.c: 463: ldz(19-task_->sucCnt);
  3246  001380  504B               	movf	ui_ts_on@task_,w,c
  3247  001382  D832               	call	PL2	;call to abstracted procedure
  3248  001384  50DF               	movf	indf2,w,c
  3249  001386  6E4C               	movwf	??_ui_ts_on& (0+255),c
  3250  001388  504C               	movf	??_ui_ts_on,w,c
  3251  00138A  0813               	sublw	19
  3252  00138C  EC45  F00E         	call	_ldz
  3253  001390                     l16267:
  3254                           
  3255                           ;ui.c: 464: ui_ld.ts=10;
  3256  001390  0E0A               	movlw	10
  3257  001392  D00C               	goto	L3
  3258  001394                     l16269:
  3259                           
  3260                           ; BSR set to: 0
  3261                           ;ui.c: 466: else if(task_->sucCnt<=89)
  3262  001394  504B               	movf	ui_ts_on@task_,w,c
  3263  001396  D828               	call	PL2	;call to abstracted procedure
  3264  001398  0E5A               	movlw	90
  3265  00139A  60DF               	cpfslt	indf2,c
  3266  00139C  D001               	goto	l16273
  3267  00139E  D7F8               	goto	l16267
  3268  0013A0                     l16273:
  3269                           
  3270                           ; BSR set to: 0
  3271                           ;ui.c: 470: else
  3272                           ;ui.c: 471: {
  3273                           ;ui.c: 472: ui_ld.ts=99-task_->sucCnt;
  3274  0013A0  504B               	movf	ui_ts_on@task_,w,c
  3275  0013A2  D822               	call	PL2	;call to abstracted procedure
  3276  0013A4  50DF               	movf	indf2,w,c
  3277  0013A6  6E4C               	movwf	??_ui_ts_on& (0+255),c
  3278  0013A8  504C               	movf	??_ui_ts_on,w,c
  3279  0013AA  0863               	sublw	99
  3280  0013AC                     L3:
  3281  0013AC  6E70               	movwf	_ui_ld+2,c
  3282  0013AE                     l12638:
  3283                           
  3284                           ;ui.c: 473: }
  3285                           ;ui.c: 474: if(((task_->sucCnt&1)==0)&&task_->sucCnt<19)
  3286  0013AE  504B               	movf	ui_ts_on@task_,w,c
  3287  0013B0  D81B               	call	PL2	;call to abstracted procedure
  3288  0013B2  B0DF               	btfsc	indf2,0,c
  3289  0013B4  D00B               	goto	l16283
  3290  0013B6  504B               	movf	ui_ts_on@task_,w,c
  3291  0013B8  D817               	call	PL2	;call to abstracted procedure
  3292  0013BA  0E13               	movlw	19
  3293  0013BC  60DF               	cpfslt	indf2,c
  3294  0013BE  D006               	goto	l16283
  3295                           
  3296                           ;ui.c: 475: {
  3297                           ;ui.c: 476: ui.num1 =pw/10;
  3298  0013C0  ECB8  F008         	call	PL56	;call to abstracted procedure
  3299  0013C4  ECA7  F00D         	call	___lbdiv
  3300                           
  3301                           ;ui.c: 477: ui.num2 =pw-ui.num1*10;
  3302                           
  3303                           ;ui.c: 478: ui.dian =bat.dian;
  3304  0013C8  ECFF  F006         	call	PL18	;call to abstracted procedure
  3305  0013CC                     l16283:
  3306                           
  3307                           ;ui.c: 479: }
  3308                           ;ui.c: 480: new_nixie();
  3309  0013CC  ECA9  F007         	call	_new_nixie	;wreg free
  3310                           
  3311                           ;ui.c: 481: if(task_->sucCnt==99)
  3312  0013D0  504B               	movf	ui_ts_on@task_,w,c
  3313  0013D2  D80A               	call	PL2	;call to abstracted procedure
  3314  0013D4  0E63               	movlw	99
  3315  0013D6  18DE               	xorwf	postinc2,w,c
  3316  0013D8  B4D8               	btfsc	status,2,c
  3317                           
  3318                           ;ui.c: 482: {
  3319                           ;ui.c: 483: if(PINA5&&(PINA1==0))
  3320  0013DA  AA86               	btfss	3974,5,c	;volatile
  3321  0013DC  0012               	return	
  3322  0013DE  B286               	btfsc	3974,1,c	;volatile
  3323  0013E0  0012               	return	
  3324                           
  3325                           ;ui.c: 484: {
  3326                           ;ui.c: 485: add_task_id(1,500,0,ui_id);
  3327  0013E2  D807               	call	PL4	;call to abstracted procedure
  3328  0013E4  EF53  F00A         	goto	_add_task_id
  3329  0013E8                     __end_of_ui_ts_on:
  3330                           	opt stack 0
  3331  0013E8                     PL2:
  3332                           	opt stack 4
  3333  0013E8  6ED9               	movwf	fsr2l,c
  3334  0013EA  6ADA               	clrf	fsr2h,c
  3335  0013EC  0E08               	movlw	8
  3336  0013EE  26D9               	addwf	fsr2l,f,c
  3337  0013F0  0C08               	retlw	8
  3338  0013F2                     __end_ofPL2:
  3339                           	opt stack 0
  3340  0013F2                     PL4:
  3341                           	opt stack 2
  3342  0013F2  0EF4               	movlw	244
  3343  0013F4  6E3E               	movwf	add_task_id@interval_ms,c
  3344  0013F6  0E01               	movlw	1
  3345  0013F8  6E3F               	movwf	add_task_id@interval_ms+1,c
  3346  0013FA  6A40               	clrf	add_task_id@interval_ms+2,c
  3347  0013FC  6A41               	clrf	add_task_id@interval_ms+3,c
  3348  0013FE  6A42               	clrf	add_task_id@suc_max,c
  3349  001400  C03C  F043         	movff	_ui_id,add_task_id@task_id
  3350  001404  0C01               	retlw	1
  3351  001406                     __end_ofPL4:
  3352                           	opt stack 0
  3353                           tblptru	equ	0xFF8
  3354                           tblptrh	equ	0xFF7
  3355                           tblptrl	equ	0xFF6
  3356                           tablat	equ	0xFF5
  3357                           prodl	equ	0xFF3
  3358                           intcon	equ	0xFF2
  3359                           intcon2	equ	0xFF1
  3360                           intcon3	equ	0xFF0
  3361                           postinc0	equ	0xFEE
  3362                           wreg	equ	0xFE8
  3363                           postdec1	equ	0xFE5
  3364                           fsr1l	equ	0xFE1
  3365                           indf2	equ	0xFDF
  3366                           postinc2	equ	0xFDE
  3367                           postdec2	equ	0xFDD
  3368                           fsr2h	equ	0xFDA
  3369                           fsr2l	equ	0xFD9
  3370                           status	equ	0xFD8
  3371                           
  3372 ;; *************** function _ui_ts_off *****************
  3373 ;; Defined at:
  3374 ;;		line 491 in file ".\src\ui.c"
  3375 ;; Parameters:    Size  Location     Type
  3376 ;;  task_           1   14[COMRAM] PTR struct task
  3377 ;;		 -> task_list(72), 
  3378 ;; Auto vars:     Size  Location     Type
  3379 ;;		None
  3380 ;; Return value:  Size  Location     Type
  3381 ;;                  1    wreg      void 
  3382 ;; Registers used:
  3383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3384 ;; Tracked objects:
  3385 ;;		On entry : 3F/0
  3386 ;;		On exit  : 0/0
  3387 ;;		Unchanged: 0/0
  3388 ;; Data sizes:     COMRAM   BANK0
  3389 ;;      Params:         1       0
  3390 ;;      Locals:         0       0
  3391 ;;      Temps:          1       0
  3392 ;;      Totals:         2       0
  3393 ;;Total ram usage:        2 bytes
  3394 ;; Hardware stack levels used:    1
  3395 ;; Hardware stack levels required when called:    3
  3396 ;; This function calls:
  3397 ;;		___lbdiv
  3398 ;;		_add_task_id
  3399 ;;		_ldz
  3400 ;;		_new_nixie
  3401 ;; This function is called by:
  3402 ;;		_find_task
  3403 ;; This function uses a non-reentrant model
  3404 ;;
  3405                           
  3406                           	psect	text4
  3407  000CB6                     __ptext4:
  3408                           	opt stack 0
  3409  000CB6                     _ui_ts_off:
  3410                           	opt stack 3
  3411                           
  3412                           ; BSR set to: 0
  3413                           ;ui.c: 493: if(((task_->sucCnt&1)==0)&&task_->sucCnt>=21)
  3414                           
  3415                           ;incstack = 0
  3416  000CB6  504B               	movf	ui_ts_off@task_,w,c
  3417  000CB8  ECF4  F009         	call	PL2	;call to abstracted procedure
  3418  000CBC  B0DF               	btfsc	indf2,0,c
  3419  000CBE  D010               	goto	l16307
  3420                           
  3421                           ; BSR set to: 0
  3422  000CC0  504B               	movf	ui_ts_off@task_,w,c
  3423  000CC2  ECF4  F009         	call	PL2	;call to abstracted procedure
  3424  000CC6  0E14               	movlw	20
  3425  000CC8  64DF               	cpfsgt	indf2,c
  3426  000CCA  D00A               	goto	l16307
  3427                           
  3428                           ; BSR set to: 0
  3429                           ;ui.c: 494: {
  3430                           ;ui.c: 495: ui.w1 =1;
  3431  000CCC  0E01               	movlw	1
  3432  000CCE  6E13               	movwf	_ui,c	;volatile
  3433                           
  3434                           ;ui.c: 496: ui.w2 =1;
  3435  000CD0  6E14               	movwf	_ui+1,c	;volatile
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;ui.c: 497: ui.num1 =pw/10;
  3439  000CD2  ECB8  F008         	call	PL56	;call to abstracted procedure
  3440  000CD6  ECA7  F00D         	call	___lbdiv
  3441                           
  3442                           ;ui.c: 498: ui.num2 =pw-ui.num1*10;
  3443                           
  3444                           ;ui.c: 499: ui.dian =bat.dian;
  3445  000CDA  D891               	call	PL18	;call to abstracted procedure
  3446                           
  3447                           ;ui.c: 500: new_nixie();
  3448  000CDC  ECA9  F007         	call	_new_nixie	;wreg free
  3449  000CE0                     l16307:
  3450                           
  3451                           ;ui.c: 501: }
  3452                           ;ui.c: 502: if(task_->sucCnt<=11)
  3453  000CE0  504B               	movf	ui_ts_off@task_,w,c
  3454  000CE2  ECF4  F009         	call	PL2	;call to abstracted procedure
  3455  000CE6  0E0C               	movlw	12
  3456  000CE8  60DF               	cpfslt	indf2,c
  3457  000CEA  D06A               	goto	l16351
  3458                           
  3459                           ;ui.c: 503: {
  3460                           ;ui.c: 504: if(task_->sucCnt==0)
  3461  000CEC  504B               	movf	ui_ts_off@task_,w,c
  3462  000CEE  ECF4  F009         	call	PL2	;call to abstracted procedure
  3463  000CF2  50DF               	movf	indf2,w,c
  3464  000CF4  E149               	bnz	l16349
  3465                           
  3466                           ;ui.c: 505: {
  3467                           ;ui.c: 506: ui.w1 =0;
  3468  000CF6  6A13               	clrf	_ui,c	;volatile
  3469                           
  3470                           ;ui.c: 507: ui.w2 =0;
  3471  000CF8  6A14               	clrf	_ui+1,c	;volatile
  3472                           
  3473                           ;ui.c: 509: ui.ou_d =0;
  3474                           
  3475                           ;ui.c: 510: ui.wa =1;
  3476                           
  3477                           ;ui.c: 511: ui.ts =0;
  3478                           
  3479                           ;ui.c: 512: ui.yd =yd;
  3480                           
  3481                           ;ui.c: 514: ui.dian_s =1;
  3482  000CFA  EC81  F00D         	call	PL38	;call to abstracted procedure
  3483                           
  3484                           ;ui.c: 516: ui_ld.n=0;
  3485  000CFE  6A6F               	clrf	_ui_ld+1,c
  3486                           
  3487                           ;ui.c: 517: new_nixie();
  3488  000D00  ECA9  F007         	call	_new_nixie	;wreg free
  3489  000D04  D041               	goto	l16349
  3490  000D06                     l16323:
  3491                           
  3492                           ;ui.c: 522: nixie_z[4][1]|=2;
  3493  000D06  820A               	bsf	_nixie_z+9,1,c	;volatile
  3494                           
  3495                           ;ui.c: 523: nixie_z[6][1]|=2;
  3496  000D08  820E               	bsf	_nixie_z+13,1,c	;volatile
  3497                           
  3498                           ;ui.c: 524: nixie_z[5][0]|=1;
  3499  000D0A  800B               	bsf	_nixie_z+10,0,c	;volatile
  3500                           
  3501                           ;ui.c: 525: nixie_z[7][0]|=1;
  3502  000D0C  800F               	bsf	_nixie_z+14,0,c	;volatile
  3503                           
  3504                           ;ui.c: 527: break;
  3505  000D0E  D069               	goto	l16359
  3506  000D10                     l16325:
  3507                           
  3508                           ;ui.c: 529: nixie_z[4][1]|=1;
  3509  000D10  800A               	bsf	_nixie_z+9,0,c	;volatile
  3510                           
  3511                           ;ui.c: 530: nixie_z[6][1]|=1;
  3512  000D12  800E               	bsf	_nixie_z+13,0,c	;volatile
  3513                           
  3514                           ;ui.c: 531: nixie_z[5][0]|=2;
  3515  000D14  820B               	bsf	_nixie_z+10,1,c	;volatile
  3516                           
  3517                           ;ui.c: 532: nixie_z[7][0]|=2;
  3518  000D16  820F               	bsf	_nixie_z+14,1,c	;volatile
  3519                           
  3520                           ;ui.c: 533: break;
  3521  000D18  D064               	goto	l16359
  3522  000D1A                     l16327:
  3523                           
  3524                           ;ui.c: 535: nixie_z[4][0]|=128;
  3525  000D1A  8E09               	bsf	_nixie_z+8,7,c	;volatile
  3526                           
  3527                           ;ui.c: 536: nixie_z[6][0]|=128;
  3528  000D1C  8E0D               	bsf	_nixie_z+12,7,c	;volatile
  3529                           
  3530                           ;ui.c: 537: nixie_z[5][0]|=4;
  3531  000D1E  840B               	bsf	_nixie_z+10,2,c	;volatile
  3532                           
  3533                           ;ui.c: 538: nixie_z[7][0]|=4;
  3534  000D20  840F               	bsf	_nixie_z+14,2,c	;volatile
  3535                           
  3536                           ;ui.c: 539: break;
  3537  000D22  D05F               	goto	l16359
  3538  000D24                     l16329:
  3539                           
  3540                           ;ui.c: 541: nixie_z[4][0]|=64;
  3541  000D24  8C09               	bsf	_nixie_z+8,6,c	;volatile
  3542                           
  3543                           ;ui.c: 542: nixie_z[6][0]|=32;
  3544  000D26  8A0D               	bsf	_nixie_z+12,5,c	;volatile
  3545                           
  3546                           ;ui.c: 543: nixie_z[5][0]|=8;
  3547  000D28  860B               	bsf	_nixie_z+10,3,c	;volatile
  3548                           
  3549                           ;ui.c: 544: nixie_z[7][0]|=8;
  3550  000D2A  860F               	bsf	_nixie_z+14,3,c	;volatile
  3551                           
  3552                           ;ui.c: 546: nixie_z[8][0]|=32;
  3553  000D2C  8A11               	bsf	_nixie_z+16,5,c	;volatile
  3554                           
  3555                           ;ui.c: 547: break;
  3556  000D2E  D059               	goto	l16359
  3557  000D30                     l16331:
  3558                           
  3559                           ;ui.c: 549: nixie_z[4][0]|=32;
  3560  000D30  8A09               	bsf	_nixie_z+8,5,c	;volatile
  3561                           
  3562                           ;ui.c: 550: nixie_z[6][0]|=16;
  3563  000D32  880D               	bsf	_nixie_z+12,4,c	;volatile
  3564                           
  3565                           ;ui.c: 551: nixie_z[5][0]|=16;
  3566  000D34  880B               	bsf	_nixie_z+10,4,c	;volatile
  3567                           
  3568                           ;ui.c: 552: nixie_z[7][0]|=16;
  3569  000D36  880F               	bsf	_nixie_z+14,4,c	;volatile
  3570                           
  3571                           ;ui.c: 554: nixie_z[8][0]|=64;
  3572  000D38  8C11               	bsf	_nixie_z+16,6,c	;volatile
  3573                           
  3574                           ;ui.c: 555: break;
  3575  000D3A  D053               	goto	l16359
  3576  000D3C                     l16333:
  3577                           
  3578                           ;ui.c: 557: nixie_z[4][0]|=8;
  3579  000D3C  8609               	bsf	_nixie_z+8,3,c	;volatile
  3580                           
  3581                           ;ui.c: 558: nixie_z[6][0]|=8;
  3582  000D3E  860D               	bsf	_nixie_z+12,3,c	;volatile
  3583                           
  3584                           ;ui.c: 559: nixie_z[5][0]|=64;
  3585  000D40  8C0B               	bsf	_nixie_z+10,6,c	;volatile
  3586                           
  3587                           ;ui.c: 560: nixie_z[7][0]|=32;
  3588  000D42  8A0F               	bsf	_nixie_z+14,5,c	;volatile
  3589                           
  3590                           ;ui.c: 562: nixie_z[8][0]|=128;
  3591  000D44  8E11               	bsf	_nixie_z+16,7,c	;volatile
  3592                           
  3593                           ;ui.c: 563: break;
  3594  000D46  D04D               	goto	l16359
  3595  000D48                     l16335:
  3596                           
  3597                           ;ui.c: 565: nixie_z[4][0]|=4;
  3598  000D48  8409               	bsf	_nixie_z+8,2,c	;volatile
  3599                           
  3600                           ;ui.c: 566: nixie_z[6][0]|=4;
  3601  000D4A  840D               	bsf	_nixie_z+12,2,c	;volatile
  3602                           
  3603                           ;ui.c: 567: nixie_z[5][0]|=128;
  3604  000D4C  8E0B               	bsf	_nixie_z+10,7,c	;volatile
  3605                           
  3606                           ;ui.c: 568: nixie_z[7][0]|=64;
  3607  000D4E  8C0F               	bsf	_nixie_z+14,6,c	;volatile
  3608                           
  3609                           ;ui.c: 569: break;
  3610  000D50  D048               	goto	l16359
  3611  000D52                     l16337:
  3612                           
  3613                           ;ui.c: 571: nixie_z[4][0]|=2;
  3614  000D52  8209               	bsf	_nixie_z+8,1,c	;volatile
  3615                           
  3616                           ;ui.c: 572: nixie_z[6][0]|=2;
  3617  000D54  820D               	bsf	_nixie_z+12,1,c	;volatile
  3618                           
  3619                           ;ui.c: 573: nixie_z[5][1]|=1;
  3620  000D56  800C               	bsf	_nixie_z+11,0,c	;volatile
  3621                           
  3622                           ;ui.c: 574: nixie_z[7][1]|=1;
  3623  000D58  8010               	bsf	_nixie_z+15,0,c	;volatile
  3624                           
  3625                           ;ui.c: 575: break;
  3626  000D5A  D043               	goto	l16359
  3627  000D5C                     l16339:
  3628                           
  3629                           ;ui.c: 577: nixie_z[4][0]|=1;
  3630  000D5C  8009               	bsf	_nixie_z+8,0,c	;volatile
  3631                           
  3632                           ;ui.c: 578: nixie_z[6][0]|=1;
  3633  000D5E  800D               	bsf	_nixie_z+12,0,c	;volatile
  3634                           
  3635                           ;ui.c: 579: nixie_z[5][1]|=2;
  3636  000D60  820C               	bsf	_nixie_z+11,1,c	;volatile
  3637                           
  3638                           ;ui.c: 580: nixie_z[7][1]|=2;
  3639  000D62  8210               	bsf	_nixie_z+15,1,c	;volatile
  3640                           
  3641                           ;ui.c: 581: break;
  3642  000D64  D03E               	goto	l16359
  3643  000D66                     l16341:
  3644                           
  3645                           ;ui.c: 583: nixie_z[2][0]|=32;
  3646  000D66  8A05               	bsf	_nixie_z+4,5,c	;volatile
  3647                           
  3648                           ;ui.c: 584: nixie_z[3][0]|=32;
  3649  000D68  8A07               	bsf	_nixie_z+6,5,c	;volatile
  3650                           
  3651                           ;ui.c: 585: break;
  3652  000D6A  D03B               	goto	l16359
  3653  000D6C                     l16343:
  3654                           
  3655                           ;ui.c: 587: nixie_z[2][0]|=16;
  3656  000D6C  8805               	bsf	_nixie_z+4,4,c	;volatile
  3657                           
  3658                           ;ui.c: 588: nixie_z[2][0]|=128;
  3659  000D6E  8E05               	bsf	_nixie_z+4,7,c	;volatile
  3660                           
  3661                           ;ui.c: 589: nixie_z[2][0]|=2;
  3662  000D70  8205               	bsf	_nixie_z+4,1,c	;volatile
  3663                           
  3664                           ;ui.c: 590: nixie_z[3][0]|=1;
  3665  000D72  8007               	bsf	_nixie_z+6,0,c	;volatile
  3666                           
  3667                           ;ui.c: 591: nixie_z[3][0]|=64;
  3668  000D74  8C07               	bsf	_nixie_z+6,6,c	;volatile
  3669                           
  3670                           ;ui.c: 592: nixie_z[3][0]|=16;
  3671  000D76  8807               	bsf	_nixie_z+6,4,c	;volatile
  3672                           
  3673                           ;ui.c: 593: break;
  3674  000D78  D034               	goto	l16359
  3675  000D7A                     l16345:
  3676                           
  3677                           ;ui.c: 595: nixie_z[2][0]|=8;
  3678  000D7A  8605               	bsf	_nixie_z+4,3,c	;volatile
  3679                           
  3680                           ;ui.c: 596: nixie_z[2][0]|=64;
  3681  000D7C  8C05               	bsf	_nixie_z+4,6,c	;volatile
  3682                           
  3683                           ;ui.c: 597: nixie_z[2][0]|=1;
  3684  000D7E  8005               	bsf	_nixie_z+4,0,c	;volatile
  3685                           
  3686                           ;ui.c: 598: nixie_z[3][0]|=2;
  3687  000D80  8207               	bsf	_nixie_z+6,1,c	;volatile
  3688                           
  3689                           ;ui.c: 599: nixie_z[3][0]|=128;
  3690  000D82  8E07               	bsf	_nixie_z+6,7,c	;volatile
  3691                           
  3692                           ;ui.c: 600: nixie_z[3][0]|=4;
  3693  000D84  8407               	bsf	_nixie_z+6,2,c	;volatile
  3694                           
  3695                           ;ui.c: 601: break;
  3696  000D86  D02D               	goto	l16359
  3697  000D88                     l16349:
  3698  000D88  504B               	movf	ui_ts_off@task_,w,c
  3699  000D8A  ECF4  F009         	call	PL2	;call to abstracted procedure
  3700  000D8E  50DF               	movf	indf2,w,c
  3701                           
  3702                           ; Switch size 1, requested type "space"
  3703                           ; Number of cases is 12, Range of values is 0 to 11
  3704                           ; switch strategies available:
  3705                           ; Name         Instructions Cycles
  3706                           ; simple_byte           37    19 (average)
  3707                           ;	Chosen strategy is simple_byte
  3708  000D90  E0BA               	bz	l16323
  3709  000D92  0A01               	xorlw	1	; case 1
  3710  000D94  E0BD               	bz	l16325
  3711  000D96  0A03               	xorlw	3	; case 2
  3712  000D98  E0C0               	bz	l16327
  3713  000D9A  0A01               	xorlw	1	; case 3
  3714  000D9C  E0C3               	bz	l16329
  3715  000D9E  0A07               	xorlw	7	; case 4
  3716  000DA0  E0C7               	bz	l16331
  3717  000DA2  0A01               	xorlw	1	; case 5
  3718  000DA4  E0CB               	bz	l16333
  3719  000DA6  0A03               	xorlw	3	; case 6
  3720  000DA8  E0CF               	bz	l16335
  3721  000DAA  0A01               	xorlw	1	; case 7
  3722  000DAC  E0D2               	bz	l16337
  3723  000DAE  0A0F               	xorlw	15	; case 8
  3724  000DB0  E0D5               	bz	l16339
  3725  000DB2  0A01               	xorlw	1	; case 9
  3726  000DB4  E0D8               	bz	l16341
  3727  000DB6  0A03               	xorlw	3	; case 10
  3728  000DB8  E0D9               	bz	l16343
  3729  000DBA  0A01               	xorlw	1	; case 11
  3730  000DBC  E0DE               	bz	l16345
  3731  000DBE  D011               	goto	l16359
  3732  000DC0                     l16351:
  3733                           
  3734                           ;ui.c: 608: else if(task_->sucCnt<=21)
  3735  000DC0  504B               	movf	ui_ts_off@task_,w,c
  3736  000DC2  ECF4  F009         	call	PL2	;call to abstracted procedure
  3737  000DC6  0E16               	movlw	22
  3738  000DC8  60DF               	cpfslt	indf2,c
  3739  000DCA  D002               	goto	l16355
  3740                           
  3741                           ;ui.c: 609: {
  3742                           ;ui.c: 610: ui_ld.n++;
  3743  000DCC  2A6F               	incf	_ui_ld+1,f,c
  3744                           
  3745                           ;ui.c: 611: }
  3746  000DCE  D009               	goto	l16359
  3747  000DD0                     l16355:
  3748                           
  3749                           ;ui.c: 612: else
  3750                           ;ui.c: 613: {
  3751                           ;ui.c: 614: if(task_->sucCnt==42)
  3752  000DD0  504B               	movf	ui_ts_off@task_,w,c
  3753  000DD2  ECF4  F009         	call	PL2	;call to abstracted procedure
  3754  000DD6  0E2A               	movlw	42
  3755  000DD8  18DE               	xorwf	postinc2,w,c
  3756  000DDA  E103               	bnz	l16359
  3757                           
  3758                           ;ui.c: 615: {
  3759                           ;ui.c: 616: ldz(0);
  3760  000DDC  0E00               	movlw	0
  3761  000DDE  EC45  F00E         	call	_ldz
  3762  000DE2                     l16359:
  3763                           
  3764                           ;ui.c: 617: }
  3765                           ;ui.c: 618: }
  3766                           ;ui.c: 619: if(task_->sucCnt==42)
  3767  000DE2  504B               	movf	ui_ts_off@task_,w,c
  3768  000DE4  ECF4  F009         	call	PL2	;call to abstracted procedure
  3769  000DE8  0E2A               	movlw	42
  3770  000DEA  18DE               	xorwf	postinc2,w,c
  3771  000DEC  B4D8               	btfsc	status,2,c
  3772                           
  3773                           ;ui.c: 620: {
  3774                           ;ui.c: 621: if(PINA5&&(PINA1==0))
  3775  000DEE  AA86               	btfss	3974,5,c	;volatile
  3776  000DF0  0012               	return	
  3777  000DF2  B286               	btfsc	3974,1,c	;volatile
  3778  000DF4  0012               	return	
  3779                           
  3780                           ;ui.c: 622: {
  3781                           ;ui.c: 623: add_task_id(1,500,0,ui_id);
  3782  000DF6  ECF9  F009         	call	PL4	;call to abstracted procedure
  3783  000DFA  EF53  F00A         	goto	_add_task_id
  3784  000DFE                     __end_of_ui_ts_off:
  3785                           	opt stack 0
  3786  000DFE                     PL18:
  3787                           	opt stack 3
  3788  000DFE  6E15               	movwf	_ui+2,c	;volatile
  3789  000E00  5015               	movf	_ui+2,w,c	;volatile
  3790  000E02  0DF6               	mullw	246
  3791  000E04  50F3               	movf	prodl,w,c
  3792  000E06  247B               	addwf	_pw,w,c
  3793  000E08  6E16               	movwf	_ui+3,c	;volatile
  3794  000E0A  C071  F01B         	movff	_bat,_ui+8	;volatile
  3795  000E0E  0012               	return	
  3796  000E10                     __end_ofPL18:
  3797                           	opt stack 0
  3798                           tblptru	equ	0xFF8
  3799                           tblptrh	equ	0xFF7
  3800                           tblptrl	equ	0xFF6
  3801                           tablat	equ	0xFF5
  3802                           prodl	equ	0xFF3
  3803                           intcon	equ	0xFF2
  3804                           intcon2	equ	0xFF1
  3805                           intcon3	equ	0xFF0
  3806                           postinc0	equ	0xFEE
  3807                           wreg	equ	0xFE8
  3808                           postdec1	equ	0xFE5
  3809                           fsr1l	equ	0xFE1
  3810                           indf2	equ	0xFDF
  3811                           postinc2	equ	0xFDE
  3812                           postdec2	equ	0xFDD
  3813                           fsr2h	equ	0xFDA
  3814                           fsr2l	equ	0xFD9
  3815                           status	equ	0xFD8
  3816                           
  3817 ;; *************** function _ui_timout *****************
  3818 ;; Defined at:
  3819 ;;		line 629 in file ".\src\ui.c"
  3820 ;; Parameters:    Size  Location     Type
  3821 ;;  task_           1    6[COMRAM] PTR struct task
  3822 ;;		 -> task_list(72), 
  3823 ;; Auto vars:     Size  Location     Type
  3824 ;;		None
  3825 ;; Return value:  Size  Location     Type
  3826 ;;                  1    wreg      void 
  3827 ;; Registers used:
  3828 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3829 ;; Tracked objects:
  3830 ;;		On entry : 3F/0
  3831 ;;		On exit  : 0/0
  3832 ;;		Unchanged: 0/0
  3833 ;; Data sizes:     COMRAM   BANK0
  3834 ;;      Params:         1       0
  3835 ;;      Locals:         0       0
  3836 ;;      Temps:          0       0
  3837 ;;      Totals:         1       0
  3838 ;;Total ram usage:        1 bytes
  3839 ;; Hardware stack levels used:    1
  3840 ;; Hardware stack levels required when called:    3
  3841 ;; This function calls:
  3842 ;;		___lbdiv
  3843 ;;		_ldz
  3844 ;;		_new_nixie
  3845 ;; This function is called by:
  3846 ;;		_find_task
  3847 ;; This function uses a non-reentrant model
  3848 ;;
  3849                           
  3850                           	psect	text5
  3851  001AD0                     __ptext5:
  3852                           	opt stack 0
  3853  001AD0                     _ui_timout:
  3854                           	opt stack 3
  3855                           
  3856                           ; BSR set to: 0
  3857                           ;ui.c: 631: if(task_->sucCnt&1)
  3858                           
  3859                           ;incstack = 0
  3860  001AD0  5043               	movf	ui_timout@task_,w,c
  3861  001AD2  ECF4  F009         	call	PL2	;call to abstracted procedure
  3862  001AD6  A0DF               	btfss	indf2,0,c
  3863  001AD8  D005               	goto	l16371
  3864                           
  3865                           ; BSR set to: 0
  3866                           ;ui.c: 632: {
  3867                           ;ui.c: 633: ldz(0);
  3868  001ADA  0E00               	movlw	0
  3869  001ADC  EC45  F00E         	call	_ldz
  3870                           
  3871                           ;ui.c: 634: }
  3872  001AE0  EFA9  F007         	goto	_new_nixie
  3873  001AE4                     l16371:
  3874                           
  3875                           ; BSR set to: 0
  3876                           ;ui.c: 635: else
  3877                           ;ui.c: 636: {
  3878                           ;ui.c: 637: ui.w1 =1;
  3879  001AE4  0E01               	movlw	1
  3880  001AE6  6E13               	movwf	_ui,c	;volatile
  3881                           
  3882                           ;ui.c: 638: ui.w2 =1;
  3883  001AE8  6E14               	movwf	_ui+1,c	;volatile
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;ui.c: 640: ui.ou_d =0;
  3887                           
  3888                           ;ui.c: 641: ui.wa =1;
  3889                           
  3890                           ; BSR set to: 0
  3891                           ;ui.c: 642: ui.ts =0;
  3892                           
  3893                           ; BSR set to: 0
  3894                           ;ui.c: 643: ui.yd =yd;
  3895                           
  3896                           ;ui.c: 645: ui.dian_s =1;
  3897  001AEA  D80B               	call	PL38	;call to abstracted procedure
  3898                           
  3899                           ; BSR set to: 0
  3900                           ;ui.c: 646: ldz(10);
  3901  001AEC  0E0A               	movlw	10
  3902  001AEE  EC45  F00E         	call	_ldz
  3903                           
  3904                           ;ui.c: 648: ui.num1 =pw/10;
  3905  001AF2  ECB8  F008         	call	PL56	;call to abstracted procedure
  3906  001AF6  ECA7  F00D         	call	___lbdiv
  3907                           
  3908                           ;ui.c: 649: ui.num2 =pw-ui.num1*10;
  3909                           
  3910                           ;ui.c: 650: ui.dian =bat.dian;
  3911  001AFA  ECFF  F006         	call	PL18	;call to abstracted procedure
  3912                           
  3913                           ;ui.c: 652: }
  3914                           ;ui.c: 653: new_nixie();
  3915  001AFE  EFA9  F007         	goto	_new_nixie	;wreg free
  3916  001B02                     __end_of_ui_timout:
  3917                           	opt stack 0
  3918  001B02                     PL38:
  3919                           	opt stack 3
  3920  001B02  6A17               	clrf	_ui+4,c	;volatile
  3921  001B04  0E01               	movlw	1
  3922  001B06  6E18               	movwf	_ui+5,c	;volatile
  3923  001B08  6A19               	clrf	_ui+6,c	;volatile
  3924  001B0A  C038  F01A         	movff	_yd,_ui+7	;volatile
  3925  001B0E  0E01               	movlw	1
  3926  001B10  6E1C               	movwf	_ui+9,c	;volatile
  3927  001B12  0C01               	retlw	1
  3928  001B14                     __end_ofPL38:
  3929                           	opt stack 0
  3930                           tblptru	equ	0xFF8
  3931                           tblptrh	equ	0xFF7
  3932                           tblptrl	equ	0xFF6
  3933                           tablat	equ	0xFF5
  3934                           prodl	equ	0xFF3
  3935                           intcon	equ	0xFF2
  3936                           intcon2	equ	0xFF1
  3937                           intcon3	equ	0xFF0
  3938                           postinc0	equ	0xFEE
  3939                           wreg	equ	0xFE8
  3940                           postdec1	equ	0xFE5
  3941                           fsr1l	equ	0xFE1
  3942                           indf2	equ	0xFDF
  3943                           postinc2	equ	0xFDE
  3944                           postdec2	equ	0xFDD
  3945                           fsr2h	equ	0xFDA
  3946                           fsr2l	equ	0xFD9
  3947                           status	equ	0xFD8
  3948                           
  3949 ;; *************** function _ui_smoing *****************
  3950 ;; Defined at:
  3951 ;;		line 324 in file ".\src\ui.c"
  3952 ;; Parameters:    Size  Location     Type
  3953 ;;  task_           1    6[COMRAM] PTR struct task
  3954 ;;		 -> task_list(72), 
  3955 ;; Auto vars:     Size  Location     Type
  3956 ;;		None
  3957 ;; Return value:  Size  Location     Type
  3958 ;;                  1    wreg      void 
  3959 ;; Registers used:
  3960 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3961 ;; Tracked objects:
  3962 ;;		On entry : 3F/0
  3963 ;;		On exit  : 0/0
  3964 ;;		Unchanged: 0/0
  3965 ;; Data sizes:     COMRAM   BANK0
  3966 ;;      Params:         1       0
  3967 ;;      Locals:         0       0
  3968 ;;      Temps:          1       0
  3969 ;;      Totals:         2       0
  3970 ;;Total ram usage:        2 bytes
  3971 ;; Hardware stack levels used:    1
  3972 ;; Hardware stack levels required when called:    3
  3973 ;; This function calls:
  3974 ;;		_new_nixie
  3975 ;; This function is called by:
  3976 ;;		_find_task
  3977 ;; This function uses a non-reentrant model
  3978 ;;
  3979                           
  3980                           	psect	text6
  3981  001832                     __ptext6:
  3982                           	opt stack 0
  3983  001832                     _ui_smoing:
  3984                           	opt stack 3
  3985                           
  3986                           ; BSR set to: 0
  3987                           ;ui.c: 326: if(task_->sucCnt==0)
  3988                           
  3989                           ;incstack = 0
  3990  001832  5043               	movf	ui_smoing@task_,w,c
  3991  001834  ECF4  F009         	call	PL2	;call to abstracted procedure
  3992  001838  50DF               	movf	indf2,w,c
  3993  00183A  E10E               	bnz	l16157
  3994                           
  3995                           ; BSR set to: 0
  3996                           ;ui.c: 327: {
  3997                           ;ui.c: 328: ui.w1 =1;
  3998  00183C  0E01               	movlw	1
  3999  00183E  6E13               	movwf	_ui,c	;volatile
  4000                           
  4001                           ;ui.c: 329: ui.w2 =1;
  4002  001840  6E14               	movwf	_ui+1,c	;volatile
  4003                           
  4004                           ;ui.c: 330: ui.num1 =99;
  4005  001842  0E63               	movlw	99
  4006  001844  6E15               	movwf	_ui+2,c	;volatile
  4007                           
  4008                           ;ui.c: 331: ui.num2 =99;
  4009  001846  6E16               	movwf	_ui+3,c	;volatile
  4010                           
  4011                           ; BSR set to: 0
  4012                           ;ui.c: 332: ui.ou_d =0;
  4013  001848  6A17               	clrf	_ui+4,c	;volatile
  4014                           
  4015                           ; BSR set to: 0
  4016                           ;ui.c: 333: ui.wa =0;
  4017  00184A  6A18               	clrf	_ui+5,c	;volatile
  4018                           
  4019                           ; BSR set to: 0
  4020                           ;ui.c: 334: ui.ts =0;
  4021  00184C  6A19               	clrf	_ui+6,c	;volatile
  4022                           
  4023                           ; BSR set to: 0
  4024                           ;ui.c: 335: ui.yd =yd;
  4025  00184E  C038  F01A         	movff	_yd,_ui+7	;volatile
  4026                           
  4027                           ; BSR set to: 0
  4028                           ;ui.c: 336: ui.dian_s =0;
  4029  001852  6A1C               	clrf	_ui+9,c	;volatile
  4030                           
  4031                           ;ui.c: 337: ui.dian =5;
  4032  001854  0E05               	movlw	5
  4033  001856  6E1B               	movwf	_ui+8,c	;volatile
  4034  001858                     l16157:
  4035                           
  4036                           ; BSR set to: 0
  4037                           ;ui.c: 338: }
  4038                           ;ui.c: 339: if(task_->sucCnt<=9)
  4039  001858  5043               	movf	ui_smoing@task_,w,c
  4040  00185A  ECF4  F009         	call	PL2	;call to abstracted procedure
  4041  00185E  0E0A               	movlw	10
  4042  001860  60DF               	cpfslt	indf2,c
  4043  001862  D007               	goto	l16161
  4044                           
  4045                           ; BSR set to: 0
  4046                           ;ui.c: 340: {
  4047                           ;ui.c: 341: ui_ld.w=task_->sucCnt+1;
  4048  001864  5043               	movf	ui_smoing@task_,w,c
  4049  001866  ECF4  F009         	call	PL2	;call to abstracted procedure
  4050  00186A  50DF               	movf	indf2,w,c
  4051  00186C  6E44               	movwf	??_ui_smoing& (0+255),c
  4052  00186E  2844               	incf	??_ui_smoing,w,c
  4053  001870  D007               	goto	L4
  4054  001872                     l16161:
  4055                           
  4056                           ; BSR set to: 0
  4057                           ;ui.c: 343: else
  4058                           ;ui.c: 344: {
  4059                           ;ui.c: 345: ui_ld.w=19-task_->sucCnt;
  4060  001872  5043               	movf	ui_smoing@task_,w,c
  4061  001874  ECF4  F009         	call	PL2	;call to abstracted procedure
  4062  001878  50DF               	movf	indf2,w,c
  4063  00187A  6E44               	movwf	??_ui_smoing& (0+255),c
  4064  00187C  5044               	movf	??_ui_smoing,w,c
  4065  00187E  0813               	sublw	19
  4066  001880                     L4:
  4067  001880  6E6E               	movwf	_ui_ld,c
  4068                           
  4069                           ; BSR set to: 0
  4070                           ;ui.c: 347: }
  4071                           ;ui.c: 348: new_nixie();
  4072  001882  ECA9  F007         	call	_new_nixie	;wreg free
  4073                           
  4074                           ;ui.c: 349: task_->sucCnt++;
  4075  001886  5043               	movf	ui_smoing@task_,w,c
  4076  001888  ECF4  F009         	call	PL2	;call to abstracted procedure
  4077  00188C  2ADF               	incf	indf2,f,c
  4078                           
  4079                           ;ui.c: 350: if(task_->sucCnt>=20)
  4080  00188E  5043               	movf	ui_smoing@task_,w,c
  4081  001890  ECF4  F009         	call	PL2	;call to abstracted procedure
  4082  001894  0E13               	movlw	19
  4083  001896  64DF               	cpfsgt	indf2,c
  4084  001898  0C13               	retlw	19
  4085                           
  4086                           ;ui.c: 351: {
  4087                           ;ui.c: 352: task_->sucCnt=0;
  4088  00189A  5043               	movf	ui_smoing@task_,w,c
  4089  00189C  ECF4  F009         	call	PL2	;call to abstracted procedure
  4090  0018A0  6ADF               	clrf	indf2,c
  4091  0018A2  0C00               	retlw	0	;funcret
  4092  0018A4                     __end_of_ui_smoing:
  4093                           	opt stack 0
  4094                           tblptru	equ	0xFF8
  4095                           tblptrh	equ	0xFF7
  4096                           tblptrl	equ	0xFF6
  4097                           tablat	equ	0xFF5
  4098                           prodl	equ	0xFF3
  4099                           intcon	equ	0xFF2
  4100                           intcon2	equ	0xFF1
  4101                           intcon3	equ	0xFF0
  4102                           postinc0	equ	0xFEE
  4103                           wreg	equ	0xFE8
  4104                           postdec1	equ	0xFE5
  4105                           fsr1l	equ	0xFE1
  4106                           indf2	equ	0xFDF
  4107                           postinc2	equ	0xFDE
  4108                           postdec2	equ	0xFDD
  4109                           fsr2h	equ	0xFDA
  4110                           fsr2l	equ	0xFD9
  4111                           status	equ	0xFD8
  4112                           
  4113 ;; *************** function _ui_smoend_dl_getup *****************
  4114 ;; Defined at:
  4115 ;;		line 361 in file ".\src\ui.c"
  4116 ;; Parameters:    Size  Location     Type
  4117 ;;  task_           1   14[COMRAM] PTR struct task
  4118 ;;		 -> task_list(72), 
  4119 ;; Auto vars:     Size  Location     Type
  4120 ;;		None
  4121 ;; Return value:  Size  Location     Type
  4122 ;;                  1    wreg      void 
  4123 ;; Registers used:
  4124 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4125 ;; Tracked objects:
  4126 ;;		On entry : 3F/0
  4127 ;;		On exit  : 0/0
  4128 ;;		Unchanged: 0/0
  4129 ;; Data sizes:     COMRAM   BANK0
  4130 ;;      Params:         1       0
  4131 ;;      Locals:         0       0
  4132 ;;      Temps:          1       0
  4133 ;;      Totals:         2       0
  4134 ;;Total ram usage:        2 bytes
  4135 ;; Hardware stack levels used:    1
  4136 ;; Hardware stack levels required when called:    3
  4137 ;; This function calls:
  4138 ;;		___lbdiv
  4139 ;;		_add_task_id
  4140 ;;		_ldz
  4141 ;;		_new_nixie
  4142 ;; This function is called by:
  4143 ;;		_find_task
  4144 ;; This function uses a non-reentrant model
  4145 ;;
  4146                           
  4147                           	psect	text7
  4148  001744                     __ptext7:
  4149                           	opt stack 0
  4150  001744                     _ui_smoend_dl_getup:
  4151                           	opt stack 3
  4152                           
  4153                           ; BSR set to: 0
  4154                           ;ui.c: 363: if(task_->sucCnt<=62)
  4155                           
  4156                           ;incstack = 0
  4157  001744  504B               	movf	ui_smoend_dl_getup@task_,w,c
  4158  001746  ECF4  F009         	call	PL2	;call to abstracted procedure
  4159  00174A  0E3F               	movlw	63
  4160  00174C  60DF               	cpfslt	indf2,c
  4161  00174E  D012               	goto	l16185
  4162                           
  4163                           ; BSR set to: 0
  4164                           ;ui.c: 364: {
  4165                           ;ui.c: 365: if(task_->sucCnt==0)
  4166  001750  504B               	movf	ui_smoend_dl_getup@task_,w,c
  4167  001752  ECF4  F009         	call	PL2	;call to abstracted procedure
  4168  001756  50DF               	movf	indf2,w,c
  4169  001758  E116               	bnz	l16187
  4170                           
  4171                           ; BSR set to: 0
  4172                           ;ui.c: 366: {
  4173                           ;ui.c: 367: ui.w1 =1;
  4174  00175A  0E01               	movlw	1
  4175  00175C  6E13               	movwf	_ui,c	;volatile
  4176                           
  4177                           ;ui.c: 368: ui.w2 =1;
  4178  00175E  6E14               	movwf	_ui+1,c	;volatile
  4179                           
  4180                           ; BSR set to: 0
  4181                           ;ui.c: 370: ui.ou_d =0;
  4182  001760  6A17               	clrf	_ui+4,c	;volatile
  4183                           
  4184                           ;ui.c: 371: ui.wa =1;
  4185  001762  0E01               	movlw	1
  4186  001764  6E18               	movwf	_ui+5,c	;volatile
  4187                           
  4188                           ; BSR set to: 0
  4189                           ;ui.c: 372: ui.ts =ts;
  4190                           
  4191                           ; BSR set to: 0
  4192                           ;ui.c: 373: ui.yd =yd;
  4193  001766  ECB3  F008         	call	PL36	;call to abstracted procedure
  4194                           
  4195                           ;ui.c: 375: ui.dian_s =1;
  4196  00176A  6E1C               	movwf	_ui+9,c	;volatile
  4197                           
  4198                           ; BSR set to: 0
  4199                           ;ui.c: 376: ldz(10);
  4200  00176C  0E0A               	movlw	10
  4201  00176E  EC45  F00E         	call	_ldz
  4202  001772  D009               	goto	l16187
  4203  001774                     l16185:
  4204                           
  4205                           ; BSR set to: 0
  4206                           ;ui.c: 380: else
  4207                           ;ui.c: 381: {
  4208                           ;ui.c: 382: ldz(72-task_->sucCnt);
  4209  001774  504B               	movf	ui_smoend_dl_getup@task_,w,c
  4210  001776  ECF4  F009         	call	PL2	;call to abstracted procedure
  4211  00177A  50DF               	movf	indf2,w,c
  4212  00177C  6E4C               	movwf	??_ui_smoend_dl_getup& (0+255),c
  4213  00177E  504C               	movf	??_ui_smoend_dl_getup,w,c
  4214  001780  0848               	sublw	72
  4215  001782  EC45  F00E         	call	_ldz
  4216  001786                     l16187:
  4217                           
  4218                           ;ui.c: 383: }
  4219                           ;ui.c: 384: if((task_->sucCnt&1)==0)
  4220  001786  504B               	movf	ui_smoend_dl_getup@task_,w,c
  4221  001788  ECF4  F009         	call	PL2	;call to abstracted procedure
  4222  00178C  B0DF               	btfsc	indf2,0,c
  4223  00178E  D006               	goto	l16195
  4224                           
  4225                           ;ui.c: 385: {
  4226                           ;ui.c: 386: ui.num1 =pw/10;
  4227  001790  ECB8  F008         	call	PL56	;call to abstracted procedure
  4228  001794  ECA7  F00D         	call	___lbdiv
  4229                           
  4230                           ;ui.c: 387: ui.num2 =pw-ui.num1*10;
  4231                           
  4232                           ;ui.c: 388: ui.dian =bat.dian;
  4233  001798  ECFF  F006         	call	PL18	;call to abstracted procedure
  4234  00179C                     l16195:
  4235                           
  4236                           ;ui.c: 389: }
  4237                           ;ui.c: 390: new_nixie();
  4238  00179C  ECA9  F007         	call	_new_nixie	;wreg free
  4239                           
  4240                           ;ui.c: 391: if(task_->sucCnt==72)
  4241  0017A0  504B               	movf	ui_smoend_dl_getup@task_,w,c
  4242  0017A2  ECF4  F009         	call	PL2	;call to abstracted procedure
  4243  0017A6  0E48               	movlw	72
  4244  0017A8  18DE               	xorwf	postinc2,w,c
  4245  0017AA  B4D8               	btfsc	status,2,c
  4246                           
  4247                           ;ui.c: 392: {
  4248                           ;ui.c: 393: if(PINA5&&(PINA1==0))
  4249  0017AC  AA86               	btfss	3974,5,c	;volatile
  4250  0017AE  0012               	return	
  4251  0017B0  B286               	btfsc	3974,1,c	;volatile
  4252  0017B2  0012               	return	
  4253                           
  4254                           ;ui.c: 394: {
  4255                           ;ui.c: 395: add_task_id(1,500,0,ui_id);
  4256  0017B4  ECF9  F009         	call	PL4	;call to abstracted procedure
  4257  0017B8  EF53  F00A         	goto	_add_task_id
  4258  0017BC                     __end_of_ui_smoend_dl_getup:
  4259                           	opt stack 0
  4260                           tblptru	equ	0xFF8
  4261                           tblptrh	equ	0xFF7
  4262                           tblptrl	equ	0xFF6
  4263                           tablat	equ	0xFF5
  4264                           prodl	equ	0xFF3
  4265                           intcon	equ	0xFF2
  4266                           intcon2	equ	0xFF1
  4267                           intcon3	equ	0xFF0
  4268                           postinc0	equ	0xFEE
  4269                           wreg	equ	0xFE8
  4270                           postdec1	equ	0xFE5
  4271                           fsr1l	equ	0xFE1
  4272                           indf2	equ	0xFDF
  4273                           postinc2	equ	0xFDE
  4274                           postdec2	equ	0xFDD
  4275                           fsr2h	equ	0xFDA
  4276                           fsr2l	equ	0xFD9
  4277                           status	equ	0xFD8
  4278                           
  4279 ;; *************** function _ui_kl *****************
  4280 ;; Defined at:
  4281 ;;		line 401 in file ".\src\ui.c"
  4282 ;; Parameters:    Size  Location     Type
  4283 ;;  task_           1    6[COMRAM] PTR struct task
  4284 ;;		 -> task_list(72), 
  4285 ;; Auto vars:     Size  Location     Type
  4286 ;;		None
  4287 ;; Return value:  Size  Location     Type
  4288 ;;                  1    wreg      void 
  4289 ;; Registers used:
  4290 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4291 ;; Tracked objects:
  4292 ;;		On entry : 3F/0
  4293 ;;		On exit  : 0/0
  4294 ;;		Unchanged: 0/0
  4295 ;; Data sizes:     COMRAM   BANK0
  4296 ;;      Params:         1       0
  4297 ;;      Locals:         0       0
  4298 ;;      Temps:          1       0
  4299 ;;      Totals:         2       0
  4300 ;;Total ram usage:        2 bytes
  4301 ;; Hardware stack levels used:    1
  4302 ;; Hardware stack levels required when called:    3
  4303 ;; This function calls:
  4304 ;;		_ldz
  4305 ;;		_new_nixie
  4306 ;; This function is called by:
  4307 ;;		_find_task
  4308 ;; This function uses a non-reentrant model
  4309 ;;
  4310                           
  4311                           	psect	text8
  4312  001A2C                     __ptext8:
  4313                           	opt stack 0
  4314  001A2C                     _ui_kl:
  4315                           	opt stack 3
  4316                           
  4317                           ; BSR set to: 0
  4318                           ;ui.c: 403: if(task_->sucCnt&1)
  4319                           
  4320                           ;incstack = 0
  4321  001A2C  5043               	movf	ui_kl@task_,w,c
  4322  001A2E  ECF4  F009         	call	PL2	;call to abstracted procedure
  4323  001A32  A0DF               	btfss	indf2,0,c
  4324  001A34  D008               	goto	l16227
  4325                           
  4326                           ; BSR set to: 0
  4327                           ;ui.c: 404: {
  4328                           ;ui.c: 405: ui.w1 =1;
  4329                           
  4330                           ; BSR set to: 0
  4331                           ;ui.c: 406: ui.w2 =0;
  4332                           
  4333                           ; BSR set to: 0
  4334                           ;ui.c: 408: ui.ou_d =0;
  4335                           
  4336                           ; BSR set to: 0
  4337                           ;ui.c: 409: ui.wa =0;
  4338                           
  4339                           ; BSR set to: 0
  4340                           ;ui.c: 410: ui.ts =0;
  4341  001A36  D81B               	call	PL46	;call to abstracted procedure
  4342                           
  4343                           ; BSR set to: 0
  4344                           ;ui.c: 411: ui.yd =0;
  4345  001A38  6A1A               	clrf	_ui+7,c	;volatile
  4346                           
  4347                           ; BSR set to: 0
  4348                           ;ui.c: 412: ui.dian_s =0;
  4349                           
  4350                           ;ui.c: 413: ui.dian =5;
  4351                           
  4352                           ; BSR set to: 0
  4353                           ;ui.c: 414: ldz(10);
  4354  001A3A  D820               	call	PL74	;call to abstracted procedure
  4355  001A3C  EC45  F00E         	call	_ldz
  4356  001A40                     l16223:
  4357                           
  4358                           ;ui.c: 416: ui.num1 =99;
  4359                           
  4360                           ;ui.c: 417: ui.num2 =99;
  4361  001A40  EC9E  F00B         	call	PL84	;call to abstracted procedure
  4362                           
  4363                           ;ui.c: 418: }
  4364  001A44  D007               	goto	l16245
  4365  001A46                     l16227:
  4366                           
  4367                           ; BSR set to: 0
  4368                           ;ui.c: 419: else
  4369                           ;ui.c: 420: {
  4370                           ;ui.c: 421: ui.w1 =1;
  4371                           
  4372                           ; BSR set to: 0
  4373                           ;ui.c: 422: ui.w2 =0;
  4374                           
  4375                           ; BSR set to: 0
  4376                           ;ui.c: 424: ui.ou_d =0;
  4377                           
  4378                           ; BSR set to: 0
  4379                           ;ui.c: 425: ui.wa =0;
  4380                           
  4381                           ; BSR set to: 0
  4382                           ;ui.c: 426: ui.ts =0;
  4383  001A46  D813               	call	PL46	;call to abstracted procedure
  4384                           
  4385                           ;ui.c: 427: ui.yd =1;
  4386  001A48  0E01               	movlw	1
  4387  001A4A  6E1A               	movwf	_ui+7,c	;volatile
  4388                           
  4389                           ; BSR set to: 0
  4390                           ;ui.c: 428: ui.dian_s =0;
  4391                           
  4392                           ;ui.c: 429: ui.dian =5;
  4393                           
  4394                           ; BSR set to: 0
  4395                           ;ui.c: 430: ldz(10);
  4396  001A4C  D817               	call	PL74	;call to abstracted procedure
  4397  001A4E  EC45  F00E         	call	_ldz
  4398  001A52  D7F6               	goto	l16223
  4399  001A54                     l16245:
  4400                           
  4401                           ;ui.c: 434: }
  4402                           ;ui.c: 435: if(task_->sucCnt==9)
  4403  001A54  5043               	movf	ui_kl@task_,w,c
  4404  001A56  ECF4  F009         	call	PL2	;call to abstracted procedure
  4405  001A5A  0E09               	movlw	9
  4406  001A5C  18DE               	xorwf	postinc2,w,c
  4407  001A5E  E002 EFA9  F007    	bnz	_new_nixie
  4408                           
  4409                           ;ui.c: 436: {
  4410                           ;ui.c: 437: ldz(0);
  4411  001A64  0E00               	movlw	0
  4412  001A66  EC45  F00E         	call	_ldz
  4413                           
  4414                           ;ui.c: 438: }
  4415                           ;ui.c: 439: new_nixie();
  4416  001A6A  EFA9  F007         	goto	_new_nixie	;wreg free
  4417  001A6E                     __end_of_ui_kl:
  4418                           	opt stack 0
  4419  001A6E                     PL46:
  4420                           	opt stack 3
  4421  001A6E  0E01               	movlw	1
  4422  001A70  6E13               	movwf	_ui,c	;volatile
  4423  001A72  6A14               	clrf	_ui+1,c	;volatile
  4424  001A74  6A17               	clrf	_ui+4,c	;volatile
  4425  001A76  6A18               	clrf	_ui+5,c	;volatile
  4426  001A78  6A19               	clrf	_ui+6,c	;volatile
  4427  001A7A  0012               	return	
  4428  001A7C                     __end_ofPL46:
  4429                           	opt stack 0
  4430  001A7C                     PL74:
  4431                           	opt stack 3
  4432  001A7C  6A1C               	clrf	_ui+9,c	;volatile
  4433  001A7E  0E05               	movlw	5
  4434  001A80  6E1B               	movwf	_ui+8,c	;volatile
  4435  001A82  0C0A               	retlw	10
  4436  001A84                     __end_ofPL74:
  4437                           	opt stack 0
  4438                           tblptru	equ	0xFF8
  4439                           tblptrh	equ	0xFF7
  4440                           tblptrl	equ	0xFF6
  4441                           tablat	equ	0xFF5
  4442                           prodl	equ	0xFF3
  4443                           intcon	equ	0xFF2
  4444                           intcon2	equ	0xFF1
  4445                           intcon3	equ	0xFF0
  4446                           postinc0	equ	0xFEE
  4447                           wreg	equ	0xFE8
  4448                           postdec1	equ	0xFE5
  4449                           fsr1l	equ	0xFE1
  4450                           indf2	equ	0xFDF
  4451                           postinc2	equ	0xFDE
  4452                           postdec2	equ	0xFDD
  4453                           fsr2h	equ	0xFDA
  4454                           fsr2l	equ	0xFD9
  4455                           status	equ	0xFD8
  4456                           
  4457 ;; *************** function _ui_chrgfull *****************
  4458 ;; Defined at:
  4459 ;;		line 298 in file ".\src\ui.c"
  4460 ;; Parameters:    Size  Location     Type
  4461 ;;  task_           1    6[COMRAM] PTR struct task
  4462 ;;		 -> task_list(72), 
  4463 ;; Auto vars:     Size  Location     Type
  4464 ;;		None
  4465 ;; Return value:  Size  Location     Type
  4466 ;;                  1    wreg      void 
  4467 ;; Registers used:
  4468 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4469 ;; Tracked objects:
  4470 ;;		On entry : 3F/0
  4471 ;;		On exit  : 0/0
  4472 ;;		Unchanged: 0/0
  4473 ;; Data sizes:     COMRAM   BANK0
  4474 ;;      Params:         1       0
  4475 ;;      Locals:         0       0
  4476 ;;      Temps:          1       0
  4477 ;;      Totals:         2       0
  4478 ;;Total ram usage:        2 bytes
  4479 ;; Hardware stack levels used:    1
  4480 ;; Hardware stack levels required when called:    3
  4481 ;; This function calls:
  4482 ;;		_ldz
  4483 ;;		_new_nixie
  4484 ;; This function is called by:
  4485 ;;		_find_task
  4486 ;; This function uses a non-reentrant model
  4487 ;;
  4488                           
  4489                           	psect	text9
  4490  001B14                     __ptext9:
  4491                           	opt stack 0
  4492  001B14                     _ui_chrgfull:
  4493                           	opt stack 3
  4494                           
  4495                           ; BSR set to: 0
  4496                           ;ui.c: 300: if(task_->sucCnt==0)
  4497                           
  4498                           ;incstack = 0
  4499  001B14  5043               	movf	ui_chrgfull@task_,w,c
  4500  001B16  ECF4  F009         	call	PL2	;call to abstracted procedure
  4501  001B1A  50DF               	movf	indf2,w,c
  4502  001B1C  E10B               	bnz	l16137
  4503                           
  4504                           ; BSR set to: 0
  4505                           ;ui.c: 301: {
  4506                           ;ui.c: 302: ui.w1 =0;
  4507                           
  4508                           ;ui.c: 303: ui.w2 =0;
  4509                           
  4510                           ;ui.c: 305: ui.ou_d =0;
  4511                           
  4512                           ;ui.c: 306: ui.ts =ts;
  4513                           
  4514                           ;ui.c: 307: ui.yd =yd;
  4515                           
  4516                           ;ui.c: 308: ui.wa =0;
  4517                           
  4518                           ; BSR set to: 0
  4519                           ;ui.c: 309: ui.dian_s =1;
  4520                           
  4521                           ; BSR set to: 0
  4522                           ;ui.c: 310: ldz(10);
  4523  001B1E  EC93  F00B         	call	PL28	;call to abstracted procedure
  4524  001B22  EC45  F00E         	call	_ldz
  4525                           
  4526                           ;ui.c: 312: ui.num1 =99;
  4527  001B26  0E63               	movlw	99
  4528  001B28  6E15               	movwf	_ui+2,c	;volatile
  4529                           
  4530                           ;ui.c: 313: ui.num2 =99;
  4531  001B2A  6E16               	movwf	_ui+3,c	;volatile
  4532                           
  4533                           ;ui.c: 314: ui.dian =bat.dian;
  4534  001B2C  C071  F01B         	movff	_bat,_ui+8	;volatile
  4535                           
  4536                           ;ui.c: 315: }
  4537  001B30  EFA9  F007         	goto	_new_nixie
  4538  001B34                     l16137:
  4539                           
  4540                           ; BSR set to: 0
  4541                           ;ui.c: 316: else if(task_->sucCnt==2)
  4542  001B34  5043               	movf	ui_chrgfull@task_,w,c
  4543  001B36  ECF4  F009         	call	PL2	;call to abstracted procedure
  4544  001B3A  0E02               	movlw	2
  4545  001B3C  18DE               	xorwf	postinc2,w,c
  4546  001B3E  E002 EFA9  F007    	bnz	_new_nixie
  4547                           
  4548                           ; BSR set to: 0
  4549                           ;ui.c: 317: {
  4550                           ;ui.c: 318: ldz(0);
  4551  001B44  0E00               	movlw	0
  4552  001B46  EC45  F00E         	call	_ldz
  4553                           
  4554                           ;ui.c: 319: }
  4555                           ;ui.c: 320: new_nixie();
  4556  001B4A  EFA9  F007         	goto	_new_nixie	;wreg free
  4557  001B4E                     __end_of_ui_chrgfull:
  4558                           	opt stack 0
  4559                           tblptru	equ	0xFF8
  4560                           tblptrh	equ	0xFF7
  4561                           tblptrl	equ	0xFF6
  4562                           tablat	equ	0xFF5
  4563                           prodl	equ	0xFF3
  4564                           intcon	equ	0xFF2
  4565                           intcon2	equ	0xFF1
  4566                           intcon3	equ	0xFF0
  4567                           postinc0	equ	0xFEE
  4568                           wreg	equ	0xFE8
  4569                           postdec1	equ	0xFE5
  4570                           fsr1l	equ	0xFE1
  4571                           indf2	equ	0xFDF
  4572                           postinc2	equ	0xFDE
  4573                           postdec2	equ	0xFDD
  4574                           fsr2h	equ	0xFDA
  4575                           fsr2l	equ	0xFD9
  4576                           status	equ	0xFD8
  4577                           
  4578 ;; *************** function _ui_chrgfree *****************
  4579 ;; Defined at:
  4580 ;;		line 257 in file ".\src\ui.c"
  4581 ;; Parameters:    Size  Location     Type
  4582 ;;  task_           1    6[COMRAM] PTR struct task
  4583 ;;		 -> task_list(72), 
  4584 ;; Auto vars:     Size  Location     Type
  4585 ;;		None
  4586 ;; Return value:  Size  Location     Type
  4587 ;;                  1    wreg      void 
  4588 ;; Registers used:
  4589 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4590 ;; Tracked objects:
  4591 ;;		On entry : 3F/0
  4592 ;;		On exit  : 0/0
  4593 ;;		Unchanged: 0/0
  4594 ;; Data sizes:     COMRAM   BANK0
  4595 ;;      Params:         1       0
  4596 ;;      Locals:         0       0
  4597 ;;      Temps:          0       0
  4598 ;;      Totals:         1       0
  4599 ;;Total ram usage:        1 bytes
  4600 ;; Hardware stack levels used:    1
  4601 ;; Hardware stack levels required when called:    3
  4602 ;; This function calls:
  4603 ;;		_ldz
  4604 ;;		_new_nixie
  4605 ;; This function is called by:
  4606 ;;		_find_task
  4607 ;; This function uses a non-reentrant model
  4608 ;;
  4609                           
  4610                           	psect	text10
  4611  001B82                     __ptext10:
  4612                           	opt stack 0
  4613  001B82                     _ui_chrgfree:
  4614                           	opt stack 3
  4615                           
  4616                           ; BSR set to: 0
  4617                           ;ui.c: 259: if(task_->sucCnt&1)
  4618                           
  4619                           ;incstack = 0
  4620  001B82  5043               	movf	ui_chrgfree@task_,w,c
  4621  001B84  ECF4  F009         	call	PL2	;call to abstracted procedure
  4622  001B88  A0DF               	btfss	indf2,0,c
  4623  001B8A  D005               	goto	l16113
  4624                           
  4625                           ; BSR set to: 0
  4626                           ;ui.c: 260: {
  4627                           ;ui.c: 276: ldz(0);
  4628  001B8C  0E00               	movlw	0
  4629  001B8E  EC45  F00E         	call	_ldz
  4630                           
  4631                           ;ui.c: 277: }
  4632  001B92  EFA9  F007         	goto	_new_nixie
  4633  001B96                     l16113:
  4634                           
  4635                           ; BSR set to: 0
  4636                           ;ui.c: 278: else
  4637                           ;ui.c: 279: {
  4638                           ;ui.c: 280: ui.dian =4;
  4639  001B96  0E04               	movlw	4
  4640  001B98  6E1B               	movwf	_ui+8,c	;volatile
  4641                           
  4642                           ;ui.c: 281: ui.w1 =1;
  4643                           
  4644                           ;ui.c: 282: ui.w2 =1;
  4645                           
  4646                           ;ui.c: 284: ui.ou_d =1;
  4647                           
  4648                           ;ui.c: 285: ui.wa =1;
  4649                           
  4650                           ;ui.c: 286: ui.ts =1;
  4651                           
  4652                           ;ui.c: 287: ui.yd =1;
  4653                           
  4654                           ;ui.c: 288: ui.dian_s =1;
  4655                           
  4656                           ; BSR set to: 0
  4657                           ;ui.c: 289: ldz(10);
  4658  001B9A  ECDB  F00A         	call	PL32	;call to abstracted procedure
  4659  001B9E  EC45  F00E         	call	_ldz
  4660                           
  4661                           ;ui.c: 291: ui.num1 =8;
  4662  001BA2  0E08               	movlw	8
  4663  001BA4  6E15               	movwf	_ui+2,c	;volatile
  4664                           
  4665                           ;ui.c: 292: ui.num2 =8;
  4666  001BA6  6E16               	movwf	_ui+3,c	;volatile
  4667                           
  4668                           ;ui.c: 293: }
  4669                           ;ui.c: 294: new_nixie();
  4670  001BA8  EFA9  F007         	goto	_new_nixie	;wreg free
  4671  001BAC                     __end_of_ui_chrgfree:
  4672                           	opt stack 0
  4673                           tblptru	equ	0xFF8
  4674                           tblptrh	equ	0xFF7
  4675                           tblptrl	equ	0xFF6
  4676                           tablat	equ	0xFF5
  4677                           prodl	equ	0xFF3
  4678                           intcon	equ	0xFF2
  4679                           intcon2	equ	0xFF1
  4680                           intcon3	equ	0xFF0
  4681                           postinc0	equ	0xFEE
  4682                           wreg	equ	0xFE8
  4683                           postdec1	equ	0xFE5
  4684                           fsr1l	equ	0xFE1
  4685                           indf2	equ	0xFDF
  4686                           postinc2	equ	0xFDE
  4687                           postdec2	equ	0xFDD
  4688                           fsr2h	equ	0xFDA
  4689                           fsr2l	equ	0xFD9
  4690                           status	equ	0xFD8
  4691                           
  4692 ;; *************** function _ui_chrg *****************
  4693 ;; Defined at:
  4694 ;;		line 227 in file ".\src\ui.c"
  4695 ;; Parameters:    Size  Location     Type
  4696 ;;  task_           1    6[COMRAM] PTR struct task
  4697 ;;		 -> task_list(72), 
  4698 ;; Auto vars:     Size  Location     Type
  4699 ;;		None
  4700 ;; Return value:  Size  Location     Type
  4701 ;;                  1    wreg      void 
  4702 ;; Registers used:
  4703 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4704 ;; Tracked objects:
  4705 ;;		On entry : 3F/0
  4706 ;;		On exit  : 0/0
  4707 ;;		Unchanged: 0/0
  4708 ;; Data sizes:     COMRAM   BANK0
  4709 ;;      Params:         1       0
  4710 ;;      Locals:         4       0
  4711 ;;      Temps:          0       0
  4712 ;;      Totals:         5       0
  4713 ;;Total ram usage:        5 bytes
  4714 ;; Hardware stack levels used:    1
  4715 ;; Hardware stack levels required when called:    3
  4716 ;; This function calls:
  4717 ;;		_ldz
  4718 ;;		_new_nixie
  4719 ;; This function is called by:
  4720 ;;		_find_task
  4721 ;; This function uses a non-reentrant model
  4722 ;;
  4723                           
  4724                           	psect	text11
  4725  0016C8                     __ptext11:
  4726                           	opt stack 0
  4727  0016C8                     _ui_chrg:
  4728                           	opt stack 3
  4729                           
  4730                           ; BSR set to: 0
  4731                           ;ui.c: 229: if(task_->sucCnt==0)
  4732                           
  4733                           ;incstack = 0
  4734  0016C8  5043               	movf	ui_chrg@task_,w,c
  4735  0016CA  ECF4  F009         	call	PL2	;call to abstracted procedure
  4736  0016CE  50DF               	movf	indf2,w,c
  4737  0016D0  E104               	bnz	l16087
  4738                           
  4739                           ; BSR set to: 0
  4740                           ;ui.c: 230: {
  4741                           ;ui.c: 231: ui.w1 =0;
  4742                           
  4743                           ;ui.c: 232: ui.w2 =0;
  4744                           
  4745                           ;ui.c: 234: ui.ou_d =0;
  4746                           
  4747                           ;ui.c: 235: ui.ts =ts;
  4748                           
  4749                           ;ui.c: 236: ui.yd =yd;
  4750                           
  4751                           ;ui.c: 237: ui.wa =0;
  4752                           
  4753                           ; BSR set to: 0
  4754                           ;ui.c: 238: ui.dian_s =1;
  4755                           
  4756                           ; BSR set to: 0
  4757                           ;ui.c: 239: ldz(10);
  4758  0016D2  D829               	call	PL28	;call to abstracted procedure
  4759  0016D4  EC45  F00E         	call	_ldz
  4760                           
  4761                           ;ui.c: 241: ui.num1 =99;
  4762                           
  4763                           ;ui.c: 242: ui.num2 =99;
  4764  0016D8  D831               	call	PL84	;call to abstracted procedure
  4765  0016DA                     l16087:
  4766                           
  4767                           ;ui.c: 243: }
  4768                           ;ui.c: 244: if(task_->sucCnt&1)
  4769  0016DA  5043               	movf	ui_chrg@task_,w,c
  4770  0016DC  ECF4  F009         	call	PL2	;call to abstracted procedure
  4771  0016E0  A0DF               	btfss	indf2,0,c
  4772  0016E2  D00F               	goto	l16097
  4773                           
  4774                           ;ui.c: 245: {
  4775                           ;ui.c: 246: ui.dian =bat.dian>3?4:bat.dian+1;
  4776  0016E4  0E04               	movlw	4
  4777  0016E6  6071               	cpfslt	_bat,c
  4778  0016E8  D006               	goto	l16093
  4779  0016EA  2871               	incf	_bat,w,c
  4780  0016EC  6E44               	movwf	_ui_chrg$6558,c
  4781  0016EE  6A45               	clrf	_ui_chrg$6558+1,c
  4782  0016F0  0E00               	movlw	0
  4783  0016F2  2245               	addwfc	_ui_chrg$6558+1,f,c
  4784  0016F4  D003               	goto	l16095
  4785  0016F6                     l16093:
  4786  0016F6  6A45               	clrf	_ui_chrg$6558+1,c
  4787  0016F8  0E04               	movlw	4
  4788  0016FA  6E44               	movwf	_ui_chrg$6558,c
  4789  0016FC                     l16095:
  4790  0016FC  C044  F01B         	movff	_ui_chrg$6558,_ui+8	;volatile
  4791                           
  4792                           ;ui.c: 247: }
  4793  001700  D00C               	goto	l16105
  4794  001702                     l16097:
  4795                           
  4796                           ;ui.c: 248: else
  4797                           ;ui.c: 249: {
  4798                           ;ui.c: 250: ui.dian =bat.dian>3?3:bat.dian;
  4799  001702  0E04               	movlw	4
  4800  001704  6071               	cpfslt	_bat,c
  4801  001706  D004               	goto	l16101
  4802  001708  C071  F046         	movff	_bat,_ui_chrg$6559
  4803  00170C  6A47               	clrf	_ui_chrg$6559+1,c
  4804  00170E  D003               	goto	l16103
  4805  001710                     l16101:
  4806  001710  6A47               	clrf	_ui_chrg$6559+1,c
  4807  001712  0E03               	movlw	3
  4808  001714  6E46               	movwf	_ui_chrg$6559,c
  4809  001716                     l16103:
  4810  001716  C046  F01B         	movff	_ui_chrg$6559,_ui+8	;volatile
  4811  00171A                     l16105:
  4812                           
  4813                           ;ui.c: 251: }
  4814                           ;ui.c: 252: task_->sucCnt++;
  4815  00171A  5043               	movf	ui_chrg@task_,w,c
  4816  00171C  ECF4  F009         	call	PL2	;call to abstracted procedure
  4817  001720  2ADF               	incf	indf2,f,c
  4818                           
  4819                           ;ui.c: 253: new_nixie();
  4820  001722  EFA9  F007         	goto	_new_nixie	;wreg free
  4821  001726                     __end_of_ui_chrg:
  4822                           	opt stack 0
  4823  001726                     PL28:
  4824                           	opt stack 3
  4825  001726  6A13               	clrf	_ui,c	;volatile
  4826  001728  6A14               	clrf	_ui+1,c	;volatile
  4827  00172A  6A17               	clrf	_ui+4,c	;volatile
  4828  00172C  C034  F019         	movff	_ts,_ui+6	;volatile
  4829  001730  C038  F01A         	movff	_yd,_ui+7	;volatile
  4830  001734  6A18               	clrf	_ui+5,c	;volatile
  4831  001736  0E01               	movlw	1
  4832  001738  6E1C               	movwf	_ui+9,c	;volatile
  4833  00173A  0C0A               	retlw	10
  4834  00173C                     __end_ofPL28:
  4835                           	opt stack 0
  4836  00173C                     PL84:
  4837                           	opt stack 3
  4838  00173C  0E63               	movlw	99
  4839  00173E  6E15               	movwf	_ui+2,c	;volatile
  4840  001740  6E16               	movwf	_ui+3,c	;volatile
  4841  001742  0C63               	retlw	99
  4842  001744                     __end_ofPL84:
  4843                           	opt stack 0
  4844                           tblptru	equ	0xFF8
  4845                           tblptrh	equ	0xFF7
  4846                           tblptrl	equ	0xFF6
  4847                           tablat	equ	0xFF5
  4848                           prodl	equ	0xFF3
  4849                           intcon	equ	0xFF2
  4850                           intcon2	equ	0xFF1
  4851                           intcon3	equ	0xFF0
  4852                           postinc0	equ	0xFEE
  4853                           wreg	equ	0xFE8
  4854                           postdec1	equ	0xFE5
  4855                           fsr1l	equ	0xFE1
  4856                           indf2	equ	0xFDF
  4857                           postinc2	equ	0xFDE
  4858                           postdec2	equ	0xFDD
  4859                           fsr2h	equ	0xFDA
  4860                           fsr2l	equ	0xFD9
  4861                           status	equ	0xFD8
  4862                           
  4863 ;; *************** function _ui_cb *****************
  4864 ;; Defined at:
  4865 ;;		line 149 in file ".\src\ui.c"
  4866 ;; Parameters:    Size  Location     Type
  4867 ;;  task_           1   14[COMRAM] PTR struct task
  4868 ;;		 -> task_list(72), 
  4869 ;; Auto vars:     Size  Location     Type
  4870 ;;		None
  4871 ;; Return value:  Size  Location     Type
  4872 ;;                  1    wreg      void 
  4873 ;; Registers used:
  4874 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4875 ;; Tracked objects:
  4876 ;;		On entry : 3F/0
  4877 ;;		On exit  : 0/0
  4878 ;;		Unchanged: 0/0
  4879 ;; Data sizes:     COMRAM   BANK0
  4880 ;;      Params:         1       0
  4881 ;;      Locals:         0       0
  4882 ;;      Temps:          1       0
  4883 ;;      Totals:         2       0
  4884 ;;Total ram usage:        2 bytes
  4885 ;; Hardware stack levels used:    1
  4886 ;; Hardware stack levels required when called:    3
  4887 ;; This function calls:
  4888 ;;		___lbdiv
  4889 ;;		___lbmod
  4890 ;;		_add_task_id
  4891 ;;		_ldz
  4892 ;;		_new_nixie
  4893 ;; This function is called by:
  4894 ;;		_find_task
  4895 ;; This function uses a non-reentrant model
  4896 ;;
  4897                           
  4898                           	psect	text12
  4899  00106C                     __ptext12:
  4900                           	opt stack 0
  4901  00106C                     _ui_cb:
  4902                           	opt stack 3
  4903                           
  4904                           ; BSR set to: 0
  4905                           ;ui.c: 151: if(task_->sucCnt<=21)
  4906                           
  4907                           ;incstack = 0
  4908  00106C  504B               	movf	ui_cb@task_,w,c
  4909  00106E  ECF4  F009         	call	PL2	;call to abstracted procedure
  4910  001072  0E16               	movlw	22
  4911  001074  60DF               	cpfslt	indf2,c
  4912  001076  D02B               	goto	l16031
  4913                           
  4914                           ; BSR set to: 0
  4915                           ;ui.c: 152: {
  4916                           ;ui.c: 153: if(task_->sucCnt==0)
  4917  001078  504B               	movf	ui_cb@task_,w,c
  4918  00107A  ECF4  F009         	call	PL2	;call to abstracted procedure
  4919  00107E  50DF               	movf	indf2,w,c
  4920  001080  E10B               	bnz	l16023
  4921                           
  4922                           ; BSR set to: 0
  4923                           ;ui.c: 154: {
  4924                           ;ui.c: 155: ui.w1 =1;
  4925  001082  0E01               	movlw	1
  4926  001084  6E13               	movwf	_ui,c	;volatile
  4927                           
  4928                           ; BSR set to: 0
  4929                           ;ui.c: 156: ui.w2 =0;
  4930  001086  6A14               	clrf	_ui+1,c	;volatile
  4931                           
  4932                           ;ui.c: 158: ui.ou_d =1;
  4933  001088  0E01               	movlw	1
  4934  00108A  6E17               	movwf	_ui+4,c	;volatile
  4935                           
  4936                           ; BSR set to: 0
  4937                           ;ui.c: 159: ui.ts =ts;
  4938                           
  4939                           ; BSR set to: 0
  4940                           ;ui.c: 160: ui.yd =yd;
  4941  00108C  D86C               	call	PL36	;call to abstracted procedure
  4942                           
  4943                           ; BSR set to: 0
  4944                           ;ui.c: 161: ui.wa =0;
  4945  00108E  6A18               	clrf	_ui+5,c	;volatile
  4946                           
  4947                           ; BSR set to: 0
  4948                           ;ui.c: 162: ui.dian_s =0;
  4949  001090  6A1C               	clrf	_ui+9,c	;volatile
  4950                           
  4951                           ; BSR set to: 0
  4952                           ;ui.c: 165: ldz(10);
  4953  001092  0E0A               	movlw	10
  4954  001094  EC45  F00E         	call	_ldz
  4955  001098                     l16023:
  4956                           
  4957                           ;ui.c: 166: }
  4958                           ;ui.c: 167: if((task_->sucCnt&1)==0)
  4959  001098  504B               	movf	ui_cb@task_,w,c
  4960  00109A  ECF4  F009         	call	PL2	;call to abstracted procedure
  4961  00109E  B0DF               	btfsc	indf2,0,c
  4962  0010A0  D04D               	goto	l16065
  4963                           
  4964                           ;ui.c: 168: {
  4965                           ;ui.c: 169: if(zz)
  4966  0010A2  507A               	movf	_zz,w,c
  4967  0010A4  E00F               	bz	l12576
  4968                           
  4969                           ;ui.c: 170: {
  4970                           ;ui.c: 171: ui.num1 =zz/100;
  4971  0010A6  0E64               	movlw	100
  4972  0010A8  6E3E               	movwf	___lbdiv@divisor,c
  4973  0010AA  507A               	movf	_zz,w,c
  4974  0010AC  ECA7  F00D         	call	___lbdiv
  4975  0010B0  6E15               	movwf	_ui+2,c	;volatile
  4976                           
  4977                           ;ui.c: 172: ui.num2 =(zz/10)%10;
  4978  0010B2  0E0A               	movlw	10
  4979  0010B4  6E42               	movwf	___lbmod@divisor,c
  4980  0010B6  6E3E               	movwf	___lbdiv@divisor,c
  4981  0010B8  507A               	movf	_zz,w,c
  4982  0010BA  ECA7  F00D         	call	___lbdiv
  4983  0010BE  ECD6  F00D         	call	___lbmod
  4984  0010C2  D024               	goto	L5
  4985  0010C4                     l12576:
  4986                           
  4987                           ;ui.c: 175: else
  4988                           ;ui.c: 176: {
  4989                           ;ui.c: 177: ui.num1 =0;
  4990  0010C4  6A15               	clrf	_ui+2,c	;volatile
  4991                           
  4992                           ;ui.c: 178: ui.num2 =0;
  4993  0010C6  6A16               	clrf	_ui+3,c	;volatile
  4994  0010C8                     l16029:
  4995                           
  4996                           ;ui.c: 179: }
  4997                           ;ui.c: 180: ui.dian =5;
  4998  0010C8  0E05               	movlw	5
  4999  0010CA  6E1B               	movwf	_ui+8,c	;volatile
  5000  0010CC  D037               	goto	l16065
  5001  0010CE                     l16031:
  5002                           
  5003                           ; BSR set to: 0
  5004                           ;ui.c: 183: else if(task_->sucCnt<=42)
  5005  0010CE  504B               	movf	ui_cb@task_,w,c
  5006  0010D0  ECF4  F009         	call	PL2	;call to abstracted procedure
  5007  0010D4  0E2B               	movlw	43
  5008  0010D6  60DF               	cpfslt	indf2,c
  5009  0010D8  D01B               	goto	l16055
  5010                           
  5011                           ; BSR set to: 0
  5012                           ;ui.c: 184: {
  5013                           ;ui.c: 185: if(task_->sucCnt==22)
  5014  0010DA  504B               	movf	ui_cb@task_,w,c
  5015  0010DC  ECF4  F009         	call	PL2	;call to abstracted procedure
  5016  0010E0  0E16               	movlw	22
  5017  0010E2  18DE               	xorwf	postinc2,w,c
  5018  0010E4  E109               	bnz	l16047
  5019                           
  5020                           ; BSR set to: 0
  5021                           ;ui.c: 186: {
  5022                           ;ui.c: 187: ui.w1 =1;
  5023  0010E6  0E01               	movlw	1
  5024  0010E8  6E13               	movwf	_ui,c	;volatile
  5025                           
  5026                           ; BSR set to: 0
  5027                           ;ui.c: 188: ui.w2 =ts;
  5028  0010EA  C034  F014         	movff	_ts,_ui+1	;volatile
  5029                           
  5030                           ; BSR set to: 0
  5031                           ;ui.c: 190: ui.ou_d =0;
  5032  0010EE  6A17               	clrf	_ui+4,c	;volatile
  5033                           
  5034                           ; BSR set to: 0
  5035                           ;ui.c: 191: ui.ts =ts;
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;ui.c: 192: ui.yd =yd;
  5039  0010F0  D83A               	call	PL36	;call to abstracted procedure
  5040                           
  5041                           ;ui.c: 193: ui.wa =1;
  5042  0010F2  0E01               	movlw	1
  5043  0010F4  6E18               	movwf	_ui+5,c	;volatile
  5044                           
  5045                           ; BSR set to: 0
  5046                           ;ui.c: 194: ui.dian_s =0;
  5047  0010F6  6A1C               	clrf	_ui+9,c	;volatile
  5048  0010F8                     l16047:
  5049                           
  5050                           ; BSR set to: 0
  5051                           ;ui.c: 196: }
  5052                           ;ui.c: 197: if((task_->sucCnt&1)==0)
  5053  0010F8  504B               	movf	ui_cb@task_,w,c
  5054  0010FA  ECF4  F009         	call	PL2	;call to abstracted procedure
  5055  0010FE  B0DF               	btfsc	indf2,0,c
  5056  001100  D01D               	goto	l16065
  5057                           
  5058                           ; BSR set to: 0
  5059                           ;ui.c: 198: {
  5060                           ;ui.c: 199: ui.num1 =pw/10;
  5061  001102  D836               	call	PL56	;call to abstracted procedure
  5062  001104  ECA7  F00D         	call	___lbdiv
  5063  001108  6E15               	movwf	_ui+2,c	;volatile
  5064                           
  5065                           ;ui.c: 200: ui.num2 =pw-ui.num1*10;
  5066  00110A  D828               	call	PL20	;call to abstracted procedure
  5067  00110C                     L5:
  5068  00110C  6E16               	movwf	_ui+3,c	;volatile
  5069  00110E  D7DC               	goto	l16029
  5070  001110                     l16055:
  5071                           
  5072                           ; BSR set to: 0
  5073                           ;ui.c: 206: else
  5074                           ;ui.c: 207: {
  5075                           ;ui.c: 208: if(task_->sucCnt&1)
  5076  001110  504B               	movf	ui_cb@task_,w,c
  5077  001112  ECF4  F009         	call	PL2	;call to abstracted procedure
  5078  001116  A0DF               	btfss	indf2,0,c
  5079  001118  D008               	goto	l16063
  5080                           
  5081                           ; BSR set to: 0
  5082                           ;ui.c: 209: {
  5083                           ;ui.c: 210: ui.num1 =pw/10;
  5084  00111A  D82A               	call	PL56	;call to abstracted procedure
  5085  00111C  ECA7  F00D         	call	___lbdiv
  5086  001120  6E15               	movwf	_ui+2,c	;volatile
  5087                           
  5088                           ;ui.c: 211: ui.num2 =pw-ui.num1*10;
  5089  001122  D81C               	call	PL20	;call to abstracted procedure
  5090  001124  6E16               	movwf	_ui+3,c	;volatile
  5091                           
  5092                           ;ui.c: 212: ui.dian =5;
  5093  001126  0E05               	movlw	5
  5094  001128  6E1B               	movwf	_ui+8,c	;volatile
  5095  00112A                     l16063:
  5096                           
  5097                           ;ui.c: 213: }
  5098                           ;ui.c: 214: ldz(52-task_->sucCnt);
  5099  00112A  504B               	movf	ui_cb@task_,w,c
  5100  00112C  ECF4  F009         	call	PL2	;call to abstracted procedure
  5101  001130  50DF               	movf	indf2,w,c
  5102  001132  6E4C               	movwf	??_ui_cb& (0+255),c
  5103  001134  504C               	movf	??_ui_cb,w,c
  5104  001136  0834               	sublw	52
  5105  001138  EC45  F00E         	call	_ldz
  5106  00113C                     l16065:
  5107                           
  5108                           ;ui.c: 215: }
  5109                           ;ui.c: 216: new_nixie();
  5110  00113C  ECA9  F007         	call	_new_nixie	;wreg free
  5111                           
  5112                           ;ui.c: 217: if(task_->sucCnt==52)
  5113  001140  504B               	movf	ui_cb@task_,w,c
  5114  001142  ECF4  F009         	call	PL2	;call to abstracted procedure
  5115  001146  0E34               	movlw	52
  5116  001148  18DE               	xorwf	postinc2,w,c
  5117  00114A  B4D8               	btfsc	status,2,c
  5118                           
  5119                           ;ui.c: 218: {
  5120                           ;ui.c: 219: if(PINA5&&(PINA1==0))
  5121  00114C  AA86               	btfss	3974,5,c	;volatile
  5122  00114E  0012               	return	
  5123  001150  B286               	btfsc	3974,1,c	;volatile
  5124  001152  0012               	return	
  5125                           
  5126                           ;ui.c: 220: {
  5127                           ;ui.c: 221: add_task_id(1,500,0,ui_id);
  5128  001154  ECF9  F009         	call	PL4	;call to abstracted procedure
  5129  001158  EF53  F00A         	goto	_add_task_id
  5130  00115C                     __end_of_ui_cb:
  5131                           	opt stack 0
  5132  00115C                     PL20:
  5133                           	opt stack 3
  5134  00115C  5015               	movf	_ui+2,w,c	;volatile
  5135  00115E  0DF6               	mullw	246
  5136  001160  50F3               	movf	prodl,w,c
  5137  001162  247B               	addwf	_pw,w,c
  5138  001164  0012               	return	
  5139  001166                     __end_ofPL20:
  5140                           	opt stack 0
  5141  001166                     PL36:
  5142                           	opt stack 3
  5143  001166  C034  F019         	movff	_ts,_ui+6	;volatile
  5144  00116A  C038  F01A         	movff	_yd,_ui+7	;volatile
  5145  00116E  0012               	return	
  5146  001170                     __end_ofPL36:
  5147                           	opt stack 0
  5148  001170                     PL56:
  5149                           	opt stack 3
  5150  001170  0E0A               	movlw	10
  5151  001172  6E3E               	movwf	___lbdiv@divisor,c
  5152  001174  507B               	movf	_pw,w,c
  5153  001176  0012               	return	
  5154  001178                     __end_ofPL56:
  5155                           	opt stack 0
  5156                           tblptru	equ	0xFF8
  5157                           tblptrh	equ	0xFF7
  5158                           tblptrl	equ	0xFF6
  5159                           tablat	equ	0xFF5
  5160                           prodl	equ	0xFF3
  5161                           intcon	equ	0xFF2
  5162                           intcon2	equ	0xFF1
  5163                           intcon3	equ	0xFF0
  5164                           postinc0	equ	0xFEE
  5165                           wreg	equ	0xFE8
  5166                           postdec1	equ	0xFE5
  5167                           fsr1l	equ	0xFE1
  5168                           indf2	equ	0xFDF
  5169                           postinc2	equ	0xFDE
  5170                           postdec2	equ	0xFDD
  5171                           fsr2h	equ	0xFDA
  5172                           fsr2l	equ	0xFD9
  5173                           status	equ	0xFD8
  5174                           
  5175 ;; *************** function ___lbmod *****************
  5176 ;; Defined at:
  5177 ;;		line 4 in file "c:\Users\Administrator\.vscode\extensions\ad.adide-1.1.7\resource\Microchip\xc8\v1.41\sources\common
      +\lbmod.c"
  5178 ;; Parameters:    Size  Location     Type
  5179 ;;  dividend        1    wreg     unsigned char 
  5180 ;;  divisor         1    5[COMRAM] unsigned char 
  5181 ;; Auto vars:     Size  Location     Type
  5182 ;;  dividend        1    6[COMRAM] unsigned char 
  5183 ;;  rem             1    8[COMRAM] unsigned char 
  5184 ;;  counter         1    7[COMRAM] unsigned char 
  5185 ;; Return value:  Size  Location     Type
  5186 ;;                  1    wreg      unsigned char 
  5187 ;; Registers used:
  5188 ;;		wreg, status,2, status,0
  5189 ;; Tracked objects:
  5190 ;;		On entry : 0/0
  5191 ;;		On exit  : 0/0
  5192 ;;		Unchanged: 0/0
  5193 ;; Data sizes:     COMRAM   BANK0
  5194 ;;      Params:         1       0
  5195 ;;      Locals:         3       0
  5196 ;;      Temps:          0       0
  5197 ;;      Totals:         4       0
  5198 ;;Total ram usage:        4 bytes
  5199 ;; Hardware stack levels used:    1
  5200 ;; Hardware stack levels required when called:    2
  5201 ;; This function calls:
  5202 ;;		Nothing
  5203 ;; This function is called by:
  5204 ;;		_ui_cb
  5205 ;; This function uses a non-reentrant model
  5206 ;;
  5207                           
  5208                           	psect	text13
  5209  001BAC                     __ptext13:
  5210                           	opt stack 0
  5211  001BAC                     ___lbmod:
  5212                           	opt stack 3
  5213                           
  5214                           ;incstack = 0
  5215                           ;___lbmod@dividend stored from wreg
  5216  001BAC  6E43               	movwf	___lbmod@dividend,c
  5217  001BAE  0E08               	movlw	8
  5218  001BB0  6E44               	movwf	___lbmod@counter,c
  5219  001BB2  6A45               	clrf	___lbmod@rem,c
  5220  001BB4                     l15611:
  5221  001BB4  90D8               	bcf	status,0,c
  5222  001BB6  3443               	rlcf	___lbmod@dividend,w,c
  5223  001BB8  3445               	rlcf	___lbmod@rem,w,c
  5224  001BBA  6E45               	movwf	___lbmod@rem,c
  5225  001BBC  90D8               	bcf	status,0,c
  5226  001BBE  3643               	rlcf	___lbmod@dividend,f,c
  5227  001BC0  5042               	movf	___lbmod@divisor,w,c
  5228  001BC2  5C45               	subwf	___lbmod@rem,w,c
  5229  001BC4  E302               	bnc	l15619
  5230  001BC6  5042               	movf	___lbmod@divisor,w,c
  5231  001BC8  5E45               	subwf	___lbmod@rem,f,c
  5232  001BCA                     l15619:
  5233  001BCA  2E44               	decfsz	___lbmod@counter,f,c
  5234  001BCC  D7F3               	goto	l15611
  5235  001BCE  5045               	movf	___lbmod@rem,w,c
  5236  001BD0  0012               	return		;funcret
  5237  001BD2                     __end_of___lbmod:
  5238                           	opt stack 0
  5239                           tblptru	equ	0xFF8
  5240                           tblptrh	equ	0xFF7
  5241                           tblptrl	equ	0xFF6
  5242                           tablat	equ	0xFF5
  5243                           prodl	equ	0xFF3
  5244                           intcon	equ	0xFF2
  5245                           intcon2	equ	0xFF1
  5246                           intcon3	equ	0xFF0
  5247                           postinc0	equ	0xFEE
  5248                           wreg	equ	0xFE8
  5249                           postdec1	equ	0xFE5
  5250                           fsr1l	equ	0xFE1
  5251                           indf2	equ	0xFDF
  5252                           postinc2	equ	0xFDE
  5253                           postdec2	equ	0xFDD
  5254                           fsr2h	equ	0xFDA
  5255                           fsr2l	equ	0xFD9
  5256                           status	equ	0xFD8
  5257                           
  5258 ;; *************** function ___lbdiv *****************
  5259 ;; Defined at:
  5260 ;;		line 4 in file "c:\Users\Administrator\.vscode\extensions\ad.adide-1.1.7\resource\Microchip\xc8\v1.41\sources\common
      +\lbdiv.c"
  5261 ;; Parameters:    Size  Location     Type
  5262 ;;  dividend        1    wreg     unsigned char 
  5263 ;;  divisor         1    1[COMRAM] unsigned char 
  5264 ;; Auto vars:     Size  Location     Type
  5265 ;;  dividend        1    2[COMRAM] unsigned char 
  5266 ;;  quotient        1    4[COMRAM] unsigned char 
  5267 ;;  counter         1    3[COMRAM] unsigned char 
  5268 ;; Return value:  Size  Location     Type
  5269 ;;                  1    wreg      unsigned char 
  5270 ;; Registers used:
  5271 ;;		wreg, status,2, status,0
  5272 ;; Tracked objects:
  5273 ;;		On entry : 0/0
  5274 ;;		On exit  : 0/0
  5275 ;;		Unchanged: 0/0
  5276 ;; Data sizes:     COMRAM   BANK0
  5277 ;;      Params:         1       0
  5278 ;;      Locals:         3       0
  5279 ;;      Temps:          0       0
  5280 ;;      Totals:         4       0
  5281 ;;Total ram usage:        4 bytes
  5282 ;; Hardware stack levels used:    1
  5283 ;; Hardware stack levels required when called:    2
  5284 ;; This function calls:
  5285 ;;		Nothing
  5286 ;; This function is called by:
  5287 ;;		_ui_cb
  5288 ;;		_ui_smoend_dl_getup
  5289 ;;		_ui_ts_on
  5290 ;;		_ui_ts_off
  5291 ;;		_ui_timout
  5292 ;; This function uses a non-reentrant model
  5293 ;;
  5294                           
  5295                           	psect	text14
  5296  001B4E                     __ptext14:
  5297                           	opt stack 0
  5298  001B4E                     ___lbdiv:
  5299                           	opt stack 3
  5300                           
  5301                           ;incstack = 0
  5302                           ;___lbdiv@dividend stored from wreg
  5303  001B4E  6E3F               	movwf	___lbdiv@dividend,c
  5304  001B50  6A41               	clrf	___lbdiv@quotient,c
  5305  001B52  503E               	movf	___lbdiv@divisor,w,c
  5306  001B54  E014               	bz	l15603
  5307  001B56  0E01               	movlw	1
  5308  001B58  6E40               	movwf	___lbdiv@counter,c
  5309  001B5A  D003               	goto	l15591
  5310  001B5C                     l15587:
  5311  001B5C  90D8               	bcf	status,0,c
  5312  001B5E  363E               	rlcf	___lbdiv@divisor,f,c
  5313  001B60  2A40               	incf	___lbdiv@counter,f,c
  5314  001B62                     l15591:
  5315  001B62  AE3E               	btfss	___lbdiv@divisor,7,c
  5316  001B64  D7FB               	goto	l15587
  5317  001B66                     l15593:
  5318  001B66  90D8               	bcf	status,0,c
  5319  001B68  3641               	rlcf	___lbdiv@quotient,f,c
  5320  001B6A  503E               	movf	___lbdiv@divisor,w,c
  5321  001B6C  5C3F               	subwf	___lbdiv@dividend,w,c
  5322  001B6E  E303               	bnc	l15599
  5323  001B70  503E               	movf	___lbdiv@divisor,w,c
  5324  001B72  5E3F               	subwf	___lbdiv@dividend,f,c
  5325  001B74  8041               	bsf	___lbdiv@quotient,0,c
  5326  001B76                     l15599:
  5327  001B76  90D8               	bcf	status,0,c
  5328  001B78  323E               	rrcf	___lbdiv@divisor,f,c
  5329  001B7A  2E40               	decfsz	___lbdiv@counter,f,c
  5330  001B7C  D7F4               	goto	l15593
  5331  001B7E                     l15603:
  5332  001B7E  5041               	movf	___lbdiv@quotient,w,c
  5333  001B80  0012               	return		;funcret
  5334  001B82                     __end_of___lbdiv:
  5335                           	opt stack 0
  5336                           tblptru	equ	0xFF8
  5337                           tblptrh	equ	0xFF7
  5338                           tblptrl	equ	0xFF6
  5339                           tablat	equ	0xFF5
  5340                           prodl	equ	0xFF3
  5341                           intcon	equ	0xFF2
  5342                           intcon2	equ	0xFF1
  5343                           intcon3	equ	0xFF0
  5344                           postinc0	equ	0xFEE
  5345                           wreg	equ	0xFE8
  5346                           postdec1	equ	0xFE5
  5347                           fsr1l	equ	0xFE1
  5348                           indf2	equ	0xFDF
  5349                           postinc2	equ	0xFDE
  5350                           postdec2	equ	0xFDD
  5351                           fsr2h	equ	0xFDA
  5352                           fsr2l	equ	0xFD9
  5353                           status	equ	0xFD8
  5354                           
  5355 ;; *************** function _ui_begin *****************
  5356 ;; Defined at:
  5357 ;;		line 657 in file ".\src\ui.c"
  5358 ;; Parameters:    Size  Location     Type
  5359 ;;  task_           1    6[COMRAM] PTR struct task
  5360 ;;		 -> task_list(72), 
  5361 ;; Auto vars:     Size  Location     Type
  5362 ;;		None
  5363 ;; Return value:  Size  Location     Type
  5364 ;;                  1    wreg      void 
  5365 ;; Registers used:
  5366 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5367 ;; Tracked objects:
  5368 ;;		On entry : 3F/0
  5369 ;;		On exit  : 0/0
  5370 ;;		Unchanged: 0/0
  5371 ;; Data sizes:     COMRAM   BANK0
  5372 ;;      Params:         1       0
  5373 ;;      Locals:         0       0
  5374 ;;      Temps:          2       0
  5375 ;;      Totals:         3       0
  5376 ;;Total ram usage:        3 bytes
  5377 ;; Hardware stack levels used:    1
  5378 ;; Hardware stack levels required when called:    3
  5379 ;; This function calls:
  5380 ;;		_cmp0_init
  5381 ;;		_gpio_init
  5382 ;;		_ldz
  5383 ;;		_new_nixie
  5384 ;;		_sleep_mode
  5385 ;;		_timer0_init
  5386 ;;		_timer1_init
  5387 ;;		_timer2_init
  5388 ;; This function is called by:
  5389 ;;		_find_task
  5390 ;; This function uses a non-reentrant model
  5391 ;;
  5392                           
  5393                           	psect	text15
  5394  001544                     __ptext15:
  5395                           	opt stack 0
  5396  001544                     _ui_begin:
  5397                           	opt stack 3
  5398                           
  5399                           ; BSR set to: 0
  5400                           ;ui.c: 659: if(task_->sucCnt==0)
  5401                           
  5402                           ;incstack = 0
  5403  001544  5043               	movf	ui_begin@task_,w,c
  5404  001546  ECF4  F009         	call	PL2	;call to abstracted procedure
  5405  00154A  50DF               	movf	indf2,w,c
  5406  00154C  E10A               	bnz	l16401
  5407                           
  5408                           ; BSR set to: 0
  5409                           ;ui.c: 660: {
  5410                           ;ui.c: 661: ui.w1 =1;
  5411                           
  5412                           ;ui.c: 662: ui.w2 =1;
  5413                           
  5414                           ;ui.c: 664: ui.ou_d =1;
  5415                           
  5416                           ;ui.c: 665: ui.wa =1;
  5417                           
  5418                           ;ui.c: 666: ui.ts =1;
  5419                           
  5420                           ;ui.c: 667: ui.yd =1;
  5421                           
  5422                           ;ui.c: 669: ui.dian_s =1;
  5423                           
  5424                           ; BSR set to: 0
  5425                           ;ui.c: 670: ldz(10);
  5426  00154E  D833               	call	PL32	;call to abstracted procedure
  5427  001550  EC45  F00E         	call	_ldz
  5428                           
  5429                           ;ui.c: 672: ui.num1 =8;
  5430  001554  0E08               	movlw	8
  5431  001556  6E15               	movwf	_ui+2,c	;volatile
  5432                           
  5433                           ;ui.c: 673: ui.num2 =8;
  5434  001558  6E16               	movwf	_ui+3,c	;volatile
  5435                           
  5436                           ;ui.c: 674: ui.dian =4;
  5437  00155A  0E04               	movlw	4
  5438  00155C  6E1B               	movwf	_ui+8,c	;volatile
  5439                           
  5440                           ;ui.c: 676: }
  5441  00155E  EFA9  F007         	goto	_new_nixie
  5442  001562                     l16401:
  5443                           
  5444                           ; BSR set to: 0
  5445                           ;ui.c: 677: else if(task_->sucCnt==1)
  5446  001562  5043               	movf	ui_begin@task_,w,c
  5447  001564  ECF4  F009         	call	PL2	;call to abstracted procedure
  5448  001568  04DE               	decf	postinc2,w,c
  5449  00156A  E105               	bnz	l16405
  5450                           
  5451                           ; BSR set to: 0
  5452                           ;ui.c: 678: {
  5453                           ;ui.c: 679: ldz(0);
  5454  00156C  0E00               	movlw	0
  5455  00156E  EC45  F00E         	call	_ldz
  5456                           
  5457                           ;ui.c: 681: }
  5458  001572  EFA9  F007         	goto	_new_nixie
  5459  001576                     l16405:
  5460                           
  5461                           ; BSR set to: 0
  5462                           ;ui.c: 682: else
  5463                           ;ui.c: 683: {
  5464                           ;ui.c: 687: cb_o=PINB1;
  5465  001576  EC49  F00A         	call	PL44	;call to abstracted procedure
  5466                           
  5467                           ; BSR set to: 0
  5468                           ;ui.c: 688: sleep_mode();
  5469  00157A  ECBA  F00C         	call	_sleep_mode	;wreg free
  5470  00157E  F000               	nop		;# 
  5471                           
  5472                           ;ui.c: 690: gpio_init();
  5473  001580  ECE9  F00D         	call	_gpio_init	;wreg free
  5474                           
  5475                           ;ui.c: 691: timer0_init();
  5476  001584  EC32  F00E         	call	_timer0_init	;wreg free
  5477                           
  5478                           ;ui.c: 692: _delay((unsigned long)((30)*(16000000/4000000)));
  5479  001588  0E28               	movlw	40
  5480  00158A                     u7117:
  5481  00158A  2EE8               	decfsz	wreg,f,c
  5482  00158C  D7FE               	bra	u7117
  5483                           
  5484                           ;ui.c: 693: timer1_init();
  5485  00158E  EC0D  F00E         	call	_timer1_init	;wreg free
  5486                           
  5487                           ;ui.c: 694: timer2_init();
  5488  001592  EC27  F00E         	call	_timer2_init	;wreg free
  5489                           
  5490                           ;ui.c: 695: cmp0_init();
  5491  001596  EC1B  F00E         	call	_cmp0_init	;wreg free
  5492                           
  5493                           ;ui.c: 699: _delay((unsigned long)((50)*(16000000/4000.0)));
  5494  00159A  0E02               	movlw	2
  5495  00159C  6E45               	movwf	(??_ui_begin+1)& (0+255),c
  5496  00159E  0E04               	movlw	4
  5497  0015A0  6E44               	movwf	??_ui_begin& (0+255),c
  5498  0015A2  0EBA               	movlw	186
  5499  0015A4                     u7127:
  5500  0015A4  2EE8               	decfsz	wreg,f,c
  5501  0015A6  D7FE               	bra	u7127
  5502  0015A8  2E44               	decfsz	??_ui_begin& (0+255),f,c
  5503  0015AA  D7FC               	bra	u7127
  5504  0015AC  2E45               	decfsz	(??_ui_begin+1)& (0+255),f,c
  5505  0015AE  D7FA               	bra	u7127
  5506  0015B0  D000               	nop2	
  5507                           
  5508                           ;ui.c: 700: }
  5509                           ;ui.c: 701: new_nixie();
  5510  0015B2  EFA9  F007         	goto	_new_nixie	;wreg free
  5511  0015B6                     __end_of_ui_begin:
  5512                           	opt stack 0
  5513  0015B6                     PL32:
  5514                           	opt stack 3
  5515  0015B6  0E01               	movlw	1
  5516  0015B8  6E13               	movwf	_ui,c	;volatile
  5517  0015BA  6E14               	movwf	_ui+1,c	;volatile
  5518  0015BC  6E17               	movwf	_ui+4,c	;volatile
  5519  0015BE  6E18               	movwf	_ui+5,c	;volatile
  5520  0015C0  6E19               	movwf	_ui+6,c	;volatile
  5521  0015C2  6E1A               	movwf	_ui+7,c	;volatile
  5522  0015C4  6E1C               	movwf	_ui+9,c	;volatile
  5523  0015C6  0C0A               	retlw	10
  5524  0015C8                     __end_ofPL32:
  5525                           	opt stack 0
  5526                           tblptru	equ	0xFF8
  5527                           tblptrh	equ	0xFF7
  5528                           tblptrl	equ	0xFF6
  5529                           tablat	equ	0xFF5
  5530                           prodl	equ	0xFF3
  5531                           intcon	equ	0xFF2
  5532                           intcon2	equ	0xFF1
  5533                           intcon3	equ	0xFF0
  5534                           postinc0	equ	0xFEE
  5535                           wreg	equ	0xFE8
  5536                           postdec1	equ	0xFE5
  5537                           fsr1l	equ	0xFE1
  5538                           indf2	equ	0xFDF
  5539                           postinc2	equ	0xFDE
  5540                           postdec2	equ	0xFDD
  5541                           fsr2h	equ	0xFDA
  5542                           fsr2l	equ	0xFD9
  5543                           status	equ	0xFD8
  5544                           
  5545 ;; *************** function _new_nixie *****************
  5546 ;; Defined at:
  5547 ;;		line 38 in file ".\src\ui.c"
  5548 ;; Parameters:    Size  Location     Type
  5549 ;;		None
  5550 ;; Auto vars:     Size  Location     Type
  5551 ;;  temp            1    5[COMRAM] unsigned char 
  5552 ;; Return value:  Size  Location     Type
  5553 ;;                  1    wreg      void 
  5554 ;; Registers used:
  5555 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  5556 ;; Tracked objects:
  5557 ;;		On entry : 0/0
  5558 ;;		On exit  : 0/0
  5559 ;;		Unchanged: 0/0
  5560 ;; Data sizes:     COMRAM   BANK0
  5561 ;;      Params:         0       0
  5562 ;;      Locals:         3       0
  5563 ;;      Temps:          2       0
  5564 ;;      Totals:         5       0
  5565 ;;Total ram usage:        5 bytes
  5566 ;; Hardware stack levels used:    1
  5567 ;; Hardware stack levels required when called:    2
  5568 ;; This function calls:
  5569 ;;		Nothing
  5570 ;; This function is called by:
  5571 ;;		_ui_cb
  5572 ;;		_ui_chrg
  5573 ;;		_ui_chrgfree
  5574 ;;		_ui_chrgfull
  5575 ;;		_ui_smoing
  5576 ;;		_ui_smoend_dl_getup
  5577 ;;		_ui_kl
  5578 ;;		_ui_ts_on
  5579 ;;		_ui_ts_off
  5580 ;;		_ui_timout
  5581 ;;		_ui_begin
  5582 ;; This function uses a non-reentrant model
  5583 ;;
  5584                           
  5585                           	psect	text16
  5586  000F52                     __ptext16:
  5587                           	opt stack 0
  5588  000F52                     _new_nixie:
  5589                           	opt stack 3
  5590                           
  5591                           ;ui.c: 41: if(ui.num1<10)
  5592                           
  5593                           ;incstack = 0
  5594  000F52  0E0A               	movlw	10
  5595  000F54  6015               	cpfslt	_ui+2,c	;volatile
  5596  000F56  D019               	goto	l12537
  5597                           
  5598                           ;ui.c: 42: {
  5599                           ;ui.c: 43: nixie_z[0][0]=nixienum[ui.num1];
  5600  000F58  5015               	movf	_ui+2,w,c	;volatile
  5601  000F5A  D880               	call	PL42	;call to abstracted procedure
  5602  000F5C  CFF5 F001          	movff	tablat,_nixie_z	;volatile
  5603                           
  5604                           ;ui.c: 44: temp=nixie_z[0][0]&1;
  5605  000F60  5001               	movf	_nixie_z,w,c	;volatile
  5606  000F62  0B01               	andlw	1
  5607  000F64  6E42               	movwf	new_nixie@temp,c
  5608                           
  5609                           ;ui.c: 45: if(nixie_z[0][0]&2)
  5610  000F66  A201               	btfss	_nixie_z,1,c	;volatile
  5611  000F68  D002               	goto	l15493
  5612                           
  5613                           ;ui.c: 46: {
  5614                           ;ui.c: 47: nixie_z[0][0]|=1;
  5615  000F6A  8001               	bsf	_nixie_z,0,c	;volatile
  5616                           
  5617                           ;ui.c: 48: }
  5618  000F6C  D001               	goto	l15495
  5619  000F6E                     l15493:
  5620                           
  5621                           ;ui.c: 49: else
  5622                           ;ui.c: 50: {
  5623                           ;ui.c: 51: nixie_z[0][0]&=0xfe;
  5624  000F6E  9001               	bcf	_nixie_z,0,c	;volatile
  5625  000F70                     l15495:
  5626                           
  5627                           ;ui.c: 52: }
  5628                           ;ui.c: 53: if(temp)
  5629  000F70  5042               	movf	new_nixie@temp,w,c
  5630  000F72  E002               	bz	l15499
  5631                           
  5632                           ;ui.c: 54: {
  5633                           ;ui.c: 55: nixie_z[0][0]|=2;
  5634  000F74  8201               	bsf	_nixie_z,1,c	;volatile
  5635                           
  5636                           ;ui.c: 56: }
  5637  000F76  D001               	goto	l15501
  5638  000F78                     l15499:
  5639                           
  5640                           ;ui.c: 57: else
  5641                           ;ui.c: 58: {
  5642                           ;ui.c: 59: nixie_z[0][0]&=0xfd;
  5643  000F78  9201               	bcf	_nixie_z,1,c	;volatile
  5644  000F7A                     l15501:
  5645                           
  5646                           ;ui.c: 60: }
  5647                           ;ui.c: 61: if((ui.num1==1)&&(ui.num2==6))
  5648  000F7A  0415               	decf	_ui+2,w,c	;volatile
  5649  000F7C  E107               	bnz	l15507
  5650  000F7E  0E06               	movlw	6
  5651  000F80  1816               	xorwf	_ui+3,w,c	;volatile
  5652  000F82  E104               	bnz	l15507
  5653                           
  5654                           ;ui.c: 62: {
  5655                           ;ui.c: 63: nixie_z[0][0]=0x60;
  5656  000F84  0E60               	movlw	96
  5657  000F86  6E01               	movwf	_nixie_z,c	;volatile
  5658  000F88  D001               	goto	l15507
  5659  000F8A                     l12537:
  5660                           
  5661                           ;ui.c: 66: else
  5662                           ;ui.c: 67: {
  5663                           ;ui.c: 68: nixie_z[0][0]=0;
  5664  000F8A  6A01               	clrf	_nixie_z,c	;volatile
  5665  000F8C                     l15507:
  5666                           
  5667                           ;ui.c: 69: }
  5668                           ;ui.c: 70: if(ui.ou_d){nixie_z[0][1]|=1;}else{nixie_z[0][1]&=0xfe;}
  5669  000F8C  5017               	movf	_ui+4,w,c	;volatile
  5670  000F8E  E002               	bz	l15511
  5671  000F90  8002               	bsf	_nixie_z+1,0,c	;volatile
  5672  000F92  D001               	goto	l15513
  5673  000F94                     l15511:
  5674  000F94  9002               	bcf	_nixie_z+1,0,c	;volatile
  5675  000F96                     l15513:
  5676                           
  5677                           ;ui.c: 71: if(ui.wa){nixie_z[0][1]|=2;}else{nixie_z[0][1]&=0xfd;}
  5678  000F96  5018               	movf	_ui+5,w,c	;volatile
  5679  000F98  E002               	bz	l15517
  5680  000F9A  8202               	bsf	_nixie_z+1,1,c	;volatile
  5681  000F9C  D001               	goto	l15519
  5682  000F9E                     l15517:
  5683  000F9E  9202               	bcf	_nixie_z+1,1,c	;volatile
  5684  000FA0                     l15519:
  5685                           
  5686                           ;ui.c: 73: if(ui.num2<10)
  5687  000FA0  0E0A               	movlw	10
  5688  000FA2  6016               	cpfslt	_ui+3,c	;volatile
  5689  000FA4  D005               	goto	l12548
  5690                           
  5691                           ;ui.c: 74: {
  5692                           ;ui.c: 75: nixie_z[1][0]=nixienum[ui.num2];
  5693  000FA6  5016               	movf	_ui+3,w,c	;volatile
  5694  000FA8  D859               	call	PL42	;call to abstracted procedure
  5695  000FAA  CFF5 F003          	movff	tablat,_nixie_z+2	;volatile
  5696                           
  5697                           ;ui.c: 76: }
  5698  000FAE  D001               	goto	l15523
  5699  000FB0                     l12548:
  5700                           
  5701                           ;ui.c: 77: else
  5702                           ;ui.c: 78: {
  5703                           ;ui.c: 79: nixie_z[1][0]=0;
  5704  000FB0  6A03               	clrf	_nixie_z+2,c	;volatile
  5705  000FB2                     l15523:
  5706                           
  5707                           ;ui.c: 80: }
  5708                           ;ui.c: 81: if(ui.ts){nixie_z[1][1]|=2;}else{nixie_z[1][1]&=0xfd;}
  5709  000FB2  5019               	movf	_ui+6,w,c	;volatile
  5710  000FB4  E002               	bz	l15527
  5711  000FB6  8204               	bsf	_nixie_z+3,1,c	;volatile
  5712  000FB8  D001               	goto	l15529
  5713  000FBA                     l15527:
  5714  000FBA  9204               	bcf	_nixie_z+3,1,c	;volatile
  5715  000FBC                     l15529:
  5716                           
  5717                           ;ui.c: 83: nixie_z[2][0]=ui.w1?0xff:0;
  5718  000FBC  5013               	movf	_ui,w,c	;volatile
  5719  000FBE  E103               	bnz	l15533
  5720  000FC0  6A40               	clrf	_new_nixie$6535,c
  5721  000FC2  6A41               	clrf	_new_nixie$6535+1,c
  5722  000FC4  D002               	goto	l15535
  5723  000FC6                     l15533:
  5724  000FC6  6A41               	clrf	_new_nixie$6535+1,c
  5725  000FC8  6840               	setf	_new_nixie$6535,c
  5726  000FCA                     l15535:
  5727  000FCA  C040  F005         	movff	_new_nixie$6535,_nixie_z+4	;volatile
  5728                           
  5729                           ;ui.c: 84: if(ui.ou_d){nixie_z[2][1]|=1;}else{nixie_z[2][1]&=0xfe;}
  5730  000FCE  5017               	movf	_ui+4,w,c	;volatile
  5731  000FD0  E002               	bz	l15539
  5732  000FD2  8006               	bsf	_nixie_z+5,0,c	;volatile
  5733  000FD4  D001               	goto	l12557
  5734  000FD6                     l15539:
  5735  000FD6  9006               	bcf	_nixie_z+5,0,c	;volatile
  5736  000FD8                     l12557:
  5737                           
  5738                           ;ui.c: 85: nixie_z[2][1]&=0xfd;
  5739  000FD8  9206               	bcf	_nixie_z+5,1,c	;volatile
  5740                           
  5741                           ;ui.c: 87: if(ui.w1)
  5742  000FDA  5013               	movf	_ui,w,c	;volatile
  5743  000FDC  E00F               	bz	l12558
  5744                           
  5745                           ;ui.c: 88: {
  5746                           ;ui.c: 89: nixie_z[3][0]=0xff;
  5747  000FDE  6807               	setf	_nixie_z+6,c	;volatile
  5748                           
  5749                           ;ui.c: 90: nixie_z[3][1]=0x00;
  5750  000FE0  6A08               	clrf	_nixie_z+7,c	;volatile
  5751                           
  5752                           ;ui.c: 91: nixie_z[4][0]=0xff;
  5753  000FE2  6809               	setf	_nixie_z+8,c	;volatile
  5754                           
  5755                           ;ui.c: 92: nixie_z[4][1]=0x03;
  5756  000FE4  0E03               	movlw	3
  5757  000FE6  6E0A               	movwf	_nixie_z+9,c	;volatile
  5758                           
  5759                           ;ui.c: 93: nixie_z[5][0]=0xff;
  5760  000FE8  680B               	setf	_nixie_z+10,c	;volatile
  5761                           
  5762                           ;ui.c: 94: nixie_z[5][1]=0x03;
  5763  000FEA  0E03               	movlw	3
  5764  000FEC  6E0C               	movwf	_nixie_z+11,c	;volatile
  5765                           
  5766                           ;ui.c: 95: nixie_z[6][0]=0xff;
  5767  000FEE  680D               	setf	_nixie_z+12,c	;volatile
  5768                           
  5769                           ;ui.c: 96: nixie_z[6][1]=0x03;
  5770  000FF0  0E03               	movlw	3
  5771  000FF2  6E0E               	movwf	_nixie_z+13,c	;volatile
  5772                           
  5773                           ;ui.c: 97: nixie_z[7][0]=0xff;
  5774  000FF4  680F               	setf	_nixie_z+14,c	;volatile
  5775                           
  5776                           ;ui.c: 98: nixie_z[7][1]=0x03;
  5777  000FF6  0E03               	movlw	3
  5778  000FF8  6E10               	movwf	_nixie_z+15,c	;volatile
  5779                           
  5780                           ;ui.c: 99: }
  5781  000FFA  D00A               	goto	l12559
  5782  000FFC                     l12558:
  5783                           
  5784                           ;ui.c: 100: else
  5785                           ;ui.c: 101: {
  5786                           ;ui.c: 102: nixie_z[3][0]=0;
  5787  000FFC  6A07               	clrf	_nixie_z+6,c	;volatile
  5788                           
  5789                           ;ui.c: 103: nixie_z[3][1]=0;
  5790  000FFE  6A08               	clrf	_nixie_z+7,c	;volatile
  5791                           
  5792                           ;ui.c: 104: nixie_z[4][0]=0;
  5793  001000  6A09               	clrf	_nixie_z+8,c	;volatile
  5794                           
  5795                           ;ui.c: 105: nixie_z[4][1]=0;
  5796  001002  6A0A               	clrf	_nixie_z+9,c	;volatile
  5797                           
  5798                           ;ui.c: 106: nixie_z[5][0]=0;
  5799  001004  6A0B               	clrf	_nixie_z+10,c	;volatile
  5800                           
  5801                           ;ui.c: 107: nixie_z[5][1]=0;
  5802  001006  6A0C               	clrf	_nixie_z+11,c	;volatile
  5803                           
  5804                           ;ui.c: 108: nixie_z[6][0]=0;
  5805  001008  6A0D               	clrf	_nixie_z+12,c	;volatile
  5806                           
  5807                           ;ui.c: 109: nixie_z[6][1]=0;
  5808  00100A  6A0E               	clrf	_nixie_z+13,c	;volatile
  5809                           
  5810                           ;ui.c: 110: nixie_z[7][0]=0;
  5811  00100C  6A0F               	clrf	_nixie_z+14,c	;volatile
  5812                           
  5813                           ;ui.c: 111: nixie_z[7][1]=0;
  5814  00100E  6A10               	clrf	_nixie_z+15,c	;volatile
  5815  001010                     l12559:
  5816                           
  5817                           ;ui.c: 112: }
  5818                           ;ui.c: 113: temp=0;
  5819  001010  6A42               	clrf	new_nixie@temp,c
  5820                           
  5821                           ;ui.c: 114: if(ui.w2)
  5822  001012  5014               	movf	_ui+1,w,c	;volatile
  5823  001014  E002               	bz	l15557
  5824                           
  5825                           ;ui.c: 115: {
  5826                           ;ui.c: 116: temp=0xe0;
  5827  001016  0EE0               	movlw	224
  5828  001018  6E42               	movwf	new_nixie@temp,c
  5829  00101A                     l15557:
  5830                           
  5831                           ;ui.c: 117: }
  5832                           ;ui.c: 118: if(ui.dian>4)
  5833  00101A  0E04               	movlw	4
  5834  00101C  641B               	cpfsgt	_ui+8,c	;volatile
  5835  00101E  D002               	goto	l15561
  5836                           
  5837                           ;ui.c: 119: {
  5838                           ;ui.c: 120: nixie_z[8][0]=0;
  5839  001020  6A11               	clrf	_nixie_z+16,c	;volatile
  5840                           
  5841                           ;ui.c: 121: }
  5842  001022  D00E               	goto	l15563
  5843  001024                     l15561:
  5844                           
  5845                           ;ui.c: 122: else
  5846                           ;ui.c: 123: {
  5847                           ;ui.c: 124: nixie_z[8][0]=((0x0f<<(4-ui.dian))&0x0f);
  5848  001024  501B               	movf	_ui+8,w,c	;volatile
  5849  001026  0804               	sublw	4
  5850  001028  6E3E               	movwf	??_new_nixie& (0+255),c
  5851  00102A  0E0F               	movlw	15
  5852  00102C  6E3F               	movwf	(??_new_nixie+1)& (0+255),c
  5853  00102E  2A3E               	incf	??_new_nixie,f,c
  5854  001030  D002               	goto	u3814
  5855  001032                     u3815:
  5856  001032  90D8               	bcf	status,0,c
  5857  001034  363F               	rlcf	??_new_nixie+1,f,c
  5858  001036                     u3814:
  5859  001036  2E3E               	decfsz	??_new_nixie,f,c
  5860  001038  D7FC               	goto	u3815
  5861  00103A  503F               	movf	??_new_nixie+1,w,c
  5862  00103C  0B0F               	andlw	15
  5863  00103E  6E11               	movwf	_nixie_z+16,c	;volatile
  5864  001040                     l15563:
  5865                           
  5866                           ;ui.c: 125: }
  5867                           ;ui.c: 126: if(ui.dian_s)
  5868  001040  501C               	movf	_ui+9,w,c	;volatile
  5869  001042  E002               	bz	l15567
  5870                           
  5871                           ;ui.c: 127: {
  5872                           ;ui.c: 128: nixie_z[8][0]|=0x10;
  5873  001044  8811               	bsf	_nixie_z+16,4,c	;volatile
  5874                           
  5875                           ;ui.c: 129: }
  5876  001046  D001               	goto	l15569
  5877  001048                     l15567:
  5878                           
  5879                           ;ui.c: 130: else
  5880                           ;ui.c: 131: {
  5881                           ;ui.c: 132: nixie_z[8][0]&=0xef;
  5882  001048  9811               	bcf	_nixie_z+16,4,c	;volatile
  5883  00104A                     l15569:
  5884                           
  5885                           ;ui.c: 134: }
  5886                           ;ui.c: 135: nixie_z[8][0]|=temp;
  5887  00104A  5042               	movf	new_nixie@temp,w,c
  5888  00104C  1211               	iorwf	_nixie_z+16,f,c	;volatile
  5889                           
  5890                           ;ui.c: 136: nixie_z[8][1]=0;
  5891  00104E  6A12               	clrf	_nixie_z+17,c	;volatile
  5892                           
  5893                           ;ui.c: 138: if(ui.yd){nixie_z[1][1]|=1;}else{nixie_z[1][1]&=0xfe;}
  5894  001050  501A               	movf	_ui+7,w,c	;volatile
  5895  001052  E002               	bz	l15577
  5896  001054  8004               	bsf	_nixie_z+3,0,c	;volatile
  5897  001056  0012               	return	
  5898  001058                     l15577:
  5899  001058  9004               	bcf	_nixie_z+3,0,c	;volatile
  5900  00105A  0012               	return		;funcret
  5901  00105C                     __end_of_new_nixie:
  5902                           	opt stack 0
  5903  00105C                     PL42:
  5904                           	opt stack 3
  5905  00105C  0F01               	addlw	low _nixienum
  5906  00105E  6E3E               	movwf	??_new_nixie& (0+255),c
  5907  001060  C03E  FFF6         	movff	??_new_nixie,tblptrl
  5908  001064                     	if	1	;There is more than 1 active tblptr byte
  5909  001064  0E01               	movlw	high __smallconst
  5910  001066  6EF7               	movwf	tblptrh,c
  5911  001068                     	endif
  5912  001068                     	if	0	;tblptru may be non-zero
  5913  001068                     	endif
  5914  001068                     	if	0	;tblptru may be non-zero
  5915  001068                     	endif
  5916  001068  0008               	tblrd		*
  5917  00106A  0012               	return	
  5918  00106C                     __end_ofPL42:
  5919                           	opt stack 0
  5920                           tblptru	equ	0xFF8
  5921                           tblptrh	equ	0xFF7
  5922                           tblptrl	equ	0xFF6
  5923                           tablat	equ	0xFF5
  5924                           prodl	equ	0xFF3
  5925                           intcon	equ	0xFF2
  5926                           intcon2	equ	0xFF1
  5927                           intcon3	equ	0xFF0
  5928                           postinc0	equ	0xFEE
  5929                           wreg	equ	0xFE8
  5930                           postdec1	equ	0xFE5
  5931                           fsr1l	equ	0xFE1
  5932                           indf2	equ	0xFDF
  5933                           postinc2	equ	0xFDE
  5934                           postdec2	equ	0xFDD
  5935                           fsr2h	equ	0xFDA
  5936                           fsr2l	equ	0xFD9
  5937                           status	equ	0xFD8
  5938                           
  5939 ;; *************** function _ldz *****************
  5940 ;; Defined at:
  5941 ;;		line 142 in file ".\src\ui.c"
  5942 ;; Parameters:    Size  Location     Type
  5943 ;;  a               1    wreg     unsigned char 
  5944 ;; Auto vars:     Size  Location     Type
  5945 ;;  a               1    1[COMRAM] unsigned char 
  5946 ;; Return value:  Size  Location     Type
  5947 ;;                  1    wreg      void 
  5948 ;; Registers used:
  5949 ;;		wreg
  5950 ;; Tracked objects:
  5951 ;;		On entry : 0/0
  5952 ;;		On exit  : 0/0
  5953 ;;		Unchanged: 0/0
  5954 ;; Data sizes:     COMRAM   BANK0
  5955 ;;      Params:         0       0
  5956 ;;      Locals:         1       0
  5957 ;;      Temps:          0       0
  5958 ;;      Totals:         1       0
  5959 ;;Total ram usage:        1 bytes
  5960 ;; Hardware stack levels used:    1
  5961 ;; Hardware stack levels required when called:    2
  5962 ;; This function calls:
  5963 ;;		Nothing
  5964 ;; This function is called by:
  5965 ;;		_ui_cb
  5966 ;;		_ui_chrg
  5967 ;;		_ui_chrgfree
  5968 ;;		_ui_chrgfull
  5969 ;;		_ui_smoend_dl_getup
  5970 ;;		_ui_kl
  5971 ;;		_ui_ts_on
  5972 ;;		_ui_ts_off
  5973 ;;		_ui_timout
  5974 ;;		_ui_begin
  5975 ;; This function uses a non-reentrant model
  5976 ;;
  5977                           
  5978                           	psect	text17
  5979  001C8A                     __ptext17:
  5980                           	opt stack 0
  5981  001C8A                     _ldz:
  5982                           	opt stack 3
  5983                           
  5984                           ;incstack = 0
  5985                           ;ldz@a stored from wreg
  5986  001C8A  6E3E               	movwf	ldz@a,c
  5987                           
  5988                           ;ui.c: 144: ui_ld.n =a;
  5989  001C8C  C03E  F06F         	movff	ldz@a,_ui_ld+1
  5990                           
  5991                           ;ui.c: 145: ui_ld.ts =a;
  5992  001C90  C03E  F070         	movff	ldz@a,_ui_ld+2
  5993                           
  5994                           ;ui.c: 146: ui_ld.w =a;
  5995  001C94  C03E  F06E         	movff	ldz@a,_ui_ld
  5996  001C98  0012               	return		;funcret
  5997  001C9A                     __end_of_ldz:
  5998                           	opt stack 0
  5999                           tblptru	equ	0xFF8
  6000                           tblptrh	equ	0xFF7
  6001                           tblptrl	equ	0xFF6
  6002                           tablat	equ	0xFF5
  6003                           prodl	equ	0xFF3
  6004                           intcon	equ	0xFF2
  6005                           intcon2	equ	0xFF1
  6006                           intcon3	equ	0xFF0
  6007                           postinc0	equ	0xFEE
  6008                           wreg	equ	0xFE8
  6009                           postdec1	equ	0xFE5
  6010                           fsr1l	equ	0xFE1
  6011                           indf2	equ	0xFDF
  6012                           postinc2	equ	0xFDE
  6013                           postdec2	equ	0xFDD
  6014                           fsr2h	equ	0xFDA
  6015                           fsr2l	equ	0xFD9
  6016                           status	equ	0xFD8
  6017                           
  6018 ;; *************** function _sleep_task *****************
  6019 ;; Defined at:
  6020 ;;		line 5 in file ".\src\sleep.c"
  6021 ;; Parameters:    Size  Location     Type
  6022 ;;  task_           1    1[COMRAM] PTR struct task
  6023 ;;		 -> task_list(72), 
  6024 ;; Auto vars:     Size  Location     Type
  6025 ;;		None
  6026 ;; Return value:  Size  Location     Type
  6027 ;;                  1    wreg      void 
  6028 ;; Registers used:
  6029 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6030 ;; Tracked objects:
  6031 ;;		On entry : 3F/0
  6032 ;;		On exit  : 0/0
  6033 ;;		Unchanged: 0/0
  6034 ;; Data sizes:     COMRAM   BANK0
  6035 ;;      Params:         1       0
  6036 ;;      Locals:         0       0
  6037 ;;      Temps:          2       0
  6038 ;;      Totals:         3       0
  6039 ;;Total ram usage:        3 bytes
  6040 ;; Hardware stack levels used:    1
  6041 ;; Hardware stack levels required when called:    3
  6042 ;; This function calls:
  6043 ;;		_cmp0_init
  6044 ;;		_gpio_init
  6045 ;;		_sleep_mode
  6046 ;;		_timer0_init
  6047 ;;		_timer1_init
  6048 ;;		_timer2_init
  6049 ;; This function is called by:
  6050 ;;		_main
  6051 ;;		_find_task
  6052 ;; This function uses a non-reentrant model
  6053 ;;
  6054                           
  6055                           	psect	text18
  6056  0018A4                     __ptext18:
  6057                           	opt stack 0
  6058  0018A4                     _sleep_task:
  6059                           	opt stack 4
  6060                           
  6061                           ; BSR set to: 0
  6062                           ;sleep.c: 7: if(task_list[ui_id].active==0)
  6063                           
  6064                           ;incstack = 0
  6065  0018A4  503C               	movf	_ui_id,w,c
  6066  0018A6  EC99  F005         	call	PL16	;call to abstracted procedure
  6067  0018AA  50DF               	movf	indf2,w,c
  6068  0018AC  E12B               	bnz	l16003
  6069                           
  6070                           ; BSR set to: 0
  6071                           ;sleep.c: 8: {
  6072                           ;sleep.c: 9: task_->sucCnt++;
  6073  0018AE  503E               	movf	sleep_task@task_,w,c
  6074  0018B0  ECF4  F009         	call	PL2	;call to abstracted procedure
  6075  0018B4  2ADF               	incf	indf2,f,c
  6076                           
  6077                           ;sleep.c: 10: if(task_->sucCnt>=25)
  6078  0018B6  503E               	movf	sleep_task@task_,w,c
  6079  0018B8  ECF4  F009         	call	PL2	;call to abstracted procedure
  6080  0018BC  0E18               	movlw	24
  6081  0018BE  64DF               	cpfsgt	indf2,c
  6082  0018C0  0C18               	retlw	24
  6083                           
  6084                           ; BSR set to: 0
  6085                           ;sleep.c: 11: {
  6086                           ;sleep.c: 12: task_->sucCnt=0;
  6087  0018C2  503E               	movf	sleep_task@task_,w,c
  6088  0018C4  ECF4  F009         	call	PL2	;call to abstracted procedure
  6089  0018C8  6ADF               	clrf	indf2,c
  6090                           
  6091                           ; BSR set to: 0
  6092                           ;sleep.c: 13: sleep_mode();
  6093  0018CA  ECBA  F00C         	call	_sleep_mode	;wreg free
  6094  0018CE  F000               	nop		;# 
  6095                           
  6096                           ;sleep.c: 16: gpio_init();
  6097  0018D0  ECE9  F00D         	call	_gpio_init	;wreg free
  6098                           
  6099                           ;sleep.c: 17: timer0_init();
  6100  0018D4  EC32  F00E         	call	_timer0_init	;wreg free
  6101                           
  6102                           ;sleep.c: 18: _delay((unsigned long)((30)*(16000000/4000000)));
  6103  0018D8  0E28               	movlw	40
  6104  0018DA                     u7137:
  6105  0018DA  2EE8               	decfsz	wreg,f,c
  6106  0018DC  D7FE               	bra	u7137
  6107                           
  6108                           ;sleep.c: 19: timer1_init();
  6109  0018DE  EC0D  F00E         	call	_timer1_init	;wreg free
  6110                           
  6111                           ;sleep.c: 20: timer2_init();
  6112  0018E2  EC27  F00E         	call	_timer2_init	;wreg free
  6113                           
  6114                           ;sleep.c: 21: cmp0_init();
  6115  0018E6  EC1B  F00E         	call	_cmp0_init	;wreg free
  6116                           
  6117                           ;sleep.c: 26: _delay((unsigned long)((50)*(16000000/4000.0)));
  6118  0018EA  0E02               	movlw	2
  6119  0018EC  6E40               	movwf	(??_sleep_task+1)& (0+255),c
  6120  0018EE  0E04               	movlw	4
  6121  0018F0  6E3F               	movwf	??_sleep_task& (0+255),c
  6122  0018F2  0EBA               	movlw	186
  6123  0018F4                     u7147:
  6124  0018F4  2EE8               	decfsz	wreg,f,c
  6125  0018F6  D7FE               	bra	u7147
  6126  0018F8  2E3F               	decfsz	??_sleep_task& (0+255),f,c
  6127  0018FA  D7FC               	bra	u7147
  6128  0018FC  2E40               	decfsz	(??_sleep_task+1)& (0+255),f,c
  6129  0018FE  D7FA               	bra	u7147
  6130  001900  D000               	nop2	
  6131  001902  0012               	return	
  6132  001904                     l16003:
  6133                           
  6134                           ; BSR set to: 0
  6135                           ;sleep.c: 30: else
  6136                           ;sleep.c: 31: {
  6137                           ;sleep.c: 32: task_->sucCnt=0;
  6138  001904  503E               	movf	sleep_task@task_,w,c
  6139  001906  ECF4  F009         	call	PL2	;call to abstracted procedure
  6140  00190A  6ADF               	clrf	indf2,c
  6141  00190C  0C00               	retlw	0	;funcret
  6142  00190E                     __end_of_sleep_task:
  6143                           	opt stack 0
  6144                           tblptru	equ	0xFF8
  6145                           tblptrh	equ	0xFF7
  6146                           tblptrl	equ	0xFF6
  6147                           tablat	equ	0xFF5
  6148                           prodl	equ	0xFF3
  6149                           intcon	equ	0xFF2
  6150                           intcon2	equ	0xFF1
  6151                           intcon3	equ	0xFF0
  6152                           postinc0	equ	0xFEE
  6153                           wreg	equ	0xFE8
  6154                           postdec1	equ	0xFE5
  6155                           fsr1l	equ	0xFE1
  6156                           indf2	equ	0xFDF
  6157                           postinc2	equ	0xFDE
  6158                           postdec2	equ	0xFDD
  6159                           fsr2h	equ	0xFDA
  6160                           fsr2l	equ	0xFD9
  6161                           status	equ	0xFD8
  6162                           
  6163 ;; *************** function _timer2_init *****************
  6164 ;; Defined at:
  6165 ;;		line 68 in file ".\src\peripheral.c"
  6166 ;; Parameters:    Size  Location     Type
  6167 ;;		None
  6168 ;; Auto vars:     Size  Location     Type
  6169 ;;		None
  6170 ;; Return value:  Size  Location     Type
  6171 ;;                  1    wreg      void 
  6172 ;; Registers used:
  6173 ;;		wreg, status,2
  6174 ;; Tracked objects:
  6175 ;;		On entry : 0/0
  6176 ;;		On exit  : 0/0
  6177 ;;		Unchanged: 0/0
  6178 ;; Data sizes:     COMRAM   BANK0
  6179 ;;      Params:         0       0
  6180 ;;      Locals:         0       0
  6181 ;;      Temps:          0       0
  6182 ;;      Totals:         0       0
  6183 ;;Total ram usage:        0 bytes
  6184 ;; Hardware stack levels used:    1
  6185 ;; Hardware stack levels required when called:    2
  6186 ;; This function calls:
  6187 ;;		Nothing
  6188 ;; This function is called by:
  6189 ;;		_main
  6190 ;;		_sleep_task
  6191 ;;		_ui_begin
  6192 ;; This function uses a non-reentrant model
  6193 ;;
  6194                           
  6195                           	psect	text19
  6196  001C4E                     __ptext19:
  6197                           	opt stack 0
  6198  001C4E                     _timer2_init:
  6199                           	opt stack 5
  6200                           
  6201                           ;peripheral.c: 71: PR2=79;
  6202                           
  6203                           ;incstack = 0
  6204  001C4E  0E4F               	movlw	79
  6205  001C50  6EC8               	movwf	4040,c	;volatile
  6206                           
  6207                           ;peripheral.c: 72: TMR2=0;
  6208  001C52  6ACA               	clrf	4042,c	;volatile
  6209                           
  6210                           ;peripheral.c: 73: T2CON0=0x0;
  6211  001C54  6AC1               	clrf	4033,c	;volatile
  6212                           
  6213                           ;peripheral.c: 74: T2CON1=2;
  6214  001C56  0E02               	movlw	2
  6215  001C58  6EC0               	movwf	4032,c	;volatile
  6216                           
  6217                           ;peripheral.c: 75: TMR2IF=0;
  6218  001C5A  98B0               	bcf	4016,4,c	;volatile
  6219                           
  6220                           ;peripheral.c: 76: TMR2IE=0;
  6221  001C5C  98AF               	bcf	4015,4,c	;volatile
  6222                           
  6223                           ;peripheral.c: 77: TMR2IP=0;
  6224  001C5E  98B1               	bcf	4017,4,c	;volatile
  6225                           
  6226                           ;peripheral.c: 78: TMR2ON=1;
  6227  001C60  84C1               	bsf	4033,2,c	;volatile
  6228  001C62  0C02               	retlw	2	;funcret
  6229  001C64                     __end_of_timer2_init:
  6230                           	opt stack 0
  6231                           tblptru	equ	0xFF8
  6232                           tblptrh	equ	0xFF7
  6233                           tblptrl	equ	0xFF6
  6234                           tablat	equ	0xFF5
  6235                           prodl	equ	0xFF3
  6236                           intcon	equ	0xFF2
  6237                           intcon2	equ	0xFF1
  6238                           intcon3	equ	0xFF0
  6239                           postinc0	equ	0xFEE
  6240                           wreg	equ	0xFE8
  6241                           postdec1	equ	0xFE5
  6242                           fsr1l	equ	0xFE1
  6243                           indf2	equ	0xFDF
  6244                           postinc2	equ	0xFDE
  6245                           postdec2	equ	0xFDD
  6246                           fsr2h	equ	0xFDA
  6247                           fsr2l	equ	0xFD9
  6248                           status	equ	0xFD8
  6249                           
  6250 ;; *************** function _timer1_init *****************
  6251 ;; Defined at:
  6252 ;;		line 44 in file ".\src\peripheral.c"
  6253 ;; Parameters:    Size  Location     Type
  6254 ;;		None
  6255 ;; Auto vars:     Size  Location     Type
  6256 ;;		None
  6257 ;; Return value:  Size  Location     Type
  6258 ;;                  1    wreg      void 
  6259 ;; Registers used:
  6260 ;;		wreg, status,2
  6261 ;; Tracked objects:
  6262 ;;		On entry : 0/0
  6263 ;;		On exit  : 0/0
  6264 ;;		Unchanged: 0/0
  6265 ;; Data sizes:     COMRAM   BANK0
  6266 ;;      Params:         0       0
  6267 ;;      Locals:         0       0
  6268 ;;      Temps:          0       0
  6269 ;;      Totals:         0       0
  6270 ;;Total ram usage:        0 bytes
  6271 ;; Hardware stack levels used:    1
  6272 ;; Hardware stack levels required when called:    2
  6273 ;; This function calls:
  6274 ;;		Nothing
  6275 ;; This function is called by:
  6276 ;;		_main
  6277 ;;		_sleep_task
  6278 ;;		_ui_begin
  6279 ;; This function uses a non-reentrant model
  6280 ;;
  6281                           
  6282                           	psect	text20
  6283  001C1A                     __ptext20:
  6284                           	opt stack 0
  6285  001C1A                     _timer1_init:
  6286                           	opt stack 5
  6287                           
  6288                           ;peripheral.c: 47: PR1H=0x1;
  6289                           
  6290                           ;incstack = 0
  6291  001C1A  0E01               	movlw	1
  6292  001C1C  6ECF               	movwf	4047,c	;volatile
  6293                           
  6294                           ;peripheral.c: 48: PR1L=0xf3;
  6295  001C1E  0EF3               	movlw	243
  6296  001C20  6ECE               	movwf	4046,c	;volatile
  6297                           
  6298                           ;peripheral.c: 54: TMR1H=0x0;
  6299  001C22  6AD1               	clrf	4049,c	;volatile
  6300                           
  6301                           ;peripheral.c: 55: TMR1L=0x0;
  6302  001C24  6AD0               	clrf	4048,c	;volatile
  6303                           
  6304                           ;peripheral.c: 57: T1CON0=0x18;
  6305  001C26  0E18               	movlw	24
  6306  001C28  6ECD               	movwf	4045,c	;volatile
  6307                           
  6308                           ;peripheral.c: 58: T1CON1=0;
  6309  001C2A  6ACC               	clrf	4044,c	;volatile
  6310                           
  6311                           ;peripheral.c: 60: TMR1ON=1;
  6312  001C2C  80CD               	bsf	4045,0,c	;volatile
  6313                           
  6314                           ;peripheral.c: 62: TMR1IE=1;
  6315  001C2E  82AF               	bsf	4015,1,c	;volatile
  6316                           
  6317                           ;peripheral.c: 63: PEIE=1;
  6318  001C30  8CF2               	bsf	intcon,6,c	;volatile
  6319                           
  6320                           ;peripheral.c: 64: GIE=1;
  6321  001C32  8EF2               	bsf	intcon,7,c	;volatile
  6322  001C34  0012               	return		;funcret
  6323  001C36                     __end_of_timer1_init:
  6324                           	opt stack 0
  6325                           tblptru	equ	0xFF8
  6326                           tblptrh	equ	0xFF7
  6327                           tblptrl	equ	0xFF6
  6328                           tablat	equ	0xFF5
  6329                           prodl	equ	0xFF3
  6330                           intcon	equ	0xFF2
  6331                           intcon2	equ	0xFF1
  6332                           intcon3	equ	0xFF0
  6333                           postinc0	equ	0xFEE
  6334                           wreg	equ	0xFE8
  6335                           postdec1	equ	0xFE5
  6336                           fsr1l	equ	0xFE1
  6337                           indf2	equ	0xFDF
  6338                           postinc2	equ	0xFDE
  6339                           postdec2	equ	0xFDD
  6340                           fsr2h	equ	0xFDA
  6341                           fsr2l	equ	0xFD9
  6342                           status	equ	0xFD8
  6343                           
  6344 ;; *************** function _timer0_init *****************
  6345 ;; Defined at:
  6346 ;;		line 101 in file ".\src\peripheral.c"
  6347 ;; Parameters:    Size  Location     Type
  6348 ;;		None
  6349 ;; Auto vars:     Size  Location     Type
  6350 ;;		None
  6351 ;; Return value:  Size  Location     Type
  6352 ;;                  1    wreg      void 
  6353 ;; Registers used:
  6354 ;;		wreg, status,2
  6355 ;; Tracked objects:
  6356 ;;		On entry : 0/0
  6357 ;;		On exit  : 0/0
  6358 ;;		Unchanged: 0/0
  6359 ;; Data sizes:     COMRAM   BANK0
  6360 ;;      Params:         0       0
  6361 ;;      Locals:         0       0
  6362 ;;      Temps:          0       0
  6363 ;;      Totals:         0       0
  6364 ;;Total ram usage:        0 bytes
  6365 ;; Hardware stack levels used:    1
  6366 ;; Hardware stack levels required when called:    2
  6367 ;; This function calls:
  6368 ;;		Nothing
  6369 ;; This function is called by:
  6370 ;;		_main
  6371 ;;		_sleep_task
  6372 ;;		_ui_begin
  6373 ;; This function uses a non-reentrant model
  6374 ;;
  6375                           
  6376                           	psect	text21
  6377  001C64                     __ptext21:
  6378                           	opt stack 0
  6379  001C64                     _timer0_init:
  6380                           	opt stack 5
  6381                           
  6382                           ;peripheral.c: 103: PR0=49;
  6383                           
  6384                           ;incstack = 0
  6385  001C64  0E31               	movlw	49
  6386  001C66  6ED6               	movwf	4054,c	;volatile
  6387                           
  6388                           ;peripheral.c: 104: TMR0=0;
  6389  001C68  6AD5               	clrf	4053,c	;volatile
  6390                           
  6391                           ;peripheral.c: 107: T0CON=0x03;
  6392  001C6A  0E03               	movlw	3
  6393  001C6C  6ED7               	movwf	4055,c	;volatile
  6394                           
  6395                           ;peripheral.c: 112: TMR0IF=0;
  6396  001C6E  90B0               	bcf	4016,0,c	;volatile
  6397                           
  6398                           ;peripheral.c: 113: TMR0IE=1;
  6399  001C70  80AF               	bsf	4015,0,c	;volatile
  6400                           
  6401                           ;peripheral.c: 114: PEIE=1;
  6402  001C72  8CF2               	bsf	intcon,6,c	;volatile
  6403                           
  6404                           ;peripheral.c: 115: GIE=1;
  6405  001C74  8EF2               	bsf	intcon,7,c	;volatile
  6406  001C76  0C03               	retlw	3	;funcret
  6407  001C78                     __end_of_timer0_init:
  6408                           	opt stack 0
  6409                           tblptru	equ	0xFF8
  6410                           tblptrh	equ	0xFF7
  6411                           tblptrl	equ	0xFF6
  6412                           tablat	equ	0xFF5
  6413                           prodl	equ	0xFF3
  6414                           intcon	equ	0xFF2
  6415                           intcon2	equ	0xFF1
  6416                           intcon3	equ	0xFF0
  6417                           postinc0	equ	0xFEE
  6418                           wreg	equ	0xFE8
  6419                           postdec1	equ	0xFE5
  6420                           fsr1l	equ	0xFE1
  6421                           indf2	equ	0xFDF
  6422                           postinc2	equ	0xFDE
  6423                           postdec2	equ	0xFDD
  6424                           fsr2h	equ	0xFDA
  6425                           fsr2l	equ	0xFD9
  6426                           status	equ	0xFD8
  6427                           
  6428 ;; *************** function _sleep_mode *****************
  6429 ;; Defined at:
  6430 ;;		line 35 in file ".\src\sleep.c"
  6431 ;; Parameters:    Size  Location     Type
  6432 ;;		None
  6433 ;; Auto vars:     Size  Location     Type
  6434 ;;		None
  6435 ;; Return value:  Size  Location     Type
  6436 ;;                  1    wreg      void 
  6437 ;; Registers used:
  6438 ;;		wreg, status,2
  6439 ;; Tracked objects:
  6440 ;;		On entry : 3F/0
  6441 ;;		On exit  : 0/0
  6442 ;;		Unchanged: 0/0
  6443 ;; Data sizes:     COMRAM   BANK0
  6444 ;;      Params:         0       0
  6445 ;;      Locals:         0       0
  6446 ;;      Temps:          0       0
  6447 ;;      Totals:         0       0
  6448 ;;Total ram usage:        0 bytes
  6449 ;; Hardware stack levels used:    1
  6450 ;; Hardware stack levels required when called:    2
  6451 ;; This function calls:
  6452 ;;		Nothing
  6453 ;; This function is called by:
  6454 ;;		_sleep_task
  6455 ;;		_ui_begin
  6456 ;; This function uses a non-reentrant model
  6457 ;;
  6458                           
  6459                           	psect	text22
  6460  001974                     __ptext22:
  6461                           	opt stack 0
  6462  001974                     _sleep_mode:
  6463                           	opt stack 4
  6464                           
  6465                           ; BSR set to: 0
  6466                           ;sleep.c: 37: PME=0;
  6467                           
  6468                           ;incstack = 0
  6469  001974  6ABD               	clrf	4029,c	;volatile
  6470                           
  6471                           ; BSR set to: 0
  6472                           ;sleep.c: 38: PORTA = 0X01;
  6473                           
  6474                           ;sleep.c: 39: PORTB = 0X01;
  6475                           
  6476                           ; BSR set to: 0
  6477                           ;sleep.c: 40: PORTC = 0X00;
  6478  001976  D827               	call	PL68	;call to abstracted procedure
  6479                           
  6480                           ; BSR set to: 0
  6481                           ;sleep.c: 47: PAPU = 0XfF;
  6482  001978  6883               	setf	3971,c	;volatile
  6483                           
  6484                           ; BSR set to: 0
  6485                           ;sleep.c: 48: PBPU = 0XFf;
  6486                           
  6487                           ;sleep.c: 49: PCPU = 0Xbf;
  6488                           
  6489                           ;sleep.c: 51: PAPD = 0XeF;
  6490  00197A  D81F               	call	PL60	;call to abstracted procedure
  6491                           
  6492                           ; BSR set to: 0
  6493                           ;sleep.c: 53: PAOD = 0X00;
  6494  00197C  6A92               	clrf	3986,c	;volatile
  6495                           
  6496                           ; BSR set to: 0
  6497                           ;sleep.c: 55: TMR1ON=0;
  6498  00197E  90CD               	bcf	4045,0,c	;volatile
  6499                           
  6500                           ; BSR set to: 0
  6501                           ;sleep.c: 56: TMR2ON=0;
  6502  001980  94C1               	bcf	4033,2,c	;volatile
  6503                           
  6504                           ; BSR set to: 0
  6505                           ;sleep.c: 58: FVREN=0;
  6506  001982  90D3               	bcf	4051,0,c	;volatile
  6507                           
  6508                           ; BSR set to: 0
  6509                           ;sleep.c: 59: DACEN=0;
  6510  001984  9CA4               	bcf	4004,6,c	;volatile
  6511                           
  6512                           ; BSR set to: 0
  6513                           ;sleep.c: 60: CMP0EN=0;
  6514  001986  9EA8               	bcf	4008,7,c	;volatile
  6515                           
  6516                           ; BSR set to: 0
  6517                           ;sleep.c: 61: CMP1EN=0;
  6518  001988  9EA6               	bcf	4006,7,c	;volatile
  6519                           
  6520                           ; BSR set to: 0
  6521                           ;sleep.c: 63: ADON=0;
  6522  00198A  90A1               	bcf	4001,0,c	;volatile
  6523                           
  6524                           ;sleep.c: 69: TRISA = 0X30;
  6525  00198C  0E30               	movlw	48
  6526  00198E  6E89               	movwf	3977,c	;volatile
  6527                           
  6528                           ;sleep.c: 70: TRISB = 0X02;
  6529  001990  0E02               	movlw	2
  6530  001992  6E8A               	movwf	3978,c	;volatile
  6531                           
  6532                           ;sleep.c: 71: TRISC = 0X40;
  6533  001994  0E40               	movlw	64
  6534  001996  6E8B               	movwf	3979,c	;volatile
  6535                           
  6536                           ; BSR set to: 0
  6537                           ;sleep.c: 73: PA4MSK=1;
  6538  001998  888F               	bsf	3983,4,c	;volatile
  6539                           
  6540                           ; BSR set to: 0
  6541                           ;sleep.c: 74: PA5MSK=1;
  6542  00199A  8A8F               	bsf	3983,5,c	;volatile
  6543                           
  6544                           ; BSR set to: 0
  6545                           ;sleep.c: 75: PB1MSK=1;
  6546  00199C  8290               	bsf	3984,1,c	;volatile
  6547                           
  6548                           ; BSR set to: 0
  6549                           ;sleep.c: 76: PC6MSK=1;
  6550  00199E  8C91               	bsf	3985,6,c	;volatile
  6551                           
  6552                           ; BSR set to: 0
  6553                           ;sleep.c: 78: PAIF=0;
  6554  0019A0  9AAD               	bcf	4013,5,c	;volatile
  6555                           
  6556                           ; BSR set to: 0
  6557                           ;sleep.c: 79: PBIF=0;
  6558  0019A2  9CAD               	bcf	4013,6,c	;volatile
  6559                           
  6560                           ; BSR set to: 0
  6561                           ;sleep.c: 80: PCIF=0;
  6562  0019A4  9EAD               	bcf	4013,7,c	;volatile
  6563                           
  6564                           ; BSR set to: 0
  6565                           ;sleep.c: 87: PAIE=1;
  6566                           
  6567                           ; BSR set to: 0
  6568                           ;sleep.c: 85: PINC6;
  6569                           
  6570                           ; BSR set to: 0
  6571                           ;sleep.c: 84: PINB1;
  6572                           
  6573                           ; BSR set to: 0
  6574                           ;sleep.c: 83: PINA5;
  6575                           
  6576                           ; BSR set to: 0
  6577                           ;sleep.c: 82: PINA4;
  6578  0019A6  8AAC               	bsf	4012,5,c	;volatile
  6579                           
  6580                           ; BSR set to: 0
  6581                           ;sleep.c: 88: PBIE=1;
  6582  0019A8  8CAC               	bsf	4012,6,c	;volatile
  6583                           
  6584                           ; BSR set to: 0
  6585                           ;sleep.c: 89: PCIE=1;
  6586  0019AA  8EAC               	bsf	4012,7,c	;volatile
  6587                           
  6588                           ; BSR set to: 0
  6589                           ;sleep.c: 90: PEIE=1;
  6590  0019AC  8CF2               	bsf	intcon,6,c	;volatile
  6591                           
  6592                           ; BSR set to: 0
  6593                           ;sleep.c: 91: GIE=1;
  6594  0019AE  8EF2               	bsf	intcon,7,c	;volatile
  6595                           
  6596                           ;sleep.c: 93: SMCR = 0X07; asm(" sleep");asm(" nop");
  6597  0019B0  0E07               	movlw	7
  6598  0019B2  6ED4               	movwf	4052,c	;volatile
  6599  0019B4  0003               	sleep		;# 
  6600  0019B6  F000               	nop		;# 
  6601  0019B8  0C07               	retlw	7	;funcret
  6602  0019BA                     __end_of_sleep_mode:
  6603                           	opt stack 0
  6604  0019BA                     PL60:
  6605                           	opt stack 4
  6606  0019BA  6884               	setf	3972,c	;volatile
  6607  0019BC  0EBF               	movlw	191
  6608  0019BE  6E85               	movwf	3973,c	;volatile
  6609  0019C0  0EEF               	movlw	239
  6610  0019C2  6E94               	movwf	3988,c	;volatile
  6611  0019C4  0CEF               	retlw	239
  6612  0019C6                     __end_ofPL60:
  6613                           	opt stack 0
  6614  0019C6                     PL68:
  6615                           	opt stack 4
  6616  0019C6  0E01               	movlw	1
  6617  0019C8  6E80               	movwf	3968,c	;volatile
  6618  0019CA  6E81               	movwf	3969,c	;volatile
  6619  0019CC  6A82               	clrf	3970,c	;volatile
  6620  0019CE  0012               	return	
  6621  0019D0                     __end_ofPL68:
  6622                           	opt stack 0
  6623                           tblptru	equ	0xFF8
  6624                           tblptrh	equ	0xFF7
  6625                           tblptrl	equ	0xFF6
  6626                           tablat	equ	0xFF5
  6627                           prodl	equ	0xFF3
  6628                           intcon	equ	0xFF2
  6629                           intcon2	equ	0xFF1
  6630                           intcon3	equ	0xFF0
  6631                           postinc0	equ	0xFEE
  6632                           wreg	equ	0xFE8
  6633                           postdec1	equ	0xFE5
  6634                           fsr1l	equ	0xFE1
  6635                           indf2	equ	0xFDF
  6636                           postinc2	equ	0xFDE
  6637                           postdec2	equ	0xFDD
  6638                           fsr2h	equ	0xFDA
  6639                           fsr2l	equ	0xFD9
  6640                           status	equ	0xFD8
  6641                           
  6642 ;; *************** function _gpio_init *****************
  6643 ;; Defined at:
  6644 ;;		line 4 in file ".\src\peripheral.c"
  6645 ;; Parameters:    Size  Location     Type
  6646 ;;		None
  6647 ;; Auto vars:     Size  Location     Type
  6648 ;;		None
  6649 ;; Return value:  Size  Location     Type
  6650 ;;                  1    wreg      void 
  6651 ;; Registers used:
  6652 ;;		wreg, status,2
  6653 ;; Tracked objects:
  6654 ;;		On entry : 0/0
  6655 ;;		On exit  : 0/0
  6656 ;;		Unchanged: 0/0
  6657 ;; Data sizes:     COMRAM   BANK0
  6658 ;;      Params:         0       0
  6659 ;;      Locals:         0       0
  6660 ;;      Temps:          0       0
  6661 ;;      Totals:         0       0
  6662 ;;Total ram usage:        0 bytes
  6663 ;; Hardware stack levels used:    1
  6664 ;; Hardware stack levels required when called:    2
  6665 ;; This function calls:
  6666 ;;		Nothing
  6667 ;; This function is called by:
  6668 ;;		_main
  6669 ;;		_sleep_task
  6670 ;;		_ui_begin
  6671 ;; This function uses a non-reentrant model
  6672 ;;
  6673                           
  6674                           	psect	text23
  6675  001BD2                     __ptext23:
  6676                           	opt stack 0
  6677  001BD2                     _gpio_init:
  6678                           	opt stack 4
  6679                           
  6680                           ;peripheral.c: 6: OSCCON=0x73;
  6681                           
  6682                           ;incstack = 0
  6683  001BD2  0E73               	movlw	115
  6684  001BD4  6EF0               	movwf	intcon3,c	;volatile
  6685                           
  6686                           ;peripheral.c: 7: PCON=0;
  6687  001BD6  6AF1               	clrf	intcon2,c	;volatile
  6688                           
  6689                           ;peripheral.c: 8: PORTA= 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 ;
  6690                           
  6691                           ;peripheral.c: 9: PORTB= 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 ;
  6692                           
  6693                           ;peripheral.c: 10: PORTC= 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 ;
  6694  001BD8  ECE3  F00C         	call	PL68	;call to abstracted procedure
  6695                           
  6696                           ;peripheral.c: 12: TRISA= 0 | 2 | 4 | 8 | 16 | 32 | 64 | 128 ;
  6697  001BDC  0EFE               	movlw	254
  6698  001BDE  6E89               	movwf	3977,c	;volatile
  6699                           
  6700                           ;peripheral.c: 13: TRISB= 0 | 2 | 4 | 8 | 16 | 32 | 64 | 128 ;
  6701  001BE0  6E8A               	movwf	3978,c	;volatile
  6702                           
  6703                           ;peripheral.c: 14: TRISC= 1 | 2 | 4 | 8 | 16 | 32 | 64 | 128 ;
  6704  001BE2  688B               	setf	3979,c	;volatile
  6705                           
  6706                           ;peripheral.c: 17: PAPU= 1 | 0 | 4 | 8 | 16 | 32 | 64 | 128 ;
  6707  001BE4  0EFD               	movlw	253
  6708  001BE6  6E83               	movwf	3971,c	;volatile
  6709                           
  6710                           ;peripheral.c: 18: PBPU= 1 | 2 | 4 | 8 | 16 | 32 | 64 | 128 ;
  6711                           
  6712                           ;peripheral.c: 19: PCPU= 1 | 2 | 4 | 8 | 16 | 32 | 0 | 128 ;
  6713                           
  6714                           ;peripheral.c: 25: PAPD= 1 | 2 | 4 | 8 | 0 | 32 | 64 | 128 ;
  6715  001BE8  ECDD  F00C         	call	PL60	;call to abstracted procedure
  6716                           
  6717                           ;peripheral.c: 30: PAOD= 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 ;
  6718  001BEC  0E01               	movlw	1
  6719  001BEE  6E92               	movwf	3986,c	;volatile
  6720                           
  6721                           ;peripheral.c: 32: FVRCON=0x01;
  6722  001BF0  6ED3               	movwf	4051,c	;volatile
  6723                           
  6724                           ;peripheral.c: 35: IOCUR=0xff;
  6725  001BF2  68B6               	setf	4022,c	;volatile
  6726                           
  6727                           ;peripheral.c: 39: ADIP=0;
  6728  001BF4  94AB               	bcf	4011,2,c	;volatile
  6729  001BF6  0012               	return		;funcret
  6730  001BF8                     __end_of_gpio_init:
  6731                           	opt stack 0
  6732                           tblptru	equ	0xFF8
  6733                           tblptrh	equ	0xFF7
  6734                           tblptrl	equ	0xFF6
  6735                           tablat	equ	0xFF5
  6736                           prodl	equ	0xFF3
  6737                           intcon	equ	0xFF2
  6738                           intcon2	equ	0xFF1
  6739                           intcon3	equ	0xFF0
  6740                           postinc0	equ	0xFEE
  6741                           wreg	equ	0xFE8
  6742                           postdec1	equ	0xFE5
  6743                           fsr1l	equ	0xFE1
  6744                           indf2	equ	0xFDF
  6745                           postinc2	equ	0xFDE
  6746                           postdec2	equ	0xFDD
  6747                           fsr2h	equ	0xFDA
  6748                           fsr2l	equ	0xFD9
  6749                           status	equ	0xFD8
  6750                           
  6751 ;; *************** function _cmp0_init *****************
  6752 ;; Defined at:
  6753 ;;		line 82 in file ".\src\peripheral.c"
  6754 ;; Parameters:    Size  Location     Type
  6755 ;;		None
  6756 ;; Auto vars:     Size  Location     Type
  6757 ;;		None
  6758 ;; Return value:  Size  Location     Type
  6759 ;;                  1    wreg      void 
  6760 ;; Registers used:
  6761 ;;		wreg, status,2
  6762 ;; Tracked objects:
  6763 ;;		On entry : 0/0
  6764 ;;		On exit  : 0/0
  6765 ;;		Unchanged: 0/0
  6766 ;; Data sizes:     COMRAM   BANK0
  6767 ;;      Params:         0       0
  6768 ;;      Locals:         0       0
  6769 ;;      Temps:          0       0
  6770 ;;      Totals:         0       0
  6771 ;;Total ram usage:        0 bytes
  6772 ;; Hardware stack levels used:    1
  6773 ;; Hardware stack levels required when called:    2
  6774 ;; This function calls:
  6775 ;;		Nothing
  6776 ;; This function is called by:
  6777 ;;		_main
  6778 ;;		_sleep_task
  6779 ;;		_ui_begin
  6780 ;; This function uses a non-reentrant model
  6781 ;;
  6782                           
  6783                           	psect	text24
  6784  001C36                     __ptext24:
  6785                           	opt stack 0
  6786  001C36                     _cmp0_init:
  6787                           	opt stack 4
  6788                           
  6789                           ;peripheral.c: 84: DACCON=0xfF;
  6790                           
  6791                           ;incstack = 0
  6792  001C36  68A4               	setf	4004,c	;volatile
  6793                           
  6794                           ;peripheral.c: 86: CMP0CON0=0x39;
  6795  001C38  0E39               	movlw	57
  6796  001C3A  6EA8               	movwf	4008,c	;volatile
  6797                           
  6798                           ;peripheral.c: 90: CMP0CON1=0x14;
  6799  001C3C  0E14               	movlw	20
  6800  001C3E  6EA7               	movwf	4007,c	;volatile
  6801                           
  6802                           ;peripheral.c: 92: CMP0EN=1;
  6803  001C40  8EA8               	bsf	4008,7,c	;volatile
  6804                           
  6805                           ;peripheral.c: 93: CMP0IF=0;
  6806  001C42  96AA               	bcf	4010,3,c	;volatile
  6807                           
  6808                           ;peripheral.c: 94: CMP0IE=1;
  6809  001C44  86A9               	bsf	4009,3,c	;volatile
  6810                           
  6811                           ;peripheral.c: 95: PEIE=1;
  6812  001C46  8CF2               	bsf	intcon,6,c	;volatile
  6813                           
  6814                           ;peripheral.c: 96: GIE=1;
  6815  001C48  8EF2               	bsf	intcon,7,c	;volatile
  6816                           
  6817                           ;peripheral.c: 98: CMP0IF=0;
  6818  001C4A  96AA               	bcf	4010,3,c	;volatile
  6819  001C4C  0C14               	retlw	20	;funcret
  6820  001C4E                     __end_of_cmp0_init:
  6821                           	opt stack 0
  6822                           tblptru	equ	0xFF8
  6823                           tblptrh	equ	0xFF7
  6824                           tblptrl	equ	0xFF6
  6825                           tablat	equ	0xFF5
  6826                           prodl	equ	0xFF3
  6827                           intcon	equ	0xFF2
  6828                           intcon2	equ	0xFF1
  6829                           intcon3	equ	0xFF0
  6830                           postinc0	equ	0xFEE
  6831                           wreg	equ	0xFE8
  6832                           postdec1	equ	0xFE5
  6833                           fsr1l	equ	0xFE1
  6834                           indf2	equ	0xFDF
  6835                           postinc2	equ	0xFDE
  6836                           postdec2	equ	0xFDD
  6837                           fsr2h	equ	0xFDA
  6838                           fsr2l	equ	0xFD9
  6839                           status	equ	0xFD8
  6840                           
  6841 ;; *************** function _si_mic_task *****************
  6842 ;; Defined at:
  6843 ;;		line 20 in file ".\src\si_mic.c"
  6844 ;; Parameters:    Size  Location     Type
  6845 ;;  task_           1   34[COMRAM] PTR struct task
  6846 ;;		 -> task_list(72), 
  6847 ;; Auto vars:     Size  Location     Type
  6848 ;;		None
  6849 ;; Return value:  Size  Location     Type
  6850 ;;                  1    wreg      void 
  6851 ;; Registers used:
  6852 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6853 ;; Tracked objects:
  6854 ;;		On entry : 3F/0
  6855 ;;		On exit  : 0/0
  6856 ;;		Unchanged: 0/0
  6857 ;; Data sizes:     COMRAM   BANK0
  6858 ;;      Params:         1       0
  6859 ;;      Locals:         4       0
  6860 ;;      Temps:          1       0
  6861 ;;      Totals:         6       0
  6862 ;;Total ram usage:        6 bytes
  6863 ;; Hardware stack levels used:    1
  6864 ;; Hardware stack levels required when called:    4
  6865 ;; This function calls:
  6866 ;;		_add_task_id
  6867 ;;		_get_bat
  6868 ;;		_get_load
  6869 ;; This function is called by:
  6870 ;;		_main
  6871 ;;		_find_task
  6872 ;; This function uses a non-reentrant model
  6873 ;;
  6874                           
  6875                           	psect	text25
  6876  00095A                     __ptext25:
  6877                           	opt stack 0
  6878  00095A                     _si_mic_task:
  6879                           	opt stack 3
  6880                           
  6881                           ; BSR set to: 0
  6882                           ;si_mic.c: 23: if(si_mic_state.o==0 && PINA4==1 && PINA5==0)
  6883                           
  6884                           ;incstack = 0
  6885  00095A  5028               	movf	_si_mic_state,w,c
  6886  00095C  E12D               	bnz	l15867
  6887                           
  6888                           ; BSR set to: 0
  6889  00095E  B886               	btfsc	3974,4,c	;volatile
  6890                           
  6891                           ; BSR set to: 0
  6892  000960  BA86               	btfsc	3974,5,c	;volatile
  6893  000962  D02A               	goto	l15867
  6894                           
  6895                           ; BSR set to: 0
  6896                           ;si_mic.c: 24: {
  6897                           ;si_mic.c: 25: yd=PINB1;
  6898  000964  EC90  F004         	call	PL66	;call to abstracted procedure
  6899                           
  6900                           ;si_mic.c: 26: if(yd)
  6901  000968  5038               	movf	_yd,w,c
  6902  00096A  E003               	bz	l15847
  6903                           
  6904                           ; BSR set to: 0
  6905                           ;si_mic.c: 27: {
  6906                           ;si_mic.c: 28: si_mic_flag.kl=1;
  6907  00096C  0E01               	movlw	1
  6908  00096E  6E1E               	movwf	_si_mic_flag+1,c
  6909                           
  6910                           ;si_mic.c: 32: }
  6911  000970  D035               	goto	l15879
  6912  000972                     l15847:
  6913                           
  6914                           ; BSR set to: 0
  6915                           ;si_mic.c: 33: else if(get_load()<=28)
  6916  000972  ECE4  F00A         	call	_get_load	;wreg free
  6917  000976  6E60               	movwf	??_si_mic_task& (0+255),c
  6918  000978  0E1D               	movlw	29
  6919  00097A  6060               	cpfslt	??_si_mic_task,c
  6920  00097C  D003               	goto	l8412
  6921                           
  6922                           ;si_mic.c: 34: {
  6923                           ;si_mic.c: 35: si_mic_flag.dl=1;
  6924  00097E  0E01               	movlw	1
  6925  000980  6E1D               	movwf	_si_mic_flag,c
  6926                           
  6927                           ;si_mic.c: 36: }
  6928  000982  D02C               	goto	l15879
  6929  000984                     l8412:
  6930                           
  6931                           ;si_mic.c: 37: else if(PINA5==0)
  6932  000984  BA86               	btfsc	3974,5,c	;volatile
  6933  000986  D02A               	goto	l15879
  6934                           
  6935                           ;si_mic.c: 38: {
  6936                           ;si_mic.c: 39: if(bat.dian)
  6937  000988  5071               	movf	_bat,w,c
  6938  00098A  E00B               	bz	l15859
  6939                           
  6940                           ;si_mic.c: 40: {
  6941                           ;si_mic.c: 41: if(get_bat()<=310)
  6942  00098C  ECE8  F00C         	call	_get_bat	;wreg free
  6943  000990  0E37               	movlw	55
  6944  000992  5C57               	subwf	?_get_bat,w,c
  6945  000994  0E01               	movlw	1
  6946  000996  5858               	subwfb	?_get_bat+1,w,c
  6947  000998  E204               	bc	l15859
  6948                           
  6949                           ;si_mic.c: 42: {
  6950                           ;si_mic.c: 43: bat.bat=310;
  6951  00099A  EC7D  F004         	call	PL54	;call to abstracted procedure
  6952  00099E  6E72               	movwf	_bat+1,c
  6953                           
  6954                           ;si_mic.c: 44: bat.dian=0;
  6955  0009A0  6A71               	clrf	_bat,c
  6956  0009A2                     l15859:
  6957                           
  6958                           ;si_mic.c: 48: }
  6959                           ;si_mic.c: 76: }
  6960                           ;si_mic.c: 77: lowbat_init=0;
  6961  0009A2  6A2F               	clrf	_lowbat_init,c
  6962                           
  6963                           ;si_mic.c: 83: cfg_flag=1;
  6964  0009A4  0E01               	movlw	1
  6965  0009A6  6E76               	movwf	_cfg_flag,c
  6966                           
  6967                           ;si_mic.c: 84: timout=0;
  6968  0009A8  6A27               	clrf	_timout,c
  6969                           
  6970                           ;si_mic.c: 85: kl_init=1;
  6971  0009AA  0E01               	movlw	1
  6972  0009AC  6E25               	movwf	_kl_init,c
  6973                           
  6974                           ;si_mic.c: 86: si_mic_flag.kl_zt=0;
  6975  0009AE  6A20               	clrf	_si_mic_flag+3,c
  6976                           
  6977                           ;si_mic.c: 87: si_mic_flag.smo_init=1;
  6978  0009B0  0E01               	movlw	1
  6979  0009B2  6E21               	movwf	_si_mic_flag+4,c
  6980                           
  6981                           ;si_mic.c: 88: si_mic_flag.dl_zt=0;
  6982  0009B4  6A1F               	clrf	_si_mic_flag+2,c
  6983                           
  6984                           ;si_mic.c: 90: }
  6985                           ;si_mic.c: 91: }
  6986  0009B6  D012               	goto	l15879
  6987  0009B8                     l15867:
  6988                           
  6989                           ; BSR set to: 0
  6990                           ;si_mic.c: 92: else if(si_mic_state.o==1 && PINA4==0)
  6991  0009B8  0428               	decf	_si_mic_state,w,c
  6992  0009BA  E110               	bnz	l15879
  6993                           
  6994                           ; BSR set to: 0
  6995  0009BC  B886               	btfsc	3974,4,c	;volatile
  6996  0009BE  D00E               	goto	l15879
  6997                           
  6998                           ; BSR set to: 0
  6999                           ;si_mic.c: 93: {
  7000                           ;si_mic.c: 97: task_->sucCnt=0;
  7001  0009C0  505F               	movf	si_mic_task@task_,w,c
  7002  0009C2  ECF4  F009         	call	PL2	;call to abstracted procedure
  7003  0009C6  0E00               	movlw	0
  7004  0009C8  6EDF               	movwf	indf2,c
  7005                           
  7006                           ; BSR set to: 0
  7007                           ;si_mic.c: 98: if(smoing)
  7008  0009CA  5026               	movf	_smoing,w,c
  7009  0009CC  E007               	bz	l15879
  7010                           
  7011                           ; BSR set to: 0
  7012                           ;si_mic.c: 99: {
  7013                           ;si_mic.c: 100: smoing=0;
  7014  0009CE  6A26               	clrf	_smoing,c
  7015                           
  7016                           ; BSR set to: 0
  7017                           ;si_mic.c: 101: add_task_id(5,50,73,ui_id);
  7018  0009D0  0E32               	movlw	50
  7019  0009D2  D8AA               	call	PL6	;call to abstracted procedure
  7020  0009D4  ECA4  F007         	call	PL30	;call to abstracted procedure
  7021  0009D8  EC53  F00A         	call	_add_task_id
  7022  0009DC                     l15879:
  7023                           
  7024                           ;si_mic.c: 105: }
  7025                           ;si_mic.c: 106: }
  7026                           ;si_mic.c: 107: si_mic_state.o=PINA4;
  7027  0009DC  0E00               	movlw	0
  7028  0009DE  B886               	btfsc	3974,4,c	;volatile
  7029  0009E0  0E01               	movlw	1
  7030  0009E2  6E28               	movwf	_si_mic_state,c
  7031                           
  7032                           ;si_mic.c: 108: if(si_mic_flag.dl)
  7033  0009E4  501D               	movf	_si_mic_flag,w,c
  7034  0009E6  E011               	bz	l15893
  7035                           
  7036                           ;si_mic.c: 109: {
  7037                           ;si_mic.c: 110: si_mic_flag.kl=0;
  7038  0009E8  6A1E               	clrf	_si_mic_flag+1,c
  7039                           
  7040                           ;si_mic.c: 111: smoing=0;
  7041  0009EA  6A26               	clrf	_smoing,c
  7042                           
  7043                           ;si_mic.c: 112: si_mic_flag.smo_init=0;
  7044  0009EC  6A21               	clrf	_si_mic_flag+4,c
  7045                           
  7046                           ;si_mic.c: 113: si_mic_flag.dl=0;
  7047  0009EE  6A1D               	clrf	_si_mic_flag,c
  7048                           
  7049                           ;si_mic.c: 114: si_mic_flag.dl_zt=1;
  7050  0009F0  0E01               	movlw	1
  7051  0009F2  6E1F               	movwf	_si_mic_flag+2,c
  7052                           
  7053                           ;si_mic.c: 115: pwm.duty=0;
  7054  0009F4  0100               	movlb	0	; () banked
  7055  0009F6  6BD2               	clrf	_pwm& (0+255),b
  7056                           
  7057                           ; BSR set to: 0
  7058                           ;si_mic.c: 116: task_list[ui_id].active=0;
  7059  0009F8  503C               	movf	_ui_id,w,c
  7060  0009FA  D89B               	call	PL16	;call to abstracted procedure
  7061  0009FC  6ADF               	clrf	indf2,c
  7062                           
  7063                           ; BSR set to: 0
  7064                           ;si_mic.c: 117: add_task_id(5,50,73,ui_id);
  7065  0009FE  0E32               	movlw	50
  7066  000A00  D893               	call	PL6	;call to abstracted procedure
  7067  000A02  ECA4  F007         	call	PL30	;call to abstracted procedure
  7068  000A06  EC53  F00A         	call	_add_task_id
  7069  000A0A                     l15893:
  7070                           
  7071                           ;si_mic.c: 121: }
  7072                           ;si_mic.c: 122: if(si_mic_flag.kl)
  7073  000A0A  501E               	movf	_si_mic_flag+1,w,c
  7074  000A0C  E016               	bz	l15911
  7075                           
  7076                           ;si_mic.c: 123: {
  7077                           ;si_mic.c: 124: si_mic_flag.dl=0;
  7078  000A0E  6A1D               	clrf	_si_mic_flag,c
  7079                           
  7080                           ;si_mic.c: 125: cb_o=PINB1;
  7081  000A10  EC49  F00A         	call	PL44	;call to abstracted procedure
  7082                           
  7083                           ;si_mic.c: 126: smoing=0;
  7084  000A14  6A26               	clrf	_smoing,c
  7085                           
  7086                           ;si_mic.c: 127: si_mic_flag.kl=0;
  7087  000A16  6A1E               	clrf	_si_mic_flag+1,c
  7088                           
  7089                           ;si_mic.c: 128: si_mic_flag.smo_init=0;
  7090  000A18  6A21               	clrf	_si_mic_flag+4,c
  7091                           
  7092                           ;si_mic.c: 129: pwm.duty=0;
  7093  000A1A  0100               	movlb	0	; () banked
  7094  000A1C  6BD2               	clrf	_pwm& (0+255),b
  7095                           
  7096                           ;si_mic.c: 130: si_mic_flag.kl_zt=1;
  7097  000A1E  0E01               	movlw	1
  7098  000A20  6E20               	movwf	_si_mic_flag+3,c
  7099                           
  7100                           ; BSR set to: 0
  7101                           ;si_mic.c: 131: task_list[ui_id].active=0;
  7102  000A22  503C               	movf	_ui_id,w,c
  7103  000A24  D886               	call	PL16	;call to abstracted procedure
  7104  000A26  6ADF               	clrf	indf2,c
  7105                           
  7106                           ; BSR set to: 0
  7107                           ;si_mic.c: 132: add_task_id(6,250,10,ui_id);
  7108  000A28  0EFA               	movlw	250
  7109  000A2A  D87E               	call	PL6	;call to abstracted procedure
  7110  000A2C  0E0A               	movlw	10
  7111  000A2E  6E42               	movwf	add_task_id@suc_max,c
  7112  000A30  C03C  F043         	movff	_ui_id,add_task_id@task_id
  7113  000A34  0E06               	movlw	6
  7114  000A36  EC53  F00A         	call	_add_task_id
  7115  000A3A                     l15911:
  7116                           
  7117                           ;si_mic.c: 136: }
  7118                           ;si_mic.c: 137: if(si_mic_flag.kl_zt || si_mic_flag.dl_zt )
  7119  000A3A  5020               	movf	_si_mic_flag+3,w,c
  7120  000A3C  E102               	bnz	l8424
  7121  000A3E  501F               	movf	_si_mic_flag+2,w,c
  7122  000A40  E002               	bz	l8422
  7123  000A42                     l8424:
  7124                           
  7125                           ;si_mic.c: 138: {
  7126                           ;si_mic.c: 139: smoing=0;
  7127  000A42  6A26               	clrf	_smoing,c
  7128                           
  7129                           ;si_mic.c: 141: return;
  7130  000A44  0012               	return	
  7131  000A46                     l8422:
  7132                           
  7133                           ;si_mic.c: 142: }
  7134                           ;si_mic.c: 144: if(PINA4 &&(PINA5==0)&&(ts==0)&&(timout==0))
  7135  000A46  B886               	btfsc	3974,4,c	;volatile
  7136  000A48  BA86               	btfsc	3974,5,c	;volatile
  7137  000A4A  D063               	goto	l15973
  7138  000A4C  5034               	movf	_ts,w,c
  7139  000A4E  E161               	bnz	l15973
  7140  000A50  5027               	movf	_timout,w,c
  7141  000A52  E15F               	bnz	l15973
  7142                           
  7143                           ;si_mic.c: 145: {
  7144                           ;si_mic.c: 146: if(kl_init)
  7145  000A54  5025               	movf	_kl_init,w,c
  7146  000A56  E006               	bz	l15929
  7147                           
  7148                           ;si_mic.c: 147: {
  7149                           ;si_mic.c: 148: kl_init=0;
  7150  000A58  6A25               	clrf	_kl_init,c
  7151                           
  7152                           ;si_mic.c: 149: if(PINB1)
  7153  000A5A  A287               	btfss	3975,1,c	;volatile
  7154  000A5C  D003               	goto	l15929
  7155                           
  7156                           ;si_mic.c: 150: {
  7157                           ;si_mic.c: 151: si_mic_flag.kl=1;
  7158  000A5E  0E01               	movlw	1
  7159  000A60  6E1E               	movwf	_si_mic_flag+1,c
  7160  000A62  0C01               	retlw	1
  7161  000A64                     l15929:
  7162                           
  7163                           ;si_mic.c: 153: }
  7164                           ;si_mic.c: 154: }
  7165                           ;si_mic.c: 158: if(bat.dian==0)
  7166  000A64  5071               	movf	_bat,w,c
  7167  000A66  E111               	bnz	l15939
  7168                           
  7169                           ;si_mic.c: 160: {
  7170                           ;si_mic.c: 163: pwm.duty=0;
  7171  000A68  0100               	movlb	0	; () banked
  7172  000A6A  6BD2               	clrf	_pwm& (0+255),b
  7173                           
  7174                           ;si_mic.c: 164: smoing=0;
  7175  000A6C  6A26               	clrf	_smoing,c
  7176                           
  7177                           ; BSR set to: 0
  7178                           ;si_mic.c: 166: if(lowbat_init==0)
  7179  000A6E  502F               	movf	_lowbat_init,w,c
  7180  000A70  A4D8               	btfss	status,2,c
  7181  000A72  0012               	return	
  7182                           
  7183                           ; BSR set to: 0
  7184                           ;si_mic.c: 167: {
  7185                           ;si_mic.c: 168: lowbat_init=1;
  7186  000A74  0E01               	movlw	1
  7187  000A76  6E2F               	movwf	_lowbat_init,c
  7188                           
  7189                           ; BSR set to: 0
  7190                           ;si_mic.c: 169: add_task_id(10,250,20,ui_id);
  7191  000A78  0EFA               	movlw	250
  7192  000A7A  D856               	call	PL6	;call to abstracted procedure
  7193  000A7C  0E14               	movlw	20
  7194  000A7E  6E42               	movwf	add_task_id@suc_max,c
  7195  000A80  C03C  F043         	movff	_ui_id,add_task_id@task_id
  7196  000A84  0E0A               	movlw	10
  7197  000A86  EF53  F00A         	goto	_add_task_id
  7198  000A8A                     l15939:
  7199                           
  7200                           ;si_mic.c: 172: else
  7201                           ;si_mic.c: 173: {
  7202                           ;si_mic.c: 174: smoing=1;
  7203  000A8A  0E01               	movlw	1
  7204  000A8C  6E26               	movwf	_smoing,c
  7205                           
  7206                           ;si_mic.c: 178: if(cfg_flag)
  7207  000A8E  5076               	movf	_cfg_flag,w,c
  7208  000A90  E019               	bz	l15953
  7209                           
  7210                           ;si_mic.c: 179: {
  7211                           ;si_mic.c: 189: cfg_flag=0;
  7212  000A92  6A76               	clrf	_cfg_flag,c
  7213                           
  7214                           ;si_mic.c: 190: pwm.duty=(pw_t==0)?30:pw_t;
  7215  000A94  506A               	movf	_pw_t,w,c
  7216  000A96  106B               	iorwf	_pw_t+1,w,c
  7217  000A98  106C               	iorwf	_pw_t+2,w,c
  7218  000A9A  106D               	iorwf	_pw_t+3,w,c
  7219  000A9C  E009               	bz	l15947
  7220  000A9E  C06A  F061         	movff	_pw_t,_si_mic_task$4366
  7221  000AA2  C06B  F062         	movff	_pw_t+1,_si_mic_task$4366+1
  7222  000AA6  C06C  F063         	movff	_pw_t+2,_si_mic_task$4366+2
  7223  000AAA  C06D  F064         	movff	_pw_t+3,_si_mic_task$4366+3
  7224  000AAE  D005               	goto	l15949
  7225  000AB0                     l15947:
  7226  000AB0  0E1E               	movlw	30
  7227  000AB2  6E61               	movwf	_si_mic_task$4366,c
  7228  000AB4  6A62               	clrf	_si_mic_task$4366+1,c
  7229  000AB6  6A63               	clrf	_si_mic_task$4366+2,c
  7230  000AB8  6A64               	clrf	_si_mic_task$4366+3,c
  7231  000ABA                     l15949:
  7232  000ABA  C061  F0D2         	movff	_si_mic_task$4366,_pwm
  7233                           
  7234                           ;si_mic.c: 191: pwm.duty_t=pwm.duty-1;
  7235  000ABE  0100               	movlb	0	; () banked
  7236  000AC0  05D2               	decf	_pwm& (0+255),w,b
  7237  000AC2  6FD3               	movwf	(_pwm+1)& (0+255),b
  7238  000AC4                     l15953:
  7239                           
  7240                           ;si_mic.c: 194: } ;
  7241                           ;si_mic.c: 200: if(si_mic_flag.smo_init)
  7242  000AC4  5021               	movf	_si_mic_flag+4,w,c
  7243  000AC6  E009               	bz	l15959
  7244                           
  7245                           ;si_mic.c: 201: {
  7246                           ;si_mic.c: 202: si_mic_flag.smo_init=0;
  7247  000AC8  6A21               	clrf	_si_mic_flag+4,c
  7248                           
  7249                           ;si_mic.c: 203: add_task_id(4,50,0,ui_id);
  7250  000ACA  0E32               	movlw	50
  7251  000ACC  D82D               	call	PL6	;call to abstracted procedure
  7252  000ACE  6A42               	clrf	add_task_id@suc_max,c
  7253  000AD0  C03C  F043         	movff	_ui_id,add_task_id@task_id
  7254  000AD4  0E04               	movlw	4
  7255  000AD6  EC53  F00A         	call	_add_task_id
  7256  000ADA                     l15959:
  7257                           
  7258                           ;si_mic.c: 204: }
  7259                           ;si_mic.c: 205: task_->sucCnt++;
  7260  000ADA  505F               	movf	si_mic_task@task_,w,c
  7261  000ADC  ECF4  F009         	call	PL2	;call to abstracted procedure
  7262  000AE0  2ADF               	incf	indf2,f,c
  7263                           
  7264                           ;si_mic.c: 206: if(task_->sucCnt>=250)
  7265  000AE2  505F               	movf	si_mic_task@task_,w,c
  7266  000AE4  ECF4  F009         	call	PL2	;call to abstracted procedure
  7267  000AE8  0EF9               	movlw	249
  7268  000AEA  64DF               	cpfsgt	indf2,c
  7269  000AEC  0CF9               	retlw	249
  7270                           
  7271                           ;si_mic.c: 207: {
  7272                           ;si_mic.c: 208: task_->sucCnt=0;
  7273  000AEE  505F               	movf	si_mic_task@task_,w,c
  7274  000AF0  ECF4  F009         	call	PL2	;call to abstracted procedure
  7275  000AF4  6ADF               	clrf	indf2,c
  7276                           
  7277                           ;si_mic.c: 216: pwm.duty=0;
  7278  000AF6  0100               	movlb	0	; () banked
  7279  000AF8  6BD2               	clrf	_pwm& (0+255),b
  7280                           
  7281                           ; BSR set to: 0
  7282                           ;si_mic.c: 217: smoing=0;
  7283  000AFA  6A26               	clrf	_smoing,c
  7284                           
  7285                           ; BSR set to: 0
  7286                           ;si_mic.c: 218: add_task_id(10,250,10,ui_id);
  7287  000AFC  0EFA               	movlw	250
  7288  000AFE  D814               	call	PL6	;call to abstracted procedure
  7289  000B00  0E0A               	movlw	10
  7290  000B02  6E42               	movwf	add_task_id@suc_max,c
  7291  000B04  C03C  F043         	movff	_ui_id,add_task_id@task_id
  7292  000B08  EC53  F00A         	call	_add_task_id
  7293                           
  7294                           ;si_mic.c: 219: timout=1;
  7295  000B0C  0E01               	movlw	1
  7296  000B0E  6E27               	movwf	_timout,c
  7297  000B10  0C01               	retlw	1
  7298  000B12                     l15973:
  7299                           
  7300                           ;si_mic.c: 231: else
  7301                           ;si_mic.c: 232: {
  7302                           ;si_mic.c: 233: cfg_flag=1;
  7303  000B12  0E01               	movlw	1
  7304  000B14  6E76               	movwf	_cfg_flag,c
  7305                           
  7306                           ;si_mic.c: 237: smoing=0;
  7307  000B16  6A26               	clrf	_smoing,c
  7308                           
  7309                           ;si_mic.c: 238: task_->sucCnt=0;
  7310  000B18  505F               	movf	si_mic_task@task_,w,c
  7311  000B1A  ECF4  F009         	call	PL2	;call to abstracted procedure
  7312  000B1E  0E00               	movlw	0
  7313  000B20  6ADF               	clrf	indf2,c
  7314                           
  7315                           ;si_mic.c: 239: pwm.duty=0;
  7316  000B22  0100               	movlb	0	; () banked
  7317  000B24  6BD2               	clrf	_pwm& (0+255),b
  7318  000B26  0012               	return		;funcret
  7319  000B28                     __end_of_si_mic_task:
  7320                           	opt stack 0
  7321  000B28                     PL6:
  7322                           	opt stack 3
  7323  000B28  6E3E               	movwf	add_task_id@interval_ms,c
  7324  000B2A  6A3F               	clrf	add_task_id@interval_ms+1,c
  7325  000B2C  6A40               	clrf	add_task_id@interval_ms+2,c
  7326  000B2E  6A41               	clrf	add_task_id@interval_ms+3,c
  7327  000B30  0012               	return	
  7328  000B32                     __end_ofPL6:
  7329                           	opt stack 0
  7330  000B32                     PL16:
  7331                           	opt stack 3
  7332  000B32  0D09               	mullw	9
  7333  000B34  50F3               	movf	prodl,w,c
  7334  000B36  0F8F               	addlw	low (_task_list+5)
  7335  000B38  6ED9               	movwf	fsr2l,c
  7336  000B3A  6ADA               	clrf	fsr2h,c
  7337  000B3C  0012               	return	
  7338  000B3E                     __end_ofPL16:
  7339                           	opt stack 0
  7340                           tblptru	equ	0xFF8
  7341                           tblptrh	equ	0xFF7
  7342                           tblptrl	equ	0xFF6
  7343                           tablat	equ	0xFF5
  7344                           prodl	equ	0xFF3
  7345                           intcon	equ	0xFF2
  7346                           intcon2	equ	0xFF1
  7347                           intcon3	equ	0xFF0
  7348                           postinc0	equ	0xFEE
  7349                           wreg	equ	0xFE8
  7350                           postdec1	equ	0xFE5
  7351                           fsr1l	equ	0xFE1
  7352                           indf2	equ	0xFDF
  7353                           postinc2	equ	0xFDE
  7354                           postdec2	equ	0xFDD
  7355                           fsr2h	equ	0xFDA
  7356                           fsr2l	equ	0xFD9
  7357                           status	equ	0xFD8
  7358                           
  7359 ;; *************** function _key_task *****************
  7360 ;; Defined at:
  7361 ;;		line 19 in file ".\src\key.c"
  7362 ;; Parameters:    Size  Location     Type
  7363 ;;  task_           1   14[COMRAM] PTR struct task
  7364 ;;		 -> task_list(72), 
  7365 ;; Auto vars:     Size  Location     Type
  7366 ;;		None
  7367 ;; Return value:  Size  Location     Type
  7368 ;;                  1    wreg      void 
  7369 ;; Registers used:
  7370 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7371 ;; Tracked objects:
  7372 ;;		On entry : 3F/0
  7373 ;;		On exit  : 0/0
  7374 ;;		Unchanged: 0/0
  7375 ;; Data sizes:     COMRAM   BANK0
  7376 ;;      Params:         1       0
  7377 ;;      Locals:         0       0
  7378 ;;      Temps:          1       0
  7379 ;;      Totals:         2       0
  7380 ;;Total ram usage:        2 bytes
  7381 ;; Hardware stack levels used:    1
  7382 ;; Hardware stack levels required when called:    3
  7383 ;; This function calls:
  7384 ;;		_add_task_id
  7385 ;; This function is called by:
  7386 ;;		_main
  7387 ;;		_find_task
  7388 ;; This function uses a non-reentrant model
  7389 ;;
  7390                           
  7391                           	psect	text26
  7392  000E10                     __ptext26:
  7393                           	opt stack 0
  7394  000E10                     _key_task:
  7395                           	opt stack 4
  7396                           
  7397                           ; BSR set to: 0
  7398                           ;key.c: 21: if ((task_list[ui_id].active==0)||(task_list[ui_id].id!=5))
  7399                           
  7400                           ;incstack = 0
  7401  000E10  503C               	movf	_ui_id,w,c
  7402  000E12  EC99  F005         	call	PL16	;call to abstracted procedure
  7403  000E16  50DF               	movf	indf2,w,c
  7404  000E18  E006               	bz	l4057
  7405                           
  7406                           ; BSR set to: 0
  7407  000E1A  503C               	movf	_ui_id,w,c
  7408  000E1C  EC35  F009         	call	PL14	;call to abstracted procedure
  7409  000E20  0E05               	movlw	5
  7410  000E22  18DE               	xorwf	postinc2,w,c
  7411  000E24  E001               	bz	l15747
  7412  000E26                     l4057:
  7413                           
  7414                           ; BSR set to: 0
  7415                           ;key.c: 22: {
  7416                           ;key.c: 23: pw_mode=0;
  7417  000E26  6A30               	clrf	_pw_mode,c
  7418  000E28                     l15747:
  7419                           
  7420                           ; BSR set to: 0
  7421                           ;key.c: 24: }
  7422                           ;key.c: 30: if(key_o&& (PINC6==0))
  7423  000E28  5078               	movf	_key_o,w,c
  7424  000E2A  E01F               	bz	l15775
  7425                           
  7426                           ; BSR set to: 0
  7427  000E2C  BC88               	btfsc	3976,6,c	;volatile
  7428  000E2E  D01D               	goto	l15775
  7429                           
  7430                           ; BSR set to: 0
  7431                           ;key.c: 31: {
  7432                           ;key.c: 32: if((task_list[ui_id].id!=4)&&(ts==0)&&pw_mode)
  7433  000E30  D882               	call	PL10	;call to abstracted procedure
  7434  000E32  E00A               	bz	l4059
  7435                           
  7436                           ; BSR set to: 0
  7437  000E34  5034               	movf	_ts,w,c
  7438  000E36  E108               	bnz	l4059
  7439                           
  7440                           ; BSR set to: 0
  7441  000E38  5030               	movf	_pw_mode,w,c
  7442  000E3A  E006               	bz	l4059
  7443                           
  7444                           ; BSR set to: 0
  7445                           ;key.c: 33: {
  7446                           ;key.c: 34: pw++;
  7447  000E3C  2A7B               	incf	_pw,f,c
  7448                           
  7449                           ; BSR set to: 0
  7450                           ;key.c: 35: if(pw>=31)
  7451  000E3E  0E1E               	movlw	30
  7452  000E40  647B               	cpfsgt	_pw,c
  7453  000E42  D002               	goto	l4059
  7454                           
  7455                           ; BSR set to: 0
  7456                           ;key.c: 36: {
  7457                           ;key.c: 37: pw=5;
  7458  000E44  0E05               	movlw	5
  7459  000E46  6E7B               	movwf	_pw,c
  7460  000E48                     l4059:
  7461                           
  7462                           ; BSR set to: 0
  7463                           ;key.c: 38: }
  7464                           ;key.c: 40: }
  7465                           ;key.c: 49: if(key_cnt_flag==0)
  7466  000E48  5032               	movf	_key_cnt_flag,w,c
  7467  000E4A  E103               	bnz	l15765
  7468                           
  7469                           ; BSR set to: 0
  7470                           ;key.c: 50: {
  7471                           ;key.c: 51: key_cnt_flag=1;
  7472  000E4C  0E01               	movlw	1
  7473  000E4E  6E32               	movwf	_key_cnt_flag,c
  7474                           
  7475                           ;key.c: 52: }
  7476  000E50  D002               	goto	l15769
  7477  000E52                     l15765:
  7478                           
  7479                           ; BSR set to: 0
  7480                           ;key.c: 53: else
  7481                           ;key.c: 54: {
  7482                           ;key.c: 55: ts_cnt++;
  7483  000E52  2A31               	incf	_ts_cnt,f,c
  7484                           
  7485                           ; BSR set to: 0
  7486                           ;key.c: 56: key_cnt=0;
  7487  000E54  6A33               	clrf	_key_cnt,c
  7488  000E56                     l15769:
  7489                           
  7490                           ; BSR set to: 0
  7491                           ;key.c: 57: }
  7492                           ;key.c: 58: if(task_list[ui_id].id!=4)
  7493  000E56  D86F               	call	PL10	;call to abstracted procedure
  7494  000E58  E006               	bz	l15773
  7495                           
  7496                           ; BSR set to: 0
  7497                           ;key.c: 59: {
  7498                           ;key.c: 60: add_task_id(5,50,73,ui_id);
  7499  000E5A  0E32               	movlw	50
  7500  000E5C  EC94  F005         	call	PL6	;call to abstracted procedure
  7501  000E60  D873               	call	PL30	;call to abstracted procedure
  7502  000E62  EC53  F00A         	call	_add_task_id
  7503  000E66                     l15773:
  7504                           
  7505                           ;key.c: 61: }
  7506                           ;key.c: 62: pw_add_flag=1;
  7507  000E66  0E01               	movlw	1
  7508  000E68  6E77               	movwf	_pw_add_flag,c
  7509  000E6A                     l15775:
  7510                           
  7511                           ;key.c: 63: }
  7512                           ;key.c: 71: key_o=PINC6;
  7513  000E6A  0E00               	movlw	0
  7514  000E6C  BC88               	btfsc	3976,6,c	;volatile
  7515  000E6E  0E01               	movlw	1
  7516  000E70  6E78               	movwf	_key_o,c
  7517                           
  7518                           ;key.c: 76: if((PINC6==0))
  7519  000E72  BC88               	btfsc	3976,6,c	;volatile
  7520  000E74  D029               	goto	l15805
  7521                           
  7522                           ;key.c: 77: {
  7523                           ;key.c: 78: if((task_list[ui_id].id!=4)&&(ts==0)&&pw_mode)
  7524  000E76  D85F               	call	PL10	;call to abstracted procedure
  7525  000E78  E02C               	bz	l15807
  7526  000E7A  5034               	movf	_ts,w,c
  7527  000E7C  E12A               	bnz	l15807
  7528  000E7E  5030               	movf	_pw_mode,w,c
  7529  000E80  E028               	bz	l15807
  7530                           
  7531                           ;key.c: 79: {
  7532                           ;key.c: 80: task_->sucCnt++;
  7533  000E82  504B               	movf	key_task@task_,w,c
  7534  000E84  ECF4  F009         	call	PL2	;call to abstracted procedure
  7535  000E88  2ADF               	incf	indf2,f,c
  7536                           
  7537                           ;key.c: 81: if(task_->sucCnt>=6)
  7538  000E8A  504B               	movf	key_task@task_,w,c
  7539  000E8C  ECF4  F009         	call	PL2	;call to abstracted procedure
  7540  000E90  0E05               	movlw	5
  7541  000E92  64DF               	cpfsgt	indf2,c
  7542  000E94  D01E               	goto	l15807
  7543                           
  7544                           ;key.c: 82: {
  7545                           ;key.c: 83: task_->sucCnt=0;
  7546  000E96  504B               	movf	key_task@task_,w,c
  7547  000E98  ECF4  F009         	call	PL2	;call to abstracted procedure
  7548  000E9C  6ADF               	clrf	indf2,c
  7549                           
  7550                           ;key.c: 84: if(task_list[ui_id].id!=4)
  7551  000E9E  D84B               	call	PL10	;call to abstracted procedure
  7552  000EA0  E006               	bz	l15793
  7553                           
  7554                           ;key.c: 85: {
  7555                           ;key.c: 86: add_task_id(5,50,73,ui_id);
  7556  000EA2  0E32               	movlw	50
  7557  000EA4  EC94  F005         	call	PL6	;call to abstracted procedure
  7558  000EA8  D84F               	call	PL30	;call to abstracted procedure
  7559  000EAA  EC53  F00A         	call	_add_task_id
  7560  000EAE                     l15793:
  7561                           
  7562                           ;key.c: 87: }
  7563                           ;key.c: 88: if(pw_add_flag)
  7564  000EAE  5077               	movf	_pw_add_flag,w,c
  7565  000EB0  E006               	bz	l15801
  7566                           
  7567                           ;key.c: 89: {
  7568                           ;key.c: 90: pw++;
  7569  000EB2  2A7B               	incf	_pw,f,c
  7570                           
  7571                           ;key.c: 91: if(pw>=31)
  7572  000EB4  0E1E               	movlw	30
  7573  000EB6  647B               	cpfsgt	_pw,c
  7574  000EB8  D002               	goto	l15801
  7575                           
  7576                           ;key.c: 92: {
  7577                           ;key.c: 93: pw=5;
  7578  000EBA  0E05               	movlw	5
  7579  000EBC  6E7B               	movwf	_pw,c
  7580  000EBE                     l15801:
  7581                           
  7582                           ;key.c: 94: }
  7583                           ;key.c: 95: }
  7584                           ;key.c: 96: if(pw==30)
  7585  000EBE  0E1E               	movlw	30
  7586  000EC0  187B               	xorwf	_pw,w,c
  7587  000EC2  E107               	bnz	l15807
  7588                           
  7589                           ;key.c: 97: {
  7590                           ;key.c: 98: pw_add_flag=0;
  7591  000EC4  6A77               	clrf	_pw_add_flag,c
  7592                           
  7593                           ;key.c: 99: }
  7594                           ;key.c: 101: }
  7595                           ;key.c: 102: }
  7596                           ;key.c: 103: }
  7597  000EC6  D005               	goto	l15807
  7598  000EC8                     l15805:
  7599                           
  7600                           ;key.c: 104: else
  7601                           ;key.c: 105: {
  7602                           ;key.c: 106: task_->sucCnt=0;
  7603  000EC8  504B               	movf	key_task@task_,w,c
  7604  000ECA  ECF4  F009         	call	PL2	;call to abstracted procedure
  7605  000ECE  0E00               	movlw	0
  7606  000ED0  6EDF               	movwf	indf2,c
  7607  000ED2                     l15807:
  7608                           
  7609                           ;key.c: 107: }
  7610                           ;key.c: 108: if(key_cnt_flag)
  7611  000ED2  5032               	movf	_key_cnt_flag,w,c
  7612  000ED4  E007               	bz	l15815
  7613                           
  7614                           ;key.c: 109: {
  7615                           ;key.c: 110: key_cnt++;
  7616  000ED6  2A33               	incf	_key_cnt,f,c
  7617                           
  7618                           ;key.c: 111: if(key_cnt>=13)
  7619  000ED8  0E0C               	movlw	12
  7620  000EDA  6433               	cpfsgt	_key_cnt,c
  7621  000EDC  0C0C               	retlw	12
  7622                           
  7623                           ;key.c: 112: {
  7624                           ;key.c: 113: key_cnt_flag=0;
  7625  000EDE  6A32               	clrf	_key_cnt_flag,c
  7626                           
  7627                           ;key.c: 114: key_cnt=0;
  7628  000EE0  6A33               	clrf	_key_cnt,c
  7629  000EE2  0012               	return	
  7630  000EE4                     l15815:
  7631                           
  7632                           ;key.c: 117: else
  7633                           ;key.c: 118: {
  7634                           ;key.c: 119: if(ts_cnt==1)
  7635  000EE4  0431               	decf	_ts_cnt,w,c
  7636  000EE6  E103               	bnz	l15819
  7637                           
  7638                           ;key.c: 120: {
  7639                           ;key.c: 121: pw_mode=1;
  7640  000EE8  0E01               	movlw	1
  7641  000EEA  6E30               	movwf	_pw_mode,c
  7642                           
  7643                           ;key.c: 122: }
  7644  000EEC  D021               	goto	l15833
  7645  000EEE                     l15819:
  7646                           
  7647                           ;key.c: 123: else if(ts_cnt>=4)
  7648  000EEE  0E03               	movlw	3
  7649  000EF0  6431               	cpfsgt	_ts_cnt,c
  7650  000EF2  D01E               	goto	l15833
  7651                           
  7652                           ;key.c: 124: {
  7653                           ;key.c: 125: if((task_list[ui_id].id!=4)&&(pw_mode==0))
  7654  000EF4  D820               	call	PL10	;call to abstracted procedure
  7655  000EF6  E01C               	bz	l15833
  7656  000EF8  5030               	movf	_pw_mode,w,c
  7657  000EFA  E11A               	bnz	l15833
  7658                           
  7659                           ;key.c: 126: {
  7660                           ;key.c: 127: if(ts==0)
  7661  000EFC  5034               	movf	_ts,w,c
  7662  000EFE  E10D               	bnz	l4079
  7663                           
  7664                           ;key.c: 128: {
  7665                           ;key.c: 129: ts=1;
  7666  000F00  0E01               	movlw	1
  7667  000F02  6E34               	movwf	_ts,c
  7668                           
  7669                           ;key.c: 130: add_task_id(7,50,100,ui_id);
  7670  000F04  0E32               	movlw	50
  7671  000F06  EC94  F005         	call	PL6	;call to abstracted procedure
  7672  000F0A  0E64               	movlw	100
  7673  000F0C  6E42               	movwf	add_task_id@suc_max,c
  7674  000F0E  C03C  F043         	movff	_ui_id,add_task_id@task_id
  7675  000F12  0E07               	movlw	7
  7676  000F14  EC53  F00A         	call	_add_task_id
  7677                           
  7678                           ;key.c: 134: }
  7679  000F18  D00B               	goto	l15833
  7680  000F1A                     l4079:
  7681                           
  7682                           ;key.c: 135: else
  7683                           ;key.c: 136: {
  7684                           ;key.c: 137: ts=0;
  7685  000F1A  6A34               	clrf	_ts,c
  7686                           
  7687                           ;key.c: 138: add_task_id(8,50,43,ui_id);
  7688  000F1C  0E32               	movlw	50
  7689  000F1E  EC94  F005         	call	PL6	;call to abstracted procedure
  7690  000F22  0E2B               	movlw	43
  7691  000F24  6E42               	movwf	add_task_id@suc_max,c
  7692  000F26  C03C  F043         	movff	_ui_id,add_task_id@task_id
  7693  000F2A  0E08               	movlw	8
  7694  000F2C  EC53  F00A         	call	_add_task_id
  7695  000F30                     l15833:
  7696                           
  7697                           ;key.c: 142: }
  7698                           ;key.c: 143: }
  7699                           ;key.c: 144: }
  7700                           ;key.c: 145: key_cnt=0;
  7701  000F30  6A33               	clrf	_key_cnt,c
  7702                           
  7703                           ;key.c: 146: ts_cnt=0;
  7704  000F32  6A31               	clrf	_ts_cnt,c
  7705  000F34  0012               	return		;funcret
  7706  000F36                     __end_of_key_task:
  7707                           	opt stack 0
  7708  000F36                     PL10:
  7709                           	opt stack 4
  7710  000F36  503C               	movf	_ui_id,w,c
  7711  000F38  0D09               	mullw	9
  7712  000F3A  50F3               	movf	prodl,w,c
  7713  000F3C  0F8A               	addlw	low _task_list
  7714  000F3E  6ED9               	movwf	fsr2l,c
  7715  000F40  6ADA               	clrf	fsr2h,c
  7716  000F42  0E04               	movlw	4
  7717  000F44  18DE               	xorwf	postinc2,w,c
  7718  000F46  0012               	return	
  7719  000F48                     __end_ofPL10:
  7720                           	opt stack 0
  7721  000F48                     PL30:
  7722                           	opt stack 3
  7723  000F48  0E49               	movlw	73
  7724  000F4A  6E42               	movwf	add_task_id@suc_max,c
  7725  000F4C  C03C  F043         	movff	_ui_id,add_task_id@task_id
  7726  000F50  0C05               	retlw	5
  7727  000F52                     __end_ofPL30:
  7728                           	opt stack 0
  7729                           tblptru	equ	0xFF8
  7730                           tblptrh	equ	0xFF7
  7731                           tblptrl	equ	0xFF6
  7732                           tablat	equ	0xFF5
  7733                           prodl	equ	0xFF3
  7734                           intcon	equ	0xFF2
  7735                           intcon2	equ	0xFF1
  7736                           intcon3	equ	0xFF0
  7737                           postinc0	equ	0xFEE
  7738                           wreg	equ	0xFE8
  7739                           postdec1	equ	0xFE5
  7740                           fsr1l	equ	0xFE1
  7741                           indf2	equ	0xFDF
  7742                           postinc2	equ	0xFDE
  7743                           postdec2	equ	0xFDD
  7744                           fsr2h	equ	0xFDA
  7745                           fsr2l	equ	0xFD9
  7746                           status	equ	0xFD8
  7747                           
  7748 ;; *************** function _chrg_task *****************
  7749 ;; Defined at:
  7750 ;;		line 10 in file ".\src\chrg.c"
  7751 ;; Parameters:    Size  Location     Type
  7752 ;;  task_           1   34[COMRAM] PTR struct task
  7753 ;;		 -> task_list(72), 
  7754 ;; Auto vars:     Size  Location     Type
  7755 ;;		None
  7756 ;; Return value:  Size  Location     Type
  7757 ;;                  1    wreg      void 
  7758 ;; Registers used:
  7759 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7760 ;; Tracked objects:
  7761 ;;		On entry : 3F/0
  7762 ;;		On exit  : 0/0
  7763 ;;		Unchanged: 0/0
  7764 ;; Data sizes:     COMRAM   BANK0
  7765 ;;      Params:         1       0
  7766 ;;      Locals:         0       0
  7767 ;;      Temps:          1       0
  7768 ;;      Totals:         2       0
  7769 ;;Total ram usage:        2 bytes
  7770 ;; Hardware stack levels used:    1
  7771 ;; Hardware stack levels required when called:    4
  7772 ;; This function calls:
  7773 ;;		_add_task_id
  7774 ;;		_get_bat
  7775 ;; This function is called by:
  7776 ;;		_main
  7777 ;;		_find_task
  7778 ;; This function uses a non-reentrant model
  7779 ;;
  7780                           
  7781                           	psect	text27
  7782  001178                     __ptext27:
  7783                           	opt stack 0
  7784  001178                     _chrg_task:
  7785                           	opt stack 2
  7786                           
  7787                           ; BSR set to: 0
  7788                           ;chrg.c: 12: if(chrg_o&& (PINA5==0))
  7789                           
  7790                           ;incstack = 0
  7791  001178  5037               	movf	_chrg_o,w,c
  7792  00117A  E014               	bz	l3031
  7793                           
  7794                           ; BSR set to: 0
  7795  00117C  BA86               	btfsc	3974,5,c	;volatile
  7796  00117E  D012               	goto	l3031
  7797                           
  7798                           ; BSR set to: 0
  7799                           ;chrg.c: 13: {
  7800                           ;chrg.c: 14: add_task_id(2,300,6,ui_id);
  7801  001180  0E2C               	movlw	44
  7802  001182  EC4E  F004         	call	PL8	;call to abstracted procedure
  7803  001186  0E06               	movlw	6
  7804  001188  6E42               	movwf	add_task_id@suc_max,c
  7805  00118A  C03C  F043         	movff	_ui_id,add_task_id@task_id
  7806  00118E  0E02               	movlw	2
  7807  001190  EC53  F00A         	call	_add_task_id
  7808                           
  7809                           ;chrg.c: 15: full=0;
  7810  001194  6A36               	clrf	_full,c
  7811                           
  7812                           ;chrg.c: 16: bat.bat=get_bat();
  7813  001196  ECE8  F00C         	call	_get_bat	;wreg free
  7814  00119A  C057  F072         	movff	?_get_bat,_bat+1
  7815  00119E  C058  F073         	movff	?_get_bat+1,_bat+2
  7816                           
  7817                           ;chrg.c: 19: }
  7818  0011A2  D00D               	goto	l3032
  7819  0011A4                     l3031:
  7820                           
  7821                           ; BSR set to: 0
  7822                           ;chrg.c: 20: else if(PINA5&& (chrg_o==0))
  7823  0011A4  AA86               	btfss	3974,5,c	;volatile
  7824  0011A6  D00B               	goto	l3032
  7825                           
  7826                           ; BSR set to: 0
  7827  0011A8  5037               	movf	_chrg_o,w,c
  7828  0011AA  E109               	bnz	l3032
  7829                           
  7830                           ; BSR set to: 0
  7831                           ;chrg.c: 21: {
  7832                           ;chrg.c: 22: task_->sucCnt=0;
  7833  0011AC  505F               	movf	chrg_task@task_,w,c
  7834  0011AE  ECF4  F009         	call	PL2	;call to abstracted procedure
  7835  0011B2  6ADF               	clrf	indf2,c
  7836                           
  7837                           ; BSR set to: 0
  7838                           ;chrg.c: 23: chrg_cnt=0;
  7839  0011B4  6A35               	clrf	_chrg_cnt,c
  7840                           
  7841                           ; BSR set to: 0
  7842                           ;chrg.c: 24: if(PINA1==0)
  7843  0011B6  B286               	btfsc	3974,1,c	;volatile
  7844  0011B8  D002               	goto	l3032
  7845                           
  7846                           ; BSR set to: 0
  7847                           ;chrg.c: 25: {
  7848                           ;chrg.c: 26: chrging=1;
  7849  0011BA  0E01               	movlw	1
  7850  0011BC  6E79               	movwf	_chrging,c
  7851  0011BE                     l3032:
  7852                           
  7853                           ;chrg.c: 27: }
  7854                           ;chrg.c: 28: }
  7855                           ;chrg.c: 29: chrg_o=PINA5;
  7856  0011BE  0E00               	movlw	0
  7857  0011C0  BA86               	btfsc	3974,5,c	;volatile
  7858  0011C2  0E01               	movlw	1
  7859  0011C4  6E37               	movwf	_chrg_o,c
  7860                           
  7861                           ;chrg.c: 31: if(full)
  7862  0011C6  5036               	movf	_full,w,c
  7863  0011C8  E007               	bz	l3035
  7864                           
  7865                           ;chrg.c: 32: {
  7866                           ;chrg.c: 33: task_->sucCnt=0;
  7867  0011CA  505F               	movf	chrg_task@task_,w,c
  7868  0011CC  ECF4  F009         	call	PL2	;call to abstracted procedure
  7869  0011D0  0E00               	movlw	0
  7870  0011D2  6ADF               	clrf	indf2,c
  7871                           
  7872                           ;chrg.c: 34: chrg_cnt=0;
  7873  0011D4  6A35               	clrf	_chrg_cnt,c
  7874                           
  7875                           ;chrg.c: 35: return;
  7876  0011D6  0012               	return	
  7877  0011D8                     l3035:
  7878                           
  7879                           ;chrg.c: 36: }
  7880                           ;chrg.c: 37: if(PINA5)
  7881  0011D8  AA86               	btfss	3974,5,c	;volatile
  7882  0011DA  D041               	goto	l3037
  7883                           
  7884                           ;chrg.c: 38: {
  7885                           ;chrg.c: 39: if(PINA1)
  7886  0011DC  A286               	btfss	3974,1,c	;volatile
  7887  0011DE  D016               	goto	l15717
  7888                           
  7889                           ;chrg.c: 40: {
  7890                           ;chrg.c: 41: full=1;
  7891  0011E0  0E01               	movlw	1
  7892  0011E2  6E36               	movwf	_full,c
  7893                           
  7894                           ;chrg.c: 42: bat.dian=4;
  7895  0011E4  0E04               	movlw	4
  7896  0011E6  6E71               	movwf	_bat,c
  7897                           
  7898                           ;chrg.c: 43: if(get_bat()>390)
  7899  0011E8  ECE8  F00C         	call	_get_bat	;wreg free
  7900  0011EC  0E87               	movlw	135
  7901  0011EE  5C57               	subwf	?_get_bat,w,c
  7902  0011F0  0E01               	movlw	1
  7903  0011F2  5858               	subwfb	?_get_bat+1,w,c
  7904  0011F4  A0D8               	btfss	status,0,c
  7905  0011F6  0012               	return	
  7906                           
  7907                           ;chrg.c: 44: {
  7908                           ;chrg.c: 45: add_task_id(3,5000,3,ui_id);
  7909  0011F8  0E88               	movlw	136
  7910  0011FA  6E3E               	movwf	add_task_id@interval_ms,c
  7911  0011FC  0E13               	movlw	19
  7912  0011FE  6E3F               	movwf	add_task_id@interval_ms+1,c
  7913  001200  6A40               	clrf	add_task_id@interval_ms+2,c
  7914  001202  6A41               	clrf	add_task_id@interval_ms+3,c
  7915  001204  EC9A  F004         	call	PL76	;call to abstracted procedure
  7916  001208  EF53  F00A         	goto	_add_task_id
  7917  00120C                     l15717:
  7918                           
  7919                           ;chrg.c: 48: }
  7920                           ;chrg.c: 49: if(chrging&&((task_list[ui_id].active==0)||(task_list[ui_id].id==16)))
  7921  00120C  5079               	movf	_chrging,w,c
  7922  00120E  E00F               	bz	l15725
  7923  001210  503C               	movf	_ui_id,w,c
  7924  001212  EC99  F005         	call	PL16	;call to abstracted procedure
  7925  001216  50DF               	movf	indf2,w,c
  7926  001218  E005               	bz	l3042
  7927  00121A  503C               	movf	_ui_id,w,c
  7928  00121C  D826               	call	PL14	;call to abstracted procedure
  7929  00121E  0E10               	movlw	16
  7930  001220  18DE               	xorwf	postinc2,w,c
  7931  001222  E105               	bnz	l15725
  7932  001224                     l3042:
  7933                           
  7934                           ;chrg.c: 50: {
  7935                           ;chrg.c: 51: chrging=0;
  7936  001224  6A79               	clrf	_chrging,c
  7937                           
  7938                           ;chrg.c: 52: add_task_id(1,500,0,ui_id);
  7939  001226  ECF9  F009         	call	PL4	;call to abstracted procedure
  7940  00122A  EC53  F00A         	call	_add_task_id
  7941  00122E                     l15725:
  7942                           
  7943                           ;chrg.c: 53: }
  7944                           ;chrg.c: 54: task_->sucCnt++;
  7945  00122E  505F               	movf	chrg_task@task_,w,c
  7946  001230  ECF4  F009         	call	PL2	;call to abstracted procedure
  7947  001234  2ADF               	incf	indf2,f,c
  7948                           
  7949                           ;chrg.c: 56: if(task_->sucCnt>=250)
  7950  001236  505F               	movf	chrg_task@task_,w,c
  7951  001238  ECF4  F009         	call	PL2	;call to abstracted procedure
  7952  00123C  0EF9               	movlw	249
  7953  00123E  64DF               	cpfsgt	indf2,c
  7954  001240  0CF9               	retlw	249
  7955                           
  7956                           ;chrg.c: 57: {
  7957                           ;chrg.c: 58: task_->sucCnt=0;
  7958  001242  505F               	movf	chrg_task@task_,w,c
  7959  001244  ECF4  F009         	call	PL2	;call to abstracted procedure
  7960  001248  6ADF               	clrf	indf2,c
  7961                           
  7962                           ;chrg.c: 59: chrg_cnt++;
  7963  00124A  2A35               	incf	_chrg_cnt,f,c
  7964                           
  7965                           ;chrg.c: 60: if(chrg_cnt>=48)
  7966  00124C  0E2F               	movlw	47
  7967  00124E  6435               	cpfsgt	_chrg_cnt,c
  7968  001250  0C2F               	retlw	47
  7969                           
  7970                           ;chrg.c: 61: {
  7971                           ;chrg.c: 62: chrg_cnt=0;
  7972  001252  6A35               	clrf	_chrg_cnt,c
  7973                           
  7974                           ;chrg.c: 63: if(bat.dian<3){bat.dian++;}
  7975  001254  0E03               	movlw	3
  7976  001256  6071               	cpfslt	_bat,c
  7977  001258  0C03               	retlw	3
  7978  00125A  2A71               	incf	_bat,f,c
  7979  00125C  0C03               	retlw	3
  7980  00125E                     l3037:
  7981                           
  7982                           ;chrg.c: 68: else
  7983                           ;chrg.c: 69: {
  7984                           ;chrg.c: 70: chrg_cnt=0;
  7985  00125E  6A35               	clrf	_chrg_cnt,c
  7986                           
  7987                           ;chrg.c: 71: task_->sucCnt=0;
  7988  001260  505F               	movf	chrg_task@task_,w,c
  7989  001262  ECF4  F009         	call	PL2	;call to abstracted procedure
  7990  001266  6ADF               	clrf	indf2,c
  7991  001268  0C00               	retlw	0	;funcret
  7992  00126A                     __end_of_chrg_task:
  7993                           	opt stack 0
  7994  00126A                     PL14:
  7995                           	opt stack 4
  7996  00126A  0D09               	mullw	9
  7997  00126C  50F3               	movf	prodl,w,c
  7998  00126E  0F8A               	addlw	low _task_list
  7999  001270  6ED9               	movwf	fsr2l,c
  8000  001272  6ADA               	clrf	fsr2h,c
  8001  001274  0012               	return	
  8002  001276                     __end_ofPL14:
  8003                           	opt stack 0
  8004                           tblptru	equ	0xFF8
  8005                           tblptrh	equ	0xFF7
  8006                           tblptrl	equ	0xFF6
  8007                           tablat	equ	0xFF5
  8008                           prodl	equ	0xFF3
  8009                           intcon	equ	0xFF2
  8010                           intcon2	equ	0xFF1
  8011                           intcon3	equ	0xFF0
  8012                           postinc0	equ	0xFEE
  8013                           wreg	equ	0xFE8
  8014                           postdec1	equ	0xFE5
  8015                           fsr1l	equ	0xFE1
  8016                           indf2	equ	0xFDF
  8017                           postinc2	equ	0xFDE
  8018                           postdec2	equ	0xFDD
  8019                           fsr2h	equ	0xFDA
  8020                           fsr2l	equ	0xFD9
  8021                           status	equ	0xFD8
  8022                           
  8023 ;; *************** function _cb_task *****************
  8024 ;; Defined at:
  8025 ;;		line 38 in file ".\src\cb.c"
  8026 ;; Parameters:    Size  Location     Type
  8027 ;;  task_           1   32[COMRAM] PTR struct task
  8028 ;;		 -> task_list(72), 
  8029 ;; Auto vars:     Size  Location     Type
  8030 ;;  zz_t            2   35[COMRAM] unsigned int 
  8031 ;; Return value:  Size  Location     Type
  8032 ;;                  1    wreg      void 
  8033 ;; Registers used:
  8034 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8035 ;; Tracked objects:
  8036 ;;		On entry : 3F/0
  8037 ;;		On exit  : 0/0
  8038 ;;		Unchanged: 0/0
  8039 ;; Data sizes:     COMRAM   BANK0
  8040 ;;      Params:         1       0
  8041 ;;      Locals:         2       0
  8042 ;;      Temps:          2       0
  8043 ;;      Totals:         5       0
  8044 ;;Total ram usage:        5 bytes
  8045 ;; Hardware stack levels used:    1
  8046 ;; Hardware stack levels required when called:    4
  8047 ;; This function calls:
  8048 ;;		_add_task_id
  8049 ;;		_get_load
  8050 ;; This function is called by:
  8051 ;;		_main
  8052 ;;		_find_task
  8053 ;; This function uses a non-reentrant model
  8054 ;;
  8055                           
  8056                           	psect	text28
  8057  001406                     __ptext28:
  8058                           	opt stack 0
  8059  001406                     _cb_task:
  8060                           	opt stack 2
  8061                           
  8062                           ; BSR set to: 0
  8063                           ;cb.c: 40: if(PA0&&(PINA4==0))
  8064                           
  8065                           ;incstack = 0
  8066  001406  B080               	btfsc	3968,0,c	;volatile
  8067                           
  8068                           ; BSR set to: 0
  8069  001408  B886               	btfsc	3974,4,c	;volatile
  8070  00140A  D009               	goto	l2022
  8071                           
  8072                           ; BSR set to: 0
  8073                           ;cb.c: 41: {
  8074                           ;cb.c: 42: if(cb_o!=PINB1)
  8075  00140C  0E00               	movlw	0
  8076  00140E  B287               	btfsc	3975,1,c	;volatile
  8077  001410  0E01               	movlw	1
  8078  001412  1839               	xorwf	_cb_o,w,c
  8079  001414  E003               	bz	l2023
  8080                           
  8081                           ; BSR set to: 0
  8082                           ;cb.c: 43: {
  8083                           ;cb.c: 44: zz_begin=1;
  8084  001416  0E01               	movlw	1
  8085  001418  6E3B               	movwf	_zz_begin,c
  8086                           
  8087                           ; BSR set to: 0
  8088                           ;cb.c: 45: zz_p=0;
  8089  00141A  6A3A               	clrf	_zz_p,c
  8090  00141C                     l2023:
  8091                           
  8092                           ; BSR set to: 0
  8093                           ;cb.c: 49: }
  8094                           ;cb.c: 50: cb_o=PINB1;
  8095  00141C  D83A               	call	PL44	;call to abstracted procedure
  8096  00141E                     l2022:
  8097                           
  8098                           ; BSR set to: 0
  8099                           ;cb.c: 51: }
  8100                           ;cb.c: 52: if(zz_begin)
  8101  00141E  503B               	movf	_zz_begin,w,c
  8102  001420  B4D8               	btfsc	status,2,c
  8103  001422  0012               	return	
  8104                           
  8105                           ; BSR set to: 0
  8106                           ;cb.c: 53: {
  8107                           ;cb.c: 54: zz_[zz_p]=get_load();
  8108  001424  D83B               	call	PL70	;call to abstracted procedure
  8109  001426  ECE4  F00A         	call	_get_load	;wreg free
  8110  00142A  6EDF               	movwf	indf2,c
  8111                           
  8112                           ;cb.c: 55: yd=(zz_[zz_p]==0)?1:0;
  8113  00142C  D837               	call	PL70	;call to abstracted procedure
  8114  00142E  50DF               	movf	indf2,w,c
  8115  001430  0E01               	movlw	1
  8116  001432  A4D8               	btfss	status,2,c
  8117  001434  0E00               	movlw	0
  8118  001436  6E38               	movwf	_yd,c
  8119                           
  8120                           ;cb.c: 56: zz_p++;
  8121  001438  2A3A               	incf	_zz_p,f,c
  8122                           
  8123                           ;cb.c: 57: if(zz_p>=6)
  8124  00143A  0E05               	movlw	5
  8125  00143C  643A               	cpfsgt	_zz_p,c
  8126  00143E  0C05               	retlw	5
  8127                           
  8128                           ;cb.c: 58: {
  8129                           ;cb.c: 59: unsigned int zz_t=zz_[2]+zz_[3]+zz_[4]+zz_[5];
  8130  001440  0100               	movlb	0	; () banked
  8131  001442  5183               	movf	(_zz_+3)& (0+255),w,b
  8132  001444  C082  F05E         	movff	_zz_+2,??_cb_task
  8133  001448  6A5F               	clrf	(??_cb_task+1)& (0+255),c
  8134  00144A  265E               	addwf	??_cb_task,f,c
  8135  00144C  0E00               	movlw	0
  8136  00144E  225F               	addwfc	??_cb_task+1,f,c
  8137  001450  5184               	movf	(_zz_+4)& (0+255),w,b
  8138  001452  265E               	addwf	??_cb_task,f,c
  8139  001454  0E00               	movlw	0
  8140  001456  225F               	addwfc	??_cb_task+1,f,c
  8141  001458  5185               	movf	(_zz_+5)& (0+255),w,b
  8142  00145A  245E               	addwf	??_cb_task,w,c
  8143  00145C  6E60               	movwf	cb_task@zz_t,c
  8144  00145E  0E00               	movlw	0
  8145  001460  205F               	addwfc	??_cb_task+1,w,c
  8146  001462  6E61               	movwf	cb_task@zz_t+1,c
  8147                           
  8148                           ;cb.c: 60: zz=zz_t>>2;
  8149  001464  C060  F05E         	movff	cb_task@zz_t,??_cb_task
  8150  001468  C061  F05F         	movff	cb_task@zz_t+1,??_cb_task+1
  8151  00146C  90D8               	bcf	status,0,c
  8152  00146E  325F               	rrcf	??_cb_task+1,f,c
  8153  001470  325E               	rrcf	??_cb_task,f,c
  8154  001472  90D8               	bcf	status,0,c
  8155  001474  325F               	rrcf	??_cb_task+1,f,c
  8156  001476  325E               	rrcf	??_cb_task,f,c
  8157  001478  505E               	movf	??_cb_task,w,c
  8158  00147A  6E7A               	movwf	_zz,c
  8159                           
  8160                           ; BSR set to: 0
  8161                           ;cb.c: 61: zz_begin=0;
  8162  00147C  6A3B               	clrf	_zz_begin,c
  8163                           
  8164                           ; BSR set to: 0
  8165                           ;cb.c: 62: add_task_id(0,50,53,ui_id);
  8166  00147E  0E32               	movlw	50
  8167  001480  EC94  F005         	call	PL6	;call to abstracted procedure
  8168  001484  0E35               	movlw	53
  8169  001486  6E42               	movwf	add_task_id@suc_max,c
  8170  001488  C03C  F043         	movff	_ui_id,add_task_id@task_id
  8171  00148C  0E00               	movlw	0
  8172  00148E  EF53  F00A         	goto	_add_task_id
  8173  001492                     __end_of_cb_task:
  8174                           	opt stack 0
  8175  001492                     PL44:
  8176                           	opt stack 3
  8177  001492  0E00               	movlw	0
  8178  001494  B287               	btfsc	3975,1,c	;volatile
  8179  001496  0E01               	movlw	1
  8180  001498  6E39               	movwf	_cb_o,c
  8181  00149A  0012               	return	
  8182  00149C                     __end_ofPL44:
  8183                           	opt stack 0
  8184  00149C                     PL70:
  8185                           	opt stack 2
  8186  00149C  503A               	movf	_zz_p,w,c
  8187  00149E  0F80               	addlw	low _zz_
  8188  0014A0  6ED9               	movwf	fsr2l,c
  8189  0014A2  6ADA               	clrf	fsr2h,c
  8190  0014A4  0012               	return	
  8191  0014A6                     __end_ofPL70:
  8192                           	opt stack 0
  8193                           tblptru	equ	0xFF8
  8194                           tblptrh	equ	0xFF7
  8195                           tblptrl	equ	0xFF6
  8196                           tablat	equ	0xFF5
  8197                           prodl	equ	0xFF3
  8198                           intcon	equ	0xFF2
  8199                           intcon2	equ	0xFF1
  8200                           intcon3	equ	0xFF0
  8201                           postinc0	equ	0xFEE
  8202                           wreg	equ	0xFE8
  8203                           postdec1	equ	0xFE5
  8204                           fsr1l	equ	0xFE1
  8205                           indf2	equ	0xFDF
  8206                           postinc2	equ	0xFDE
  8207                           postdec2	equ	0xFDD
  8208                           fsr2h	equ	0xFDA
  8209                           fsr2l	equ	0xFD9
  8210                           status	equ	0xFD8
  8211                           
  8212 ;; *************** function _get_load *****************
  8213 ;; Defined at:
  8214 ;;		line 6 in file ".\src\cb.c"
  8215 ;; Parameters:    Size  Location     Type
  8216 ;;		None
  8217 ;; Auto vars:     Size  Location     Type
  8218 ;;  temp            4   28[COMRAM] unsigned long 
  8219 ;; Return value:  Size  Location     Type
  8220 ;;                  1    wreg      unsigned char 
  8221 ;; Registers used:
  8222 ;;		wreg, status,2, status,0, cstack
  8223 ;; Tracked objects:
  8224 ;;		On entry : 3F/0
  8225 ;;		On exit  : 0/0
  8226 ;;		Unchanged: 0/0
  8227 ;; Data sizes:     COMRAM   BANK0
  8228 ;;      Params:         0       0
  8229 ;;      Locals:         4       0
  8230 ;;      Temps:          2       0
  8231 ;;      Totals:         6       0
  8232 ;;Total ram usage:        6 bytes
  8233 ;; Hardware stack levels used:    1
  8234 ;; Hardware stack levels required when called:    3
  8235 ;; This function calls:
  8236 ;;		___lldiv
  8237 ;;		___lmul
  8238 ;; This function is called by:
  8239 ;;		_cb_task
  8240 ;;		_si_mic_task
  8241 ;; This function uses a non-reentrant model
  8242 ;;
  8243                           
  8244                           	psect	text29
  8245  0015C8                     __ptext29:
  8246                           	opt stack 0
  8247  0015C8                     _get_load:
  8248                           	opt stack 3
  8249                           
  8250                           ; BSR set to: 0
  8251                           ;cb.c: 9: PB0=0;
  8252                           
  8253                           ;incstack = 0
  8254  0015C8  9081               	bcf	3969,0,c	;volatile
  8255                           
  8256                           ; BSR set to: 0
  8257                           ;cb.c: 10: _delay((unsigned long)((10)*(16000000/4000000)));
  8258  0015CA  0E0D               	movlw	13
  8259  0015CC                     u7157:
  8260  0015CC  2EE8               	decfsz	wreg,f,c
  8261  0015CE  D7FE               	bra	u7157
  8262  0015D0  F000               	nop	
  8263                           
  8264                           ;cb.c: 14: ADCON1=0x60;
  8265                           
  8266                           ;cb.c: 16: ADCON0=0x15;
  8267  0015D2  EC67  F004         	call	PL24	;call to abstracted procedure
  8268                           
  8269                           ;cb.c: 17: ADIF=0;
  8270                           
  8271                           ;cb.c: 18: ADIE=0;
  8272                           
  8273                           ;cb.c: 19: GO=1;
  8274                           
  8275                           ;cb.c: 20: while(GO==1);
  8276                           
  8277                           ;cb.c: 21: ADIF=0;
  8278                           
  8279                           ;cb.c: 22: temp=((ADRESH&0x0f)<<8)|ADRESL;
  8280  0015D6  EC54  F004         	call	PL12	;call to abstracted procedure
  8281  0015DA  6E58               	movwf	(??_get_load+1)& (0+255),c
  8282  0015DC  6A57               	clrf	??_get_load& (0+255),c
  8283  0015DE  50A2               	movf	4002,w,c	;volatile
  8284  0015E0  1257               	iorwf	??_get_load,f,c
  8285  0015E2  0E00               	movlw	0
  8286  0015E4  C057  F059         	movff	??_get_load,get_load@temp
  8287  0015E8  C058  F05A         	movff	??_get_load+1,get_load@temp+1
  8288  0015EC  BE5A               	btfsc	get_load@temp+1,7,c
  8289  0015EE  0EFF               	movlw	-1
  8290  0015F0  6E5B               	movwf	get_load@temp+2,c
  8291  0015F2  6E5C               	movwf	get_load@temp+3,c
  8292                           
  8293                           ;cb.c: 23: PB0=1;
  8294  0015F4  8081               	bsf	3969,0,c	;volatile
  8295                           
  8296                           ;cb.c: 24: temp=510ul*temp/(4095ul-temp);
  8297  0015F6  C059  F03E         	movff	get_load@temp,___lmul@multiplier
  8298  0015FA  C05A  F03F         	movff	get_load@temp+1,___lmul@multiplier+1
  8299  0015FE  C05B  F040         	movff	get_load@temp+2,___lmul@multiplier+2
  8300  001602  C05C  F041         	movff	get_load@temp+3,___lmul@multiplier+3
  8301  001606  0EFE               	movlw	254
  8302  001608  6E42               	movwf	___lmul@multiplicand,c
  8303  00160A  0E01               	movlw	1
  8304  00160C  6E43               	movwf	___lmul@multiplicand+1,c
  8305  00160E  6A44               	clrf	___lmul@multiplicand+2,c
  8306  001610  6A45               	clrf	___lmul@multiplicand+3,c
  8307  001612  EC42  F00D         	call	___lmul	;wreg free
  8308  001616  EC5E  F004         	call	PL22	;call to abstracted procedure
  8309  00161A  5059               	movf	get_load@temp,w,c
  8310  00161C  08FF               	sublw	255
  8311  00161E  6E4E               	movwf	___lldiv@divisor,c
  8312  001620  0E0F               	movlw	15
  8313  001622  545A               	subfwb	get_load@temp+1,w,c
  8314  001624  6E4F               	movwf	___lldiv@divisor+1,c
  8315  001626  0E00               	movlw	0
  8316  001628  545B               	subfwb	get_load@temp+2,w,c
  8317  00162A  6E50               	movwf	___lldiv@divisor+2,c
  8318  00162C  0E00               	movlw	0
  8319  00162E  545C               	subfwb	get_load@temp+3,w,c
  8320  001630  6E51               	movwf	___lldiv@divisor+3,c
  8321  001632  ECDE  F00B         	call	___lldiv	;wreg free
  8322  001636  C04A  F059         	movff	?___lldiv,get_load@temp
  8323  00163A  C04B  F05A         	movff	?___lldiv+1,get_load@temp+1
  8324  00163E  C04C  F05B         	movff	?___lldiv+2,get_load@temp+2
  8325  001642  C04D  F05C         	movff	?___lldiv+3,get_load@temp+3
  8326                           
  8327                           ;cb.c: 26: return temp;
  8328  001646  5059               	movf	get_load@temp,w,c
  8329  001648  0012               	return		;funcret
  8330  00164A                     __end_of_get_load:
  8331                           	opt stack 0
  8332                           tblptru	equ	0xFF8
  8333                           tblptrh	equ	0xFF7
  8334                           tblptrl	equ	0xFF6
  8335                           tablat	equ	0xFF5
  8336                           prodl	equ	0xFF3
  8337                           intcon	equ	0xFF2
  8338                           intcon2	equ	0xFF1
  8339                           intcon3	equ	0xFF0
  8340                           postinc0	equ	0xFEE
  8341                           wreg	equ	0xFE8
  8342                           postdec1	equ	0xFE5
  8343                           fsr1l	equ	0xFE1
  8344                           indf2	equ	0xFDF
  8345                           postinc2	equ	0xFDE
  8346                           postdec2	equ	0xFDD
  8347                           fsr2h	equ	0xFDA
  8348                           fsr2l	equ	0xFD9
  8349                           status	equ	0xFD8
  8350                           
  8351 ;; *************** function ___lmul *****************
  8352 ;; Defined at:
  8353 ;;		line 15 in file "c:\Users\Administrator\.vscode\extensions\ad.adide-1.1.7\resource\Microchip\xc8\v1.41\sources\commo
      +n\Umul32.c"
  8354 ;; Parameters:    Size  Location     Type
  8355 ;;  multiplier      4    1[COMRAM] unsigned long 
  8356 ;;  multiplicand    4    5[COMRAM] unsigned long 
  8357 ;; Auto vars:     Size  Location     Type
  8358 ;;  product         4    9[COMRAM] unsigned long 
  8359 ;; Return value:  Size  Location     Type
  8360 ;;                  4    1[COMRAM] unsigned long 
  8361 ;; Registers used:
  8362 ;;		wreg, status,2, status,0
  8363 ;; Tracked objects:
  8364 ;;		On entry : 0/0
  8365 ;;		On exit  : 0/0
  8366 ;;		Unchanged: 0/0
  8367 ;; Data sizes:     COMRAM   BANK0
  8368 ;;      Params:         8       0
  8369 ;;      Locals:         4       0
  8370 ;;      Temps:          0       0
  8371 ;;      Totals:        12       0
  8372 ;;Total ram usage:       12 bytes
  8373 ;; Hardware stack levels used:    1
  8374 ;; Hardware stack levels required when called:    2
  8375 ;; This function calls:
  8376 ;;		Nothing
  8377 ;; This function is called by:
  8378 ;;		_get_load
  8379 ;;		_main
  8380 ;; This function uses a non-reentrant model
  8381 ;;
  8382                           
  8383                           	psect	text30
  8384  001A84                     __ptext30:
  8385                           	opt stack 0
  8386  001A84                     ___lmul:
  8387                           	opt stack 3
  8388                           
  8389                           ;incstack = 0
  8390  001A84  6A46               	clrf	___lmul@product,c
  8391  001A86  6A47               	clrf	___lmul@product+1,c
  8392  001A88  6A48               	clrf	___lmul@product+2,c
  8393  001A8A  6A49               	clrf	___lmul@product+3,c
  8394  001A8C                     l12697:
  8395  001A8C  A03E               	btfss	___lmul@multiplier,0,c
  8396  001A8E  D008               	goto	l15271
  8397  001A90  5042               	movf	___lmul@multiplicand,w,c
  8398  001A92  2646               	addwf	___lmul@product,f,c
  8399  001A94  5043               	movf	___lmul@multiplicand+1,w,c
  8400  001A96  2247               	addwfc	___lmul@product+1,f,c
  8401  001A98  5044               	movf	___lmul@multiplicand+2,w,c
  8402  001A9A  2248               	addwfc	___lmul@product+2,f,c
  8403  001A9C  5045               	movf	___lmul@multiplicand+3,w,c
  8404  001A9E  2249               	addwfc	___lmul@product+3,f,c
  8405  001AA0                     l15271:
  8406  001AA0  90D8               	bcf	status,0,c
  8407  001AA2  3642               	rlcf	___lmul@multiplicand,f,c
  8408  001AA4  3643               	rlcf	___lmul@multiplicand+1,f,c
  8409  001AA6  3644               	rlcf	___lmul@multiplicand+2,f,c
  8410  001AA8  3645               	rlcf	___lmul@multiplicand+3,f,c
  8411  001AAA  90D8               	bcf	status,0,c
  8412  001AAC  3241               	rrcf	___lmul@multiplier+3,f,c
  8413  001AAE  3240               	rrcf	___lmul@multiplier+2,f,c
  8414  001AB0  323F               	rrcf	___lmul@multiplier+1,f,c
  8415  001AB2  323E               	rrcf	___lmul@multiplier,f,c
  8416  001AB4  503E               	movf	___lmul@multiplier,w,c
  8417  001AB6  103F               	iorwf	___lmul@multiplier+1,w,c
  8418  001AB8  1040               	iorwf	___lmul@multiplier+2,w,c
  8419  001ABA  1041               	iorwf	___lmul@multiplier+3,w,c
  8420  001ABC  E1E7               	bnz	l12697
  8421  001ABE  C046  F03E         	movff	___lmul@product,?___lmul
  8422  001AC2  C047  F03F         	movff	___lmul@product+1,?___lmul+1
  8423  001AC6  C048  F040         	movff	___lmul@product+2,?___lmul+2
  8424  001ACA  C049  F041         	movff	___lmul@product+3,?___lmul+3
  8425  001ACE  0012               	return		;funcret
  8426  001AD0                     __end_of___lmul:
  8427                           	opt stack 0
  8428                           tblptru	equ	0xFF8
  8429                           tblptrh	equ	0xFF7
  8430                           tblptrl	equ	0xFF6
  8431                           tablat	equ	0xFF5
  8432                           prodl	equ	0xFF3
  8433                           intcon	equ	0xFF2
  8434                           intcon2	equ	0xFF1
  8435                           intcon3	equ	0xFF0
  8436                           postinc0	equ	0xFEE
  8437                           wreg	equ	0xFE8
  8438                           postdec1	equ	0xFE5
  8439                           fsr1l	equ	0xFE1
  8440                           indf2	equ	0xFDF
  8441                           postinc2	equ	0xFDE
  8442                           postdec2	equ	0xFDD
  8443                           fsr2h	equ	0xFDA
  8444                           fsr2l	equ	0xFD9
  8445                           status	equ	0xFD8
  8446                           
  8447 ;; *************** function _add_task_id *****************
  8448 ;; Defined at:
  8449 ;;		line 42 in file ".\src\task.c"
  8450 ;; Parameters:    Size  Location     Type
  8451 ;;  id              1    wreg     unsigned char 
  8452 ;;  interval_ms     4    1[COMRAM] unsigned long 
  8453 ;;  suc_max         1    5[COMRAM] unsigned char 
  8454 ;;  task_id         1    6[COMRAM] char 
  8455 ;; Auto vars:     Size  Location     Type
  8456 ;;  id              1   11[COMRAM] unsigned char 
  8457 ;;  interval_tic    2   12[COMRAM] unsigned int 
  8458 ;; Return value:  Size  Location     Type
  8459 ;;                  1    wreg      char 
  8460 ;; Registers used:
  8461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8462 ;; Tracked objects:
  8463 ;;		On entry : 0/0
  8464 ;;		On exit  : 0/0
  8465 ;;		Unchanged: 0/0
  8466 ;; Data sizes:     COMRAM   BANK0
  8467 ;;      Params:         6       0
  8468 ;;      Locals:         3       0
  8469 ;;      Temps:          4       0
  8470 ;;      Totals:        13       0
  8471 ;;Total ram usage:       13 bytes
  8472 ;; Hardware stack levels used:    1
  8473 ;; Hardware stack levels required when called:    2
  8474 ;; This function calls:
  8475 ;;		Nothing
  8476 ;; This function is called by:
  8477 ;;		_cb_task
  8478 ;;		_chrg_task
  8479 ;;		_key_task
  8480 ;;		_main
  8481 ;;		_si_mic_task
  8482 ;;		_ui_cb
  8483 ;;		_ui_smoend_dl_getup
  8484 ;;		_ui_ts_on
  8485 ;;		_ui_ts_off
  8486 ;; This function uses a non-reentrant model
  8487 ;;
  8488                           
  8489                           	psect	text31
  8490  0014A6                     __ptext31:
  8491                           	opt stack 0
  8492  0014A6                     _add_task_id:
  8493                           	opt stack 4
  8494                           
  8495                           ;incstack = 0
  8496                           ;add_task_id@id stored from wreg
  8497  0014A6  6E48               	movwf	add_task_id@id,c
  8498                           
  8499                           ;task.c: 43: unsigned int interval_ticks = interval_ms >>3;
  8500  0014A8  C03E  F044         	movff	add_task_id@interval_ms,??_add_task_id
  8501  0014AC  C03F  F045         	movff	add_task_id@interval_ms+1,??_add_task_id+1
  8502  0014B0  C040  F046         	movff	add_task_id@interval_ms+2,??_add_task_id+2
  8503  0014B4  C041  F047         	movff	add_task_id@interval_ms+3,??_add_task_id+3
  8504  0014B8  0E04               	movlw	4
  8505  0014BA  D005               	goto	u3640
  8506  0014BC                     u3645:
  8507  0014BC  90D8               	bcf	status,0,c
  8508  0014BE  3247               	rrcf	??_add_task_id+3,f,c
  8509  0014C0  3246               	rrcf	??_add_task_id+2,f,c
  8510  0014C2  3245               	rrcf	??_add_task_id+1,f,c
  8511  0014C4  3244               	rrcf	??_add_task_id,f,c
  8512  0014C6                     u3640:
  8513  0014C6  2EE8               	decfsz	wreg,f,c
  8514  0014C8  D7F9               	goto	u3645
  8515  0014CA  C044  F049         	movff	??_add_task_id,add_task_id@interval_ticks
  8516  0014CE  C045  F04A         	movff	??_add_task_id+1,add_task_id@interval_ticks+1
  8517                           
  8518                           ;task.c: 46: if(interval_ticks == 0 || task_id<0)
  8519  0014D2  5049               	movf	add_task_id@interval_ticks,w,c
  8520  0014D4  104A               	iorwf	add_task_id@interval_ticks+1,w,c
  8521  0014D6  A4D8               	btfss	status,2,c
  8522  0014D8  BE43               	btfsc	add_task_id@task_id,7,c
  8523  0014DA  0012               	return	
  8524                           
  8525                           ;task.c: 51: GIE=0;PEIE=0;
  8526  0014DC  9EF2               	bcf	intcon,7,c	;volatile
  8527  0014DE  9CF2               	bcf	intcon,6,c	;volatile
  8528                           
  8529                           ;task.c: 53: task_list[task_id].id = id;
  8530  0014E0  5043               	movf	add_task_id@task_id,w,c
  8531  0014E2  EC35  F009         	call	PL14	;call to abstracted procedure
  8532  0014E6  C048  FFDF         	movff	add_task_id@id,indf2
  8533                           
  8534                           ;task.c: 54: task_list[task_id].interval = interval_ticks;
  8535  0014EA  5043               	movf	add_task_id@task_id,w,c
  8536  0014EC  0D09               	mullw	9
  8537  0014EE  50F3               	movf	prodl,w,c
  8538  0014F0  0F8B               	addlw	low (_task_list+1)
  8539                           
  8540                           ;task.c: 55: task_list[task_id].counter = interval_ticks;
  8541  0014F2  D81A               	call	PL34	;call to abstracted procedure
  8542  0014F4  0D09               	mullw	9
  8543  0014F6  50F3               	movf	prodl,w,c
  8544  0014F8  0F8D               	addlw	low (_task_list+3)
  8545                           
  8546                           ;task.c: 56: task_list[task_id].active = 1;
  8547  0014FA  D816               	call	PL34	;call to abstracted procedure
  8548  0014FC  EC99  F005         	call	PL16	;call to abstracted procedure
  8549                           
  8550                           ;task.c: 57: task_list[task_id].ready = 1;
  8551  001500  D81B               	call	PL52	;call to abstracted procedure
  8552  001502  0F90               	addlw	low (_task_list+6)
  8553  001504  6ED9               	movwf	fsr2l,c
  8554  001506  6ADA               	clrf	fsr2h,c
  8555                           
  8556                           ;task.c: 58: task_list[task_id].maxSuc=suc_max;
  8557  001508  D817               	call	PL52	;call to abstracted procedure
  8558  00150A  0F91               	addlw	low (_task_list+7)
  8559  00150C  6ED9               	movwf	fsr2l,c
  8560  00150E  6ADA               	clrf	fsr2h,c
  8561  001510  C042  FFDF         	movff	add_task_id@suc_max,indf2
  8562                           
  8563                           ;task.c: 59: task_list[task_id].sucCnt=0;
  8564  001514  5043               	movf	add_task_id@task_id,w,c
  8565  001516  0D09               	mullw	9
  8566  001518  50F3               	movf	prodl,w,c
  8567  00151A  0F92               	addlw	low (_task_list+8)
  8568  00151C  6ED9               	movwf	fsr2l,c
  8569  00151E  6ADA               	clrf	fsr2h,c
  8570  001520  6ADF               	clrf	indf2,c
  8571                           
  8572                           ;task.c: 61: GIE=1;PEIE=1;
  8573  001522  8EF2               	bsf	intcon,7,c	;volatile
  8574  001524  8CF2               	bsf	intcon,6,c	;volatile
  8575  001526  0C00               	retlw	0	;funcret
  8576  001528                     __end_of_add_task_id:
  8577                           	opt stack 0
  8578  001528                     PL34:
  8579                           	opt stack 4
  8580  001528  6ED9               	movwf	fsr2l,c
  8581  00152A  6ADA               	clrf	fsr2h,c
  8582  00152C  C049  FFDE         	movff	add_task_id@interval_ticks,postinc2
  8583  001530  C04A  FFDD         	movff	add_task_id@interval_ticks+1,postdec2
  8584  001534  5043               	movf	add_task_id@task_id,w,c
  8585  001536  0012               	return	
  8586  001538                     __end_ofPL34:
  8587                           	opt stack 0
  8588  001538                     PL52:
  8589                           	opt stack 4
  8590  001538  0E01               	movlw	1
  8591  00153A  6EDF               	movwf	indf2,c
  8592  00153C  5043               	movf	add_task_id@task_id,w,c
  8593  00153E  0D09               	mullw	9
  8594  001540  50F3               	movf	prodl,w,c
  8595  001542  0012               	return	
  8596  001544                     __end_ofPL52:
  8597                           	opt stack 0
  8598                           tblptru	equ	0xFF8
  8599                           tblptrh	equ	0xFF7
  8600                           tblptrl	equ	0xFF6
  8601                           tablat	equ	0xFF5
  8602                           prodl	equ	0xFF3
  8603                           intcon	equ	0xFF2
  8604                           intcon2	equ	0xFF1
  8605                           intcon3	equ	0xFF0
  8606                           postinc0	equ	0xFEE
  8607                           wreg	equ	0xFE8
  8608                           postdec1	equ	0xFE5
  8609                           fsr1l	equ	0xFE1
  8610                           indf2	equ	0xFDF
  8611                           postinc2	equ	0xFDE
  8612                           postdec2	equ	0xFDD
  8613                           fsr2h	equ	0xFDA
  8614                           fsr2l	equ	0xFD9
  8615                           status	equ	0xFD8
  8616                           
  8617 ;; *************** function _bat_task *****************
  8618 ;; Defined at:
  8619 ;;		line 35 in file ".\src\bat.c"
  8620 ;; Parameters:    Size  Location     Type
  8621 ;;  task_           1   34[COMRAM] PTR struct task
  8622 ;;		 -> task_list(72), 
  8623 ;; Auto vars:     Size  Location     Type
  8624 ;;  b               2   37[COMRAM] unsigned int 
  8625 ;; Return value:  Size  Location     Type
  8626 ;;                  1    wreg      void 
  8627 ;; Registers used:
  8628 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8629 ;; Tracked objects:
  8630 ;;		On entry : 3F/0
  8631 ;;		On exit  : 0/0
  8632 ;;		Unchanged: 0/0
  8633 ;; Data sizes:     COMRAM   BANK0
  8634 ;;      Params:         1       0
  8635 ;;      Locals:         2       0
  8636 ;;      Temps:          2       0
  8637 ;;      Totals:         5       0
  8638 ;;Total ram usage:        5 bytes
  8639 ;; Hardware stack levels used:    1
  8640 ;; Hardware stack levels required when called:    4
  8641 ;; This function calls:
  8642 ;;		_get_bat
  8643 ;; This function is called by:
  8644 ;;		_main
  8645 ;;		_find_task
  8646 ;; This function uses a non-reentrant model
  8647 ;;
  8648                           
  8649                           	psect	text32
  8650  00164A                     __ptext32:
  8651                           	opt stack 0
  8652  00164A                     _bat_task:
  8653                           	opt stack 2
  8654                           
  8655                           ; BSR set to: 0
  8656                           ;bat.c: 38: if(PA0&&(PINA5==0)&&(PINA4==0)&&(task_list[ui_id].active==0))
  8657                           
  8658                           ;incstack = 0
  8659  00164A  B080               	btfsc	3968,0,c	;volatile
  8660                           
  8661                           ; BSR set to: 0
  8662  00164C  BA86               	btfsc	3974,5,c	;volatile
  8663  00164E  0012               	return	
  8664                           
  8665                           ; BSR set to: 0
  8666  001650  B886               	btfsc	3974,4,c	;volatile
  8667  001652  0012               	return	
  8668                           
  8669                           ; BSR set to: 0
  8670  001654  503C               	movf	_ui_id,w,c
  8671  001656  EC99  F005         	call	PL16	;call to abstracted procedure
  8672  00165A  50DF               	movf	indf2,w,c
  8673  00165C  A4D8               	btfss	status,2,c
  8674  00165E  0012               	return	
  8675                           
  8676                           ; BSR set to: 0
  8677                           ;bat.c: 39: {
  8678                           ;bat.c: 40: b=get_bat();
  8679  001660  ECE8  F00C         	call	_get_bat	;wreg free
  8680  001664  C057  F062         	movff	?_get_bat,bat_task@b
  8681  001668  C058  F063         	movff	?_get_bat+1,bat_task@b+1
  8682                           
  8683                           ;bat.c: 42: if((bat.bat>b)||((bat.bat+50)<=b))
  8684  00166C  5072               	movf	_bat+1,w,c
  8685  00166E  5C62               	subwf	bat_task@b,w,c
  8686  001670  5073               	movf	_bat+2,w,c
  8687  001672  5863               	subwfb	bat_task@b+1,w,c
  8688  001674  E30B               	bnc	l1002
  8689  001676  0E32               	movlw	50
  8690  001678  2472               	addwf	_bat+1,w,c
  8691  00167A  6E60               	movwf	??_bat_task& (0+255),c
  8692  00167C  0E00               	movlw	0
  8693  00167E  2073               	addwfc	_bat+2,w,c
  8694  001680  6E61               	movwf	(??_bat_task+1)& (0+255),c
  8695  001682  5060               	movf	??_bat_task,w,c
  8696  001684  5C62               	subwf	bat_task@b,w,c
  8697  001686  5061               	movf	??_bat_task+1,w,c
  8698  001688  5863               	subwfb	bat_task@b+1,w,c
  8699  00168A  E304               	bnc	l15639
  8700  00168C                     l1002:
  8701                           
  8702                           ;bat.c: 43: {
  8703                           ;bat.c: 44: bat.bat=b;
  8704  00168C  C062  F072         	movff	bat_task@b,_bat+1
  8705  001690  C063  F073         	movff	bat_task@b+1,_bat+2
  8706  001694                     l15639:
  8707                           
  8708                           ;bat.c: 45: }
  8709                           ;bat.c: 46: if( bat.bat<=317)
  8710  001694  EC9F  F004         	call	PL78	;call to abstracted procedure
  8711  001698  E202               	bc	l15643
  8712                           
  8713                           ;bat.c: 47: {
  8714                           ;bat.c: 48: bat.dian=0;
  8715  00169A  6A71               	clrf	_bat,c
  8716                           
  8717                           ;bat.c: 50: }
  8718  00169C  0012               	return	
  8719  00169E                     l15643:
  8720                           
  8721                           ;bat.c: 51: else if ( bat.bat<=345)
  8722  00169E  ECA4  F004         	call	PL80	;call to abstracted procedure
  8723  0016A2  E203               	bc	l15647
  8724                           
  8725                           ;bat.c: 52: {
  8726                           ;bat.c: 53: bat.dian=1;
  8727  0016A4  0E01               	movlw	1
  8728  0016A6  6E71               	movwf	_bat,c
  8729                           
  8730                           ;bat.c: 54: }
  8731  0016A8  0C01               	retlw	1
  8732  0016AA                     l15647:
  8733                           
  8734                           ;bat.c: 55: else if ( bat.bat<=370)
  8735  0016AA  EC86  F004         	call	PL62	;call to abstracted procedure
  8736  0016AE  E203               	bc	l15651
  8737                           
  8738                           ;bat.c: 56: {
  8739                           ;bat.c: 57: bat.dian=2;
  8740  0016B0  0E02               	movlw	2
  8741  0016B2  6E71               	movwf	_bat,c
  8742                           
  8743                           ;bat.c: 58: }
  8744  0016B4  0C02               	retlw	2
  8745  0016B6                     l15651:
  8746                           
  8747                           ;bat.c: 59: else if ( bat.bat<=390)
  8748  0016B6  EC8B  F004         	call	PL64	;call to abstracted procedure
  8749  0016BA  E203               	bc	l15655
  8750                           
  8751                           ;bat.c: 60: {
  8752                           ;bat.c: 61: bat.dian=3;
  8753  0016BC  0E03               	movlw	3
  8754  0016BE  6E71               	movwf	_bat,c
  8755                           
  8756                           ;bat.c: 62: }
  8757  0016C0  0C03               	retlw	3
  8758  0016C2                     l15655:
  8759                           
  8760                           ;bat.c: 63: else
  8761                           ;bat.c: 64: {
  8762                           ;bat.c: 65: bat.dian=4;
  8763  0016C2  0E04               	movlw	4
  8764  0016C4  6E71               	movwf	_bat,c
  8765  0016C6  0C04               	retlw	4	;funcret
  8766  0016C8                     __end_of_bat_task:
  8767                           	opt stack 0
  8768                           tblptru	equ	0xFF8
  8769                           tblptrh	equ	0xFF7
  8770                           tblptrl	equ	0xFF6
  8771                           tablat	equ	0xFF5
  8772                           prodl	equ	0xFF3
  8773                           intcon	equ	0xFF2
  8774                           intcon2	equ	0xFF1
  8775                           intcon3	equ	0xFF0
  8776                           postinc0	equ	0xFEE
  8777                           wreg	equ	0xFE8
  8778                           postdec1	equ	0xFE5
  8779                           fsr1l	equ	0xFE1
  8780                           indf2	equ	0xFDF
  8781                           postinc2	equ	0xFDE
  8782                           postdec2	equ	0xFDD
  8783                           fsr2h	equ	0xFDA
  8784                           fsr2l	equ	0xFD9
  8785                           status	equ	0xFD8
  8786                           
  8787 ;; *************** function _get_bat *****************
  8788 ;; Defined at:
  8789 ;;		line 7 in file ".\src\bat.c"
  8790 ;; Parameters:    Size  Location     Type
  8791 ;;		None
  8792 ;; Auto vars:     Size  Location     Type
  8793 ;;  ttt             4   30[COMRAM] unsigned long 
  8794 ;; Return value:  Size  Location     Type
  8795 ;;                  2   26[COMRAM] unsigned int 
  8796 ;; Registers used:
  8797 ;;		wreg, status,2, status,0, cstack
  8798 ;; Tracked objects:
  8799 ;;		On entry : 0/0
  8800 ;;		On exit  : 0/0
  8801 ;;		Unchanged: 0/0
  8802 ;; Data sizes:     COMRAM   BANK0
  8803 ;;      Params:         2       0
  8804 ;;      Locals:         4       0
  8805 ;;      Temps:          2       0
  8806 ;;      Totals:         8       0
  8807 ;;Total ram usage:        8 bytes
  8808 ;; Hardware stack levels used:    1
  8809 ;; Hardware stack levels required when called:    3
  8810 ;; This function calls:
  8811 ;;		___lldiv
  8812 ;; This function is called by:
  8813 ;;		_bat_task
  8814 ;;		_chrg_task
  8815 ;;		_main
  8816 ;;		_si_mic_task
  8817 ;; This function uses a non-reentrant model
  8818 ;;
  8819                           
  8820                           	psect	text33
  8821  0019D0                     __ptext33:
  8822                           	opt stack 0
  8823  0019D0                     _get_bat:
  8824                           	opt stack 0
  8825                           
  8826                           ;bat.c: 14: ADCON1=0x60;
  8827                           
  8828                           ;incstack = 0
  8829                           
  8830                           ;bat.c: 16: ADCON0=0x39; ADIF=0; ADIE=0; GO=1; while(GO);
  8831  0019D0  EC6A  F004         	call	PL26	;call to abstracted procedure
  8832                           
  8833                           ;bat.c: 21: ADIF=0;
  8834                           
  8835                           ;bat.c: 22: ttt=((ADRESH&0x0f)<<8)|ADRESL;
  8836  0019D4  EC54  F004         	call	PL12	;call to abstracted procedure
  8837  0019D8  6E5A               	movwf	(??_get_bat+1)& (0+255),c
  8838  0019DA  6A59               	clrf	??_get_bat& (0+255),c
  8839  0019DC  50A2               	movf	4002,w,c	;volatile
  8840  0019DE  1259               	iorwf	??_get_bat,f,c
  8841  0019E0  0E00               	movlw	0
  8842  0019E2  C059  F05B         	movff	??_get_bat,get_bat@ttt
  8843  0019E6  C05A  F05C         	movff	??_get_bat+1,get_bat@ttt+1
  8844  0019EA  BE5C               	btfsc	get_bat@ttt+1,7,c
  8845  0019EC  0EFF               	movlw	-1
  8846  0019EE  6E5D               	movwf	get_bat@ttt+2,c
  8847  0019F0  6E5E               	movwf	get_bat@ttt+3,c
  8848                           
  8849                           ;bat.c: 23: ttt=491520ul/ttt;
  8850  0019F2  6A4A               	clrf	___lldiv@dividend,c
  8851  0019F4  0E80               	movlw	128
  8852  0019F6  6E4B               	movwf	___lldiv@dividend+1,c
  8853  0019F8  0E07               	movlw	7
  8854  0019FA  6E4C               	movwf	___lldiv@dividend+2,c
  8855  0019FC  6A4D               	clrf	___lldiv@dividend+3,c
  8856  0019FE  C05B  F04E         	movff	get_bat@ttt,___lldiv@divisor
  8857  001A02  C05C  F04F         	movff	get_bat@ttt+1,___lldiv@divisor+1
  8858  001A06  C05D  F050         	movff	get_bat@ttt+2,___lldiv@divisor+2
  8859  001A0A  C05E  F051         	movff	get_bat@ttt+3,___lldiv@divisor+3
  8860  001A0E  ECDE  F00B         	call	___lldiv	;wreg free
  8861  001A12  C04A  F05B         	movff	?___lldiv,get_bat@ttt
  8862  001A16  C04B  F05C         	movff	?___lldiv+1,get_bat@ttt+1
  8863  001A1A  C04C  F05D         	movff	?___lldiv+2,get_bat@ttt+2
  8864  001A1E  C04D  F05E         	movff	?___lldiv+3,get_bat@ttt+3
  8865                           
  8866                           ;bat.c: 24: return ttt;
  8867  001A22  C05B  F057         	movff	get_bat@ttt,?_get_bat
  8868  001A26  C05C  F058         	movff	get_bat@ttt+1,?_get_bat+1
  8869  001A2A  0012               	return		;funcret
  8870  001A2C                     __end_of_get_bat:
  8871                           	opt stack 0
  8872                           tblptru	equ	0xFF8
  8873                           tblptrh	equ	0xFF7
  8874                           tblptrl	equ	0xFF6
  8875                           tablat	equ	0xFF5
  8876                           prodl	equ	0xFF3
  8877                           intcon	equ	0xFF2
  8878                           intcon2	equ	0xFF1
  8879                           intcon3	equ	0xFF0
  8880                           postinc0	equ	0xFEE
  8881                           wreg	equ	0xFE8
  8882                           postdec1	equ	0xFE5
  8883                           fsr1l	equ	0xFE1
  8884                           indf2	equ	0xFDF
  8885                           postinc2	equ	0xFDE
  8886                           postdec2	equ	0xFDD
  8887                           fsr2h	equ	0xFDA
  8888                           fsr2l	equ	0xFD9
  8889                           status	equ	0xFD8
  8890                           
  8891 ;; *************** function ___lldiv *****************
  8892 ;; Defined at:
  8893 ;;		line 8 in file "c:\Users\Administrator\.vscode\extensions\ad.adide-1.1.7\resource\Microchip\xc8\v1.41\sources\common
      +\lldiv.c"
  8894 ;; Parameters:    Size  Location     Type
  8895 ;;  dividend        4   13[COMRAM] unsigned long 
  8896 ;;  divisor         4   17[COMRAM] unsigned long 
  8897 ;; Auto vars:     Size  Location     Type
  8898 ;;  quotient        4   21[COMRAM] unsigned long 
  8899 ;;  counter         1   25[COMRAM] unsigned char 
  8900 ;; Return value:  Size  Location     Type
  8901 ;;                  4   13[COMRAM] unsigned long 
  8902 ;; Registers used:
  8903 ;;		wreg, status,2, status,0
  8904 ;; Tracked objects:
  8905 ;;		On entry : 0/0
  8906 ;;		On exit  : 0/0
  8907 ;;		Unchanged: 0/0
  8908 ;; Data sizes:     COMRAM   BANK0
  8909 ;;      Params:         8       0
  8910 ;;      Locals:         5       0
  8911 ;;      Temps:          0       0
  8912 ;;      Totals:        13       0
  8913 ;;Total ram usage:       13 bytes
  8914 ;; Hardware stack levels used:    1
  8915 ;; Hardware stack levels required when called:    2
  8916 ;; This function calls:
  8917 ;;		Nothing
  8918 ;; This function is called by:
  8919 ;;		_get_bat
  8920 ;;		_get_load
  8921 ;;		_main
  8922 ;; This function uses a non-reentrant model
  8923 ;;
  8924                           
  8925                           	psect	text34
  8926  0017BC                     __ptext34:
  8927                           	opt stack 0
  8928  0017BC                     ___lldiv:
  8929                           	opt stack 3
  8930                           
  8931                           ;incstack = 0
  8932  0017BC  6A52               	clrf	___lldiv@quotient,c
  8933  0017BE  6A53               	clrf	___lldiv@quotient+1,c
  8934  0017C0  6A54               	clrf	___lldiv@quotient+2,c
  8935  0017C2  6A55               	clrf	___lldiv@quotient+3,c
  8936  0017C4  504E               	movf	___lldiv@divisor,w,c
  8937  0017C6  104F               	iorwf	___lldiv@divisor+1,w,c
  8938  0017C8  1050               	iorwf	___lldiv@divisor+2,w,c
  8939  0017CA  1051               	iorwf	___lldiv@divisor+3,w,c
  8940  0017CC  E029               	bz	l13035
  8941  0017CE  0E01               	movlw	1
  8942  0017D0  6E56               	movwf	___lldiv@counter,c
  8943  0017D2  D006               	goto	l15283
  8944  0017D4                     l15281:
  8945  0017D4  90D8               	bcf	status,0,c
  8946  0017D6  364E               	rlcf	___lldiv@divisor,f,c
  8947  0017D8  364F               	rlcf	___lldiv@divisor+1,f,c
  8948  0017DA  3650               	rlcf	___lldiv@divisor+2,f,c
  8949  0017DC  3651               	rlcf	___lldiv@divisor+3,f,c
  8950  0017DE  2A56               	incf	___lldiv@counter,f,c
  8951  0017E0                     l15283:
  8952  0017E0  AE51               	btfss	___lldiv@divisor+3,7,c
  8953  0017E2  D7F8               	goto	l15281
  8954  0017E4                     l15285:
  8955  0017E4  90D8               	bcf	status,0,c
  8956  0017E6  3652               	rlcf	___lldiv@quotient,f,c
  8957  0017E8  3653               	rlcf	___lldiv@quotient+1,f,c
  8958  0017EA  3654               	rlcf	___lldiv@quotient+2,f,c
  8959  0017EC  3655               	rlcf	___lldiv@quotient+3,f,c
  8960  0017EE  504E               	movf	___lldiv@divisor,w,c
  8961  0017F0  5C4A               	subwf	___lldiv@dividend,w,c
  8962  0017F2  504F               	movf	___lldiv@divisor+1,w,c
  8963  0017F4  584B               	subwfb	___lldiv@dividend+1,w,c
  8964  0017F6  5050               	movf	___lldiv@divisor+2,w,c
  8965  0017F8  584C               	subwfb	___lldiv@dividend+2,w,c
  8966  0017FA  5051               	movf	___lldiv@divisor+3,w,c
  8967  0017FC  584D               	subwfb	___lldiv@dividend+3,w,c
  8968  0017FE  E309               	bnc	l15293
  8969  001800  504E               	movf	___lldiv@divisor,w,c
  8970  001802  5E4A               	subwf	___lldiv@dividend,f,c
  8971  001804  504F               	movf	___lldiv@divisor+1,w,c
  8972  001806  5A4B               	subwfb	___lldiv@dividend+1,f,c
  8973  001808  5050               	movf	___lldiv@divisor+2,w,c
  8974  00180A  5A4C               	subwfb	___lldiv@dividend+2,f,c
  8975  00180C  5051               	movf	___lldiv@divisor+3,w,c
  8976  00180E  5A4D               	subwfb	___lldiv@dividend+3,f,c
  8977  001810  8052               	bsf	___lldiv@quotient,0,c
  8978  001812                     l15293:
  8979  001812  90D8               	bcf	status,0,c
  8980  001814  3251               	rrcf	___lldiv@divisor+3,f,c
  8981  001816  3250               	rrcf	___lldiv@divisor+2,f,c
  8982  001818  324F               	rrcf	___lldiv@divisor+1,f,c
  8983  00181A  324E               	rrcf	___lldiv@divisor,f,c
  8984  00181C  2E56               	decfsz	___lldiv@counter,f,c
  8985  00181E  D7E2               	goto	l15285
  8986  001820                     l13035:
  8987  001820  C052  F04A         	movff	___lldiv@quotient,?___lldiv
  8988  001824  C053  F04B         	movff	___lldiv@quotient+1,?___lldiv+1
  8989  001828  C054  F04C         	movff	___lldiv@quotient+2,?___lldiv+2
  8990  00182C  C055  F04D         	movff	___lldiv@quotient+3,?___lldiv+3
  8991  001830  0012               	return		;funcret
  8992  001832                     __end_of___lldiv:
  8993                           	opt stack 0
  8994                           tblptru	equ	0xFF8
  8995                           tblptrh	equ	0xFF7
  8996                           tblptrl	equ	0xFF6
  8997                           tablat	equ	0xFF5
  8998                           prodl	equ	0xFF3
  8999                           intcon	equ	0xFF2
  9000                           intcon2	equ	0xFF1
  9001                           intcon3	equ	0xFF0
  9002                           postinc0	equ	0xFEE
  9003                           wreg	equ	0xFE8
  9004                           postdec1	equ	0xFE5
  9005                           fsr1l	equ	0xFE1
  9006                           indf2	equ	0xFDF
  9007                           postinc2	equ	0xFDE
  9008                           postdec2	equ	0xFDD
  9009                           fsr2h	equ	0xFDA
  9010                           fsr2l	equ	0xFD9
  9011                           status	equ	0xFD8
  9012                           
  9013 ;; *************** function _ISR_l *****************
  9014 ;; Defined at:
  9015 ;;		line 533 in file ".\src\main.c"
  9016 ;; Parameters:    Size  Location     Type
  9017 ;;		None
  9018 ;; Auto vars:     Size  Location     Type
  9019 ;;		None
  9020 ;; Return value:  Size  Location     Type
  9021 ;;                  1    wreg      void 
  9022 ;; Registers used:
  9023 ;;		None
  9024 ;; Tracked objects:
  9025 ;;		On entry : 0/0
  9026 ;;		On exit  : 0/0
  9027 ;;		Unchanged: 0/0
  9028 ;; Data sizes:     COMRAM   BANK0
  9029 ;;      Params:         0       0
  9030 ;;      Locals:         0       0
  9031 ;;      Temps:          1       0
  9032 ;;      Totals:         1       0
  9033 ;;Total ram usage:        1 bytes
  9034 ;; Hardware stack levels used:    1
  9035 ;; Hardware stack levels required when called:    1
  9036 ;; This function calls:
  9037 ;;		Nothing
  9038 ;; This function is called by:
  9039 ;;		Interrupt level 1
  9040 ;; This function uses a non-reentrant model
  9041 ;;
  9042                           
  9043                           	psect	intcodelo
  9044  000018                     __pintcodelo:
  9045                           	opt stack 0
  9046  000018                     _ISR_l:
  9047                           	opt stack 2
  9048                           
  9049                           ;incstack = 0
  9050  000018  807C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  9051  00001A  CFE0 F03D          	movff	bsr,??_ISR_l
  9052                           
  9053                           ;main.c: 536: if(TMR2IF||ADIF)
  9054  00001E  B8B0               	btfsc	4016,4,c	;volatile
  9055  000020  D002               	goto	i1l5356
  9056  000022  A4AA               	btfss	4010,2,c	;volatile
  9057  000024  D002               	goto	i1l5357
  9058  000026                     i1l5356:
  9059                           
  9060                           ;main.c: 537: {
  9061                           ;main.c: 538: TMR2IF=0;
  9062  000026  98B0               	bcf	4016,4,c	;volatile
  9063                           
  9064                           ;main.c: 539: ADIF=0;
  9065  000028  94AA               	bcf	4010,2,c	;volatile
  9066  00002A                     i1l5357:
  9067  00002A  C03D  FFE0         	movff	??_ISR_l,bsr
  9068  00002E  907C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  9069  000030  0010               	retfie	
  9070  000032                     __end_of_ISR_l:
  9071                           	opt stack 0
  9072                           tblptru	equ	0xFF8
  9073                           tblptrh	equ	0xFF7
  9074                           tblptrl	equ	0xFF6
  9075                           tablat	equ	0xFF5
  9076                           prodl	equ	0xFF3
  9077                           intcon	equ	0xFF2
  9078                           intcon2	equ	0xFF1
  9079                           intcon3	equ	0xFF0
  9080                           postinc0	equ	0xFEE
  9081                           wreg	equ	0xFE8
  9082                           postdec1	equ	0xFE5
  9083                           fsr1l	equ	0xFE1
  9084                           bsr	equ	0xFE0
  9085                           indf2	equ	0xFDF
  9086                           postinc2	equ	0xFDE
  9087                           postdec2	equ	0xFDD
  9088                           fsr2h	equ	0xFDA
  9089                           fsr2l	equ	0xFD9
  9090                           status	equ	0xFD8
  9091                           
  9092 ;; *************** function _ISR_h *****************
  9093 ;; Defined at:
  9094 ;;		line 383 in file ".\src\main.c"
  9095 ;; Parameters:    Size  Location     Type
  9096 ;;		None
  9097 ;; Auto vars:     Size  Location     Type
  9098 ;;		None
  9099 ;; Return value:  Size  Location     Type
  9100 ;;                  1    wreg      void 
  9101 ;; Registers used:
  9102 ;;		wreg, status,2, status,0
  9103 ;; Tracked objects:
  9104 ;;		On entry : 0/0
  9105 ;;		On exit  : 0/0
  9106 ;;		Unchanged: 0/0
  9107 ;; Data sizes:     COMRAM   BANK0
  9108 ;;      Params:         0       0
  9109 ;;      Locals:         0       0
  9110 ;;      Temps:          0       0
  9111 ;;      Totals:         0       0
  9112 ;;Total ram usage:        0 bytes
  9113 ;; Hardware stack levels used:    1
  9114 ;; This function calls:
  9115 ;;		Nothing
  9116 ;; This function is called by:
  9117 ;;		Interrupt level 2
  9118 ;; This function uses a non-reentrant model
  9119 ;;
  9120                           
  9121                           	psect	intcode
  9122  000008                     __pintcode:
  9123                           	opt stack 0
  9124  000008                     _ISR_h:
  9125                           	opt stack 2
  9126                           
  9127                           ;incstack = 0
  9128  000008  827C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9129  00000A  ED9F  F005         	call	int_func,f	;refresh shadow registers
  9130                           tblptru	equ	0xFF8
  9131                           tblptrh	equ	0xFF7
  9132                           tblptrl	equ	0xFF6
  9133                           tablat	equ	0xFF5
  9134                           prodl	equ	0xFF3
  9135                           intcon	equ	0xFF2
  9136                           intcon2	equ	0xFF1
  9137                           intcon3	equ	0xFF0
  9138                           postinc0	equ	0xFEE
  9139                           wreg	equ	0xFE8
  9140                           postdec1	equ	0xFE5
  9141                           fsr1l	equ	0xFE1
  9142                           bsr	equ	0xFE0
  9143                           indf2	equ	0xFDF
  9144                           postinc2	equ	0xFDE
  9145                           postdec2	equ	0xFDD
  9146                           fsr2h	equ	0xFDA
  9147                           fsr2l	equ	0xFD9
  9148                           status	equ	0xFD8
  9149                           
  9150                           	psect	intcode_body
  9151  000B3E                     __pintcode_body:
  9152                           	opt stack 2
  9153  000B3E                     int_func:
  9154                           	opt stack 2
  9155  000B3E  0006               	pop		; remove dummy address from shadow register refresh
  9156                           
  9157                           ;main.c: 386: if(CMP0IF)
  9158  000B40  A6AA               	btfss	4010,3,c	;volatile
  9159  000B42  D00B               	goto	i2l17119
  9160                           
  9161                           ;main.c: 387: {
  9162                           ;main.c: 390: if(CMP0OUT&&CMP0IE)
  9163  000B44  BCA8               	btfsc	4008,6,c	;volatile
  9164  000B46  A6A9               	btfss	4009,3,c	;volatile
  9165  000B48  D007               	goto	i2l17117
  9166                           
  9167                           ;main.c: 391: {
  9168                           ;main.c: 393: PA0OD=0;
  9169  000B4A  9092               	bcf	3986,0,c	;volatile
  9170                           
  9171                           ;main.c: 395: PA0=1;
  9172  000B4C  8080               	bsf	3968,0,c	;volatile
  9173                           
  9174                           ;main.c: 396: si_mic_flag.dl=1;
  9175  000B4E  0E01               	movlw	1
  9176  000B50  6E1D               	movwf	_si_mic_flag,c
  9177                           
  9178                           ;main.c: 397: pwm.duty=0;
  9179  000B52  0100               	movlb	0	; () banked
  9180  000B54  6BD2               	clrf	_pwm& (0+255),b
  9181                           
  9182                           ; BSR set to: 0
  9183                           ;main.c: 400: PA0OD=1;
  9184  000B56  8092               	bsf	3986,0,c	;volatile
  9185  000B58                     i2l17117:
  9186                           
  9187                           ;main.c: 413: }
  9188                           ;main.c: 451: CMP0IF=0;
  9189  000B58  96AA               	bcf	4010,3,c	;volatile
  9190  000B5A                     i2l17119:
  9191                           
  9192                           ;main.c: 452: }
  9193                           ;main.c: 454: if(TMR1IE && TMR1IF)
  9194  000B5A  B2AF               	btfsc	4015,1,c	;volatile
  9195  000B5C  A2B0               	btfss	4016,1,c	;volatile
  9196  000B5E  D074               	goto	i2l17191
  9197                           
  9198                           ;main.c: 455: {
  9199                           ;main.c: 456: TMR1IF=0;
  9200  000B60  92B0               	bcf	4016,1,c	;volatile
  9201                           
  9202                           ;main.c: 457: if(task_list[0].active) { task_list[0].counter--; if(task_list[0].counter 
      +                          == 0) { task_list[0].ready = 1; task_list[0].counter = task_list[0].interval; } } if(tas
      +                          k_list[1].active) { task_list[1].counter--; if(task_list[1].counter == 0) { task_list[1]
  9203  000B62  0100               	movlb	0	; () banked
  9204  000B64  518F               	movf	(_task_list+5)& (0+255),w,b
  9205  000B66  E00C               	bz	i2l5326
  9206                           
  9207                           ; BSR set to: 0
  9208  000B68  078D               	decf	(_task_list+3)& (0+255),f,b
  9209  000B6A  A0D8               	btfss	status,0,c
  9210  000B6C  078E               	decf	(_task_list+4)& (0+255),f,b
  9211                           
  9212                           ; BSR set to: 0
  9213  000B6E  518D               	movf	(_task_list+3)& (0+255),w,b
  9214  000B70  118E               	iorwf	(_task_list+4)& (0+255),w,b
  9215  000B72  E106               	bnz	i2l5326
  9216                           
  9217                           ; BSR set to: 0
  9218  000B74  0E01               	movlw	1
  9219  000B76  6F90               	movwf	(_task_list+6)& (0+255),b
  9220                           
  9221                           ; BSR set to: 0
  9222  000B78  C08B  F08D         	movff	_task_list+1,_task_list+3
  9223  000B7C  C08C  F08E         	movff	_task_list+2,_task_list+4
  9224  000B80                     i2l5326:
  9225                           
  9226                           ; BSR set to: 0
  9227  000B80  5198               	movf	(_task_list+14)& (0+255),w,b
  9228  000B82  E00C               	bz	i2l5328
  9229                           
  9230                           ; BSR set to: 0
  9231  000B84  0796               	decf	(_task_list+12)& (0+255),f,b
  9232  000B86  A0D8               	btfss	status,0,c
  9233  000B88  0797               	decf	(_task_list+13)& (0+255),f,b
  9234                           
  9235                           ; BSR set to: 0
  9236  000B8A  5196               	movf	(_task_list+12)& (0+255),w,b
  9237  000B8C  1197               	iorwf	(_task_list+13)& (0+255),w,b
  9238  000B8E  E106               	bnz	i2l5328
  9239                           
  9240                           ; BSR set to: 0
  9241  000B90  0E01               	movlw	1
  9242  000B92  6F99               	movwf	(_task_list+15)& (0+255),b
  9243                           
  9244                           ; BSR set to: 0
  9245  000B94  C094  F096         	movff	_task_list+10,_task_list+12
  9246  000B98  C095  F097         	movff	_task_list+11,_task_list+13
  9247  000B9C                     i2l5328:
  9248                           
  9249                           ; BSR set to: 0
  9250  000B9C  51A1               	movf	(_task_list+23)& (0+255),w,b
  9251  000B9E  E00C               	bz	i2l5330
  9252                           
  9253                           ; BSR set to: 0
  9254  000BA0  079F               	decf	(_task_list+21)& (0+255),f,b
  9255  000BA2  A0D8               	btfss	status,0,c
  9256  000BA4  07A0               	decf	(_task_list+22)& (0+255),f,b
  9257                           
  9258                           ; BSR set to: 0
  9259  000BA6  519F               	movf	(_task_list+21)& (0+255),w,b
  9260  000BA8  11A0               	iorwf	(_task_list+22)& (0+255),w,b
  9261  000BAA  E106               	bnz	i2l5330
  9262                           
  9263                           ; BSR set to: 0
  9264  000BAC  0E01               	movlw	1
  9265  000BAE  6FA2               	movwf	(_task_list+24)& (0+255),b
  9266                           
  9267                           ; BSR set to: 0
  9268  000BB0  C09D  F09F         	movff	_task_list+19,_task_list+21
  9269  000BB4  C09E  F0A0         	movff	_task_list+20,_task_list+22
  9270  000BB8                     i2l5330:
  9271                           
  9272                           ; BSR set to: 0
  9273  000BB8  51AA               	movf	(_task_list+32)& (0+255),w,b
  9274  000BBA  E00C               	bz	i2l5332
  9275                           
  9276                           ; BSR set to: 0
  9277  000BBC  07A8               	decf	(_task_list+30)& (0+255),f,b
  9278  000BBE  A0D8               	btfss	status,0,c
  9279  000BC0  07A9               	decf	(_task_list+31)& (0+255),f,b
  9280                           
  9281                           ; BSR set to: 0
  9282  000BC2  51A8               	movf	(_task_list+30)& (0+255),w,b
  9283  000BC4  11A9               	iorwf	(_task_list+31)& (0+255),w,b
  9284  000BC6  E106               	bnz	i2l5332
  9285                           
  9286                           ; BSR set to: 0
  9287  000BC8  0E01               	movlw	1
  9288  000BCA  6FAB               	movwf	(_task_list+33)& (0+255),b
  9289                           
  9290                           ; BSR set to: 0
  9291  000BCC  C0A6  F0A8         	movff	_task_list+28,_task_list+30
  9292  000BD0  C0A7  F0A9         	movff	_task_list+29,_task_list+31
  9293  000BD4                     i2l5332:
  9294                           
  9295                           ; BSR set to: 0
  9296  000BD4  51B3               	movf	(_task_list+41)& (0+255),w,b
  9297  000BD6  E00C               	bz	i2l5334
  9298                           
  9299                           ; BSR set to: 0
  9300  000BD8  07B1               	decf	(_task_list+39)& (0+255),f,b
  9301  000BDA  A0D8               	btfss	status,0,c
  9302  000BDC  07B2               	decf	(_task_list+40)& (0+255),f,b
  9303                           
  9304                           ; BSR set to: 0
  9305  000BDE  51B1               	movf	(_task_list+39)& (0+255),w,b
  9306  000BE0  11B2               	iorwf	(_task_list+40)& (0+255),w,b
  9307  000BE2  E106               	bnz	i2l5334
  9308                           
  9309                           ; BSR set to: 0
  9310  000BE4  0E01               	movlw	1
  9311  000BE6  6FB4               	movwf	(_task_list+42)& (0+255),b
  9312                           
  9313                           ; BSR set to: 0
  9314  000BE8  C0AF  F0B1         	movff	_task_list+37,_task_list+39
  9315  000BEC  C0B0  F0B2         	movff	_task_list+38,_task_list+40
  9316  000BF0                     i2l5334:
  9317                           
  9318                           ; BSR set to: 0
  9319  000BF0  51BC               	movf	(_task_list+50)& (0+255),w,b
  9320  000BF2  E00C               	bz	i2l5336
  9321                           
  9322                           ; BSR set to: 0
  9323  000BF4  07BA               	decf	(_task_list+48)& (0+255),f,b
  9324  000BF6  A0D8               	btfss	status,0,c
  9325  000BF8  07BB               	decf	(_task_list+49)& (0+255),f,b
  9326                           
  9327                           ; BSR set to: 0
  9328  000BFA  51BA               	movf	(_task_list+48)& (0+255),w,b
  9329  000BFC  11BB               	iorwf	(_task_list+49)& (0+255),w,b
  9330  000BFE  E106               	bnz	i2l5336
  9331                           
  9332                           ; BSR set to: 0
  9333  000C00  0E01               	movlw	1
  9334  000C02  6FBD               	movwf	(_task_list+51)& (0+255),b
  9335                           
  9336                           ; BSR set to: 0
  9337  000C04  C0B8  F0BA         	movff	_task_list+46,_task_list+48
  9338  000C08  C0B9  F0BB         	movff	_task_list+47,_task_list+49
  9339  000C0C                     i2l5336:
  9340                           
  9341                           ; BSR set to: 0
  9342  000C0C  51C5               	movf	(_task_list+59)& (0+255),w,b
  9343  000C0E  E00C               	bz	i2l5338
  9344                           
  9345                           ; BSR set to: 0
  9346  000C10  07C3               	decf	(_task_list+57)& (0+255),f,b
  9347  000C12  A0D8               	btfss	status,0,c
  9348  000C14  07C4               	decf	(_task_list+58)& (0+255),f,b
  9349                           
  9350                           ; BSR set to: 0
  9351  000C16  51C3               	movf	(_task_list+57)& (0+255),w,b
  9352  000C18  11C4               	iorwf	(_task_list+58)& (0+255),w,b
  9353  000C1A  E106               	bnz	i2l5338
  9354                           
  9355                           ; BSR set to: 0
  9356  000C1C  0E01               	movlw	1
  9357  000C1E  6FC6               	movwf	(_task_list+60)& (0+255),b
  9358                           
  9359                           ; BSR set to: 0
  9360  000C20  C0C1  F0C3         	movff	_task_list+55,_task_list+57
  9361  000C24  C0C2  F0C4         	movff	_task_list+56,_task_list+58
  9362  000C28                     i2l5338:
  9363                           
  9364                           ; BSR set to: 0
  9365  000C28  51CE               	movf	(_task_list+68)& (0+255),w,b
  9366  000C2A  E00C               	bz	i2l5340
  9367                           
  9368                           ; BSR set to: 0
  9369  000C2C  07CC               	decf	(_task_list+66)& (0+255),f,b
  9370  000C2E  A0D8               	btfss	status,0,c
  9371  000C30  07CD               	decf	(_task_list+67)& (0+255),f,b
  9372                           
  9373                           ; BSR set to: 0
  9374  000C32  51CC               	movf	(_task_list+66)& (0+255),w,b
  9375  000C34  11CD               	iorwf	(_task_list+67)& (0+255),w,b
  9376  000C36  E106               	bnz	i2l5340
  9377                           
  9378                           ; BSR set to: 0
  9379  000C38  0E01               	movlw	1
  9380  000C3A  6FCF               	movwf	(_task_list+69)& (0+255),b
  9381                           
  9382                           ; BSR set to: 0
  9383  000C3C  C0CA  F0CC         	movff	_task_list+64,_task_list+66
  9384  000C40  C0CB  F0CD         	movff	_task_list+65,_task_list+67
  9385  000C44                     i2l5340:
  9386                           
  9387                           ; BSR set to: 0
  9388                           ;main.c: 458: pwm_flag=1;
  9389  000C44  0E01               	movlw	1
  9390  000C46  6E2E               	movwf	_pwm_flag,c
  9391  000C48                     i2l17191:
  9392                           
  9393                           ;main.c: 460: }
  9394                           ;main.c: 461: if(TMR0IE && TMR0IF)
  9395  000C48  B0AF               	btfsc	4015,0,c	;volatile
  9396  000C4A  A0B0               	btfss	4016,0,c	;volatile
  9397  000C4C  D00D               	goto	i2l17211
  9398                           
  9399                           ;main.c: 462: {
  9400                           ;main.c: 463: TMR0IF=0;
  9401  000C4E  90B0               	bcf	4016,0,c	;volatile
  9402                           
  9403                           ;main.c: 464: tim_ui.ok=1;
  9404  000C50  0E01               	movlw	1
  9405  000C52  6E24               	movwf	_tim_ui+2,c	;volatile
  9406                           
  9407                           ;main.c: 465: if(adc_flag==1)
  9408  000C54  042D               	decf	_adc_flag,w,c
  9409  000C56  E108               	bnz	i2l17211
  9410                           
  9411                           ;main.c: 466: {
  9412                           ;main.c: 467: adc_cnt++;
  9413  000C58  2A2C               	incf	_adc_cnt,f,c
  9414                           
  9415                           ;main.c: 468: if(adc_cnt>=5)
  9416  000C5A  0E04               	movlw	4
  9417  000C5C  642C               	cpfsgt	_adc_cnt,c
  9418  000C5E  D004               	goto	i2l17211
  9419                           
  9420                           ;main.c: 469: {
  9421                           ;main.c: 470: adc_begin=1;
  9422  000C60  0E01               	movlw	1
  9423  000C62  6E2B               	movwf	_adc_begin,c
  9424                           
  9425                           ;main.c: 471: adc_cnt=0;
  9426  000C64  6A2C               	clrf	_adc_cnt,c
  9427                           
  9428                           ;main.c: 472: adc_flag=0;
  9429  000C66  6A2D               	clrf	_adc_flag,c
  9430  000C68                     i2l17211:
  9431                           
  9432                           ;main.c: 473: }
  9433                           ;main.c: 474: }
  9434                           ;main.c: 477: }
  9435                           ;main.c: 478: if(TMR3IF && TMR3IE)
  9436  000C68  BAAA               	btfsc	4010,5,c	;volatile
  9437  000C6A  AAA9               	btfss	4009,5,c	;volatile
  9438  000C6C  D005               	goto	i2l5345
  9439                           
  9440                           ;main.c: 479: {
  9441                           ;main.c: 482: TMR3IF=0;
  9442  000C6E  9AAA               	bcf	4010,5,c	;volatile
  9443                           
  9444                           ;main.c: 483: CMP0IE=0;CMP0IF=0;
  9445  000C70  96A9               	bcf	4009,3,c	;volatile
  9446  000C72  96AA               	bcf	4010,3,c	;volatile
  9447                           
  9448                           ;main.c: 484: PA0=1;
  9449  000C74  8080               	bsf	3968,0,c	;volatile
  9450                           
  9451                           ;main.c: 485: TMR3ON=0;
  9452  000C76  94B8               	bcf	4024,2,c	;volatile
  9453  000C78                     i2l5345:
  9454                           
  9455                           ;main.c: 486: }
  9456                           ;main.c: 488: if(TMR3IE && TMR2IF)
  9457  000C78  BAA9               	btfsc	4009,5,c	;volatile
  9458  000C7A  A8B0               	btfss	4016,4,c	;volatile
  9459  000C7C  D00B               	goto	i2l5346
  9460                           
  9461                           ;main.c: 489: {
  9462                           ;main.c: 490: ;
  9463                           ;main.c: 491: TMR2IF=0;
  9464  000C7E  98B0               	bcf	4016,4,c	;volatile
  9465                           
  9466                           ;main.c: 492: tim_cnt.cnt++;
  9467  000C80  0100               	movlb	0	; () banked
  9468  000C82  4B86               	infsnz	_tim_cnt& (0+255),f,b
  9469  000C84  2B87               	incf	(_tim_cnt+1)& (0+255),f,b
  9470                           
  9471                           ; BSR set to: 0
  9472                           ;main.c: 494: {
  9473                           ;main.c: 495: tim_flag.timflag=1;
  9474  000C86  5186               	movf	_tim_cnt& (0+255),w,b
  9475  000C88  1988               	xorwf	(_tim_cnt+2)& (0+255),w,b
  9476  000C8A  E104               	bnz	i2l5346
  9477  000C8C  5187               	movf	(_tim_cnt+1)& (0+255),w,b
  9478  000C8E  1989               	xorwf	(_tim_cnt+3)& (0+255),w,b
  9479  000C90  E101               	bnz	i2l5346
  9480                           
  9481                           ; BSR set to: 0
  9482                           ;main.c: 496: TMR2ON=0;
  9483  000C92  94C1               	bcf	4033,2,c	;volatile
  9484  000C94                     i2l5346:
  9485                           
  9486                           ;main.c: 497: }
  9487                           ;main.c: 498: }
  9488                           ;main.c: 515: if(PAIF ||PCIF || PBIF)
  9489  000C94  AAAD               	btfss	4013,5,c	;volatile
  9490  000C96  BEAD               	btfsc	4013,7,c	;volatile
  9491  000C98  D002               	goto	i2l5350
  9492  000C9A  ACAD               	btfss	4013,6,c	;volatile
  9493  000C9C  D00A               	goto	i2l5351
  9494  000C9E                     i2l5350:
  9495                           
  9496                           ;main.c: 516: {
  9497                           ;main.c: 517: PAIF=0;
  9498  000C9E  9AAD               	bcf	4013,5,c	;volatile
  9499                           
  9500                           ;main.c: 518: PCIF=0;
  9501  000CA0  9EAD               	bcf	4013,7,c	;volatile
  9502                           
  9503                           ;main.c: 519: PBIF=0;
  9504  000CA2  9CAD               	bcf	4013,6,c	;volatile
  9505                           
  9506                           ;main.c: 521: PA4MSK=0;
  9507  000CA4  988F               	bcf	3983,4,c	;volatile
  9508                           
  9509                           ;main.c: 522: PA5MSK=0;
  9510  000CA6  9A8F               	bcf	3983,5,c	;volatile
  9511                           
  9512                           ;main.c: 523: PB1MSK=0;
  9513  000CA8  9290               	bcf	3984,1,c	;volatile
  9514                           
  9515                           ;main.c: 524: PC6MSK=0;
  9516  000CAA  9C91               	bcf	3985,6,c	;volatile
  9517                           
  9518                           ;main.c: 525: PAIE=0;
  9519  000CAC  9AAC               	bcf	4012,5,c	;volatile
  9520                           
  9521                           ;main.c: 526: PBIE=0;
  9522  000CAE  9CAC               	bcf	4012,6,c	;volatile
  9523                           
  9524                           ;main.c: 527: PCIE=0;
  9525  000CB0  9EAC               	bcf	4012,7,c	;volatile
  9526  000CB2                     i2l5351:
  9527  000CB2  927C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9528  000CB4  0011               	retfie		f
  9529  000CB6                     __end_of_ISR_h:
  9530                           	opt stack 0
  9531                           tblptru	equ	0xFF8
  9532                           tblptrh	equ	0xFF7
  9533                           tblptrl	equ	0xFF6
  9534                           tablat	equ	0xFF5
  9535                           prodl	equ	0xFF3
  9536                           intcon	equ	0xFF2
  9537                           intcon2	equ	0xFF1
  9538                           intcon3	equ	0xFF0
  9539                           postinc0	equ	0xFEE
  9540                           wreg	equ	0xFE8
  9541                           postdec1	equ	0xFE5
  9542                           fsr1l	equ	0xFE1
  9543                           bsr	equ	0xFE0
  9544                           indf2	equ	0xFDF
  9545                           postinc2	equ	0xFDE
  9546                           postdec2	equ	0xFDD
  9547                           fsr2h	equ	0xFDA
  9548                           fsr2l	equ	0xFD9
  9549                           status	equ	0xFD8
  9550                           tblptru	equ	0xFF8
  9551                           tblptrh	equ	0xFF7
  9552                           tblptrl	equ	0xFF6
  9553                           tablat	equ	0xFF5
  9554                           prodl	equ	0xFF3
  9555                           intcon	equ	0xFF2
  9556                           intcon2	equ	0xFF1
  9557                           intcon3	equ	0xFF0
  9558                           postinc0	equ	0xFEE
  9559                           wreg	equ	0xFE8
  9560                           postdec1	equ	0xFE5
  9561                           fsr1l	equ	0xFE1
  9562                           bsr	equ	0xFE0
  9563                           indf2	equ	0xFDF
  9564                           postinc2	equ	0xFDE
  9565                           postdec2	equ	0xFDD
  9566                           fsr2h	equ	0xFDA
  9567                           fsr2l	equ	0xFD9
  9568                           status	equ	0xFD8
  9569                           
  9570                           	psect	rparam
  9571  0000                     tblptru	equ	0xFF8
  9572                           tblptrh	equ	0xFF7
  9573                           tblptrl	equ	0xFF6
  9574                           tablat	equ	0xFF5
  9575                           prodl	equ	0xFF3
  9576                           intcon	equ	0xFF2
  9577                           intcon2	equ	0xFF1
  9578                           intcon3	equ	0xFF0
  9579                           postinc0	equ	0xFEE
  9580                           wreg	equ	0xFE8
  9581                           postdec1	equ	0xFE5
  9582                           fsr1l	equ	0xFE1
  9583                           bsr	equ	0xFE0
  9584                           indf2	equ	0xFDF
  9585                           postinc2	equ	0xFDE
  9586                           postdec2	equ	0xFDD
  9587                           fsr2h	equ	0xFDA
  9588                           fsr2l	equ	0xFD9
  9589                           status	equ	0xFD8
  9590                           
  9591                           	psect	temp
  9592  00007C                     btemp:
  9593                           	opt stack 0
  9594  00007C                     	ds	1
  9595  0000                     int$flags	set	btemp
  9596                           tblptru	equ	0xFF8
  9597                           tblptrh	equ	0xFF7
  9598                           tblptrl	equ	0xFF6
  9599                           tablat	equ	0xFF5
  9600                           prodl	equ	0xFF3
  9601                           intcon	equ	0xFF2
  9602                           intcon2	equ	0xFF1
  9603                           intcon3	equ	0xFF0
  9604                           postinc0	equ	0xFEE
  9605                           wreg	equ	0xFE8
  9606                           postdec1	equ	0xFE5
  9607                           fsr1l	equ	0xFE1
  9608                           bsr	equ	0xFE0
  9609                           indf2	equ	0xFDF
  9610                           postinc2	equ	0xFDE
  9611                           postdec2	equ	0xFDD
  9612                           fsr2h	equ	0xFDA
  9613                           fsr2l	equ	0xFD9
  9614                           status	equ	0xFD8
  9615                           tblptru	equ	0xFF8
  9616                           tblptrh	equ	0xFF7
  9617                           tblptrl	equ	0xFF6
  9618                           tablat	equ	0xFF5
  9619                           prodl	equ	0xFF3
  9620                           intcon	equ	0xFF2
  9621                           intcon2	equ	0xFF1
  9622                           intcon3	equ	0xFF0
  9623                           postinc0	equ	0xFEE
  9624                           wreg	equ	0xFE8
  9625                           postdec1	equ	0xFE5
  9626                           fsr1l	equ	0xFE1
  9627                           bsr	equ	0xFE0
  9628                           indf2	equ	0xFDF
  9629                           postinc2	equ	0xFDE
  9630                           postdec2	equ	0xFDD
  9631                           fsr2h	equ	0xFDA
  9632                           fsr2l	equ	0xFD9
  9633                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    10
    Data        27
    BSS         142
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     45     123
    BANK0           128      0      91

Pointer List with Targets:

    cb_task@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    bat_task@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    ui_begin@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    ui_timout@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    ui_ts_off@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    ui_ts_on@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    ui_kl@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    ui_smoend_dl_getup@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    ui_smoing@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    ui_chrgfull@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    ui_chrgfree@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    ui_chrg@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    ui_cb@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    find_task@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    sleep_task@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    si_mic_task@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    key_task@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    chrg_task@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 


Critical Paths under _main in COMRAM

    _main->_find_task
    _find_task->_si_mic_task
    _ui_ts_on->_add_task_id
    _ui_ts_off->_add_task_id
    _ui_timout->_new_nixie
    _ui_smoing->_new_nixie
    _ui_smoend_dl_getup->_add_task_id
    _ui_kl->_new_nixie
    _ui_chrgfull->_new_nixie
    _ui_chrgfree->_new_nixie
    _ui_chrg->_new_nixie
    _ui_cb->_add_task_id
    ___lbmod->___lbdiv
    _ui_begin->_new_nixie
    _si_mic_task->_get_bat
    _key_task->_add_task_id
    _chrg_task->_get_bat
    _cb_task->_get_load
    _get_load->___lldiv
    _bat_task->_get_bat
    _get_bat->___lldiv
    ___lldiv->___lmul

Critical Paths under _ISR_l in COMRAM

    None.

Critical Paths under _ISR_h in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR_l in BANK0

    None.

Critical Paths under _ISR_h in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   90036
                                             41 COMRAM     4     4      0
                            ___lldiv
                             ___lmul
                        _add_task_id
                           _bat_task
                            _cb_task
                          _chrg_task
                          _cmp0_init
                          _find_task
                            _get_bat
                          _gpio_init
                           _key_task
                        _si_mic_task
                         _sleep_task
                          _task_init
                        _timer0_init
                        _timer1_init
                        _timer2_init
 ---------------------------------------------------------------------------------
 (1) _task_init                                            1     1      0      90
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _find_task                                            1     0      1   55127
                                             40 COMRAM     1     0      1
                           _bat_task
                            _cb_task
                          _chrg_task
                           _key_task
                        _si_mic_task
                         _sleep_task
                           _ui_begin
                              _ui_cb
                            _ui_chrg
                        _ui_chrgfree
                        _ui_chrgfull
                              _ui_kl
                 _ui_smoend_dl_getup
                          _ui_smoing
                          _ui_timout
                          _ui_ts_off
                           _ui_ts_on
 ---------------------------------------------------------------------------------
 (2) _ui_ts_on                                             2     1      1    6189
                                             14 COMRAM     2     1      1
                            ___lbdiv
                        _add_task_id
                                _ldz
                          _new_nixie
 ---------------------------------------------------------------------------------
 (2) _ui_ts_off                                            2     1      1    6167
                                             14 COMRAM     2     1      1
                            ___lbdiv
                        _add_task_id
                                _ldz
                          _new_nixie
 ---------------------------------------------------------------------------------
 (2) _ui_timout                                            1     0      1     898
                                              6 COMRAM     1     0      1
                            ___lbdiv
                                _ldz
                          _new_nixie
 ---------------------------------------------------------------------------------
 (2) _ui_smoing                                            2     1      1     290
                                              6 COMRAM     2     1      1
                          _new_nixie
 ---------------------------------------------------------------------------------
 (2) _ui_smoend_dl_getup                                   2     1      1    6101
                                             14 COMRAM     2     1      1
                            ___lbdiv
                        _add_task_id
                                _ldz
                          _new_nixie
 ---------------------------------------------------------------------------------
 (2) _ui_kl                                                2     1      1     246
                                              6 COMRAM     2     1      1
                                _ldz
                          _new_nixie
 ---------------------------------------------------------------------------------
 (2) _ui_chrgfull                                          2     1      1     246
                                              6 COMRAM     2     1      1
                                _ldz
                          _new_nixie
 ---------------------------------------------------------------------------------
 (2) _ui_chrgfree                                          1     0      1     224
                                              6 COMRAM     1     0      1
                                _ldz
                          _new_nixie
 ---------------------------------------------------------------------------------
 (2) _ui_chrg                                              5     4      1     316
                                              6 COMRAM     5     4      1
                                _ldz
                          _new_nixie
 ---------------------------------------------------------------------------------
 (2) _ui_cb                                                2     1      1    6412
                                             14 COMRAM     2     1      1
                            ___lbdiv
                            ___lbmod
                        _add_task_id
                                _ldz
                          _new_nixie
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     223
                                              5 COMRAM     4     3      1
                            ___lbdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     674
                                              1 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _ui_begin                                             3     2      1     246
                                              6 COMRAM     3     2      1
                          _cmp0_init
                          _gpio_init
                                _ldz
                          _new_nixie
                         _sleep_mode
                        _timer0_init
                        _timer1_init
                        _timer2_init
 ---------------------------------------------------------------------------------
 (3) _new_nixie                                            5     5      0      72
                                              1 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (3) _ldz                                                  1     1      0      66
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _sleep_task                                           3     2      1     216
                                              1 COMRAM     3     2      1
                          _cmp0_init
                          _gpio_init
                         _sleep_mode
                        _timer0_init
                        _timer1_init
                        _timer2_init
 ---------------------------------------------------------------------------------
 (1) _timer2_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _sleep_mode                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _gpio_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _cmp0_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _si_mic_task                                          6     5      1    7751
                                             34 COMRAM     6     5      1
                        _add_task_id
                            _get_bat
                           _get_load
 ---------------------------------------------------------------------------------
 (1) _key_task                                             2     1      1    5331
                                             14 COMRAM     2     1      1
                        _add_task_id
 ---------------------------------------------------------------------------------
 (2) _chrg_task                                            2     1      1    6198
                                             34 COMRAM     2     1      1
                        _add_task_id
                            _get_bat
 ---------------------------------------------------------------------------------
 (2) _cb_task                                              5     4      1    6817
                                             32 COMRAM     5     4      1
                        _add_task_id
                           _get_load
 ---------------------------------------------------------------------------------
 (2) _get_load                                             6     6      0    1551
                                             26 COMRAM     6     6      0
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     706
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _add_task_id                                         13     7      6    5115
                                              1 COMRAM    13     7      6
 ---------------------------------------------------------------------------------
 (2) _bat_task                                             5     4      1    1019
                                             34 COMRAM     5     4      1
                            _get_bat
 ---------------------------------------------------------------------------------
 (2) _get_bat                                              8     6      2     823
                                             26 COMRAM     8     6      2
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     776
                                             13 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR_l                                                1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR_h                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lldiv
     ___lmul (ARG)
   ___lmul
   _add_task_id
   _bat_task
     _get_bat
       ___lldiv
         ___lmul (ARG)
   _cb_task
     _add_task_id
     _get_load
       ___lldiv
         ___lmul (ARG)
       ___lmul
   _chrg_task
     _add_task_id
     _get_bat
       ___lldiv
         ___lmul (ARG)
   _cmp0_init
   _find_task
     _bat_task
       _get_bat
         ___lldiv
           ___lmul (ARG)
     _cb_task
       _add_task_id
       _get_load
         ___lldiv
           ___lmul (ARG)
         ___lmul
     _chrg_task
       _add_task_id
       _get_bat
         ___lldiv
           ___lmul (ARG)
     _key_task
       _add_task_id
     _si_mic_task
       _add_task_id
       _get_bat
         ___lldiv
           ___lmul (ARG)
       _get_load
         ___lldiv
           ___lmul (ARG)
         ___lmul
     _sleep_task
       _cmp0_init
       _gpio_init
       _sleep_mode
       _timer0_init
       _timer1_init
       _timer2_init
     _ui_begin
       _cmp0_init
       _gpio_init
       _ldz
       _new_nixie
       _sleep_mode
       _timer0_init
       _timer1_init
       _timer2_init
     _ui_cb
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       _add_task_id
       _ldz
       _new_nixie
     _ui_chrg
       _ldz
       _new_nixie
     _ui_chrgfree
       _ldz
       _new_nixie
     _ui_chrgfull
       _ldz
       _new_nixie
     _ui_kl
       _ldz
       _new_nixie
     _ui_smoend_dl_getup
       ___lbdiv
       _add_task_id
       _ldz
       _new_nixie
     _ui_smoing
       _new_nixie
     _ui_timout
       ___lbdiv
       _ldz
       _new_nixie
     _ui_ts_off
       ___lbdiv
       _add_task_id
       _ldz
       _new_nixie
     _ui_ts_on
       ___lbdiv
       _add_task_id
       _ldz
       _new_nixie
   _get_bat
     ___lldiv
       ___lmul (ARG)
   _gpio_init
   _key_task
     _add_task_id
   _si_mic_task
     _add_task_id
     _get_bat
       ___lldiv
         ___lmul (ARG)
     _get_load
       ___lldiv
         ___lmul (ARG)
       ___lmul
   _sleep_task
     _cmp0_init
     _gpio_init
     _sleep_mode
     _timer0_init
     _timer1_init
     _timer2_init
   _task_init
   _timer0_init
   _timer1_init
   _timer2_init

 _ISR_l (ROOT)

 _ISR_h (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              FF      0       0       6        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80      0      5B       4       71.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     2D      7B       1       97.6%
EEDATA               1      0       0       0        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D6       5        0.0%
DATA                 0      0      D6       7        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed May 28 17:10:21 2025

                         PL2 13E8                           PL4 13F2                           PL6 0B28  
                         PL8 089C                           _GO 007D09                           _ui 0013  
                         _yd 0038                           _pw 007B                           _ts 0034  
                         bsr 000FE0                           _zz 007A                          PL10 0F36  
                        PL20 115C                          PL12 08A8                          PL30 0F48  
                        PL22 08BC                          PL14 126A                          PL40 08DA  
                        PL32 15B6                          PL24 08CE                          PL16 0B32  
                        PL50 08EE                          PL42 105C                          PL34 1528  
                        PL26 08D4                          PL18 0DFE                          PL60 19BA  
                        PL52 1538                          PL44 1492                          PL36 1166  
                        PL28 1726                          PL70 149C                          PL62 090C  
                        PL54 08FA                          PL46 1A6E                          PL38 1B02  
                        PL80 0948                          PL72 092A                          PL64 0916  
                        PL56 1170                          PL48 08E4                          PL82 0952  
                        PL74 1A7C                          PL66 0920                          PL58 0900  
                        PL84 173C                          PL76 0934                          PL68 19C6  
                        PL78 093E                          _PA0 007C00                          _bat 0071  
                        _ldz 1C8A                          _pwm 00D2                          _zz_ 0080  
                        wreg 000FE8                  config_word1 0000                  config_word2 0002  
       __size_of_add_task_id 0082                         l1002 168C                         l2012 08B0  
                       l2022 141E                         l2023 141C                         l3031 11A4  
                       l3032 11BE                         l3042 1224                         l3035 11D8  
                       l3037 125E                         l5200 0410                         l4057 0E26  
                       l5201 0418                         l5202 0420                         l4059 0E48  
                       l5203 0428                         l5300 071E                         l5212 046C  
                       l5204 0430                         l5301 0726                         l5213 0474  
                       l5205 0438                         l5302 072E                         l5230 04FC  
                       l5214 047C                         l5206 0440                         l4079 0F1A  
                       l5311 07B0                         l5231 0504                         l5215 0484  
                       l5232 050C                         l5216 048C                         l5144 0180  
                       l5241 0552                         l5217 0494                         l5242 055A  
                       l5218 049C                         l5307 0754                         l5251 059E  
                       l5243 0562                         l5227 04E4                         l5308 075C  
                       l5252 05A6                         l5244 056A                         l5228 04EC  
                       l5253 05AE                         l5245 0572                         l5229 04F4  
                       l5270 0634                         l5254 05B6                         l5246 057A  
                       l5182 0384                         l5263 05FC                         l5255 05BE  
                       l5183 0378                         l5280 0680                         l5264 0604  
                       l5256 05C6                         l5281 0688                         l5265 060C  
                       l5257 05CE                         l5290 06CE                         l5282 0690  
                       l5266 0614                         l5258 05D6                         l5291 06D6  
                       l5275 0658                         l5267 061C                         l5292 06DE  
                       l5276 0660                         l5268 0624                         l5293 06E6  
                       l5277 0668                         l5269 062C                         l5294 06EE  
                       l5278 0670                         l5287 06B6                         l5279 0678  
                       l5199 0408                         l5288 06BE                         l5289 06C6  
                       ?_ldz 003D                         l5299 0716                         _ADIE 007D4A  
                       _ADIF 007D52                         l8412 0984                         l8422 0A46  
                       l8424 0A42                         u3640 14C6                         u3645 14BC  
                       u3814 1036                         u3815 1032                         u7117 158A  
                       u7127 15A4                         u7137 18DA                         u7147 18F4  
                       u7157 15CC                         u6760 0824                         _cb_o 0039  
                       _main 010C                         _full 0036                         _pw_t 006A  
               get_load@temp 0059                         fsr2h 000FDA                         indf2 000FDF  
                       fsr1l 000FE1                         fsr2l 000FD9                         btemp 007C  
                       ldz@a 003E                         _zz_p 003A                         prodl 000FF3  
                       start 0032           add_task_id@task_id 0043                 ___param_bank 000000  
         add_task_id@suc_max 0042                        ??_ldz 003E                        l13035 1820  
                      l12537 0F8A                        l16003 1904                        l12548 0FB0  
                      l12557 0FD8                        l16101 1710                        l12558 0FFC  
                      l12638 13AE                        l12559 1010                        l16023 1098  
                      l16031 10CE                        l16103 1716                        l12576 10C4  
                      l16105 171A                        l16113 1B96                        l17011 06F4  
                      l15501 0F7A                        l16029 10C8                        l17101 0896  
                      l15271 1AA0                        l15511 0F94                        l16063 112A  
                      l16047 10F8                        l16055 1110                        l16223 1A40  
                      l15281 17D4                        l12697 1A8C                        l15513 0F96  
                      l16401 1562                        l16065 113C                        l16137 1B34  
                      l16161 1872                        l15283 17E0                        l15523 0FB2  
                      l15507 0F8C                        l15603 1B7E                        l15611 1BB4  
                      l16227 1A46                        l16331 0D30                        l16323 0D06  
                      l16307 0CE0                        l17043 0748                        l17035 0738  
                      l17019 070A                        l15293 1812                        l15285 17E4  
                      l15533 0FC6                        l15517 0F9E                        l16405 1576  
                      l16093 16F6                        l16245 1A54                        l16157 1858  
                      l16341 0D66                        l16333 0D3C                        l16325 0D10  
                      l15535 0FCA                        l15527 0FBA                        l15519 0FA0  
                      l16095 16FC                        l16087 16DA                        l16343 0D6C  
                      l16335 0D48                        l16327 0D1A                        l16351 0DC0  
                      l16263 1376                        l16431 1BFA                        l16503 0198  
                      l15801 0EBE                        l15561 1024                        l15529 0FBC  
                      l16097 1702                        l16185 1774                        l16345 0D7A  
                      l16337 0D52                        l16329 0D24                        l16273 13A0  
                      l16441 1280                        l17057 0762                        l17065 07B2  
                      l16513 01AA                        l15651 16B6                        l15643 169E  
                      l15563 1040                        l15539 0FD6                        l15619 1BCA  
                      l16195 179C                        l16187 1786                        l16371 1AE4  
                      l16355 0DD0                        l16339 0D5C                        l16283 13CC  
                      l16267 1390                        l16451 12A8                        l16443 1288  
                      l17091 0828                        l17059 07A6                        l16603 02D2  
                      l16507 01A0                        l15725 122E                        l15717 120C  
                      l15805 0EC8                        l15557 101A                        l15493 0F6E  
                      l16349 0D88                        l16269 1394                        l16461 12D0  
                      l16453 12B0                        l16445 1290                        l17077 0808  
                      l16525 01C4                        l15655 16C2                        l15647 16AA  
                      l15639 1694                        l15815 0EE4                        l15807 0ED2  
                      l15911 0A3A                        l15567 1048                        l15495 0F70  
                      l15591 1B62                        l16359 0DE2                        l16471 12F8  
                      l16463 12D8                        l16455 12B8                        l16447 1298  
                      l16439 1278                        l17079 0810                        l15833 0F30  
                      l15577 1058                        l15569 104A                        l15593 1B66  
                      l16465 12E0                        l16457 12C0                        l16449 12A0  
                      l15819 0EEE                        l15747 0E28                        l15499 0F78  
                      l15587 1B5C                        l16467 12E8                        l16459 12C8  
                      l16475 1300                        l16731 03FC                        l16723 03EA  
                      l16635 032A                        l16651 0354                        l16619 02FE  
                      l16571 027C                        l16555 0250                        l16539 0224  
                      l15773 0E66                        l15765 0E52                        l16469 12F0  
                      l16813 04D8                        l16805 04C6                        l15775 0E6A  
                      l15847 0972                        l15599 1B76                        l16911 05DC  
                      l16831 0510                        l16495 0188                        l15793 0EAE  
                      l15769 0E56                        l15953 0AC4                        l15929 0A64  
                      l16921 05F0                        l16841 0528                        l16833 0516  
                      l16753 0444                        l16681 038A                        l15947 0AB0  
                      l15939 0A8A                        l15859 09A2                        l15867 09B8  
                      l16755 044A                        l16587 02A8                        l16499 0190  
                      l15949 0ABA                        l15973 0B12                        l15893 0A0A  
                      l16765 0460                        l15959 0ADA                        l15879 09DC  
                      l16953 064C                        l16945 063A                        l16849 0532  
                      l16785 04A0                        l16859 0546                        l16787 04A6  
                      l16797 04BC                        l16887 0592                        l16879 0580  
                      l16977 0696                        l16987 06AA                        ?_main 003D  
            __end_of___lbdiv 1B82              __end_of___lbmod 1BD2              __end_of___lldiv 1832  
                      _PINA4 007C34                        _PINA5 007C35              __end_of_cb_task 1492  
                      _ISR_h 0008                        _ISR_l 0018          ___lmul@multiplicand 0042  
            __end_of_get_bat 1A2C                        _key_o 0078                        _ui_cb 106C  
                      _ui_id 003C                        _ui_ld 006E                        _ui_kl 1A2C  
            __end_of_ui_chrg 1726                        tablat 000FF5                        status 000FD8  
            ___lbdiv@divisor 003E              ___lbdiv@counter 0040               find_task@task_ 0065  
            __initialization 190E                 __end_of_main 089C                       ??_main 0066  
              __activetblptr 000002                       ?_ISR_h 003D                       ?_ISR_l 003D  
__size_of_ui_smoend_dl_getup 0078                 ?_si_mic_task 005F             ui_chrgfree@task_ 0043  
                     _ADCON0 000FA1                       _ADCON1 000FA0                       _ADRESH 000FA3  
                     _ADRESL 000FA2                       ?_ui_cb 004B                       ?_ui_kl 0043  
                     i1l5356 0026                       i1l5357 002A                       i2l5330 0BB8  
                     i2l5340 0C44                       i2l5332 0BD4                       i2l5350 0C9E  
                     i2l5334 0BF0                       i2l5326 0B80                       i2l5351 0CB2  
                     i2l5336 0C0C                       i2l5328 0B9C                       i2l5345 0C78  
                     i2l5346 0C94                       i2l5338 0C28             __end_of_bat_task 16C8  
               ?_ui_chrgfree 0043                 ?_ui_chrgfull 0043             __end_of_get_load 164A  
                     ___lmul 1A84             ui_chrgfull@task_ 0043                    ??___lbdiv 003F  
                  ??___lbmod 0043                    ??___lldiv 0052                 ?_timer0_init 003D  
                     _chrg_o 0037                 ?_timer1_init 003D                 ?_timer2_init 003D  
                  ??_cb_task 005E                new_nixie@temp 0042             __end_of_key_task 0F36  
                     clear_0 1954                       clear_1 1960                bat_task@task_ 005F  
                     _tim_ui 0022                       _ts_cnt 0031                       _smoing 0026  
                     _timout 0027                       main@b_ 0068                    ??_get_bat 0059  
           __end_of_ui_begin 15B6             __end_of_nixienum 010B                 __pdataCOMRAM 006A  
           __end_of_ui_ts_on 13E8                 __mediumconst 0000                    ??_ui_chrg 0044  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
                  PS1101@PA0 007C00                    PS1101@GIE 007F97                    PS1101@PB0 007C08  
                  PS1101@PC0 007C10                    PS1101@PB2 007C0A                    PS1101@PC1 007C11  
                  PS1101@PB3 007C0B                    PS1101@PC2 007C12                    PS1101@PB4 007C0C  
                  PS1101@PC3 007C13                    PS1101@PB5 007C0D                    PS1101@PC4 007C14  
                  PS1101@PC5 007C15                    PS1101@PR0 000FD6                    PS1101@PR2 000FC8  
                  PS1101@PR3 000FB9                    PS1101@PME 000FBD             ___lbdiv@dividend 003F  
            ___lbmod@divisor 0042                   __accesstop 0080      __end_of__initialization 1966  
            ___lbmod@counter 0044                ___rparam_used 000001                __end_of_ISR_h 0CB6  
              __end_of_ISR_l 0032               __pcstackCOMRAM 003D           __size_of_cmp0_init 0018  
               __pidataBANK0 1C9A                __end_of_ui_cb 115C                __end_of_ui_kl 1A6E  
                 __end_ofPL2 13F2                   __end_ofPL4 1406                   __end_ofPL6 0B32  
                 __end_ofPL8 08A8             ___lbdiv@quotient 0041           __size_of_chrg_task 00F2  
                    ??_ISR_h 003D                      ??_ISR_l 003D           __size_of_find_task 00D8  
            sleep_task@task_ 003E                      ??_ui_cb 004C                      ??_ui_kl 0044  
                 __pbssBANK0 0080           __size_of_gpio_init 0026           __size_of_new_nixie 010A  
                    ?___lmul 003E               ___lmul@product 0046           __size_of_task_init 0022  
              ??_add_task_id 0044           __size_of_ui_smoing 0072           __size_of_ui_timout 0032  
         __size_of_ui_ts_off 0148                      i2l17211 0C68                      i2l17117 0B58  
                    i2l17119 0B5A                      i2l17191 0C48                    ?_bat_task 005F  
          __end_of_cmp0_init 1C4E                    ?_get_load 003D         __size_of_si_mic_task 01CE  
            PS1101@HBPWMOE00 007DE8              PS1101@HBPWMOE01 007DE9              PS1101@HBPWMOE10 007DEA  
            PS1101@HBPWMOE11 007DEB              PS1101@HBPWMOE20 007DEC              PS1101@HBPWMOE21 007DED  
                  ?_key_task 004B            __end_of_chrg_task 126A                      __Hparam 0000  
                  ?_ui_begin 0043         __size_of_ui_chrgfree 002A         __size_of_ui_chrgfull 003A  
                    __Lparam 0000            __end_of_find_task 134E                    ?_ui_ts_on 004B  
                    ___lbdiv 1B4E              __size_of___lmul 004C    add_task_id@interval_ticks 0049  
                    ___lbmod 1BAC                      ___lldiv 17BC                      _adc_cnt 002C  
               __psmallconst 0100                      _cb_task 1406                      __pcinit 190E  
                    __ramtop 0100         __size_of_timer0_init 0014                      _chrging 0079  
       __size_of_timer1_init 001C                      __ptext0 010C                      __ptext1 1BF8  
                    __ptext2 1276                      __ptext3 134E                      __ptext4 0CB6  
                    __ptext5 1AD0                      __ptext6 1832                      __ptext7 1744  
                    __ptext8 1A2C                      __ptext9 1B14         __size_of_timer2_init 0016  
                    _get_bat 19D0            __end_of_gpio_init 1BF8                      _kl_init 0025  
                    _key_cnt 0033                 __size_of_ldz 0010                   ??_bat_task 0060  
                    _nixie_z 0001                      _ui_chrg 16C8                      _tim_cnt 0086  
                    _pw_mode 0030                      _pwm_bat 0074                      _pwm_cnt 002A  
          __end_of_new_nixie 105C                   ??_get_load 0057               __pintcode_body 0B3E  
        __end_of_add_task_id 1528         end_of_initialization 1966            __end_of_task_init 1C1A  
              __Lmediumconst 0000                   ??_key_task 004C                      int_func 0B3E  
          __end_of_ui_smoing 18A4            __end_of_ui_timout 1B02            __end_of_ui_ts_off 0DFE  
            ___lldiv@divisor 004E              ___lldiv@counter 0056                   ??_ui_begin 0044  
               cb_task@task_ 005D                   ??_ui_ts_on 004C                      postdec1 000FE5  
                    postdec2 000FDD                   _sleep_mode 1974                   _sleep_task 18A4  
                    postinc0 000FEE                      postinc2 000FDE                   PS1101@ADIE 007D4A  
                 PS1101@ADIF 007D52                   PS1101@ADIP 007D5A                   PS1101@ADON 007D08  
                 PS1101@PAIE 007D65                   PS1101@PAIF 007D6D                   PS1101@PBIE 007D66  
                 PS1101@PBIF 007D6E                   PS1101@PCIE 007D67                   PS1101@PCIF 007D6F  
                 PS1101@PAOD 000F92                   PS1101@PAPD 000F94                   PS1101@PEIE 007F96  
                 PS1101@PR1H 000FCF                   PS1101@PR1L 000FCE                   PS1101@PCON 000FF1  
                 PS1101@PAPU 000F83                   PS1101@PBPU 000F84                   PS1101@PCPU 000F85  
                 PS1101@SMCR 000FD4                   PS1101@POLS 000FBE                   PS1101@TMR0 000FD5  
                 PS1101@TMR2 000FCA                   PS1101@TMR3 000FBA   __end_of_ui_smoend_dl_getup 17BC  
                  _USART_BUF 0029             ___lbmod@dividend 0043                   get_bat@ttt 005B  
                ___lbmod@rem 0045               __end_of___lmul 1AD0                __pidataCOMRAM 1C78  
              ui_begin@task_ 0043               chrg_task@task_ 005F                  _add_task_id 14A6  
                __end_ofPL10 0F48                  __end_ofPL20 1166                  __end_ofPL12 08BC  
                __end_ofPL30 0F52                  __end_ofPL22 08CE                  __end_ofPL14 1276  
                __end_ofPL40 08E4                  __end_ofPL32 15C8                  __end_ofPL24 08D4  
                __end_ofPL16 0B3E                  __end_ofPL50 08FA                  __end_ofPL42 106C  
                __end_ofPL34 1538                  __end_ofPL26 08DA                  __end_ofPL18 0E10  
                __end_ofPL60 19C6                  __end_ofPL52 1544                  __end_ofPL44 149C  
                __end_ofPL36 1170                  __end_ofPL28 173C                  __end_ofPL70 14A6  
                __end_ofPL62 0916                  __end_ofPL54 0900                  __end_ofPL46 1A7C  
                __end_ofPL38 1B14                  __end_ofPL80 0952                  __end_ofPL72 0934  
                __end_ofPL64 0920                  __end_ofPL56 1178                  __end_ofPL48 08EE  
                __end_ofPL82 095A                  __end_ofPL74 1A84                  __end_ofPL66 092A  
                __end_ofPL58 090C                  __end_ofPL84 1744                  __end_ofPL76 093E  
                __end_ofPL68 19D0                  __end_ofPL78 0948          start_initialization 190E  
                __end_of_ldz 1C9A                     ??___lmul 0046                  ?_sleep_mode 003D  
                ?_sleep_task 003E                  __pdataBANK0 00D2                     PS1101@GO 007D09  
                __pbssCOMRAM 0001                 _key_cnt_flag 0032                    _adc_begin 002B  
          __size_of_bat_task 007E            __size_of_get_load 0082                    _cmp0_init 1C36  
          __size_of_key_task 0126                    __pintcode 0008                    _chrg_task 1178  
          __size_of_ui_begin 0072                     ?___lbdiv 003E                     ?___lbmod 0042  
                   ?___lldiv 004A                   ui_cb@task_ 004B                     ?_cb_task 005D  
             PS1101@CMP0CON0 000FA8               PS1101@CMP0CON1 000FA7            __size_of_ui_ts_on 009A  
                __pintcodelo 0018                    _find_task 1276                     ?_get_bat 0057  
                __smallconst 0100               __size_of_ISR_h 0CAE               __size_of_ISR_l 001A  
              ??_si_mic_task 0060                     ?_ui_chrg 0043                    _gpio_init 1BD2  
                  bat_task@b 0062                   ui_kl@task_ 0043               __size_of_ui_cb 00F0  
        __size_of_sleep_mode 0046               __size_of_ui_kl 0042                   task_init@i 003E  
        __size_of_sleep_task 006A                    _new_nixie 0F52                   ?_cmp0_init 003D  
              ??_ui_chrgfree 0044                ??_ui_chrgfull 0044                    _task_init 1BF8  
                  _task_list 008A                  cb_task@zz_t 0060                   ?_chrg_task 005F  
              ??_timer0_init 003E                    _ui_smoing 1832                    _ui_timout 1AD0  
                  _ui_ts_off 0CB6                ??_timer1_init 003E                ??_timer2_init 003E  
    ui_smoend_dl_getup@task_ 004B                   ?_find_task 0065                add_task_id@id 0048  
                 ?_gpio_init 003D            ___lmul@multiplier 003E                    copy_data0 1922  
                  copy_data1 1942                   ?_new_nixie 003D          __end_of_si_mic_task 0B28  
         _ui_smoend_dl_getup 1744                     __Hrparam 0000                   ?_task_init 003D  
        ?_ui_smoend_dl_getup 004B                     __Lrparam 0000          __end_of_ui_chrgfree 1BAC  
               ui_chrg@task_ 0043                 _si_mic_state 0028          __end_of_ui_chrgfull 1B4E  
                 ?_ui_smoing 0043                   ?_ui_timout 0043                   ?_ui_ts_off 004B  
           __size_of___lbdiv 0034             __size_of___lbmod 0026             __size_of___lldiv 0076  
               _ui_chrg$6558 0044                 _ui_chrg$6559 0046             __size_of_cb_task 008C  
                   _adc_flag 002D             __size_of_get_bat 005C          __end_of_timer0_init 1C78  
        __end_of_timer1_init 1C36                 ?_add_task_id 003E          __end_of_timer2_init 1C64  
                   _cfg_flag 0076                     _bat_task 164A             _si_mic_task$4366 0061  
       ??_ui_smoend_dl_getup 004C                     _chrg_cnt 0035                     __ptext10 1B82  
                   __ptext11 16C8                     __ptext20 1C1A                     __ptext12 106C  
                   __ptext21 1C64                     __ptext13 1BAC             __size_of_ui_chrg 005E  
                   __ptext30 1A84                     __ptext22 1974                     __ptext14 1B4E  
                   __ptext31 14A6                     __ptext23 1BD2                     __ptext15 1544  
                   __ptext32 164A                     __ptext24 1C36                     __ptext16 0F52  
                   __ptext33 19D0                     __ptext25 095A                     __ptext17 1C8A  
                   __ptext34 17BC                     __ptext26 0E10                     __ptext18 18A4  
                   __ptext27 1178                     __ptext19 1C4E                     __ptext28 1406  
                   __ptext29 15C8                PS1101@CMP0OUT 007D46                     _get_load 15C8  
                ??_cmp0_init 003E                     _key_task 0E10                __size_of_main 0790  
                   _ui_begin 1544             si_mic_task@task_ 005F                     _nixienum 0101  
                   _ui_ts_on 134E                 ??_sleep_mode 003E                 ??_sleep_task 003F  
                ??_chrg_task 0060                     int$flags 007C                key_task@task_ 004B  
                   _pwm_flag 002E                  ??_find_task 0066                     _zz_begin 003B  
             ui_smoing@task_ 0043               ui_timout@task_ 0043                  ??_gpio_init 003E  
                _si_mic_flag 001D                  _si_mic_task 095A               ui_ts_off@task_ 004B  
                   intlevel1 0000                     intlevel2 0000                  _lowbat_init 002F  
         __end_of_sleep_mode 19BA           __end_of_sleep_task 190E                  ??_new_nixie 003E  
               PS1101@ADCON0 000FA1                 PS1101@ADCON1 000FA0                 PS1101@DACCON 000FA4  
               PS1101@ADRESH 000FA3                 PS1101@ADRESL 000FA2             ___lldiv@dividend 004A  
             _new_nixie$6535 0040                 PS1101@CMP0IE 007D4B                 PS1101@CMP0IF 007D53  
               PS1101@CMP0EN 007D47                 PS1101@CMP1EN 007D37                 PS1101@T1CON0 000FCD  
               PS1101@T1CON1 000FCC                  _ui_chrgfree 1B82                 PS1101@T2CON0 000FC1  
               PS1101@T2CON1 000FC0                 PS1101@PB1MSK 007C81                 PS1101@T3CON0 000FB8  
               PS1101@PA4MSK 007C7C                 PS1101@PA5MSK 007C7D                  _ui_chrgfull 1B14  
               PS1101@PC6MSK 007C8E                 PS1101@DUTY20 000FC6                 PS1101@DUTY22 000FC4  
               PS1101@DUTY24 000FC2                 PS1101@FVRCON 000FD3                 PS1101@OSCCON 000FF0  
               PS1101@TMR0IE 007D78                 PS1101@TMR0IF 007D80                 PS1101@TMR1IE 007D79  
               PS1101@TMR1IF 007D81                 PS1101@TMR2IE 007D7C                 PS1101@TMR2IF 007D84  
               PS1101@TMR3IE 007D4D                 PS1101@TMR3IF 007D55                 PS1101@TMR2IP 007D8C  
               PS1101@TMR1ON 007E68                 PS1101@TMR2ON 007E0A                 PS1101@TMR3ON 007DC2  
                ??_task_init 003E                 PS1101@TRISC0 007C58                 PS1101@TRISB2 007C52  
               PS1101@TRISC1 007C59                 PS1101@TRISB3 007C53                 PS1101@TRISC2 007C5A  
               PS1101@TRISB4 007C54                 PS1101@TRISC3 007C5B                 PS1101@TRISB5 007C55  
               PS1101@TRISC4 007C5C                 PS1101@TRISC5 007C5D                  _pw_add_flag 0077  
                ??_ui_smoing 0044                  ??_ui_timout 0044                  ??_ui_ts_off 004C  
                _timer0_init 1C64                  _timer1_init 1C1A                  _timer2_init 1C4E  
              ui_ts_on@task_ 004B                  PS1101@DACEN 007D26             ___lldiv@quotient 0052  
                PS1101@PA0OD 007C90                  PS1101@T0CON 000FD7                  PS1101@IOCUR 000FB6  
                PS1101@FVREN 007E98                  PS1101@PINA1 007C31                  PS1101@PINB1 007C39  
                PS1101@PINA4 007C34                  PS1101@PINA5 007C35                  PS1101@PINC6 007C46  
                PS1101@TMR1H 000FD1                  PS1101@TMR1L 000FD0                  PS1101@PORTA 000F80  
                PS1101@PORTB 000F81                  PS1101@PORTC 000F82                  PS1101@TRISA 000F89  
                PS1101@TRISB 000F8A                  PS1101@TRISC 000F8B       add_task_id@interval_ms 003E  
