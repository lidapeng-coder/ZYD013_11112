

Microchip Technology PIC18 PRO Macro Assembler V1.41 build -162212810 
                                                                                               Wed May 28 17:10:37 2025

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	18XPS1103
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	config,global,class=CONFIG,delta=1
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    55                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    56                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    57                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    58                           	psect	pa_nodes0,global,class=CODE,delta=1
    59  0000                     
    60                           ; Version 1.41
    61                           ; Generated 25/01/2017 GMT
    62                           ; 
    63                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC18F2510 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     tblptrh	equ	0xFF7
    95                           tblptrl	equ	0xFF6
    96                           tablat	equ	0xFF5
    97                           prodl	equ	0xFF3
    98                           intcon	equ	0xFF2
    99                           intcon2	equ	0xFF1
   100                           intcon3	equ	0xFF0
   101                           wreg	equ	0xFE8
   102                           indf2	equ	0xFDF
   103                           postinc2	equ	0xFDE
   104                           postdec2	equ	0xFDD
   105                           fsr2h	equ	0xFDA
   106                           fsr2l	equ	0xFD9
   107                           status	equ	0xFD8
   108                           
   109                           	psect	config
   110  300000                     	org	0	;# 
   111  300000                     config_word1:
   112                           	opt stack 0
   113                           
   114                           ;# 
   115  300000  FFFC               	dw	65532	;# 
   116  300002                     	org	2	;# 
   117  300002                     config_word2:
   118                           	opt stack 0
   119                           
   120                           ;# 
   121  300002  FF27               	dw	65319	;# 
   122                           tblptrh	equ	0xFF7
   123                           tblptrl	equ	0xFF6
   124                           tablat	equ	0xFF5
   125                           prodl	equ	0xFF3
   126                           intcon	equ	0xFF2
   127                           intcon2	equ	0xFF1
   128                           intcon3	equ	0xFF0
   129                           wreg	equ	0xFE8
   130                           indf2	equ	0xFDF
   131                           postinc2	equ	0xFDE
   132                           postdec2	equ	0xFDD
   133                           fsr2h	equ	0xFDA
   134                           fsr2l	equ	0xFD9
   135                           status	equ	0xFD8
   136                           
   137                           	psect	idataCOMRAM
   138  001E7E                     __pidataCOMRAM:
   139                           	opt stack 0
   140                           
   141                           ;initializer for _ui_ld
   142  001E7E  0A                 	db	10
   143  001E7F  0A                 	db	10
   144  001E80  0A                 	db	10
   145  001E81  0A                 	db	10
   146  001E82  0A                 	db	10
   147                           
   148                           ;initializer for _pw_t
   149  001E83  001E               	dw	30
   150  001E85  0000               	dw	0
   151                           
   152                           ;initializer for _bat
   153  001E87  01                 	db	1
   154  001E88  01A4               	dw	420
   155                           
   156                           ;initializer for _pwm_bat
   157  001E8A  012C               	dw	300
   158                           
   159                           ;initializer for _cfg_flag
   160  001E8C  01                 	db	1
   161                           
   162                           ;initializer for _pw_add_flag
   163  001E8D  01                 	db	1
   164                           
   165                           ;initializer for _key_o
   166  001E8E  01                 	db	1
   167                           
   168                           ;initializer for _chrg_num
   169  001E8F  50                 	db	80
   170                           
   171                           ;initializer for _chrging
   172  001E90  01                 	db	1
   173                           
   174                           ;initializer for _zz
   175  001E91  1E                 	db	30
   176                           
   177                           ;initializer for _ui_id
   178  001E92  06                 	db	6
   179                           
   180                           ;initializer for _pw
   181  001E93  08                 	db	8
   182                           tblptrh	equ	0xFF7
   183                           tblptrl	equ	0xFF6
   184                           tablat	equ	0xFF5
   185                           prodl	equ	0xFF3
   186                           intcon	equ	0xFF2
   187                           intcon2	equ	0xFF1
   188                           intcon3	equ	0xFF0
   189                           wreg	equ	0xFE8
   190                           indf2	equ	0xFDF
   191                           postinc2	equ	0xFDE
   192                           postdec2	equ	0xFDD
   193                           fsr2h	equ	0xFDA
   194                           fsr2l	equ	0xFD9
   195                           status	equ	0xFD8
   196                           
   197                           	psect	idataBANK0
   198  001EBE                     __pidataBANK0:
   199                           	opt stack 0
   200                           
   201                           ;initializer for _pwm
   202  001EBE  00                 	db	0
   203  001EBF  00                 	db	0
   204  001EC0  00                 	db	0
   205  001EC1  00                 	db	0
   206  001EC2  00                 	db	0
   207  001EC3  050D               	dw	1293
   208  001EC5  012C               	dw	300
   209                           tblptrh	equ	0xFF7
   210                           tblptrl	equ	0xFF6
   211                           tablat	equ	0xFF5
   212                           prodl	equ	0xFF3
   213                           intcon	equ	0xFF2
   214                           intcon2	equ	0xFF1
   215                           intcon3	equ	0xFF0
   216                           wreg	equ	0xFE8
   217                           indf2	equ	0xFDF
   218                           postinc2	equ	0xFDE
   219                           postdec2	equ	0xFDD
   220                           fsr2h	equ	0xFDA
   221                           fsr2l	equ	0xFD9
   222                           status	equ	0xFD8
   223                           
   224                           	psect	smallconst
   225  000100                     __psmallconst:
   226                           	opt stack 0
   227  000100  00                 	db	0
   228  000101                     _nixienum:
   229                           	opt stack 0
   230  000101  3F                 	db	63
   231  000102  06                 	db	6
   232  000103  5B                 	db	91
   233  000104  4F                 	db	79
   234  000105  66                 	db	102
   235  000106  6D                 	db	109
   236  000107  7D                 	db	125
   237  000108  07                 	db	7
   238  000109  7F                 	db	127
   239  00010A  6F                 	db	111
   240  00010B                     __end_of_nixienum:
   241                           	opt stack 0
   242  00010B  00                 	db	0	; dummy byte at the end
   243  0000                     tblptrh	equ	0xFF7
   244                           tblptrl	equ	0xFF6
   245                           tablat	equ	0xFF5
   246                           prodl	equ	0xFF3
   247                           intcon	equ	0xFF2
   248                           intcon2	equ	0xFF1
   249                           intcon3	equ	0xFF0
   250                           wreg	equ	0xFE8
   251                           indf2	equ	0xFDF
   252                           postinc2	equ	0xFDE
   253                           postdec2	equ	0xFDD
   254                           fsr2h	equ	0xFDA
   255                           fsr2l	equ	0xFD9
   256                           status	equ	0xFD8
   257                           
   258                           ; #config settings
   259                           
   260                           	psect	cinit
   261  001ACE                     __pcinit:
   262                           	opt stack 0
   263  001ACE                     start_initialization:
   264                           	opt stack 0
   265  001ACE                     __initialization:
   266                           	opt stack 0
   267                           
   268                           ; Initialize objects allocated to BANK0 (9 bytes)
   269                           ; load TBLPTR registers with __pidataBANK0
   270  001ACE  0EBE               	movlw	low __pidataBANK0
   271  001AD0  6EF6               	movwf	tblptrl,c
   272  001AD2  0E1E               	movlw	high __pidataBANK0
   273  001AD4  6EF7               	movwf	tblptrh,c
   274  001AD6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   275  001AD8  6EF8               	movwf	tblptru,c
   276  001ADA  EE00  F0CE         	lfsr	0,__pdataBANK0
   277  001ADE  EE10 F009          	lfsr	1,9
   278  001AE2                     copy_data0:
   279  001AE2  0009               	tblrd		*+
   280  001AE4  CFF5 FFEE          	movff	tablat,postinc0
   281  001AE8  50E5               	movf	postdec1,w,c
   282  001AEA  50E1               	movf	fsr1l,w,c
   283  001AEC  E1FA               	bnz	copy_data0
   284                           
   285                           ; Initialize objects allocated to COMRAM (22 bytes)
   286                           ; load TBLPTR registers with __pidataCOMRAM
   287  001AEE  0E7E               	movlw	low __pidataCOMRAM
   288  001AF0  6EF6               	movwf	tblptrl,c
   289  001AF2  0E1E               	movlw	high __pidataCOMRAM
   290  001AF4  6EF7               	movwf	tblptrh,c
   291  001AF6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   292  001AF8  6EF8               	movwf	tblptru,c
   293  001AFA  EE00  F067         	lfsr	0,__pdataCOMRAM
   294  001AFE  EE10 F016          	lfsr	1,22
   295  001B02                     copy_data1:
   296  001B02  0009               	tblrd		*+
   297  001B04  CFF5 FFEE          	movff	tablat,postinc0
   298  001B08  50E5               	movf	postdec1,w,c
   299  001B0A  50E1               	movf	fsr1l,w,c
   300  001B0C  E1FA               	bnz	copy_data1
   301                           
   302                           ; Clear objects allocated to BANK0 (78 bytes)
   303  001B0E  EE00  F080         	lfsr	0,__pbssBANK0
   304  001B12  0E4E               	movlw	78
   305  001B14                     clear_0:
   306  001B14  6AEE               	clrf	postinc0,c
   307  001B16  06E8               	decf	wreg,f,c
   308  001B18  E1FD               	bnz	clear_0
   309                           
   310                           ; Clear objects allocated to COMRAM (59 bytes)
   311  001B1A  EE00  F001         	lfsr	0,__pbssCOMRAM
   312  001B1E  0E3B               	movlw	59
   313  001B20                     clear_1:
   314  001B20  6AEE               	clrf	postinc0,c
   315  001B22  06E8               	decf	wreg,f,c
   316  001B24  E1FD               	bnz	clear_1
   317  001B26                     end_of_initialization:
   318                           	opt stack 0
   319  001B26                     __end_of__initialization:
   320                           	opt stack 0
   321  001B26  907D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   322  001B28  927D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   323  001B2A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   324  001B2C  6EF8               	movwf	tblptru,c
   325  001B2E  0100               	movlb	0
   326  001B30  EF86  F000         	goto	_main	;jump to C main() function
   327                           tblptru	equ	0xFF8
   328                           tblptrh	equ	0xFF7
   329                           tblptrl	equ	0xFF6
   330                           tablat	equ	0xFF5
   331                           prodl	equ	0xFF3
   332                           intcon	equ	0xFF2
   333                           intcon2	equ	0xFF1
   334                           intcon3	equ	0xFF0
   335                           postinc0	equ	0xFEE
   336                           wreg	equ	0xFE8
   337                           postdec1	equ	0xFE5
   338                           fsr1l	equ	0xFE1
   339                           indf2	equ	0xFDF
   340                           postinc2	equ	0xFDE
   341                           postdec2	equ	0xFDD
   342                           fsr2h	equ	0xFDA
   343                           fsr2l	equ	0xFD9
   344                           status	equ	0xFD8
   345                           
   346                           	psect	bssCOMRAM
   347  000001                     __pbssCOMRAM:
   348                           	opt stack 0
   349  000001                     _ui_buff:
   350                           	opt stack 0
   351  000001                     	ds	12
   352  00000D                     _ui:
   353                           	opt stack 0
   354  00000D                     	ds	11
   355  000018                     _si_mic_flag:
   356                           	opt stack 0
   357  000018                     	ds	5
   358  00001D                     _tim_cnt:
   359                           	opt stack 0
   360  00001D                     	ds	4
   361  000021                     _tim_ui:
   362                           	opt stack 0
   363  000021                     	ds	2
   364  000023                     chrg_task@cheg_num_d:
   365                           	opt stack 0
   366  000023                     	ds	2
   367  000025                     _kl_init:
   368                           	opt stack 0
   369  000025                     	ds	1
   370  000026                     _smoing:
   371                           	opt stack 0
   372  000026                     	ds	1
   373  000027                     _timout:
   374                           	opt stack 0
   375  000027                     	ds	1
   376  000028                     _si_mic_state:
   377                           	opt stack 0
   378  000028                     	ds	1
   379  000029                     _USART_BUF:
   380                           	opt stack 0
   381  000029                     	ds	1
   382  00002A                     _pwm_cnt:
   383                           	opt stack 0
   384  00002A                     	ds	1
   385  00002B                     _adc_begin:
   386                           	opt stack 0
   387  00002B                     	ds	1
   388  00002C                     _adc_cnt:
   389                           	opt stack 0
   390  00002C                     	ds	1
   391  00002D                     _adc_flag:
   392                           	opt stack 0
   393  00002D                     	ds	1
   394  00002E                     _pwm_flag:
   395                           	opt stack 0
   396  00002E                     	ds	1
   397  00002F                     _lowbat_init:
   398                           	opt stack 0
   399  00002F                     	ds	1
   400  000030                     _pw_mode:
   401                           	opt stack 0
   402  000030                     	ds	1
   403  000031                     _ts_cnt:
   404                           	opt stack 0
   405  000031                     	ds	1
   406  000032                     _key_cnt_flag:
   407                           	opt stack 0
   408  000032                     	ds	1
   409  000033                     _key_cnt:
   410                           	opt stack 0
   411  000033                     	ds	1
   412  000034                     _chrg_cnt:
   413                           	opt stack 0
   414  000034                     	ds	1
   415  000035                     _full:
   416                           	opt stack 0
   417  000035                     	ds	1
   418  000036                     _chrg_o:
   419                           	opt stack 0
   420  000036                     	ds	1
   421  000037                     _ts:
   422                           	opt stack 0
   423  000037                     	ds	1
   424  000038                     _yd:
   425                           	opt stack 0
   426  000038                     	ds	1
   427  000039                     _cb_o:
   428                           	opt stack 0
   429  000039                     	ds	1
   430  00003A                     _zz_p:
   431                           	opt stack 0
   432  00003A                     	ds	1
   433  00003B                     _zz_begin:
   434                           	opt stack 0
   435  00003B                     	ds	1
   436                           tblptru	equ	0xFF8
   437                           tblptrh	equ	0xFF7
   438                           tblptrl	equ	0xFF6
   439                           tablat	equ	0xFF5
   440                           prodl	equ	0xFF3
   441                           intcon	equ	0xFF2
   442                           intcon2	equ	0xFF1
   443                           intcon3	equ	0xFF0
   444                           postinc0	equ	0xFEE
   445                           wreg	equ	0xFE8
   446                           postdec1	equ	0xFE5
   447                           fsr1l	equ	0xFE1
   448                           indf2	equ	0xFDF
   449                           postinc2	equ	0xFDE
   450                           postdec2	equ	0xFDD
   451                           fsr2h	equ	0xFDA
   452                           fsr2l	equ	0xFD9
   453                           status	equ	0xFD8
   454                           
   455                           	psect	dataCOMRAM
   456  000067                     __pdataCOMRAM:
   457                           	opt stack 0
   458  000067                     _ui_ld:
   459                           	opt stack 0
   460  000067                     	ds	5
   461  00006C                     _pw_t:
   462                           	opt stack 0
   463  00006C                     	ds	4
   464  000070                     _bat:
   465                           	opt stack 0
   466  000070                     	ds	3
   467  000073                     _pwm_bat:
   468                           	opt stack 0
   469  000073                     	ds	2
   470  000075                     _cfg_flag:
   471                           	opt stack 0
   472  000075                     	ds	1
   473  000076                     _pw_add_flag:
   474                           	opt stack 0
   475  000076                     	ds	1
   476  000077                     _key_o:
   477                           	opt stack 0
   478  000077                     	ds	1
   479  000078                     _chrg_num:
   480                           	opt stack 0
   481  000078                     	ds	1
   482  000079                     _chrging:
   483                           	opt stack 0
   484  000079                     	ds	1
   485  00007A                     _zz:
   486                           	opt stack 0
   487  00007A                     	ds	1
   488  00007B                     _ui_id:
   489                           	opt stack 0
   490  00007B                     	ds	1
   491  00007C                     _pw:
   492                           	opt stack 0
   493  00007C                     	ds	1
   494                           tblptru	equ	0xFF8
   495                           tblptrh	equ	0xFF7
   496                           tblptrl	equ	0xFF6
   497                           tablat	equ	0xFF5
   498                           prodl	equ	0xFF3
   499                           intcon	equ	0xFF2
   500                           intcon2	equ	0xFF1
   501                           intcon3	equ	0xFF0
   502                           postinc0	equ	0xFEE
   503                           wreg	equ	0xFE8
   504                           postdec1	equ	0xFE5
   505                           fsr1l	equ	0xFE1
   506                           indf2	equ	0xFDF
   507                           postinc2	equ	0xFDE
   508                           postdec2	equ	0xFDD
   509                           fsr2h	equ	0xFDA
   510                           fsr2l	equ	0xFD9
   511                           status	equ	0xFD8
   512                           
   513                           	psect	bssBANK0
   514  000080                     __pbssBANK0:
   515                           	opt stack 0
   516  000080                     _zz_:
   517                           	opt stack 0
   518  000080                     	ds	6
   519  000086                     _task_list:
   520                           	opt stack 0
   521  000086                     	ds	72
   522                           tblptru	equ	0xFF8
   523                           tblptrh	equ	0xFF7
   524                           tblptrl	equ	0xFF6
   525                           tablat	equ	0xFF5
   526                           prodl	equ	0xFF3
   527                           intcon	equ	0xFF2
   528                           intcon2	equ	0xFF1
   529                           intcon3	equ	0xFF0
   530                           postinc0	equ	0xFEE
   531                           wreg	equ	0xFE8
   532                           postdec1	equ	0xFE5
   533                           fsr1l	equ	0xFE1
   534                           indf2	equ	0xFDF
   535                           postinc2	equ	0xFDE
   536                           postdec2	equ	0xFDD
   537                           fsr2h	equ	0xFDA
   538                           fsr2l	equ	0xFD9
   539                           status	equ	0xFD8
   540                           
   541                           	psect	dataBANK0
   542  0000CE                     __pdataBANK0:
   543                           	opt stack 0
   544  0000CE                     _pwm:
   545                           	opt stack 0
   546  0000CE                     	ds	9
   547                           tblptru	equ	0xFF8
   548                           tblptrh	equ	0xFF7
   549                           tblptrl	equ	0xFF6
   550                           tablat	equ	0xFF5
   551                           prodl	equ	0xFF3
   552                           intcon	equ	0xFF2
   553                           intcon2	equ	0xFF1
   554                           intcon3	equ	0xFF0
   555                           postinc0	equ	0xFEE
   556                           wreg	equ	0xFE8
   557                           postdec1	equ	0xFE5
   558                           fsr1l	equ	0xFE1
   559                           indf2	equ	0xFDF
   560                           postinc2	equ	0xFDE
   561                           postdec2	equ	0xFDD
   562                           fsr2h	equ	0xFDA
   563                           fsr2l	equ	0xFD9
   564                           status	equ	0xFD8
   565                           
   566                           	psect	cstackBANK0
   567  0000D7                     __pcstackBANK0:
   568                           	opt stack 0
   569  0000D7                     main@b_:
   570                           	opt stack 0
   571                           
   572                           ; 2 bytes @ 0x0
   573  0000D7                     	ds	2
   574                           tblptru	equ	0xFF8
   575                           tblptrh	equ	0xFF7
   576                           tblptrl	equ	0xFF6
   577                           tablat	equ	0xFF5
   578                           prodl	equ	0xFF3
   579                           intcon	equ	0xFF2
   580                           intcon2	equ	0xFF1
   581                           intcon3	equ	0xFF0
   582                           postinc0	equ	0xFEE
   583                           wreg	equ	0xFE8
   584                           postdec1	equ	0xFE5
   585                           fsr1l	equ	0xFE1
   586                           indf2	equ	0xFDF
   587                           postinc2	equ	0xFDE
   588                           postdec2	equ	0xFDD
   589                           fsr2h	equ	0xFDA
   590                           fsr2l	equ	0xFD9
   591                           status	equ	0xFD8
   592                           
   593                           	psect	cstackCOMRAM
   594  00003C                     __pcstackCOMRAM:
   595                           	opt stack 0
   596  00003C                     ??_ISR_l:
   597  00003C                     
   598                           ; 1 bytes @ 0x0
   599  00003C                     	ds	1
   600  00003D                     ??_new_nixie:
   601  00003D                     ?___lmul:
   602                           	opt stack 0
   603  00003D                     sleep_task@task_:
   604                           	opt stack 0
   605  00003D                     task_init@i:
   606                           	opt stack 0
   607  00003D                     ldz@a:
   608                           	opt stack 0
   609  00003D                     ___lbdiv@divisor:
   610                           	opt stack 0
   611  00003D                     add_task_id@interval_ms:
   612                           	opt stack 0
   613  00003D                     ___lmul@multiplier:
   614                           	opt stack 0
   615                           
   616                           ; 4 bytes @ 0x1
   617  00003D                     	ds	1
   618  00003E                     ??_sleep_task:
   619  00003E                     ___lbdiv@dividend:
   620                           	opt stack 0
   621                           
   622                           ; 1 bytes @ 0x2
   623  00003E                     	ds	1
   624  00003F                     ___lbdiv@counter:
   625                           	opt stack 0
   626                           
   627                           ; 1 bytes @ 0x3
   628  00003F                     	ds	1
   629  000040                     ___lbdiv@quotient:
   630                           	opt stack 0
   631  000040                     _new_nixie$6626:
   632                           	opt stack 0
   633                           
   634                           ; 2 bytes @ 0x4
   635  000040                     	ds	1
   636  000041                     add_task_id@suc_max:
   637                           	opt stack 0
   638  000041                     ___lbmod@divisor:
   639                           	opt stack 0
   640  000041                     ___lmul@multiplicand:
   641                           	opt stack 0
   642                           
   643                           ; 4 bytes @ 0x5
   644  000041                     	ds	1
   645  000042                     add_task_id@task_id:
   646                           	opt stack 0
   647  000042                     ___lbmod@dividend:
   648                           	opt stack 0
   649  000042                     _new_nixie$6627:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x6
   653  000042                     	ds	1
   654  000043                     ??_add_task_id:
   655  000043                     ___lbmod@counter:
   656                           	opt stack 0
   657                           
   658                           ; 1 bytes @ 0x7
   659  000043                     	ds	1
   660  000044                     ___lbmod@rem:
   661                           	opt stack 0
   662  000044                     _new_nixie$6628:
   663                           	opt stack 0
   664                           
   665                           ; 2 bytes @ 0x8
   666  000044                     	ds	1
   667  000045                     ___lmul@product:
   668                           	opt stack 0
   669                           
   670                           ; 4 bytes @ 0x9
   671  000045                     	ds	1
   672  000046                     _new_nixie$6629:
   673                           	opt stack 0
   674                           
   675                           ; 2 bytes @ 0xA
   676  000046                     	ds	1
   677  000047                     add_task_id@id:
   678                           	opt stack 0
   679                           
   680                           ; 1 bytes @ 0xB
   681  000047                     	ds	1
   682  000048                     ui_chrg@task_:
   683                           	opt stack 0
   684  000048                     ui_chrgfree@task_:
   685                           	opt stack 0
   686  000048                     ui_chrgfull@task_:
   687                           	opt stack 0
   688  000048                     ui_smoing@task_:
   689                           	opt stack 0
   690  000048                     ui_smoend@task_:
   691                           	opt stack 0
   692  000048                     ui_kl@task_:
   693                           	opt stack 0
   694  000048                     ui_timout@task_:
   695                           	opt stack 0
   696  000048                     ui_begin@task_:
   697                           	opt stack 0
   698  000048                     add_task_id@interval_ticks:
   699                           	opt stack 0
   700                           
   701                           ; 2 bytes @ 0xC
   702  000048                     	ds	1
   703  000049                     ??_ui_smoing:
   704  000049                     ??_ui_begin:
   705  000049                     ??_ui_smoend:
   706  000049                     ?___lldiv:
   707                           	opt stack 0
   708  000049                     ___lldiv@dividend:
   709                           	opt stack 0
   710                           
   711                           ; 4 bytes @ 0xD
   712  000049                     	ds	1
   713  00004A                     key_task@task_:
   714                           	opt stack 0
   715  00004A                     ui_cb@task_:
   716                           	opt stack 0
   717  00004A                     ui_dl_getup@task_:
   718                           	opt stack 0
   719  00004A                     ui_ts_on@task_:
   720                           	opt stack 0
   721  00004A                     ui_ts_off@task_:
   722                           	opt stack 0
   723                           
   724                           ; 1 bytes @ 0xE
   725  00004A                     	ds	1
   726  00004B                     ??_ui_cb:
   727  00004B                     ??_ui_dl_getup:
   728  00004B                     ??_ui_ts_on:
   729  00004B                     ??_ui_ts_off:
   730  00004B                     
   731                           ; 1 bytes @ 0xF
   732  00004B                     	ds	2
   733  00004D                     ___lldiv@divisor:
   734                           	opt stack 0
   735                           
   736                           ; 4 bytes @ 0x11
   737  00004D                     	ds	4
   738  000051                     ___lldiv@quotient:
   739                           	opt stack 0
   740                           
   741                           ; 4 bytes @ 0x15
   742  000051                     	ds	4
   743  000055                     ___lldiv@counter:
   744                           	opt stack 0
   745                           
   746                           ; 1 bytes @ 0x19
   747  000055                     	ds	1
   748  000056                     ??_get_load:
   749  000056                     ?_get_bat:
   750                           	opt stack 0
   751                           
   752                           ; 2 bytes @ 0x1A
   753  000056                     	ds	2
   754  000058                     ??_get_bat:
   755  000058                     get_load@temp:
   756                           	opt stack 0
   757                           
   758                           ; 4 bytes @ 0x1C
   759  000058                     	ds	2
   760  00005A                     get_bat@ttt:
   761                           	opt stack 0
   762                           
   763                           ; 4 bytes @ 0x1E
   764  00005A                     	ds	2
   765  00005C                     cb_task@task_:
   766                           	opt stack 0
   767                           
   768                           ; 1 bytes @ 0x20
   769  00005C                     	ds	1
   770  00005D                     ??_cb_task:
   771                           
   772                           ; 1 bytes @ 0x21
   773  00005D                     	ds	1
   774  00005E                     bat_task@task_:
   775                           	opt stack 0
   776  00005E                     chrg_task@task_:
   777                           	opt stack 0
   778  00005E                     si_mic_task@task_:
   779                           	opt stack 0
   780                           
   781                           ; 1 bytes @ 0x22
   782  00005E                     	ds	1
   783  00005F                     ??_si_mic_task:
   784  00005F                     ??_bat_task:
   785  00005F                     cb_task@zz_t:
   786                           	opt stack 0
   787                           
   788                           ; 2 bytes @ 0x23
   789  00005F                     	ds	1
   790  000060                     _si_mic_task$4421:
   791                           	opt stack 0
   792                           
   793                           ; 4 bytes @ 0x24
   794  000060                     	ds	1
   795  000061                     bat_task@b:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0x25
   799  000061                     	ds	3
   800  000064                     find_task@task_:
   801                           	opt stack 0
   802                           
   803                           ; 1 bytes @ 0x28
   804  000064                     	ds	1
   805  000065                     ??_main:
   806                           
   807                           ; 1 bytes @ 0x29
   808  000065                     	ds	2
   809                           tblptru	equ	0xFF8
   810                           tblptrh	equ	0xFF7
   811                           tblptrl	equ	0xFF6
   812                           tablat	equ	0xFF5
   813                           prodl	equ	0xFF3
   814                           intcon	equ	0xFF2
   815                           intcon2	equ	0xFF1
   816                           intcon3	equ	0xFF0
   817                           postinc0	equ	0xFEE
   818                           wreg	equ	0xFE8
   819                           postdec1	equ	0xFE5
   820                           fsr1l	equ	0xFE1
   821                           indf2	equ	0xFDF
   822                           postinc2	equ	0xFDE
   823                           postdec2	equ	0xFDD
   824                           fsr2h	equ	0xFDA
   825                           fsr2l	equ	0xFD9
   826                           status	equ	0xFD8
   827                           
   828 ;;
   829 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   830 ;;
   831 ;; *************** function _main *****************
   832 ;; Defined at:
   833 ;;		line 71 in file ".\src\main.c"
   834 ;; Parameters:    Size  Location     Type
   835 ;;		None
   836 ;; Auto vars:     Size  Location     Type
   837 ;;  b_              2    0[BANK0 ] unsigned int 
   838 ;; Return value:  Size  Location     Type
   839 ;;                  1    wreg      void 
   840 ;; Registers used:
   841 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   842 ;; Tracked objects:
   843 ;;		On entry : 0/0
   844 ;;		On exit  : 3F/0
   845 ;;		Unchanged: 0/0
   846 ;; Data sizes:     COMRAM   BANK0
   847 ;;      Params:         0       0
   848 ;;      Locals:         0       2
   849 ;;      Temps:          2       0
   850 ;;      Totals:         2       2
   851 ;;Total ram usage:        4 bytes
   852 ;; Hardware stack levels required when called:    6
   853 ;; This function calls:
   854 ;;		___lldiv
   855 ;;		___lmul
   856 ;;		_add_task_id
   857 ;;		_bat_task
   858 ;;		_cb_task
   859 ;;		_chrg_task
   860 ;;		_cmp0_init
   861 ;;		_find_task
   862 ;;		_get_bat
   863 ;;		_gpio_init
   864 ;;		_key_task
   865 ;;		_si_mic_task
   866 ;;		_sleep_task
   867 ;;		_task_init
   868 ;;		_timer0_init
   869 ;;		_timer1_init
   870 ;;		_timer2_init
   871 ;; This function is called by:
   872 ;;		Startup code after reset
   873 ;; This function uses a non-reentrant model
   874 ;;
   875                           
   876                           	psect	text0
   877  00010C                     __ptext0:
   878                           	opt stack 0
   879  00010C                     _main:
   880                           	opt stack 2
   881                           
   882                           ;main.c: 73: gpio_init();
   883                           
   884                           ;incstack = 0
   885  00010C  EC06  F00F         	call	_gpio_init	;wreg free
   886                           
   887                           ;main.c: 74: timer0_init();
   888  000110  EC55  F00F         	call	_timer0_init	;wreg free
   889                           
   890                           ;main.c: 76: timer1_init();
   891  000114  EC19  F00F         	call	_timer1_init	;wreg free
   892                           
   893                           ;main.c: 77: cmp0_init();
   894  000118  EC33  F00F         	call	_cmp0_init	;wreg free
   895                           
   896                           ;main.c: 78: timer2_init();
   897  00011C  EC4A  F00F         	call	_timer2_init	;wreg free
   898                           
   899                           ;main.c: 79: task_init();
   900  000120  ECE0  F00E         	call	_task_init	;wreg free
   901                           
   902                           ;main.c: 85: cb_o=PINB1;
   903  000124  EC15  F00B         	call	PL46	;call to abstracted procedure
   904                           
   905                           ;main.c: 159: ui_id=6;
   906  000128  0E06               	movlw	6
   907  00012A  6E7B               	movwf	_ui_id,c
   908                           
   909                           ;main.c: 160: add_task_id(9,40,0,0);
   910  00012C  0E28               	movlw	40
   911  00012E  EC17  F007         	call	PL6	;call to abstracted procedure
   912  000132  6A41               	clrf	add_task_id@suc_max,c
   913  000134  6A42               	clrf	add_task_id@task_id,c
   914  000136  0E09               	movlw	9
   915  000138  EC1F  F00B         	call	_add_task_id
   916                           
   917                           ;main.c: 162: add_task_id(14,1000,0,1);
   918  00013C  0EE8               	movlw	232
   919  00013E  6E3D               	movwf	add_task_id@interval_ms,c
   920  000140  0E03               	movlw	3
   921  000142  6E3E               	movwf	add_task_id@interval_ms+1,c
   922  000144  6A3F               	clrf	add_task_id@interval_ms+2,c
   923  000146  6A40               	clrf	add_task_id@interval_ms+3,c
   924  000148  6A41               	clrf	add_task_id@suc_max,c
   925  00014A  0E01               	movlw	1
   926  00014C  6E42               	movwf	add_task_id@task_id,c
   927  00014E  0E0E               	movlw	14
   928  000150  EC1F  F00B         	call	_add_task_id
   929                           
   930                           ;main.c: 163: unsigned int b_=get_bat();
   931  000154  ECF7  F00D         	call	_get_bat	;wreg free
   932  000158  C056  F0D7         	movff	?_get_bat,main@b_
   933  00015C  C057  F0D8         	movff	?_get_bat+1,main@b_+1
   934                           
   935                           ;main.c: 165: if((bat.bat>b_)||((bat.bat+50)<=b_))
   936  000160  5071               	movf	_bat+1,w,c
   937  000162  0100               	movlb	0	; () banked
   938  000164  5DD7               	subwf	main@b_& (0+255),w,b
   939  000166  5072               	movf	_bat+2,w,c
   940  000168  59D8               	subwfb	(main@b_+1)& (0+255),w,b
   941  00016A  E30B               	bnc	l5165
   942                           
   943                           ; BSR set to: 0
   944  00016C  0E32               	movlw	50
   945  00016E  2471               	addwf	_bat+1,w,c
   946  000170  6E65               	movwf	??_main& (0+255),c
   947  000172  0E00               	movlw	0
   948  000174  2072               	addwfc	_bat+2,w,c
   949  000176  6E66               	movwf	(??_main+1)& (0+255),c
   950  000178  5065               	movf	??_main,w,c
   951  00017A  5DD7               	subwf	main@b_& (0+255),w,b
   952  00017C  5066               	movf	??_main+1,w,c
   953  00017E  59D8               	subwfb	(main@b_+1)& (0+255),w,b
   954  000180  E304               	bnc	l18811
   955  000182                     l5165:
   956                           
   957                           ; BSR set to: 0
   958                           ;main.c: 166: {
   959                           ;main.c: 167: bat.bat=b_;
   960  000182  C0D7  F071         	movff	main@b_,_bat+1
   961  000186  C0D8  F072         	movff	main@b_+1,_bat+2
   962  00018A                     l18811:
   963                           
   964                           ; BSR set to: 0
   965                           ;main.c: 168: }
   966                           ;main.c: 169: if( bat.bat<=317)
   967  00018A  EC27  F005         	call	PL86	;call to abstracted procedure
   968  00018E  E203               	bc	l18815
   969                           
   970                           ; BSR set to: 0
   971                           ;main.c: 170: {
   972                           ;main.c: 171: bat.dian=0;
   973  000190  6A70               	clrf	_bat,c
   974                           
   975                           ;main.c: 173: chrg_num=0;
   976  000192  6A78               	clrf	_chrg_num,c
   977                           
   978                           ;main.c: 176: }
   979  000194  D019               	goto	l18829
   980  000196                     l18815:
   981                           
   982                           ; BSR set to: 0
   983                           ;main.c: 177: else if ( bat.bat<=345)
   984  000196  EC2C  F005         	call	PL88	;call to abstracted procedure
   985  00019A  E204               	bc	l18819
   986                           
   987                           ; BSR set to: 0
   988                           ;main.c: 178: {
   989                           ;main.c: 179: bat.dian=1;
   990  00019C  0E01               	movlw	1
   991  00019E  6E70               	movwf	_bat,c
   992                           
   993                           ;main.c: 181: chrg_num=15;
   994  0001A0  0E0F               	movlw	15
   995  0001A2  D011               	goto	L1
   996  0001A4                     l18819:
   997                           
   998                           ; BSR set to: 0
   999                           ;main.c: 184: else if ( bat.bat<=370)
  1000  0001A4  EC13  F005         	call	PL72	;call to abstracted procedure
  1001  0001A8  E204               	bc	l18823
  1002                           
  1003                           ; BSR set to: 0
  1004                           ;main.c: 185: {
  1005                           ;main.c: 186: bat.dian=2;
  1006  0001AA  0E02               	movlw	2
  1007  0001AC  6E70               	movwf	_bat,c
  1008                           
  1009                           ;main.c: 188: chrg_num=40;
  1010  0001AE  0E28               	movlw	40
  1011  0001B0  D00A               	goto	L1
  1012  0001B2                     l18823:
  1013                           
  1014                           ; BSR set to: 0
  1015                           ;main.c: 191: else if ( bat.bat<=390)
  1016  0001B2  EC18  F005         	call	PL74	;call to abstracted procedure
  1017  0001B6  E204               	bc	l18827
  1018                           
  1019                           ; BSR set to: 0
  1020                           ;main.c: 192: {
  1021                           ;main.c: 193: bat.dian=3;
  1022  0001B8  0E03               	movlw	3
  1023  0001BA  6E70               	movwf	_bat,c
  1024                           
  1025                           ;main.c: 195: chrg_num=65;
  1026  0001BC  0E41               	movlw	65
  1027  0001BE  D003               	goto	L1
  1028  0001C0                     l18827:
  1029                           
  1030                           ; BSR set to: 0
  1031                           ;main.c: 198: else
  1032                           ;main.c: 199: {
  1033                           ;main.c: 200: bat.dian=4;
  1034  0001C0  0E04               	movlw	4
  1035  0001C2  6E70               	movwf	_bat,c
  1036                           
  1037                           ;main.c: 202: chrg_num=85;
  1038  0001C4  0E55               	movlw	85
  1039  0001C6                     L1:
  1040  0001C6  6E78               	movwf	_chrg_num,c
  1041  0001C8                     l18829:
  1042                           
  1043                           ; BSR set to: 0
  1044                           ;main.c: 204: }
  1045                           ;main.c: 213: if((get_bat()<=330)&&PINA4)
  1046  0001C8  ECF7  F00D         	call	_get_bat	;wreg free
  1047  0001CC  0E4B               	movlw	75
  1048  0001CE  5C56               	subwf	?_get_bat,w,c
  1049  0001D0  0E01               	movlw	1
  1050  0001D2  5857               	subwfb	?_get_bat+1,w,c
  1051  0001D4  E207               	bc	l18841
  1052  0001D6  A886               	btfss	3974,4,c	;volatile
  1053  0001D8  D005               	goto	l18841
  1054                           
  1055                           ;main.c: 214: {
  1056                           ;main.c: 215: bat.bat=315;
  1057  0001DA  0E01               	movlw	1
  1058  0001DC  6E72               	movwf	_bat+2,c
  1059  0001DE  0E3B               	movlw	59
  1060                           
  1061                           ;main.c: 216: bat.dian=0;
  1062                           
  1063                           ;main.c: 217: pwm.duty=0;
  1064                           
  1065                           ; BSR set to: 0
  1066                           ;main.c: 218: lowbat_init=0;
  1067  0001E0  EC02  F005         	call	PL60	;call to abstracted procedure
  1068  0001E4                     l18841:
  1069                           
  1070                           ;main.c: 219: }
  1071                           ;main.c: 223: add_task_id(13,40,0,2);
  1072  0001E4  0E28               	movlw	40
  1073  0001E6  EC17  F007         	call	PL6	;call to abstracted procedure
  1074  0001EA  6A41               	clrf	add_task_id@suc_max,c
  1075  0001EC  0E02               	movlw	2
  1076  0001EE  6E42               	movwf	add_task_id@task_id,c
  1077  0001F0  0E0D               	movlw	13
  1078  0001F2  EC1F  F00B         	call	_add_task_id
  1079                           
  1080                           ;main.c: 224: add_task_id(12,100,0,3);
  1081  0001F6  0E64               	movlw	100
  1082  0001F8  EC17  F007         	call	PL6	;call to abstracted procedure
  1083  0001FC  6A41               	clrf	add_task_id@suc_max,c
  1084  0001FE  0E03               	movlw	3
  1085  000200  6E42               	movwf	add_task_id@task_id,c
  1086  000202  0E0C               	movlw	12
  1087  000204  EC1F  F00B         	call	_add_task_id
  1088                           
  1089                           ;main.c: 225: add_task_id(11,70,0,4);
  1090  000208  0E46               	movlw	70
  1091  00020A  EC17  F007         	call	PL6	;call to abstracted procedure
  1092  00020E  6A41               	clrf	add_task_id@suc_max,c
  1093  000210  0E04               	movlw	4
  1094  000212  6E42               	movwf	add_task_id@task_id,c
  1095  000214  0E0B               	movlw	11
  1096  000216  EC1F  F00B         	call	_add_task_id
  1097                           
  1098                           ;main.c: 226: add_task_id(15,200,0,5);
  1099  00021A  0EC8               	movlw	200
  1100  00021C  EC17  F007         	call	PL6	;call to abstracted procedure
  1101  000220  6A41               	clrf	add_task_id@suc_max,c
  1102  000222  0E05               	movlw	5
  1103  000224  6E42               	movwf	add_task_id@task_id,c
  1104  000226  0E0F               	movlw	15
  1105  000228  EC1F  F00B         	call	_add_task_id
  1106                           
  1107                           ;main.c: 229: add_task_id(16,300,3,ui_id);
  1108  00022C  0E2C               	movlw	44
  1109  00022E  DBB7               	call	PL14	;call to abstracted procedure
  1110  000230  EC22  F005         	call	PL82	;call to abstracted procedure
  1111  000234  0E10               	movlw	16
  1112  000236  EC1F  F00B         	call	_add_task_id
  1113                           
  1114                           ;main.c: 232: pwm.load_t=300;
  1115  00023A  0E01               	movlw	1
  1116  00023C  0100               	movlb	0	; () banked
  1117  00023E  6FD6               	movwf	(_pwm+8)& (0+255),b
  1118  000240  0E2C               	movlw	44
  1119  000242  6FD5               	movwf	(_pwm+7)& (0+255),b
  1120                           
  1121                           ; BSR set to: 0
  1122                           ;main.c: 233: yd=PINB1;
  1123  000244  DBFA               	call	PL76	;call to abstracted procedure
  1124  000246                     l18855:
  1125                           
  1126                           ; BSR set to: 0
  1127                           ;main.c: 267: {
  1128                           ;main.c: 268: if(task_list[0].active && task_list[0].ready) { GIE=0;PEIE=0; task_list[0]
      +                          .ready = 0; GIE=1;PEIE=1; si_mic_task(&task_list[0]); if(task_list[0].maxSuc) { task_lis
      +                          t[0].sucCnt++; if(task_list[0].sucCnt==task_list[0].maxSuc) { task_list[0].active=0; } }
  1129  000246  518B               	movf	(_task_list+5)& (0+255),w,b
  1130  000248  E014               	bz	l18871
  1131                           
  1132                           ; BSR set to: 0
  1133  00024A  518C               	movf	(_task_list+6)& (0+255),w,b
  1134  00024C  E012               	bz	l18871
  1135                           
  1136                           ; BSR set to: 0
  1137  00024E  9EF2               	bcf	intcon,7,c	;volatile
  1138  000250  9CF2               	bcf	intcon,6,c	;volatile
  1139  000252  6B8C               	clrf	(_task_list+6)& (0+255),b
  1140  000254  8EF2               	bsf	intcon,7,c	;volatile
  1141  000256  8CF2               	bsf	intcon,6,c	;volatile
  1142                           
  1143                           ; BSR set to: 0
  1144  000258  0E86               	movlw	low _task_list
  1145  00025A  6E5E               	movwf	si_mic_task@task_,c
  1146  00025C  EC2D  F006         	call	_si_mic_task	;wreg free
  1147  000260  0100               	movlb	0	; () banked
  1148  000262  518D               	movf	(_task_list+7)& (0+255),w,b
  1149  000264  E047               	bz	l18919
  1150                           
  1151                           ; BSR set to: 0
  1152  000266  2B8E               	incf	(_task_list+8)& (0+255),f,b
  1153                           
  1154                           ; BSR set to: 0
  1155  000268  518D               	movf	(_task_list+7)& (0+255),w,b
  1156  00026A  198E               	xorwf	(_task_list+8)& (0+255),w,b
  1157  00026C  E143               	bnz	l18919
  1158                           
  1159                           ; BSR set to: 0
  1160  00026E  6B8B               	clrf	(_task_list+5)& (0+255),b
  1161  000270  D041               	goto	l18919
  1162  000272                     l18871:
  1163                           
  1164                           ; BSR set to: 0
  1165  000272  5194               	movf	(_task_list+14)& (0+255),w,b
  1166  000274  E014               	bz	l18887
  1167                           
  1168                           ; BSR set to: 0
  1169  000276  5195               	movf	(_task_list+15)& (0+255),w,b
  1170  000278  E012               	bz	l18887
  1171                           
  1172                           ; BSR set to: 0
  1173  00027A  9EF2               	bcf	intcon,7,c	;volatile
  1174  00027C  9CF2               	bcf	intcon,6,c	;volatile
  1175  00027E  6B95               	clrf	(_task_list+15)& (0+255),b
  1176  000280  8EF2               	bsf	intcon,7,c	;volatile
  1177  000282  8CF2               	bsf	intcon,6,c	;volatile
  1178                           
  1179                           ; BSR set to: 0
  1180  000284  0E8F               	movlw	low (_task_list+9)
  1181  000286  6E5E               	movwf	bat_task@task_,c
  1182  000288  EC7C  F00C         	call	_bat_task	;wreg free
  1183  00028C  0100               	movlb	0	; () banked
  1184  00028E  5196               	movf	(_task_list+16)& (0+255),w,b
  1185  000290  E031               	bz	l18919
  1186                           
  1187                           ; BSR set to: 0
  1188  000292  2B97               	incf	(_task_list+17)& (0+255),f,b
  1189                           
  1190                           ; BSR set to: 0
  1191  000294  5196               	movf	(_task_list+16)& (0+255),w,b
  1192  000296  1997               	xorwf	(_task_list+17)& (0+255),w,b
  1193  000298  E12D               	bnz	l18919
  1194                           
  1195                           ; BSR set to: 0
  1196  00029A  6B94               	clrf	(_task_list+14)& (0+255),b
  1197  00029C  D02B               	goto	l18919
  1198  00029E                     l18887:
  1199                           
  1200                           ; BSR set to: 0
  1201  00029E  519D               	movf	(_task_list+23)& (0+255),w,b
  1202  0002A0  E014               	bz	l18903
  1203                           
  1204                           ; BSR set to: 0
  1205  0002A2  519E               	movf	(_task_list+24)& (0+255),w,b
  1206  0002A4  E012               	bz	l18903
  1207                           
  1208                           ; BSR set to: 0
  1209  0002A6  9EF2               	bcf	intcon,7,c	;volatile
  1210  0002A8  9CF2               	bcf	intcon,6,c	;volatile
  1211  0002AA  6B9E               	clrf	(_task_list+24)& (0+255),b
  1212  0002AC  8EF2               	bsf	intcon,7,c	;volatile
  1213  0002AE  8CF2               	bsf	intcon,6,c	;volatile
  1214                           
  1215                           ; BSR set to: 0
  1216  0002B0  0E98               	movlw	low (_task_list+18)
  1217  0002B2  6E4A               	movwf	key_task@task_,c
  1218  0002B4  EC8E  F008         	call	_key_task	;wreg free
  1219  0002B8  0100               	movlb	0	; () banked
  1220  0002BA  519F               	movf	(_task_list+25)& (0+255),w,b
  1221  0002BC  E01B               	bz	l18919
  1222                           
  1223                           ; BSR set to: 0
  1224  0002BE  2BA0               	incf	(_task_list+26)& (0+255),f,b
  1225                           
  1226                           ; BSR set to: 0
  1227  0002C0  519F               	movf	(_task_list+25)& (0+255),w,b
  1228  0002C2  19A0               	xorwf	(_task_list+26)& (0+255),w,b
  1229  0002C4  E117               	bnz	l18919
  1230                           
  1231                           ; BSR set to: 0
  1232  0002C6  6B9D               	clrf	(_task_list+23)& (0+255),b
  1233  0002C8  D015               	goto	l18919
  1234  0002CA                     l18903:
  1235                           
  1236                           ; BSR set to: 0
  1237  0002CA  51A6               	movf	(_task_list+32)& (0+255),w,b
  1238  0002CC  E013               	bz	l18919
  1239                           
  1240                           ; BSR set to: 0
  1241  0002CE  51A7               	movf	(_task_list+33)& (0+255),w,b
  1242  0002D0  E011               	bz	l18919
  1243                           
  1244                           ; BSR set to: 0
  1245  0002D2  9EF2               	bcf	intcon,7,c	;volatile
  1246  0002D4  9CF2               	bcf	intcon,6,c	;volatile
  1247  0002D6  6BA7               	clrf	(_task_list+33)& (0+255),b
  1248  0002D8  8EF2               	bsf	intcon,7,c	;volatile
  1249  0002DA  8CF2               	bsf	intcon,6,c	;volatile
  1250                           
  1251                           ; BSR set to: 0
  1252  0002DC  0EA1               	movlw	low (_task_list+27)
  1253  0002DE  6E5E               	movwf	chrg_task@task_,c
  1254  0002E0  ECDD  F007         	call	_chrg_task	;wreg free
  1255  0002E4  0100               	movlb	0	; () banked
  1256  0002E6  51A8               	movf	(_task_list+34)& (0+255),w,b
  1257  0002E8  E005               	bz	l18919
  1258                           
  1259                           ; BSR set to: 0
  1260  0002EA  2BA9               	incf	(_task_list+35)& (0+255),f,b
  1261                           
  1262                           ; BSR set to: 0
  1263  0002EC  51A8               	movf	(_task_list+34)& (0+255),w,b
  1264  0002EE  19A9               	xorwf	(_task_list+35)& (0+255),w,b
  1265  0002F0  E101               	bnz	l18919
  1266                           
  1267                           ; BSR set to: 0
  1268  0002F2  6BA6               	clrf	(_task_list+32)& (0+255),b
  1269  0002F4                     l18919:
  1270                           
  1271                           ; BSR set to: 0
  1272  0002F4  51AF               	movf	(_task_list+41)& (0+255),w,b
  1273  0002F6  E014               	bz	l18935
  1274                           
  1275                           ; BSR set to: 0
  1276  0002F8  51B0               	movf	(_task_list+42)& (0+255),w,b
  1277  0002FA  E012               	bz	l18935
  1278                           
  1279                           ; BSR set to: 0
  1280  0002FC  9EF2               	bcf	intcon,7,c	;volatile
  1281  0002FE  9CF2               	bcf	intcon,6,c	;volatile
  1282  000300  6BB0               	clrf	(_task_list+42)& (0+255),b
  1283  000302  8EF2               	bsf	intcon,7,c	;volatile
  1284  000304  8CF2               	bsf	intcon,6,c	;volatile
  1285                           
  1286                           ; BSR set to: 0
  1287  000306  0EAA               	movlw	low (_task_list+36)
  1288  000308  6E5C               	movwf	cb_task@task_,c
  1289  00030A  ECCF  F00A         	call	_cb_task	;wreg free
  1290  00030E  0100               	movlb	0	; () banked
  1291  000310  51B1               	movf	(_task_list+43)& (0+255),w,b
  1292  000312  E031               	bz	l18967
  1293                           
  1294                           ; BSR set to: 0
  1295  000314  2BB2               	incf	(_task_list+44)& (0+255),f,b
  1296                           
  1297                           ; BSR set to: 0
  1298  000316  51B1               	movf	(_task_list+43)& (0+255),w,b
  1299  000318  19B2               	xorwf	(_task_list+44)& (0+255),w,b
  1300  00031A  E12D               	bnz	l18967
  1301                           
  1302                           ; BSR set to: 0
  1303  00031C  6BAF               	clrf	(_task_list+41)& (0+255),b
  1304  00031E  D02B               	goto	l18967
  1305  000320                     l18935:
  1306                           
  1307                           ; BSR set to: 0
  1308  000320  51B8               	movf	(_task_list+50)& (0+255),w,b
  1309  000322  E014               	bz	l18951
  1310                           
  1311                           ; BSR set to: 0
  1312  000324  51B9               	movf	(_task_list+51)& (0+255),w,b
  1313  000326  E012               	bz	l18951
  1314                           
  1315                           ; BSR set to: 0
  1316  000328  9EF2               	bcf	intcon,7,c	;volatile
  1317  00032A  9CF2               	bcf	intcon,6,c	;volatile
  1318  00032C  6BB9               	clrf	(_task_list+51)& (0+255),b
  1319  00032E  8EF2               	bsf	intcon,7,c	;volatile
  1320  000330  8CF2               	bsf	intcon,6,c	;volatile
  1321                           
  1322                           ; BSR set to: 0
  1323  000332  0EB3               	movlw	low (_task_list+45)
  1324  000334  6E3D               	movwf	sleep_task@task_,c
  1325  000336  EC32  F00D         	call	_sleep_task	;wreg free
  1326  00033A  0100               	movlb	0	; () banked
  1327  00033C  51BA               	movf	(_task_list+52)& (0+255),w,b
  1328  00033E  E01B               	bz	l18967
  1329                           
  1330                           ; BSR set to: 0
  1331  000340  2BBB               	incf	(_task_list+53)& (0+255),f,b
  1332                           
  1333                           ; BSR set to: 0
  1334  000342  51BA               	movf	(_task_list+52)& (0+255),w,b
  1335  000344  19BB               	xorwf	(_task_list+53)& (0+255),w,b
  1336  000346  E117               	bnz	l18967
  1337                           
  1338                           ; BSR set to: 0
  1339  000348  6BB8               	clrf	(_task_list+50)& (0+255),b
  1340  00034A  D015               	goto	l18967
  1341  00034C                     l18951:
  1342                           
  1343                           ; BSR set to: 0
  1344  00034C  51C1               	movf	(_task_list+59)& (0+255),w,b
  1345  00034E  E013               	bz	l18967
  1346                           
  1347                           ; BSR set to: 0
  1348  000350  51C2               	movf	(_task_list+60)& (0+255),w,b
  1349  000352  E011               	bz	l18967
  1350                           
  1351                           ; BSR set to: 0
  1352  000354  9EF2               	bcf	intcon,7,c	;volatile
  1353  000356  9CF2               	bcf	intcon,6,c	;volatile
  1354  000358  6BC2               	clrf	(_task_list+60)& (0+255),b
  1355  00035A  8EF2               	bsf	intcon,7,c	;volatile
  1356  00035C  8CF2               	bsf	intcon,6,c	;volatile
  1357                           
  1358                           ; BSR set to: 0
  1359  00035E  0EBC               	movlw	low (_task_list+54)
  1360  000360  6E64               	movwf	find_task@task_,c
  1361  000362  ECAC  F009         	call	_find_task	;wreg free
  1362  000366  0100               	movlb	0	; () banked
  1363  000368  51C3               	movf	(_task_list+61)& (0+255),w,b
  1364  00036A  E005               	bz	l18967
  1365                           
  1366                           ; BSR set to: 0
  1367  00036C  2BC4               	incf	(_task_list+62)& (0+255),f,b
  1368                           
  1369                           ; BSR set to: 0
  1370  00036E  51C3               	movf	(_task_list+61)& (0+255),w,b
  1371  000370  19C4               	xorwf	(_task_list+62)& (0+255),w,b
  1372  000372  E101               	bnz	l18967
  1373                           
  1374                           ; BSR set to: 0
  1375  000374  6BC1               	clrf	(_task_list+59)& (0+255),b
  1376  000376                     l18967:
  1377                           
  1378                           ; BSR set to: 0
  1379                           ;main.c: 269: if(pwm_flag)
  1380  000376  502E               	movf	_pwm_flag,w,c
  1381  000378  E019               	bz	l18997
  1382                           
  1383                           ; BSR set to: 0
  1384                           ;main.c: 270: {
  1385                           ;main.c: 271: pwm_flag=0;
  1386  00037A  6A2E               	clrf	_pwm_flag,c
  1387                           
  1388                           ; BSR set to: 0
  1389                           ;main.c: 272: if(pwm.duty) { if(pwm.duty<100) { PR3=pwm.duty_t; TMR3=0; T3CON0=0x9b;TMR3
      +                          IF=0;TMR3IE=1;PEIE=1;GIE=1;TMR3ON=1; PA0=0; CMP0IF=0;CMP0IE=1; } else { PA0=0; CMP0IF=0;
      +                          CMP0IE=1; } adc_flag=1; } else { PA0=1; CMP0IE=0;CMP0IF=0; };
  1390  00037C  51CE               	movf	_pwm& (0+255),w,b
  1391  00037E  E013               	bz	l5203
  1392                           
  1393                           ; BSR set to: 0
  1394  000380  0E64               	movlw	100
  1395  000382  61CE               	cpfslt	_pwm& (0+255),b
  1396  000384  D00A               	goto	l5204
  1397                           
  1398                           ; BSR set to: 0
  1399  000386  C0CF  FFB9         	movff	_pwm+1,4025	;volatile
  1400  00038A  6ABA               	clrf	4026,c	;volatile
  1401                           
  1402                           ; BSR set to: 0
  1403  00038C  0E9B               	movlw	155
  1404  00038E  6EB8               	movwf	4024,c	;volatile
  1405                           
  1406                           ; BSR set to: 0
  1407  000390  9AAA               	bcf	4010,5,c	;volatile
  1408                           
  1409                           ; BSR set to: 0
  1410  000392  8AA9               	bsf	4009,5,c	;volatile
  1411                           
  1412                           ; BSR set to: 0
  1413  000394  8CF2               	bsf	intcon,6,c	;volatile
  1414                           
  1415                           ; BSR set to: 0
  1416  000396  8EF2               	bsf	intcon,7,c	;volatile
  1417                           
  1418                           ; BSR set to: 0
  1419  000398  84B8               	bsf	4024,2,c	;volatile
  1420  00039A                     l5204:
  1421                           
  1422                           ; BSR set to: 0
  1423  00039A  9080               	bcf	3968,0,c	;volatile
  1424  00039C  96AA               	bcf	4010,3,c	;volatile
  1425  00039E  86A9               	bsf	4009,3,c	;volatile
  1426                           
  1427                           ; BSR set to: 0
  1428  0003A0  0E01               	movlw	1
  1429  0003A2  6E2D               	movwf	_adc_flag,c
  1430  0003A4  D003               	goto	l18997
  1431  0003A6                     l5203:
  1432                           
  1433                           ; BSR set to: 0
  1434  0003A6  8080               	bsf	3968,0,c	;volatile
  1435  0003A8  96A9               	bcf	4009,3,c	;volatile
  1436  0003AA  96AA               	bcf	4010,3,c	;volatile
  1437  0003AC                     l18997:
  1438                           
  1439                           ; BSR set to: 0
  1440                           ;main.c: 273: }
  1441                           ;main.c: 274: if(tim_ui.ok)
  1442  0003AC  5022               	movf	_tim_ui+1,w,c	;volatile
  1443  0003AE  E101 D281          	bz	l19471
  1444                           
  1445                           ; BSR set to: 0
  1446                           ;main.c: 275: {
  1447                           ;main.c: 276: TRISC0=1; TRISC1=1; TRISC2=1; TRISC3=1; TRISC4=1; TRISC5=1; TRISB5=1; TRIS
      +                          B4=1; TRISB3=1; TRISB2=1; PME=0; T2CON0=4; T2CON1=2;
  1448  0003B2  808B               	bsf	3979,0,c	;volatile
  1449  0003B4  828B               	bsf	3979,1,c	;volatile
  1450  0003B6  848B               	bsf	3979,2,c	;volatile
  1451  0003B8  868B               	bsf	3979,3,c	;volatile
  1452  0003BA  888B               	bsf	3979,4,c	;volatile
  1453  0003BC  8A8B               	bsf	3979,5,c	;volatile
  1454  0003BE  8A8A               	bsf	3978,5,c	;volatile
  1455  0003C0  888A               	bsf	3978,4,c	;volatile
  1456  0003C2  868A               	bsf	3978,3,c	;volatile
  1457  0003C4  848A               	bsf	3978,2,c	;volatile
  1458  0003C6  6ABD               	clrf	4029,c	;volatile
  1459                           
  1460                           ; BSR set to: 0
  1461  0003C8  0E04               	movlw	4
  1462  0003CA  6EC1               	movwf	4033,c	;volatile
  1463  0003CC  0E02               	movlw	2
  1464  0003CE  6EC0               	movwf	4032,c	;volatile
  1465                           
  1466                           ;main.c: 277: if(adc_begin)
  1467  0003D0  502B               	movf	_adc_begin,w,c
  1468  0003D2  E101 D23A          	bz	l19463
  1469                           
  1470                           ; BSR set to: 0
  1471                           ;main.c: 278: {
  1472                           ;main.c: 281: adc_begin=0;
  1473  0003D6  6A2B               	clrf	_adc_begin,c
  1474                           
  1475                           ; BSR set to: 0
  1476                           ;main.c: 286: ADCON1=0x60;
  1477                           
  1478                           ;main.c: 288: ADCON0=0x39; ADIF=0; ADIE=0; GO=1; while(GO==1);
  1479  0003D8  DAFB               	call	PL28	;call to abstracted procedure
  1480                           
  1481                           ; BSR set to: 0
  1482                           
  1483                           ; BSR set to: 0
  1484                           
  1485                           ; BSR set to: 0
  1486                           
  1487                           ;main.c: 293: ADIF=0;
  1488                           
  1489                           ;main.c: 294: pwm.bat_t=((ADRESH&0x0f)<<8)|ADRESL;
  1490  0003DA  DAE7               	call	PL16	;call to abstracted procedure
  1491  0003DC  DB0D               	call	PL54	;call to abstracted procedure
  1492  0003DE  6FD3               	movwf	(_pwm+5)& (0+255),b
  1493  0003E0  5066               	movf	??_main+1,w,c
  1494  0003E2  6FD4               	movwf	(_pwm+6)& (0+255),b
  1495                           
  1496                           ; BSR set to: 0
  1497                           ;main.c: 299: ADCON1=0x60;
  1498                           
  1499                           ; BSR set to: 0
  1500                           ;main.c: 301: ADCON0=0x15;
  1501  0003E4  DAF8               	call	PL30	;call to abstracted procedure
  1502                           
  1503                           ; BSR set to: 0
  1504                           ;main.c: 302: ADIF=0;
  1505                           
  1506                           ; BSR set to: 0
  1507                           ;main.c: 303: ADIE=0;
  1508                           
  1509                           ; BSR set to: 0
  1510                           ;main.c: 304: GO=1;
  1511                           
  1512                           ;main.c: 305: while(GO==1);
  1513                           
  1514                           ;main.c: 306: ADIF=0;
  1515                           
  1516                           ;main.c: 307: pwm.load_t=((ADRESH&0x0f)<<8)|ADRESL;
  1517  0003E6  DAE1               	call	PL16	;call to abstracted procedure
  1518  0003E8  DB07               	call	PL54	;call to abstracted procedure
  1519  0003EA  6FD5               	movwf	(_pwm+7)& (0+255),b
  1520  0003EC  5066               	movf	??_main+1,w,c
  1521  0003EE  6FD6               	movwf	(_pwm+8)& (0+255),b
  1522                           
  1523                           ; BSR set to: 0
  1524                           ;main.c: 308: pwm.adc_ok=1;
  1525  0003F0  0E01               	movlw	1
  1526  0003F2  6FD0               	movwf	(_pwm+2)& (0+255),b
  1527                           
  1528                           ; BSR set to: 0
  1529                           ;main.c: 309: if( pwm.load_t>=4094)
  1530  0003F4  0EFE               	movlw	254
  1531  0003F6  5DD5               	subwf	(_pwm+7)& (0+255),w,b
  1532  0003F8  0E0F               	movlw	15
  1533  0003FA  59D6               	subwfb	(_pwm+8)& (0+255),w,b
  1534  0003FC  E201 D225          	bnc	l19463
  1535                           
  1536                           ; BSR set to: 0
  1537                           ;main.c: 310: {
  1538                           ;main.c: 311: si_mic_flag.kl=1;
  1539  000400  0E01               	movlw	1
  1540  000402  6E19               	movwf	_si_mic_flag+1,c
  1541                           
  1542                           ; BSR set to: 0
  1543                           ;main.c: 312: pwm.duty=0;
  1544  000404  6BCE               	clrf	_pwm& (0+255),b
  1545                           
  1546                           ; BSR set to: 0
  1547                           ;main.c: 313: CMP0IE=0;CMP0IF=0;
  1548  000406  96A9               	bcf	4009,3,c	;volatile
  1549                           
  1550                           ; BSR set to: 0
  1551  000408  96AA               	bcf	4010,3,c	;volatile
  1552  00040A  D21F               	goto	l19463
  1553  00040C                     l19039:
  1554                           
  1555                           ; BSR set to: 0
  1556  00040C  506A               	movf	_ui_ld+3,w,c
  1557  00040E  E101 D24B          	bz	l19465
  1558                           
  1559                           ; BSR set to: 0
  1560  000412  0E0A               	movlw	10
  1561  000414  606A               	cpfslt	_ui_ld+3,c
  1562  000416  D004               	goto	l19047
  1563                           
  1564                           ; BSR set to: 0
  1565  000418  80BD               	bsf	4029,0,c	;volatile
  1566  00041A  68BE               	setf	4030,c	;volatile
  1567                           
  1568                           ; BSR set to: 0
  1569  00041C  386A               	swapf	_ui_ld+3,w,c
  1570  00041E  DB21               	call	PL90	;call to abstracted procedure
  1571  000420                     l19047:
  1572                           
  1573                           ; BSR set to: 0
  1574  000420  9082               	bcf	3970,0,c	;volatile
  1575                           
  1576                           ; BSR set to: 0
  1577  000422  908B               	bcf	3979,0,c	;volatile
  1578                           
  1579                           ; BSR set to: 0
  1580  000424  A001               	btfss	_ui_buff,0,c	;volatile
  1581  000426  D002               	goto	l5220
  1582                           
  1583                           ; BSR set to: 0
  1584  000428  8282               	bsf	3970,1,c	;volatile
  1585  00042A  928B               	bcf	3979,1,c	;volatile
  1586  00042C                     l5220:
  1587                           
  1588                           ; BSR set to: 0
  1589  00042C  A201               	btfss	_ui_buff,1,c	;volatile
  1590  00042E  D002               	goto	l5221
  1591                           
  1592                           ; BSR set to: 0
  1593  000430  8482               	bsf	3970,2,c	;volatile
  1594  000432  948B               	bcf	3979,2,c	;volatile
  1595  000434                     l5221:
  1596                           
  1597                           ; BSR set to: 0
  1598  000434  A401               	btfss	_ui_buff,2,c	;volatile
  1599  000436  D002               	goto	l5222
  1600                           
  1601                           ; BSR set to: 0
  1602  000438  8682               	bsf	3970,3,c	;volatile
  1603  00043A  968B               	bcf	3979,3,c	;volatile
  1604  00043C                     l5222:
  1605                           
  1606                           ; BSR set to: 0
  1607  00043C  A601               	btfss	_ui_buff,3,c	;volatile
  1608  00043E  D002               	goto	l5223
  1609                           
  1610                           ; BSR set to: 0
  1611  000440  8882               	bsf	3970,4,c	;volatile
  1612  000442  988B               	bcf	3979,4,c	;volatile
  1613  000444                     l5223:
  1614                           
  1615                           ; BSR set to: 0
  1616  000444  A801               	btfss	_ui_buff,4,c	;volatile
  1617  000446  D002               	goto	l5224
  1618                           
  1619                           ; BSR set to: 0
  1620  000448  8A82               	bsf	3970,5,c	;volatile
  1621  00044A  9A8B               	bcf	3979,5,c	;volatile
  1622  00044C                     l5224:
  1623                           
  1624                           ; BSR set to: 0
  1625  00044C  AA01               	btfss	_ui_buff,5,c	;volatile
  1626  00044E  D002               	goto	l5225
  1627                           
  1628                           ; BSR set to: 0
  1629  000450  8A81               	bsf	3969,5,c	;volatile
  1630  000452  9A8A               	bcf	3978,5,c	;volatile
  1631  000454                     l5225:
  1632                           
  1633                           ; BSR set to: 0
  1634  000454  AC01               	btfss	_ui_buff,6,c	;volatile
  1635  000456  D002               	goto	l5226
  1636                           
  1637                           ; BSR set to: 0
  1638  000458  8881               	bsf	3969,4,c	;volatile
  1639  00045A  988A               	bcf	3978,4,c	;volatile
  1640  00045C                     l5226:
  1641                           
  1642                           ; BSR set to: 0
  1643  00045C  AE01               	btfss	_ui_buff,7,c	;volatile
  1644  00045E  D002               	goto	l5227
  1645                           
  1646                           ; BSR set to: 0
  1647  000460  8681               	bsf	3969,3,c	;volatile
  1648  000462  968A               	bcf	3978,3,c	;volatile
  1649  000464                     l5227:
  1650                           
  1651                           ; BSR set to: 0
  1652  000464  A00B               	btfss	_ui_buff+10,0,c	;volatile
  1653  000466  D220               	goto	l19465
  1654  000468                     l19069:
  1655                           
  1656                           ; BSR set to: 0
  1657  000468  8481               	bsf	3969,2,c	;volatile
  1658  00046A  948A               	bcf	3978,2,c	;volatile
  1659  00046C  D21D               	goto	l19465
  1660  00046E                     l19071:
  1661                           
  1662                           ; BSR set to: 0
  1663  00046E  506A               	movf	_ui_ld+3,w,c
  1664  000470  E101 D21A          	bz	l19465
  1665                           
  1666                           ; BSR set to: 0
  1667  000474  0E0A               	movlw	10
  1668  000476  606A               	cpfslt	_ui_ld+3,c
  1669  000478  D003               	goto	l19081
  1670                           
  1671                           ; BSR set to: 0
  1672  00047A  82BD               	bsf	4029,1,c	;volatile
  1673                           
  1674                           ; BSR set to: 0
  1675                           
  1676                           ; BSR set to: 0
  1677  00047C  DAD0               	call	PL68	;call to abstracted procedure
  1678  00047E  DAF1               	call	PL90	;call to abstracted procedure
  1679  000480                     l19081:
  1680                           
  1681                           ; BSR set to: 0
  1682  000480  9282               	bcf	3970,1,c	;volatile
  1683                           
  1684                           ; BSR set to: 0
  1685  000482  928B               	bcf	3979,1,c	;volatile
  1686                           
  1687                           ; BSR set to: 0
  1688  000484  A002               	btfss	_ui_buff+1,0,c	;volatile
  1689  000486  D002               	goto	l5233
  1690                           
  1691                           ; BSR set to: 0
  1692  000488  8082               	bsf	3970,0,c	;volatile
  1693  00048A  908B               	bcf	3979,0,c	;volatile
  1694  00048C                     l5233:
  1695                           
  1696                           ; BSR set to: 0
  1697  00048C  A202               	btfss	_ui_buff+1,1,c	;volatile
  1698  00048E  D002               	goto	l5234
  1699                           
  1700                           ; BSR set to: 0
  1701  000490  8482               	bsf	3970,2,c	;volatile
  1702  000492  948B               	bcf	3979,2,c	;volatile
  1703  000494                     l5234:
  1704                           
  1705                           ; BSR set to: 0
  1706  000494  A402               	btfss	_ui_buff+1,2,c	;volatile
  1707  000496  D002               	goto	l5235
  1708                           
  1709                           ; BSR set to: 0
  1710  000498  8682               	bsf	3970,3,c	;volatile
  1711  00049A  968B               	bcf	3979,3,c	;volatile
  1712  00049C                     l5235:
  1713                           
  1714                           ; BSR set to: 0
  1715  00049C  A602               	btfss	_ui_buff+1,3,c	;volatile
  1716  00049E  D002               	goto	l5236
  1717                           
  1718                           ; BSR set to: 0
  1719  0004A0  8882               	bsf	3970,4,c	;volatile
  1720  0004A2  988B               	bcf	3979,4,c	;volatile
  1721  0004A4                     l5236:
  1722                           
  1723                           ; BSR set to: 0
  1724  0004A4  A802               	btfss	_ui_buff+1,4,c	;volatile
  1725  0004A6  D002               	goto	l5237
  1726                           
  1727                           ; BSR set to: 0
  1728  0004A8  8A82               	bsf	3970,5,c	;volatile
  1729  0004AA  9A8B               	bcf	3979,5,c	;volatile
  1730  0004AC                     l5237:
  1731                           
  1732                           ; BSR set to: 0
  1733  0004AC  AA02               	btfss	_ui_buff+1,5,c	;volatile
  1734  0004AE  D002               	goto	l5238
  1735                           
  1736                           ; BSR set to: 0
  1737  0004B0  8A81               	bsf	3969,5,c	;volatile
  1738  0004B2  9A8A               	bcf	3978,5,c	;volatile
  1739  0004B4                     l5238:
  1740                           
  1741                           ; BSR set to: 0
  1742  0004B4  AC02               	btfss	_ui_buff+1,6,c	;volatile
  1743  0004B6  D002               	goto	l5239
  1744                           
  1745                           ; BSR set to: 0
  1746  0004B8  8881               	bsf	3969,4,c	;volatile
  1747  0004BA  988A               	bcf	3978,4,c	;volatile
  1748  0004BC                     l5239:
  1749                           
  1750                           ; BSR set to: 0
  1751  0004BC  AE02               	btfss	_ui_buff+1,7,c	;volatile
  1752  0004BE  D1F4               	goto	l19465
  1753  0004C0                     l19101:
  1754                           
  1755                           ; BSR set to: 0
  1756  0004C0  8681               	bsf	3969,3,c	;volatile
  1757  0004C2  968A               	bcf	3978,3,c	;volatile
  1758  0004C4  D1F1               	goto	l19465
  1759  0004C6                     l19103:
  1760                           
  1761                           ; BSR set to: 0
  1762  0004C6  506B               	movf	_ui_ld+4,w,c
  1763  0004C8  E101 D1EE          	bz	l19465
  1764                           
  1765                           ; BSR set to: 0
  1766  0004CC  0E0A               	movlw	10
  1767  0004CE  606B               	cpfslt	_ui_ld+4,c
  1768  0004D0  D005               	goto	l19113
  1769                           
  1770                           ; BSR set to: 0
  1771  0004D2  82BD               	bsf	4029,1,c	;volatile
  1772                           
  1773                           ; BSR set to: 0
  1774  0004D4  0EC0               	movlw	192
  1775  0004D6  6EBE               	movwf	4030,c	;volatile
  1776                           
  1777                           ; BSR set to: 0
  1778  0004D8  386B               	swapf	_ui_ld+4,w,c
  1779  0004DA  DAC3               	call	PL90	;call to abstracted procedure
  1780  0004DC                     l19113:
  1781                           
  1782                           ; BSR set to: 0
  1783  0004DC  9282               	bcf	3970,1,c	;volatile
  1784                           
  1785                           ; BSR set to: 0
  1786  0004DE  928B               	bcf	3979,1,c	;volatile
  1787                           
  1788                           ; BSR set to: 0
  1789  0004E0  A20B               	btfss	_ui_buff+10,1,c	;volatile
  1790  0004E2  D1E2               	goto	l19465
  1791  0004E4  D7C1               	goto	l19069
  1792  0004E6                     l19121:
  1793                           
  1794                           ; BSR set to: 0
  1795  0004E6  5067               	movf	_ui_ld,w,c
  1796  0004E8  E101 D1DE          	bz	l19465
  1797                           
  1798                           ; BSR set to: 0
  1799  0004EC  0E0A               	movlw	10
  1800  0004EE  6067               	cpfslt	_ui_ld,c
  1801  0004F0  D003               	goto	l19129
  1802                           
  1803                           ; BSR set to: 0
  1804  0004F2  84BD               	bsf	4029,2,c	;volatile
  1805  0004F4  68BE               	setf	4030,c	;volatile
  1806                           
  1807                           ; BSR set to: 0
  1808  0004F6  DA77               	call	PL50	;call to abstracted procedure
  1809  0004F8                     l19129:
  1810                           
  1811                           ; BSR set to: 0
  1812  0004F8  9482               	bcf	3970,2,c	;volatile
  1813                           
  1814                           ; BSR set to: 0
  1815  0004FA  948B               	bcf	3979,2,c	;volatile
  1816                           
  1817                           ; BSR set to: 0
  1818  0004FC  A003               	btfss	_ui_buff+2,0,c	;volatile
  1819  0004FE  D002               	goto	l5248
  1820                           
  1821                           ; BSR set to: 0
  1822  000500  8082               	bsf	3970,0,c	;volatile
  1823  000502  908B               	bcf	3979,0,c	;volatile
  1824  000504                     l5248:
  1825                           
  1826                           ; BSR set to: 0
  1827  000504  A203               	btfss	_ui_buff+2,1,c	;volatile
  1828  000506  D002               	goto	l5249
  1829                           
  1830                           ; BSR set to: 0
  1831  000508  8282               	bsf	3970,1,c	;volatile
  1832  00050A  928B               	bcf	3979,1,c	;volatile
  1833  00050C                     l5249:
  1834                           
  1835                           ; BSR set to: 0
  1836  00050C  A403               	btfss	_ui_buff+2,2,c	;volatile
  1837  00050E  D002               	goto	l5250
  1838                           
  1839                           ; BSR set to: 0
  1840  000510  8682               	bsf	3970,3,c	;volatile
  1841  000512  968B               	bcf	3979,3,c	;volatile
  1842  000514                     l5250:
  1843                           
  1844                           ; BSR set to: 0
  1845  000514  A603               	btfss	_ui_buff+2,3,c	;volatile
  1846  000516  D002               	goto	l5251
  1847                           
  1848                           ; BSR set to: 0
  1849  000518  8882               	bsf	3970,4,c	;volatile
  1850  00051A  988B               	bcf	3979,4,c	;volatile
  1851  00051C                     l5251:
  1852                           
  1853                           ; BSR set to: 0
  1854  00051C  A803               	btfss	_ui_buff+2,4,c	;volatile
  1855  00051E  D002               	goto	l5252
  1856                           
  1857                           ; BSR set to: 0
  1858  000520  8A82               	bsf	3970,5,c	;volatile
  1859  000522  9A8B               	bcf	3979,5,c	;volatile
  1860  000524                     l5252:
  1861                           
  1862                           ; BSR set to: 0
  1863  000524  AA03               	btfss	_ui_buff+2,5,c	;volatile
  1864  000526  D002               	goto	l5253
  1865                           
  1866                           ; BSR set to: 0
  1867  000528  8A81               	bsf	3969,5,c	;volatile
  1868  00052A  9A8A               	bcf	3978,5,c	;volatile
  1869  00052C                     l5253:
  1870                           
  1871                           ; BSR set to: 0
  1872  00052C  AC03               	btfss	_ui_buff+2,6,c	;volatile
  1873  00052E  D002               	goto	l5254
  1874                           
  1875                           ; BSR set to: 0
  1876  000530  8881               	bsf	3969,4,c	;volatile
  1877  000532  988A               	bcf	3978,4,c	;volatile
  1878  000534                     l5254:
  1879                           
  1880                           ; BSR set to: 0
  1881  000534  AE03               	btfss	_ui_buff+2,7,c	;volatile
  1882  000536  D002               	goto	l5255
  1883                           
  1884                           ; BSR set to: 0
  1885  000538  8681               	bsf	3969,3,c	;volatile
  1886  00053A  968A               	bcf	3978,3,c	;volatile
  1887  00053C                     l5255:
  1888                           
  1889                           ; BSR set to: 0
  1890  00053C  A40B               	btfss	_ui_buff+10,2,c	;volatile
  1891  00053E  D1B4               	goto	l19465
  1892  000540  D793               	goto	l19069
  1893  000542                     l19153:
  1894                           
  1895                           ; BSR set to: 0
  1896  000542  5067               	movf	_ui_ld,w,c
  1897  000544  E101 D1B0          	bz	l19465
  1898                           
  1899                           ; BSR set to: 0
  1900  000548  0E0A               	movlw	10
  1901  00054A  6067               	cpfslt	_ui_ld,c
  1902  00054C  D004               	goto	l19163
  1903                           
  1904                           ; BSR set to: 0
  1905  00054E  86BD               	bsf	4029,3,c	;volatile
  1906                           
  1907                           ; BSR set to: 0
  1908  000550  0EC0               	movlw	192
  1909  000552  6EBE               	movwf	4030,c	;volatile
  1910                           
  1911                           ; BSR set to: 0
  1912  000554  DA48               	call	PL50	;call to abstracted procedure
  1913  000556                     l19163:
  1914                           
  1915                           ; BSR set to: 0
  1916  000556  9682               	bcf	3970,3,c	;volatile
  1917                           
  1918                           ; BSR set to: 0
  1919  000558  968B               	bcf	3979,3,c	;volatile
  1920                           
  1921                           ; BSR set to: 0
  1922  00055A  A004               	btfss	_ui_buff+3,0,c	;volatile
  1923  00055C  D002               	goto	l5260
  1924                           
  1925                           ; BSR set to: 0
  1926  00055E  8082               	bsf	3970,0,c	;volatile
  1927  000560  908B               	bcf	3979,0,c	;volatile
  1928  000562                     l5260:
  1929                           
  1930                           ; BSR set to: 0
  1931  000562  A204               	btfss	_ui_buff+3,1,c	;volatile
  1932  000564  D002               	goto	l5261
  1933                           
  1934                           ; BSR set to: 0
  1935  000566  8282               	bsf	3970,1,c	;volatile
  1936  000568  928B               	bcf	3979,1,c	;volatile
  1937  00056A                     l5261:
  1938                           
  1939                           ; BSR set to: 0
  1940  00056A  A404               	btfss	_ui_buff+3,2,c	;volatile
  1941  00056C  D002               	goto	l5262
  1942                           
  1943                           ; BSR set to: 0
  1944  00056E  8482               	bsf	3970,2,c	;volatile
  1945  000570  948B               	bcf	3979,2,c	;volatile
  1946  000572                     l5262:
  1947                           
  1948                           ; BSR set to: 0
  1949  000572  A604               	btfss	_ui_buff+3,3,c	;volatile
  1950  000574  D002               	goto	l5263
  1951                           
  1952                           ; BSR set to: 0
  1953  000576  8882               	bsf	3970,4,c	;volatile
  1954  000578  988B               	bcf	3979,4,c	;volatile
  1955  00057A                     l5263:
  1956                           
  1957                           ; BSR set to: 0
  1958  00057A  A804               	btfss	_ui_buff+3,4,c	;volatile
  1959  00057C  D195               	goto	l19465
  1960                           
  1961                           ; BSR set to: 0
  1962  00057E  8A82               	bsf	3970,5,c	;volatile
  1963  000580  9A8B               	bcf	3979,5,c	;volatile
  1964  000582  D192               	goto	l19465
  1965  000584                     l19179:
  1966                           
  1967                           ; BSR set to: 0
  1968  000584  5068               	movf	_ui_ld+1,w,c
  1969  000586  E101 D18F          	bz	l19465
  1970                           
  1971                           ; BSR set to: 0
  1972  00058A  0E0A               	movlw	10
  1973  00058C  6068               	cpfslt	_ui_ld+1,c
  1974  00058E  D005               	goto	l19189
  1975                           
  1976                           ; BSR set to: 0
  1977  000590  86BD               	bsf	4029,3,c	;volatile
  1978                           
  1979                           ; BSR set to: 0
  1980  000592  0EC0               	movlw	192
  1981  000594  6EBE               	movwf	4030,c	;volatile
  1982                           
  1983                           ; BSR set to: 0
  1984  000596  3868               	swapf	_ui_ld+1,w,c
  1985  000598  DA2B               	call	PL52	;call to abstracted procedure
  1986  00059A                     l19189:
  1987                           
  1988                           ; BSR set to: 0
  1989  00059A  9682               	bcf	3970,3,c	;volatile
  1990                           
  1991                           ; BSR set to: 0
  1992  00059C  968B               	bcf	3979,3,c	;volatile
  1993                           
  1994                           ; BSR set to: 0
  1995  00059E  AC04               	btfss	_ui_buff+3,6,c	;volatile
  1996  0005A0  D002               	goto	l5268
  1997                           
  1998                           ; BSR set to: 0
  1999  0005A2  8881               	bsf	3969,4,c	;volatile
  2000  0005A4  988A               	bcf	3978,4,c	;volatile
  2001  0005A6                     l5268:
  2002                           
  2003                           ; BSR set to: 0
  2004  0005A6  AE04               	btfss	_ui_buff+3,7,c	;volatile
  2005  0005A8  D002               	goto	l5269
  2006                           
  2007                           ; BSR set to: 0
  2008  0005AA  8681               	bsf	3969,3,c	;volatile
  2009  0005AC  968A               	bcf	3978,3,c	;volatile
  2010  0005AE                     l5269:
  2011                           
  2012                           ; BSR set to: 0
  2013  0005AE  A60B               	btfss	_ui_buff+10,3,c	;volatile
  2014  0005B0  D17B               	goto	l19465
  2015  0005B2  D75A               	goto	l19069
  2016  0005B4                     l19201:
  2017                           
  2018                           ; BSR set to: 0
  2019  0005B4  506A               	movf	_ui_ld+3,w,c
  2020  0005B6  E101 D177          	bz	l19465
  2021                           
  2022                           ; BSR set to: 0
  2023  0005BA  0E0A               	movlw	10
  2024  0005BC  606A               	cpfslt	_ui_ld+3,c
  2025  0005BE  D003               	goto	l19211
  2026                           
  2027                           ; BSR set to: 0
  2028  0005C0  86BD               	bsf	4029,3,c	;volatile
  2029                           
  2030                           ; BSR set to: 0
  2031                           
  2032                           ; BSR set to: 0
  2033  0005C2  DA2D               	call	PL68	;call to abstracted procedure
  2034  0005C4  DA15               	call	PL52	;call to abstracted procedure
  2035  0005C6                     l19211:
  2036                           
  2037                           ; BSR set to: 0
  2038  0005C6  9682               	bcf	3970,3,c	;volatile
  2039                           
  2040                           ; BSR set to: 0
  2041  0005C8  968B               	bcf	3979,3,c	;volatile
  2042                           
  2043                           ; BSR set to: 0
  2044  0005CA  AA04               	btfss	_ui_buff+3,5,c	;volatile
  2045  0005CC  D16D               	goto	l19465
  2046                           
  2047                           ; BSR set to: 0
  2048  0005CE  8A81               	bsf	3969,5,c	;volatile
  2049  0005D0  9A8A               	bcf	3978,5,c	;volatile
  2050  0005D2  D16A               	goto	l19465
  2051  0005D4                     l19219:
  2052                           
  2053                           ; BSR set to: 0
  2054  0005D4  5068               	movf	_ui_ld+1,w,c
  2055  0005D6  E101 D167          	bz	l19465
  2056                           
  2057                           ; BSR set to: 0
  2058  0005DA  0E0A               	movlw	10
  2059  0005DC  6068               	cpfslt	_ui_ld+1,c
  2060  0005DE  D003               	goto	l19227
  2061                           
  2062                           ; BSR set to: 0
  2063  0005E0  88BD               	bsf	4029,4,c	;volatile
  2064  0005E2  68BE               	setf	4030,c	;volatile
  2065                           
  2066                           ; BSR set to: 0
  2067  0005E4  D9FB               	call	PL42	;call to abstracted procedure
  2068  0005E6                     l19227:
  2069                           
  2070                           ; BSR set to: 0
  2071  0005E6  9882               	bcf	3970,4,c	;volatile
  2072                           
  2073                           ; BSR set to: 0
  2074  0005E8  988B               	bcf	3979,4,c	;volatile
  2075                           
  2076                           ; BSR set to: 0
  2077  0005EA  A005               	btfss	_ui_buff+4,0,c	;volatile
  2078  0005EC  D002               	goto	l5278
  2079                           
  2080                           ; BSR set to: 0
  2081  0005EE  8082               	bsf	3970,0,c	;volatile
  2082  0005F0  908B               	bcf	3979,0,c	;volatile
  2083  0005F2                     l5278:
  2084                           
  2085                           ; BSR set to: 0
  2086  0005F2  A205               	btfss	_ui_buff+4,1,c	;volatile
  2087  0005F4  D002               	goto	l5279
  2088                           
  2089                           ; BSR set to: 0
  2090  0005F6  8282               	bsf	3970,1,c	;volatile
  2091  0005F8  928B               	bcf	3979,1,c	;volatile
  2092  0005FA                     l5279:
  2093                           
  2094                           ; BSR set to: 0
  2095  0005FA  A405               	btfss	_ui_buff+4,2,c	;volatile
  2096  0005FC  D002               	goto	l5280
  2097                           
  2098                           ; BSR set to: 0
  2099  0005FE  8482               	bsf	3970,2,c	;volatile
  2100  000600  948B               	bcf	3979,2,c	;volatile
  2101  000602                     l5280:
  2102                           
  2103                           ; BSR set to: 0
  2104  000602  A605               	btfss	_ui_buff+4,3,c	;volatile
  2105  000604  D002               	goto	l5281
  2106                           
  2107                           ; BSR set to: 0
  2108  000606  8682               	bsf	3970,3,c	;volatile
  2109  000608  968B               	bcf	3979,3,c	;volatile
  2110  00060A                     l5281:
  2111                           
  2112                           ; BSR set to: 0
  2113  00060A  A805               	btfss	_ui_buff+4,4,c	;volatile
  2114  00060C  D002               	goto	l5282
  2115                           
  2116                           ; BSR set to: 0
  2117  00060E  8A82               	bsf	3970,5,c	;volatile
  2118  000610  9A8B               	bcf	3979,5,c	;volatile
  2119  000612                     l5282:
  2120                           
  2121                           ; BSR set to: 0
  2122  000612  AA05               	btfss	_ui_buff+4,5,c	;volatile
  2123  000614  D002               	goto	l5283
  2124                           
  2125                           ; BSR set to: 0
  2126  000616  8A81               	bsf	3969,5,c	;volatile
  2127  000618  9A8A               	bcf	3978,5,c	;volatile
  2128  00061A                     l5283:
  2129                           
  2130                           ; BSR set to: 0
  2131  00061A  AC05               	btfss	_ui_buff+4,6,c	;volatile
  2132  00061C  D002               	goto	l5284
  2133                           
  2134                           ; BSR set to: 0
  2135  00061E  8881               	bsf	3969,4,c	;volatile
  2136  000620  988A               	bcf	3978,4,c	;volatile
  2137  000622                     l5284:
  2138                           
  2139                           ; BSR set to: 0
  2140  000622  AE05               	btfss	_ui_buff+4,7,c	;volatile
  2141  000624  D002               	goto	l5285
  2142                           
  2143                           ; BSR set to: 0
  2144  000626  8681               	bsf	3969,3,c	;volatile
  2145  000628  968A               	bcf	3978,3,c	;volatile
  2146  00062A                     l5285:
  2147                           
  2148                           ; BSR set to: 0
  2149  00062A  A80B               	btfss	_ui_buff+10,4,c	;volatile
  2150  00062C  D13D               	goto	l19465
  2151  00062E  D71C               	goto	l19069
  2152  000630                     l19251:
  2153                           
  2154                           ; BSR set to: 0
  2155  000630  5068               	movf	_ui_ld+1,w,c
  2156  000632  E101 D139          	bz	l19465
  2157                           
  2158                           ; BSR set to: 0
  2159  000636  0E0A               	movlw	10
  2160  000638  6068               	cpfslt	_ui_ld+1,c
  2161  00063A  D004               	goto	l19261
  2162                           
  2163                           ; BSR set to: 0
  2164  00063C  8ABD               	bsf	4029,5,c	;volatile
  2165                           
  2166                           ; BSR set to: 0
  2167  00063E  0EC0               	movlw	192
  2168  000640  6EBE               	movwf	4030,c	;volatile
  2169                           
  2170                           ; BSR set to: 0
  2171  000642  D9CC               	call	PL42	;call to abstracted procedure
  2172  000644                     l19261:
  2173                           
  2174                           ; BSR set to: 0
  2175  000644  9A82               	bcf	3970,5,c	;volatile
  2176                           
  2177                           ; BSR set to: 0
  2178  000646  9A8B               	bcf	3979,5,c	;volatile
  2179                           
  2180                           ; BSR set to: 0
  2181  000648  A006               	btfss	_ui_buff+5,0,c	;volatile
  2182  00064A  D002               	goto	l5290
  2183                           
  2184                           ; BSR set to: 0
  2185  00064C  8082               	bsf	3970,0,c	;volatile
  2186  00064E  908B               	bcf	3979,0,c	;volatile
  2187  000650                     l5290:
  2188                           
  2189                           ; BSR set to: 0
  2190  000650  A206               	btfss	_ui_buff+5,1,c	;volatile
  2191  000652  D002               	goto	l5291
  2192                           
  2193                           ; BSR set to: 0
  2194  000654  8282               	bsf	3970,1,c	;volatile
  2195  000656  928B               	bcf	3979,1,c	;volatile
  2196  000658                     l5291:
  2197                           
  2198                           ; BSR set to: 0
  2199  000658  A406               	btfss	_ui_buff+5,2,c	;volatile
  2200  00065A  D002               	goto	l5292
  2201                           
  2202                           ; BSR set to: 0
  2203  00065C  8482               	bsf	3970,2,c	;volatile
  2204  00065E  948B               	bcf	3979,2,c	;volatile
  2205  000660                     l5292:
  2206                           
  2207                           ; BSR set to: 0
  2208  000660  A606               	btfss	_ui_buff+5,3,c	;volatile
  2209  000662  D002               	goto	l5293
  2210                           
  2211                           ; BSR set to: 0
  2212  000664  8682               	bsf	3970,3,c	;volatile
  2213  000666  968B               	bcf	3979,3,c	;volatile
  2214  000668                     l5293:
  2215                           
  2216                           ; BSR set to: 0
  2217  000668  A806               	btfss	_ui_buff+5,4,c	;volatile
  2218  00066A  D002               	goto	l5294
  2219                           
  2220                           ; BSR set to: 0
  2221  00066C  8882               	bsf	3970,4,c	;volatile
  2222  00066E  988B               	bcf	3979,4,c	;volatile
  2223  000670                     l5294:
  2224                           
  2225                           ; BSR set to: 0
  2226  000670  AA06               	btfss	_ui_buff+5,5,c	;volatile
  2227  000672  D002               	goto	l5295
  2228                           
  2229                           ; BSR set to: 0
  2230  000674  8A81               	bsf	3969,5,c	;volatile
  2231  000676  9A8A               	bcf	3978,5,c	;volatile
  2232  000678                     l5295:
  2233                           
  2234                           ; BSR set to: 0
  2235  000678  AC06               	btfss	_ui_buff+5,6,c	;volatile
  2236  00067A  D002               	goto	l5296
  2237                           
  2238                           ; BSR set to: 0
  2239  00067C  8881               	bsf	3969,4,c	;volatile
  2240  00067E  988A               	bcf	3978,4,c	;volatile
  2241  000680                     l5296:
  2242                           
  2243                           ; BSR set to: 0
  2244  000680  AE06               	btfss	_ui_buff+5,7,c	;volatile
  2245  000682  D112               	goto	l19465
  2246  000684  D71D               	goto	l19101
  2247  000686                     l19283:
  2248                           
  2249                           ; BSR set to: 0
  2250  000686  5069               	movf	_ui_ld+2,w,c
  2251  000688  E101 D10E          	bz	l19465
  2252                           
  2253                           ; BSR set to: 0
  2254  00068C  0E0A               	movlw	10
  2255  00068E  6069               	cpfslt	_ui_ld+2,c
  2256  000690  D005               	goto	l19293
  2257                           
  2258                           ; BSR set to: 0
  2259  000692  8ABD               	bsf	4029,5,c	;volatile
  2260                           
  2261                           ; BSR set to: 0
  2262  000694  0EC0               	movlw	192
  2263  000696  6EBE               	movwf	4030,c	;volatile
  2264                           
  2265                           ; BSR set to: 0
  2266  000698  3869               	swapf	_ui_ld+2,w,c
  2267  00069A  D9BA               	call	PL64	;call to abstracted procedure
  2268  00069C                     l19293:
  2269                           
  2270                           ; BSR set to: 0
  2271  00069C  9A82               	bcf	3970,5,c	;volatile
  2272                           
  2273                           ; BSR set to: 0
  2274  00069E  9A8B               	bcf	3979,5,c	;volatile
  2275                           
  2276                           ; BSR set to: 0
  2277  0006A0  AA0B               	btfss	_ui_buff+10,5,c	;volatile
  2278  0006A2  D102               	goto	l19465
  2279  0006A4  D6E1               	goto	l19069
  2280  0006A6                     l19301:
  2281                           
  2282                           ; BSR set to: 0
  2283  0006A6  5069               	movf	_ui_ld+2,w,c
  2284  0006A8  E101 D0FE          	bz	l19465
  2285                           
  2286                           ; BSR set to: 0
  2287  0006AC  0E0A               	movlw	10
  2288  0006AE  6069               	cpfslt	_ui_ld+2,c
  2289  0006B0  D004               	goto	l19309
  2290                           
  2291                           ; BSR set to: 0
  2292  0006B2  86BD               	bsf	4029,3,c	;volatile
  2293  0006B4  6ABE               	clrf	4030,c	;volatile
  2294                           
  2295                           ; BSR set to: 0
  2296  0006B6  3869               	swapf	_ui_ld+2,w,c
  2297  0006B8  D99B               	call	PL52	;call to abstracted procedure
  2298  0006BA                     l19309:
  2299                           
  2300                           ; BSR set to: 0
  2301  0006BA  9A81               	bcf	3969,5,c	;volatile
  2302                           
  2303                           ; BSR set to: 0
  2304  0006BC  9A8A               	bcf	3978,5,c	;volatile
  2305                           
  2306                           ; BSR set to: 0
  2307  0006BE  A007               	btfss	_ui_buff+6,0,c	;volatile
  2308  0006C0  D002               	goto	l5305
  2309                           
  2310                           ; BSR set to: 0
  2311  0006C2  8082               	bsf	3970,0,c	;volatile
  2312  0006C4  908B               	bcf	3979,0,c	;volatile
  2313  0006C6                     l5305:
  2314                           
  2315                           ; BSR set to: 0
  2316  0006C6  A207               	btfss	_ui_buff+6,1,c	;volatile
  2317  0006C8  D002               	goto	l5306
  2318                           
  2319                           ; BSR set to: 0
  2320  0006CA  8282               	bsf	3970,1,c	;volatile
  2321  0006CC  928B               	bcf	3979,1,c	;volatile
  2322  0006CE                     l5306:
  2323                           
  2324                           ; BSR set to: 0
  2325  0006CE  A407               	btfss	_ui_buff+6,2,c	;volatile
  2326  0006D0  D002               	goto	l5307
  2327                           
  2328                           ; BSR set to: 0
  2329  0006D2  8482               	bsf	3970,2,c	;volatile
  2330  0006D4  948B               	bcf	3979,2,c	;volatile
  2331  0006D6                     l5307:
  2332                           
  2333                           ; BSR set to: 0
  2334  0006D6  A607               	btfss	_ui_buff+6,3,c	;volatile
  2335  0006D8  D0E7               	goto	l19465
  2336                           
  2337                           ; BSR set to: 0
  2338  0006DA  8682               	bsf	3970,3,c	;volatile
  2339  0006DC  968B               	bcf	3979,3,c	;volatile
  2340  0006DE  D0E4               	goto	l19465
  2341  0006E0                     l19323:
  2342                           
  2343                           ; BSR set to: 0
  2344  0006E0  506A               	movf	_ui_ld+3,w,c
  2345  0006E2  E101 D0E1          	bz	l19465
  2346                           
  2347                           ; BSR set to: 0
  2348  0006E6  0E0A               	movlw	10
  2349  0006E8  606A               	cpfslt	_ui_ld+3,c
  2350  0006EA  D004               	goto	l19331
  2351                           
  2352                           ; BSR set to: 0
  2353  0006EC  86BD               	bsf	4029,3,c	;volatile
  2354  0006EE  6ABE               	clrf	4030,c	;volatile
  2355                           
  2356                           ; BSR set to: 0
  2357  0006F0  386A               	swapf	_ui_ld+3,w,c
  2358  0006F2  D97E               	call	PL52	;call to abstracted procedure
  2359  0006F4                     l19331:
  2360                           
  2361                           ; BSR set to: 0
  2362  0006F4  9A81               	bcf	3969,5,c	;volatile
  2363                           
  2364                           ; BSR set to: 0
  2365  0006F6  9A8A               	bcf	3978,5,c	;volatile
  2366                           
  2367                           ; BSR set to: 0
  2368  0006F8  A807               	btfss	_ui_buff+6,4,c	;volatile
  2369  0006FA  D002               	goto	l5312
  2370                           
  2371                           ; BSR set to: 0
  2372  0006FC  8882               	bsf	3970,4,c	;volatile
  2373  0006FE  988B               	bcf	3979,4,c	;volatile
  2374  000700                     l5312:
  2375                           
  2376                           ; BSR set to: 0
  2377  000700  AA07               	btfss	_ui_buff+6,5,c	;volatile
  2378  000702  D002               	goto	l5313
  2379                           
  2380                           ; BSR set to: 0
  2381  000704  8A82               	bsf	3970,5,c	;volatile
  2382  000706  9A8B               	bcf	3979,5,c	;volatile
  2383  000708                     l5313:
  2384                           
  2385                           ; BSR set to: 0
  2386  000708  AC07               	btfss	_ui_buff+6,6,c	;volatile
  2387  00070A  D002               	goto	l5314
  2388                           
  2389                           ; BSR set to: 0
  2390  00070C  8881               	bsf	3969,4,c	;volatile
  2391  00070E  988A               	bcf	3978,4,c	;volatile
  2392  000710                     l5314:
  2393                           
  2394                           ; BSR set to: 0
  2395  000710  AE07               	btfss	_ui_buff+6,7,c	;volatile
  2396  000712  D0CA               	goto	l19465
  2397  000714  D6D5               	goto	l19101
  2398  000716                     l19345:
  2399                           
  2400                           ; BSR set to: 0
  2401  000716  5067               	movf	_ui_ld,w,c
  2402  000718  E101 D0C6          	bz	l19465
  2403                           
  2404                           ; BSR set to: 0
  2405  00071C  0E0A               	movlw	10
  2406  00071E  6067               	cpfslt	_ui_ld,c
  2407  000720  D003               	goto	l19353
  2408                           
  2409                           ; BSR set to: 0
  2410  000722  86BD               	bsf	4029,3,c	;volatile
  2411  000724  6ABE               	clrf	4030,c	;volatile
  2412                           
  2413                           ; BSR set to: 0
  2414  000726  D95F               	call	PL50	;call to abstracted procedure
  2415  000728                     l19353:
  2416                           
  2417                           ; BSR set to: 0
  2418  000728  9A81               	bcf	3969,5,c	;volatile
  2419                           
  2420                           ; BSR set to: 0
  2421  00072A  9A8A               	bcf	3978,5,c	;volatile
  2422                           
  2423                           ; BSR set to: 0
  2424  00072C  AC0B               	btfss	_ui_buff+10,6,c	;volatile
  2425  00072E  D0BC               	goto	l19465
  2426  000730  D69B               	goto	l19069
  2427  000732                     l19361:
  2428                           
  2429                           ; BSR set to: 0
  2430  000732  5068               	movf	_ui_ld+1,w,c
  2431  000734  E101 D0B8          	bz	l19465
  2432                           
  2433                           ; BSR set to: 0
  2434  000738  0E0A               	movlw	10
  2435  00073A  6068               	cpfslt	_ui_ld+1,c
  2436  00073C  D004               	goto	l19371
  2437                           
  2438                           ; BSR set to: 0
  2439  00073E  88BD               	bsf	4029,4,c	;volatile
  2440                           
  2441                           ; BSR set to: 0
  2442  000740  0E3F               	movlw	63
  2443  000742  6EBE               	movwf	4030,c	;volatile
  2444                           
  2445                           ; BSR set to: 0
  2446  000744  D94B               	call	PL42	;call to abstracted procedure
  2447  000746                     l19371:
  2448                           
  2449                           ; BSR set to: 0
  2450  000746  9881               	bcf	3969,4,c	;volatile
  2451                           
  2452                           ; BSR set to: 0
  2453  000748  988A               	bcf	3978,4,c	;volatile
  2454                           
  2455                           ; BSR set to: 0
  2456  00074A  A008               	btfss	_ui_buff+7,0,c	;volatile
  2457  00074C  D002               	goto	l5323
  2458                           
  2459                           ; BSR set to: 0
  2460  00074E  8082               	bsf	3970,0,c	;volatile
  2461  000750  908B               	bcf	3979,0,c	;volatile
  2462  000752                     l5323:
  2463                           
  2464                           ; BSR set to: 0
  2465  000752  A208               	btfss	_ui_buff+7,1,c	;volatile
  2466  000754  D002               	goto	l5324
  2467                           
  2468                           ; BSR set to: 0
  2469  000756  8282               	bsf	3970,1,c	;volatile
  2470  000758  928B               	bcf	3979,1,c	;volatile
  2471  00075A                     l5324:
  2472                           
  2473                           ; BSR set to: 0
  2474  00075A  A408               	btfss	_ui_buff+7,2,c	;volatile
  2475  00075C  D002               	goto	l5325
  2476                           
  2477                           ; BSR set to: 0
  2478  00075E  8482               	bsf	3970,2,c	;volatile
  2479  000760  948B               	bcf	3979,2,c	;volatile
  2480  000762                     l5325:
  2481                           
  2482                           ; BSR set to: 0
  2483  000762  A608               	btfss	_ui_buff+7,3,c	;volatile
  2484  000764  D002               	goto	l5326
  2485                           
  2486                           ; BSR set to: 0
  2487  000766  8682               	bsf	3970,3,c	;volatile
  2488  000768  968B               	bcf	3979,3,c	;volatile
  2489  00076A                     l5326:
  2490                           
  2491                           ; BSR set to: 0
  2492  00076A  A808               	btfss	_ui_buff+7,4,c	;volatile
  2493  00076C  D002               	goto	l5327
  2494                           
  2495                           ; BSR set to: 0
  2496  00076E  8882               	bsf	3970,4,c	;volatile
  2497  000770  988B               	bcf	3979,4,c	;volatile
  2498  000772                     l5327:
  2499                           
  2500                           ; BSR set to: 0
  2501  000772  AA08               	btfss	_ui_buff+7,5,c	;volatile
  2502  000774  D002               	goto	l5328
  2503                           
  2504                           ; BSR set to: 0
  2505  000776  8A82               	bsf	3970,5,c	;volatile
  2506  000778  9A8B               	bcf	3979,5,c	;volatile
  2507  00077A                     l5328:
  2508                           
  2509                           ; BSR set to: 0
  2510  00077A  AC08               	btfss	_ui_buff+7,6,c	;volatile
  2511  00077C  D002               	goto	l5329
  2512                           
  2513                           ; BSR set to: 0
  2514  00077E  8A81               	bsf	3969,5,c	;volatile
  2515  000780  9A8A               	bcf	3978,5,c	;volatile
  2516  000782                     l5329:
  2517                           
  2518                           ; BSR set to: 0
  2519  000782  AE08               	btfss	_ui_buff+7,7,c	;volatile
  2520  000784  D002               	goto	l5330
  2521                           
  2522                           ; BSR set to: 0
  2523  000786  8681               	bsf	3969,3,c	;volatile
  2524  000788  968A               	bcf	3978,3,c	;volatile
  2525  00078A                     l5330:
  2526                           
  2527                           ; BSR set to: 0
  2528  00078A  AE0B               	btfss	_ui_buff+10,7,c	;volatile
  2529  00078C  D08D               	goto	l19465
  2530  00078E  D66C               	goto	l19069
  2531  000790                     l19395:
  2532                           
  2533                           ; BSR set to: 0
  2534  000790  5068               	movf	_ui_ld+1,w,c
  2535  000792  E101 D089          	bz	l19465
  2536                           
  2537                           ; BSR set to: 0
  2538  000796  0E0A               	movlw	10
  2539  000798  6068               	cpfslt	_ui_ld+1,c
  2540  00079A  D003               	goto	l19403
  2541                           
  2542                           ; BSR set to: 0
  2543  00079C  8ABD               	bsf	4029,5,c	;volatile
  2544  00079E  6ABE               	clrf	4030,c	;volatile
  2545                           
  2546                           ; BSR set to: 0
  2547  0007A0  D91D               	call	PL42	;call to abstracted procedure
  2548  0007A2                     l19403:
  2549                           
  2550                           ; BSR set to: 0
  2551  0007A2  9681               	bcf	3969,3,c	;volatile
  2552                           
  2553                           ; BSR set to: 0
  2554  0007A4  968A               	bcf	3978,3,c	;volatile
  2555                           
  2556                           ; BSR set to: 0
  2557  0007A6  A009               	btfss	_ui_buff+8,0,c	;volatile
  2558  0007A8  D002               	goto	l5335
  2559                           
  2560                           ; BSR set to: 0
  2561  0007AA  8082               	bsf	3970,0,c	;volatile
  2562  0007AC  908B               	bcf	3979,0,c	;volatile
  2563  0007AE                     l5335:
  2564                           
  2565                           ; BSR set to: 0
  2566  0007AE  A209               	btfss	_ui_buff+8,1,c	;volatile
  2567  0007B0  D002               	goto	l5336
  2568                           
  2569                           ; BSR set to: 0
  2570  0007B2  8282               	bsf	3970,1,c	;volatile
  2571  0007B4  928B               	bcf	3979,1,c	;volatile
  2572  0007B6                     l5336:
  2573                           
  2574                           ; BSR set to: 0
  2575  0007B6  A409               	btfss	_ui_buff+8,2,c	;volatile
  2576  0007B8  D002               	goto	l5337
  2577                           
  2578                           ; BSR set to: 0
  2579  0007BA  8482               	bsf	3970,2,c	;volatile
  2580  0007BC  948B               	bcf	3979,2,c	;volatile
  2581  0007BE                     l5337:
  2582                           
  2583                           ; BSR set to: 0
  2584  0007BE  A609               	btfss	_ui_buff+8,3,c	;volatile
  2585  0007C0  D002               	goto	l5338
  2586                           
  2587                           ; BSR set to: 0
  2588  0007C2  8682               	bsf	3970,3,c	;volatile
  2589  0007C4  968B               	bcf	3979,3,c	;volatile
  2590  0007C6                     l5338:
  2591                           
  2592                           ; BSR set to: 0
  2593  0007C6  A809               	btfss	_ui_buff+8,4,c	;volatile
  2594  0007C8  D002               	goto	l5339
  2595                           
  2596                           ; BSR set to: 0
  2597  0007CA  8882               	bsf	3970,4,c	;volatile
  2598  0007CC  988B               	bcf	3979,4,c	;volatile
  2599  0007CE                     l5339:
  2600                           
  2601                           ; BSR set to: 0
  2602  0007CE  AA09               	btfss	_ui_buff+8,5,c	;volatile
  2603  0007D0  D002               	goto	l5340
  2604                           
  2605                           ; BSR set to: 0
  2606  0007D2  8A82               	bsf	3970,5,c	;volatile
  2607  0007D4  9A8B               	bcf	3979,5,c	;volatile
  2608  0007D6                     l5340:
  2609                           
  2610                           ; BSR set to: 0
  2611  0007D6  AC09               	btfss	_ui_buff+8,6,c	;volatile
  2612  0007D8  D002               	goto	l5341
  2613                           
  2614                           ; BSR set to: 0
  2615  0007DA  8A81               	bsf	3969,5,c	;volatile
  2616  0007DC  9A8A               	bcf	3978,5,c	;volatile
  2617  0007DE                     l5341:
  2618                           
  2619                           ; BSR set to: 0
  2620  0007DE  AE09               	btfss	_ui_buff+8,7,c	;volatile
  2621  0007E0  D002               	goto	l5342
  2622                           
  2623                           ; BSR set to: 0
  2624  0007E2  8881               	bsf	3969,4,c	;volatile
  2625  0007E4  988A               	bcf	3978,4,c	;volatile
  2626  0007E6                     l5342:
  2627                           
  2628                           ; BSR set to: 0
  2629  0007E6  A00C               	btfss	_ui_buff+11,0,c	;volatile
  2630  0007E8  D05F               	goto	l19465
  2631  0007EA  D63E               	goto	l19069
  2632  0007EC                     l19427:
  2633                           
  2634                           ; BSR set to: 0
  2635  0007EC  5067               	movf	_ui_ld,w,c
  2636  0007EE  E05C               	bz	l19465
  2637                           
  2638                           ; BSR set to: 0
  2639  0007F0  0E0A               	movlw	10
  2640  0007F2  6067               	cpfslt	_ui_ld,c
  2641  0007F4  D005               	goto	l19437
  2642                           
  2643                           ; BSR set to: 0
  2644  0007F6  88BD               	bsf	4029,4,c	;volatile
  2645                           
  2646                           ; BSR set to: 0
  2647  0007F8  0E7F               	movlw	127
  2648  0007FA  6EBE               	movwf	4030,c	;volatile
  2649                           
  2650                           ; BSR set to: 0
  2651  0007FC  3867               	swapf	_ui_ld,w,c
  2652  0007FE  D908               	call	PL64	;call to abstracted procedure
  2653  000800                     l19437:
  2654                           
  2655                           ; BSR set to: 0
  2656  000800  9481               	bcf	3969,2,c	;volatile
  2657                           
  2658                           ; BSR set to: 0
  2659  000802  948A               	bcf	3978,2,c	;volatile
  2660                           
  2661                           ; BSR set to: 0
  2662  000804  A00A               	btfss	_ui_buff+9,0,c	;volatile
  2663  000806  D002               	goto	l5347
  2664                           
  2665                           ; BSR set to: 0
  2666  000808  8082               	bsf	3970,0,c	;volatile
  2667  00080A  908B               	bcf	3979,0,c	;volatile
  2668  00080C                     l5347:
  2669                           
  2670                           ; BSR set to: 0
  2671  00080C  A20A               	btfss	_ui_buff+9,1,c	;volatile
  2672  00080E  D002               	goto	l5348
  2673                           
  2674                           ; BSR set to: 0
  2675  000810  8282               	bsf	3970,1,c	;volatile
  2676  000812  928B               	bcf	3979,1,c	;volatile
  2677  000814                     l5348:
  2678                           
  2679                           ; BSR set to: 0
  2680  000814  A40A               	btfss	_ui_buff+9,2,c	;volatile
  2681  000816  D002               	goto	l5349
  2682                           
  2683                           ; BSR set to: 0
  2684  000818  8482               	bsf	3970,2,c	;volatile
  2685  00081A  948B               	bcf	3979,2,c	;volatile
  2686  00081C                     l5349:
  2687                           
  2688                           ; BSR set to: 0
  2689  00081C  A60A               	btfss	_ui_buff+9,3,c	;volatile
  2690  00081E  D002               	goto	l5350
  2691                           
  2692                           ; BSR set to: 0
  2693  000820  8682               	bsf	3970,3,c	;volatile
  2694  000822  968B               	bcf	3979,3,c	;volatile
  2695  000824                     l5350:
  2696                           
  2697                           ; BSR set to: 0
  2698  000824  A80A               	btfss	_ui_buff+9,4,c	;volatile
  2699  000826  D002               	goto	l5351
  2700                           
  2701                           ; BSR set to: 0
  2702  000828  8882               	bsf	3970,4,c	;volatile
  2703  00082A  988B               	bcf	3979,4,c	;volatile
  2704  00082C                     l5351:
  2705                           
  2706                           ; BSR set to: 0
  2707  00082C  AA0A               	btfss	_ui_buff+9,5,c	;volatile
  2708  00082E  D002               	goto	l5352
  2709                           
  2710                           ; BSR set to: 0
  2711  000830  8A82               	bsf	3970,5,c	;volatile
  2712  000832  9A8B               	bcf	3979,5,c	;volatile
  2713  000834                     l5352:
  2714                           
  2715                           ; BSR set to: 0
  2716  000834  AC0A               	btfss	_ui_buff+9,6,c	;volatile
  2717  000836  D002               	goto	l5353
  2718                           
  2719                           ; BSR set to: 0
  2720  000838  8A81               	bsf	3969,5,c	;volatile
  2721  00083A  9A8A               	bcf	3978,5,c	;volatile
  2722  00083C                     l5353:
  2723                           
  2724                           ; BSR set to: 0
  2725  00083C  AE0A               	btfss	_ui_buff+9,7,c	;volatile
  2726  00083E  D002               	goto	l5354
  2727                           
  2728                           ; BSR set to: 0
  2729  000840  8881               	bsf	3969,4,c	;volatile
  2730  000842  988A               	bcf	3978,4,c	;volatile
  2731  000844                     l5354:
  2732                           
  2733                           ; BSR set to: 0
  2734  000844  A20C               	btfss	_ui_buff+11,1,c	;volatile
  2735  000846  D030               	goto	l19465
  2736  000848  D63B               	goto	l19101
  2737  00084A                     l19463:
  2738                           
  2739                           ; BSR set to: 0
  2740  00084A  5021               	movf	_tim_ui,w,c	;volatile
  2741                           
  2742                           ; Switch size 1, requested type "space"
  2743                           ; Number of cases is 16, Range of values is 0 to 15
  2744                           ; switch strategies available:
  2745                           ; Name         Instructions Cycles
  2746                           ; simple_byte           49    25 (average)
  2747                           ;	Chosen strategy is simple_byte
  2748  00084C  E101 D5DE          	bz	l19039
  2749  000850  0A01               	xorlw	1	; case 1
  2750  000852  E101 D60C          	bz	l19071
  2751  000856  0A03               	xorlw	3	; case 2
  2752  000858  E101 D635          	bz	l19103
  2753  00085C  0A01               	xorlw	1	; case 3
  2754  00085E  E101 D642          	bz	l19121
  2755  000862  0A07               	xorlw	7	; case 4
  2756  000864  E101 D66D          	bz	l19153
  2757  000868  0A01               	xorlw	1	; case 5
  2758  00086A  E101 D68B          	bz	l19179
  2759  00086E  0A03               	xorlw	3	; case 6
  2760  000870  E101 D6A0          	bz	l19201
  2761  000874  0A01               	xorlw	1	; case 7
  2762  000876  E101 D6AD          	bz	l19219
  2763  00087A  0A0F               	xorlw	15	; case 8
  2764  00087C  E101 D6D8          	bz	l19251
  2765  000880  0A01               	xorlw	1	; case 9
  2766  000882  E101 D700          	bz	l19283
  2767  000886  0A03               	xorlw	3	; case 10
  2768  000888  E101 D70D          	bz	l19301
  2769  00088C  0A01               	xorlw	1	; case 11
  2770  00088E  E101 D727          	bz	l19323
  2771  000892  0A07               	xorlw	7	; case 12
  2772  000894  E101 D73F          	bz	l19345
  2773  000898  0A01               	xorlw	1	; case 13
  2774  00089A  E101 D74A          	bz	l19361
  2775  00089E  0A03               	xorlw	3	; case 14
  2776  0008A0  E101 D776          	bz	l19395
  2777  0008A4  0A01               	xorlw	1	; case 15
  2778  0008A6  E0A2               	bz	l19427
  2779  0008A8                     l19465:
  2780                           
  2781                           ; BSR set to: 0
  2782  0008A8  2A21               	incf	_tim_ui,f,c	;volatile
  2783                           
  2784                           ; BSR set to: 0
  2785  0008AA  0E0F               	movlw	15
  2786  0008AC  6421               	cpfsgt	_tim_ui,c	;volatile
  2787  0008AE  D001               	goto	l5357
  2788                           
  2789                           ; BSR set to: 0
  2790  0008B0  6A21               	clrf	_tim_ui,c	;volatile
  2791  0008B2                     l5357:
  2792                           
  2793                           ; BSR set to: 0
  2794                           ;main.c: 324: tim_ui.ok=0;
  2795  0008B2  6A22               	clrf	_tim_ui+1,c	;volatile
  2796  0008B4                     l19471:
  2797                           
  2798                           ; BSR set to: 0
  2799                           ;main.c: 325: }
  2800                           ;main.c: 326: if(pwm.adc_ok)
  2801  0008B4  51D0               	movf	(_pwm+2)& (0+255),w,b
  2802  0008B6  E101 D4C6          	bz	l18855
  2803                           
  2804                           ; BSR set to: 0
  2805                           ;main.c: 327: {
  2806                           ;main.c: 328: pwm_cnt++;
  2807  0008BA  2A2A               	incf	_pwm_cnt,f,c
  2808                           
  2809                           ; BSR set to: 0
  2810                           ;main.c: 329: if(pwm_cnt==2)
  2811  0008BC  0E02               	movlw	2
  2812  0008BE  182A               	xorwf	_pwm_cnt,w,c
  2813  0008C0  E134               	bnz	l19497
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;main.c: 330: {
  2817                           ;main.c: 331: if(pwm.load_t>2500)
  2818  0008C2  0EC5               	movlw	197
  2819  0008C4  5DD5               	subwf	(_pwm+7)& (0+255),w,b
  2820  0008C6  0E09               	movlw	9
  2821  0008C8  59D6               	subwfb	(_pwm+8)& (0+255),w,b
  2822  0008CA  E31F               	bnc	l19483
  2823                           
  2824                           ; BSR set to: 0
  2825                           ;main.c: 332: {
  2826                           ;main.c: 333: pwm_bat=120*(unsigned long)pwm.load_t/pwm.bat_t;
  2827  0008CC  C0D5  F03D         	movff	_pwm+7,___lmul@multiplier
  2828  0008D0  C0D6  F03E         	movff	_pwm+8,___lmul@multiplier+1
  2829  0008D4  6A3F               	clrf	___lmul@multiplier+2,c
  2830  0008D6  6A40               	clrf	___lmul@multiplier+3,c
  2831  0008D8  0E78               	movlw	120
  2832  0008DA  6E41               	movwf	___lmul@multiplicand,c
  2833  0008DC  6A42               	clrf	___lmul@multiplicand+1,c
  2834  0008DE  6A43               	clrf	___lmul@multiplicand+2,c
  2835  0008E0  6A44               	clrf	___lmul@multiplicand+3,c
  2836  0008E2  EC4C  F00E         	call	___lmul	;wreg free
  2837  0008E6  D86B               	call	PL26	;call to abstracted procedure
  2838  0008E8  C0D3  F04D         	movff	_pwm+5,___lldiv@divisor
  2839  0008EC  C0D4  F04E         	movff	_pwm+6,___lldiv@divisor+1
  2840  0008F0  6A4F               	clrf	___lldiv@divisor+2,c
  2841  0008F2  6A50               	clrf	___lldiv@divisor+3,c
  2842  0008F4  ECF7  F00C         	call	___lldiv	;wreg free
  2843  0008F8  C049  F073         	movff	?___lldiv,_pwm_bat
  2844  0008FC  C04A  F074         	movff	?___lldiv+1,_pwm_bat+1
  2845                           
  2846                           ;main.c: 335: pwm_bat-=13;
  2847  000900  0E0D               	movlw	13
  2848  000902  5E73               	subwf	_pwm_bat,f,c
  2849  000904  0E00               	movlw	0
  2850  000906  5A74               	subwfb	_pwm_bat+1,f,c
  2851                           
  2852                           ;main.c: 336: }
  2853  000908  D004               	goto	l19485
  2854  00090A                     l19483:
  2855                           
  2856                           ; BSR set to: 0
  2857                           ;main.c: 337: else{
  2858                           ;main.c: 338: pwm_bat=310;
  2859  00090A  0E01               	movlw	1
  2860  00090C  6E74               	movwf	_pwm_bat+1,c
  2861  00090E  0E36               	movlw	54
  2862  000910  6E73               	movwf	_pwm_bat,c
  2863  000912                     l19485:
  2864                           
  2865                           ;main.c: 339: }
  2866                           ;main.c: 340: if(pwm_bat<=200&&pwm_bat>=180)
  2867  000912  5074               	movf	_pwm_bat+1,w,c
  2868  000914  E10A               	bnz	l19497
  2869  000916  0EC9               	movlw	201
  2870  000918  5C73               	subwf	_pwm_bat,w,c
  2871  00091A  E207               	bc	l19497
  2872  00091C  5074               	movf	_pwm_bat+1,w,c
  2873  00091E  E103               	bnz	u11860
  2874  000920  0EB4               	movlw	180
  2875  000922  5C73               	subwf	_pwm_bat,w,c
  2876  000924  E302               	bnc	l19497
  2877  000926                     u11860:
  2878                           
  2879                           ;main.c: 341: {
  2880                           ;main.c: 342: bat.bat=310;
  2881  000926  D878               	call	PL66	;call to abstracted procedure
  2882                           
  2883                           ;main.c: 343: bat.dian=0;
  2884                           
  2885                           ;main.c: 344: pwm.duty=0;
  2886                           
  2887                           ; BSR set to: 0
  2888                           ;main.c: 345: lowbat_init=0;
  2889  000928  D86D               	call	PL60	;call to abstracted procedure
  2890  00092A                     l19497:
  2891                           
  2892                           ;main.c: 351: }
  2893                           ;main.c: 352: }
  2894                           ;main.c: 353: if(pwm_cnt>=5)
  2895  00092A  0E04               	movlw	4
  2896  00092C  642A               	cpfsgt	_pwm_cnt,c
  2897  00092E  D034               	goto	l19507
  2898                           
  2899                           ;main.c: 354: {
  2900                           ;main.c: 356: pw_t=300000ul*pw/((unsigned long)pwm_bat*pwm_bat);
  2901  000930  507C               	movf	_pw,w,c
  2902  000932  6E3D               	movwf	___lmul@multiplier,c
  2903  000934  6A3E               	clrf	___lmul@multiplier+1,c
  2904  000936  6A3F               	clrf	___lmul@multiplier+2,c
  2905  000938  6A40               	clrf	___lmul@multiplier+3,c
  2906  00093A  0EE0               	movlw	224
  2907  00093C  6E41               	movwf	___lmul@multiplicand,c
  2908  00093E  0E93               	movlw	147
  2909  000940  6E42               	movwf	___lmul@multiplicand+1,c
  2910  000942  0E04               	movlw	4
  2911  000944  6E43               	movwf	___lmul@multiplicand+2,c
  2912  000946  6A44               	clrf	___lmul@multiplicand+3,c
  2913  000948  EC4C  F00E         	call	___lmul	;wreg free
  2914  00094C  D838               	call	PL26	;call to abstracted procedure
  2915  00094E  C073  F03D         	movff	_pwm_bat,___lmul@multiplier
  2916  000952  C074  F03E         	movff	_pwm_bat+1,___lmul@multiplier+1
  2917  000956  6A3F               	clrf	___lmul@multiplier+2,c
  2918  000958  6A40               	clrf	___lmul@multiplier+3,c
  2919  00095A  C073  F041         	movff	_pwm_bat,___lmul@multiplicand
  2920  00095E  C074  F042         	movff	_pwm_bat+1,___lmul@multiplicand+1
  2921  000962  6A43               	clrf	___lmul@multiplicand+2,c
  2922  000964  6A44               	clrf	___lmul@multiplicand+3,c
  2923  000966  EC4C  F00E         	call	___lmul	;wreg free
  2924  00096A  C03D  F04D         	movff	?___lmul,___lldiv@divisor
  2925  00096E  C03E  F04E         	movff	?___lmul+1,___lldiv@divisor+1
  2926  000972  C03F  F04F         	movff	?___lmul+2,___lldiv@divisor+2
  2927  000976  C040  F050         	movff	?___lmul+3,___lldiv@divisor+3
  2928  00097A  ECF7  F00C         	call	___lldiv	;wreg free
  2929  00097E  C049  F06C         	movff	?___lldiv,_pw_t
  2930  000982  C04A  F06D         	movff	?___lldiv+1,_pw_t+1
  2931  000986  C04B  F06E         	movff	?___lldiv+2,_pw_t+2
  2932  00098A  C04C  F06F         	movff	?___lldiv+3,_pw_t+3
  2933                           
  2934                           ;main.c: 357: cfg_flag=1;
  2935  00098E  0E01               	movlw	1
  2936  000990  6E75               	movwf	_cfg_flag,c
  2937                           
  2938                           ;main.c: 358: pwm_cnt=0;
  2939  000992  6A2A               	clrf	_pwm_cnt,c
  2940                           
  2941                           ;main.c: 359: pwm.adc_ok=0;
  2942  000994  0100               	movlb	0	; () banked
  2943  000996  6BD0               	clrf	(_pwm+2)& (0+255),b
  2944  000998                     l19507:
  2945                           
  2946                           ;main.c: 361: }
  2947                           ;main.c: 365: pwm.adc_ok=0;
  2948  000998  0100               	movlb	0	; () banked
  2949  00099A  6BD0               	clrf	(_pwm+2)& (0+255),b
  2950  00099C  D454               	goto	l18855
  2951  00099E                     __end_of_main:
  2952                           	opt stack 0
  2953  00099E                     PL14:
  2954                           	opt stack 2
  2955  00099E  6E3D               	movwf	add_task_id@interval_ms,c
  2956  0009A0  0E01               	movlw	1
  2957  0009A2  6E3E               	movwf	add_task_id@interval_ms+1,c
  2958  0009A4  6A3F               	clrf	add_task_id@interval_ms+2,c
  2959  0009A6  6A40               	clrf	add_task_id@interval_ms+3,c
  2960  0009A8  0C01               	retlw	1
  2961  0009AA                     __end_ofPL14:
  2962                           	opt stack 0
  2963  0009AA                     PL16:
  2964                           	opt stack 3
  2965  0009AA  6EA1               	movwf	4001,c	;volatile
  2966  0009AC  94AA               	bcf	4010,2,c	;volatile
  2967  0009AE  94A9               	bcf	4009,2,c	;volatile
  2968  0009B0  82A1               	bsf	4001,1,c	;volatile
  2969  0009B2                     l2012:
  2970  0009B2  B2A1               	btfsc	4001,1,c	;volatile
  2971  0009B4  D7FE               	goto	l2012
  2972  0009B6  94AA               	bcf	4010,2,c	;volatile
  2973  0009B8  50A3               	movf	4003,w,c	;volatile
  2974  0009BA  0B0F               	andlw	15
  2975  0009BC  0012               	return	
  2976  0009BE                     __end_ofPL16:
  2977                           	opt stack 0
  2978  0009BE                     PL26:
  2979                           	opt stack 3
  2980  0009BE  C03D  F049         	movff	?___lmul,___lldiv@dividend
  2981  0009C2  C03E  F04A         	movff	?___lmul+1,___lldiv@dividend+1
  2982  0009C6  C03F  F04B         	movff	?___lmul+2,___lldiv@dividend+2
  2983  0009CA  C040  F04C         	movff	?___lmul+3,___lldiv@dividend+3
  2984  0009CE  0012               	return	
  2985  0009D0                     __end_ofPL26:
  2986                           	opt stack 0
  2987  0009D0                     PL28:
  2988                           	opt stack 3
  2989  0009D0  0E60               	movlw	96
  2990  0009D2  6EA0               	movwf	4000,c	;volatile
  2991  0009D4  0C39               	retlw	57
  2992  0009D6                     __end_ofPL28:
  2993                           	opt stack 0
  2994  0009D6                     PL30:
  2995                           	opt stack 3
  2996  0009D6  0E60               	movlw	96
  2997  0009D8  6EA0               	movwf	4000,c	;volatile
  2998  0009DA  0C15               	retlw	21
  2999  0009DC                     __end_ofPL30:
  3000                           	opt stack 0
  3001  0009DC                     PL42:
  3002                           	opt stack 2
  3003  0009DC  3868               	swapf	_ui_ld+1,w,c
  3004  0009DE  42E8               	rrncf	wreg,f,c
  3005  0009E0  0BF8               	andlw	248
  3006  0009E2  6EC2               	movwf	4034,c	;volatile
  3007  0009E4  0012               	return	
  3008  0009E6                     __end_ofPL42:
  3009                           	opt stack 0
  3010  0009E6                     PL50:
  3011                           	opt stack 2
  3012  0009E6  3867               	swapf	_ui_ld,w,c
  3013  0009E8  42E8               	rrncf	wreg,f,c
  3014  0009EA  0BF8               	andlw	248
  3015  0009EC  6EC4               	movwf	4036,c	;volatile
  3016  0009EE  0012               	return	
  3017  0009F0                     __end_ofPL50:
  3018                           	opt stack 0
  3019  0009F0                     PL52:
  3020                           	opt stack 2
  3021  0009F0  42E8               	rrncf	wreg,f,c
  3022  0009F2  0BF8               	andlw	248
  3023  0009F4  6EC4               	movwf	4036,c	;volatile
  3024  0009F6  0012               	return	
  3025  0009F8                     __end_ofPL52:
  3026                           	opt stack 0
  3027  0009F8                     PL54:
  3028                           	opt stack 2
  3029  0009F8  6E66               	movwf	(??_main+1)& (0+255),c
  3030  0009FA  6A65               	clrf	??_main& (0+255),c
  3031  0009FC  50A2               	movf	4002,w,c	;volatile
  3032  0009FE  1065               	iorwf	??_main,w,c
  3033  000A00  0100               	movlb	0	; () banked
  3034  000A02  0012               	return	
  3035  000A04                     __end_ofPL54:
  3036                           	opt stack 0
  3037  000A04                     PL60:
  3038                           	opt stack 2
  3039  000A04  6E71               	movwf	_bat+1,c
  3040  000A06  6A70               	clrf	_bat,c
  3041  000A08  0100               	movlb	0	; () banked
  3042  000A0A  6BCE               	clrf	_pwm& (0+255),b
  3043  000A0C  6A2F               	clrf	_lowbat_init,c
  3044  000A0E  0012               	return	
  3045  000A10                     __end_ofPL60:
  3046                           	opt stack 0
  3047  000A10                     PL64:
  3048                           	opt stack 2
  3049  000A10  42E8               	rrncf	wreg,f,c
  3050  000A12  0BF8               	andlw	248
  3051  000A14  6EC2               	movwf	4034,c	;volatile
  3052  000A16  0012               	return	
  3053  000A18                     __end_ofPL64:
  3054                           	opt stack 0
  3055  000A18                     PL66:
  3056                           	opt stack 3
  3057  000A18  0E01               	movlw	1
  3058  000A1A  6E72               	movwf	_bat+2,c
  3059  000A1C  0C36               	retlw	54
  3060  000A1E                     __end_ofPL66:
  3061                           	opt stack 0
  3062  000A1E                     PL68:
  3063                           	opt stack 2
  3064  000A1E  0EC0               	movlw	192
  3065  000A20  6EBE               	movwf	4030,c	;volatile
  3066  000A22  386A               	swapf	_ui_ld+3,w,c
  3067  000A24  0012               	return	
  3068  000A26                     __end_ofPL68:
  3069                           	opt stack 0
  3070  000A26                     PL72:
  3071                           	opt stack 2
  3072  000A26  0E73               	movlw	115
  3073  000A28  5C71               	subwf	_bat+1,w,c
  3074  000A2A  0E01               	movlw	1
  3075  000A2C  5872               	subwfb	_bat+2,w,c
  3076  000A2E  0012               	return	
  3077  000A30                     __end_ofPL72:
  3078                           	opt stack 0
  3079  000A30                     PL74:
  3080                           	opt stack 2
  3081  000A30  0E87               	movlw	135
  3082  000A32  5C71               	subwf	_bat+1,w,c
  3083  000A34  0E01               	movlw	1
  3084  000A36  5872               	subwfb	_bat+2,w,c
  3085  000A38  0012               	return	
  3086  000A3A                     __end_ofPL74:
  3087                           	opt stack 0
  3088  000A3A                     PL76:
  3089                           	opt stack 3
  3090  000A3A  0E00               	movlw	0
  3091  000A3C  B287               	btfsc	3975,1,c	;volatile
  3092  000A3E  0E01               	movlw	1
  3093  000A40  6E38               	movwf	_yd,c
  3094  000A42  0012               	return	
  3095  000A44                     __end_ofPL76:
  3096                           	opt stack 0
  3097  000A44                     PL82:
  3098                           	opt stack 2
  3099  000A44  0E03               	movlw	3
  3100  000A46  6E41               	movwf	add_task_id@suc_max,c
  3101  000A48  C07B  F042         	movff	_ui_id,add_task_id@task_id
  3102  000A4C  0C03               	retlw	3
  3103  000A4E                     __end_ofPL82:
  3104                           	opt stack 0
  3105  000A4E                     PL86:
  3106                           	opt stack 2
  3107  000A4E  0E3E               	movlw	62
  3108  000A50  5C71               	subwf	_bat+1,w,c
  3109  000A52  0E01               	movlw	1
  3110  000A54  5872               	subwfb	_bat+2,w,c
  3111  000A56  0012               	return	
  3112  000A58                     __end_ofPL86:
  3113                           	opt stack 0
  3114  000A58                     PL88:
  3115                           	opt stack 2
  3116  000A58  0E5A               	movlw	90
  3117  000A5A  5C71               	subwf	_bat+1,w,c
  3118  000A5C  0E01               	movlw	1
  3119  000A5E  5872               	subwfb	_bat+2,w,c
  3120  000A60  0012               	return	
  3121  000A62                     __end_ofPL88:
  3122                           	opt stack 0
  3123  000A62                     PL90:
  3124                           	opt stack 2
  3125  000A62  42E8               	rrncf	wreg,f,c
  3126  000A64  0BF8               	andlw	248
  3127  000A66  6EC6               	movwf	4038,c	;volatile
  3128  000A68  0012               	return	
  3129  000A6A                     __end_ofPL90:
  3130                           	opt stack 0
  3131                           tblptru	equ	0xFF8
  3132                           tblptrh	equ	0xFF7
  3133                           tblptrl	equ	0xFF6
  3134                           tablat	equ	0xFF5
  3135                           prodl	equ	0xFF3
  3136                           intcon	equ	0xFF2
  3137                           intcon2	equ	0xFF1
  3138                           intcon3	equ	0xFF0
  3139                           postinc0	equ	0xFEE
  3140                           wreg	equ	0xFE8
  3141                           postdec1	equ	0xFE5
  3142                           fsr1l	equ	0xFE1
  3143                           indf2	equ	0xFDF
  3144                           postinc2	equ	0xFDE
  3145                           postdec2	equ	0xFDD
  3146                           fsr2h	equ	0xFDA
  3147                           fsr2l	equ	0xFD9
  3148                           status	equ	0xFD8
  3149                           
  3150 ;; *************** function _task_init *****************
  3151 ;; Defined at:
  3152 ;;		line 7 in file ".\src\task.c"
  3153 ;; Parameters:    Size  Location     Type
  3154 ;;		None
  3155 ;; Auto vars:     Size  Location     Type
  3156 ;;  i               1    1[COMRAM] unsigned char 
  3157 ;; Return value:  Size  Location     Type
  3158 ;;                  1    wreg      void 
  3159 ;; Registers used:
  3160 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3161 ;; Tracked objects:
  3162 ;;		On entry : 0/0
  3163 ;;		On exit  : 0/0
  3164 ;;		Unchanged: 0/0
  3165 ;; Data sizes:     COMRAM   BANK0
  3166 ;;      Params:         0       0
  3167 ;;      Locals:         1       0
  3168 ;;      Temps:          0       0
  3169 ;;      Totals:         1       0
  3170 ;;Total ram usage:        1 bytes
  3171 ;; Hardware stack levels used:    1
  3172 ;; Hardware stack levels required when called:    2
  3173 ;; This function calls:
  3174 ;;		Nothing
  3175 ;; This function is called by:
  3176 ;;		_main
  3177 ;; This function uses a non-reentrant model
  3178 ;;
  3179                           
  3180                           	psect	text1
  3181  001DC0                     __ptext1:
  3182                           	opt stack 0
  3183  001DC0                     _task_init:
  3184                           	opt stack 5
  3185                           
  3186                           ;task.c: 8: for(unsigned char i=0; i<8; i++) {
  3187                           
  3188                           ; BSR set to: 0
  3189                           ;incstack = 0
  3190  001DC0  6A3D               	clrf	task_init@i,c
  3191  001DC2                     l18745:
  3192                           
  3193                           ;task.c: 9: task_list[i].active = 0;
  3194  001DC2  503D               	movf	task_init@i,w,c
  3195  001DC4  EC1C  F007         	call	PL22	;call to abstracted procedure
  3196  001DC8  6ADF               	clrf	indf2,c
  3197                           
  3198                           ;task.c: 10: task_list[i].ready = 0;
  3199  001DCA  503D               	movf	task_init@i,w,c
  3200  001DCC  D806               	call	PL58	;call to abstracted procedure
  3201  001DCE  6ADF               	clrf	indf2,c
  3202  001DD0  2A3D               	incf	task_init@i,f,c
  3203  001DD2  0E07               	movlw	7
  3204  001DD4  643D               	cpfsgt	task_init@i,c
  3205  001DD6  D7F5               	goto	l18745
  3206  001DD8  0C07               	retlw	7
  3207  001DDA                     __end_of_task_init:
  3208                           	opt stack 0
  3209  001DDA                     PL58:
  3210                           	opt stack 4
  3211  001DDA  0D09               	mullw	9
  3212  001DDC  50F3               	movf	prodl,w,c
  3213  001DDE  0F8C               	addlw	low (_task_list+6)
  3214  001DE0  6ED9               	movwf	fsr2l,c
  3215  001DE2  6ADA               	clrf	fsr2h,c
  3216  001DE4  0012               	return	
  3217  001DE6                     __end_ofPL58:
  3218                           	opt stack 0
  3219                           tblptru	equ	0xFF8
  3220                           tblptrh	equ	0xFF7
  3221                           tblptrl	equ	0xFF6
  3222                           tablat	equ	0xFF5
  3223                           prodl	equ	0xFF3
  3224                           intcon	equ	0xFF2
  3225                           intcon2	equ	0xFF1
  3226                           intcon3	equ	0xFF0
  3227                           postinc0	equ	0xFEE
  3228                           wreg	equ	0xFE8
  3229                           postdec1	equ	0xFE5
  3230                           fsr1l	equ	0xFE1
  3231                           indf2	equ	0xFDF
  3232                           postinc2	equ	0xFDE
  3233                           postdec2	equ	0xFDD
  3234                           fsr2h	equ	0xFDA
  3235                           fsr2l	equ	0xFD9
  3236                           status	equ	0xFD8
  3237                           
  3238 ;; *************** function _find_task *****************
  3239 ;; Defined at:
  3240 ;;		line 64 in file ".\src\task.c"
  3241 ;; Parameters:    Size  Location     Type
  3242 ;;  task_           1   40[COMRAM] PTR struct task
  3243 ;;		 -> task_list(72), 
  3244 ;; Auto vars:     Size  Location     Type
  3245 ;;		None
  3246 ;; Return value:  Size  Location     Type
  3247 ;;                  1    wreg      void 
  3248 ;; Registers used:
  3249 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3250 ;; Tracked objects:
  3251 ;;		On entry : 3F/0
  3252 ;;		On exit  : 0/0
  3253 ;;		Unchanged: 0/0
  3254 ;; Data sizes:     COMRAM   BANK0
  3255 ;;      Params:         1       0
  3256 ;;      Locals:         0       0
  3257 ;;      Temps:          0       0
  3258 ;;      Totals:         1       0
  3259 ;;Total ram usage:        1 bytes
  3260 ;; Hardware stack levels used:    1
  3261 ;; Hardware stack levels required when called:    5
  3262 ;; This function calls:
  3263 ;;		_bat_task
  3264 ;;		_cb_task
  3265 ;;		_chrg_task
  3266 ;;		_key_task
  3267 ;;		_si_mic_task
  3268 ;;		_sleep_task
  3269 ;;		_ui_begin
  3270 ;;		_ui_cb
  3271 ;;		_ui_chrg
  3272 ;;		_ui_chrgfree
  3273 ;;		_ui_chrgfull
  3274 ;;		_ui_dl_getup
  3275 ;;		_ui_kl
  3276 ;;		_ui_smoend
  3277 ;;		_ui_smoing
  3278 ;;		_ui_timout
  3279 ;;		_ui_ts_off
  3280 ;;		_ui_ts_on
  3281 ;; This function is called by:
  3282 ;;		_main
  3283 ;; This function uses a non-reentrant model
  3284 ;;
  3285                           
  3286                           	psect	text2
  3287  001358                     __ptext2:
  3288                           	opt stack 0
  3289  001358                     _find_task:
  3290                           	opt stack 2
  3291                           
  3292                           ; BSR set to: 0
  3293                           ;task.c: 116: switch (task_->id)
  3294                           
  3295                           ;incstack = 0
  3296  001358  D048               	goto	l18791
  3297  00135A                     l18753:
  3298                           
  3299                           ; BSR set to: 0
  3300                           ;task.c: 119: ui_cb(task_);
  3301  00135A  C064  F04A         	movff	find_task@task_,ui_cb@task_
  3302  00135E  EF2F  F009         	goto	_ui_cb	;wreg free
  3303  001362                     l18755:
  3304                           
  3305                           ; BSR set to: 0
  3306                           ;task.c: 122: ui_chrg(task_);
  3307  001362  C064  F048         	movff	find_task@task_,ui_chrg@task_
  3308  001366  EF25  F00E         	goto	_ui_chrg	;wreg free
  3309  00136A                     l18757:
  3310                           
  3311                           ; BSR set to: 0
  3312                           ;task.c: 125: ui_chrgfree(task_);
  3313  00136A  C064  F048         	movff	find_task@task_,ui_chrgfree@task_
  3314  00136E  EFC7  F00E         	goto	_ui_chrgfree	;wreg free
  3315  001372                     l18759:
  3316                           
  3317                           ; BSR set to: 0
  3318                           ;task.c: 128: ui_chrgfull(task_);
  3319  001372  C064  F048         	movff	find_task@task_,ui_chrgfull@task_
  3320  001376  EF72  F00E         	goto	_ui_chrgfull	;wreg free
  3321  00137A                     l18761:
  3322                           
  3323                           ; BSR set to: 0
  3324                           ;task.c: 131: ui_smoing(task_);
  3325  00137A  C064  F048         	movff	find_task@task_,ui_smoing@task_
  3326  00137E  EF6D  F00B         	goto	_ui_smoing	;wreg free
  3327  001382                     l18763:
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;task.c: 134: ui_dl_getup(task_);
  3331  001382  C064  F04A         	movff	find_task@task_,ui_dl_getup@task_
  3332  001386  EFBB  F00C         	goto	_ui_dl_getup	;wreg free
  3333  00138A                     l18765:
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;task.c: 137: ui_kl(task_);
  3337  00138A  C064  F048         	movff	find_task@task_,ui_kl@task_
  3338  00138E  EF9A  F00D         	goto	_ui_kl	;wreg free
  3339  001392                     l18767:
  3340                           
  3341                           ; BSR set to: 0
  3342                           ;task.c: 140: ui_ts_on(task_);
  3343  001392  C064  F04A         	movff	find_task@task_,ui_ts_on@task_
  3344  001396  EF1D  F00A         	goto	_ui_ts_on	;wreg free
  3345  00139A                     l18769:
  3346                           
  3347                           ; BSR set to: 0
  3348                           ;task.c: 143: ui_ts_off(task_);
  3349  00139A  C064  F04A         	movff	find_task@task_,ui_ts_off@task_
  3350  00139E  EF7D  F00A         	goto	_ui_ts_off	;wreg free
  3351  0013A2                     l18771:
  3352                           
  3353                           ; BSR set to: 0
  3354                           ;task.c: 146: si_mic_task(task_);
  3355  0013A2  C064  F05E         	movff	find_task@task_,si_mic_task@task_
  3356  0013A6  EF2D  F006         	goto	_si_mic_task	;wreg free
  3357  0013AA                     l18773:
  3358                           
  3359                           ; BSR set to: 0
  3360                           ;task.c: 149: ui_timout(task_);
  3361  0013AA  C064  F048         	movff	find_task@task_,ui_timout@task_
  3362  0013AE  EF92  F00E         	goto	_ui_timout	;wreg free
  3363  0013B2                     l18775:
  3364                           
  3365                           ; BSR set to: 0
  3366                           ;task.c: 152: cb_task(task_);
  3367  0013B2  C064  F05C         	movff	find_task@task_,cb_task@task_
  3368  0013B6  EFCF  F00A         	goto	_cb_task	;wreg free
  3369  0013BA                     l18777:
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;task.c: 155: chrg_task(task_);
  3373  0013BA  C064  F05E         	movff	find_task@task_,chrg_task@task_
  3374  0013BE  EFDD  F007         	goto	_chrg_task	;wreg free
  3375  0013C2                     l18779:
  3376                           
  3377                           ; BSR set to: 0
  3378                           ;task.c: 158: key_task(task_);
  3379  0013C2  C064  F04A         	movff	find_task@task_,key_task@task_
  3380  0013C6  EF8E  F008         	goto	_key_task	;wreg free
  3381  0013CA                     l18781:
  3382                           
  3383                           ; BSR set to: 0
  3384                           ;task.c: 161: bat_task(task_);
  3385  0013CA  C064  F05E         	movff	find_task@task_,bat_task@task_
  3386  0013CE  EF7C  F00C         	goto	_bat_task	;wreg free
  3387  0013D2                     l18783:
  3388                           
  3389                           ; BSR set to: 0
  3390                           ;task.c: 164: sleep_task(task_);
  3391  0013D2  C064  F03D         	movff	find_task@task_,sleep_task@task_
  3392  0013D6  EF32  F00D         	goto	_sleep_task	;wreg free
  3393  0013DA                     l18785:
  3394                           
  3395                           ; BSR set to: 0
  3396                           ;task.c: 167: ui_begin(task_);
  3397  0013DA  C064  F048         	movff	find_task@task_,ui_begin@task_
  3398  0013DE  EFF9  F00B         	goto	_ui_begin	;wreg free
  3399  0013E2                     l18787:
  3400                           
  3401                           ; BSR set to: 0
  3402                           ;task.c: 170: ui_smoend(task_);
  3403  0013E2  C064  F048         	movff	find_task@task_,ui_smoend@task_
  3404  0013E6  EFB6  F00B         	goto	_ui_smoend	;wreg free
  3405  0013EA                     l18791:
  3406                           
  3407                           ; BSR set to: 0
  3408  0013EA  5064               	movf	find_task@task_,w,c
  3409  0013EC  6ED9               	movwf	fsr2l,c
  3410  0013EE  6ADA               	clrf	fsr2h,c
  3411  0013F0  50DF               	movf	indf2,w,c
  3412                           
  3413                           ; Switch size 1, requested type "space"
  3414                           ; Number of cases is 18, Range of values is 0 to 17
  3415                           ; switch strategies available:
  3416                           ; Name         Instructions Cycles
  3417                           ; simple_byte           55    28 (average)
  3418                           ;	Chosen strategy is simple_byte
  3419  0013F2  E0B3               	bz	l18753
  3420  0013F4  0A01               	xorlw	1	; case 1
  3421  0013F6  E0B5               	bz	l18755
  3422  0013F8  0A03               	xorlw	3	; case 2
  3423  0013FA  E0B7               	bz	l18757
  3424  0013FC  0A01               	xorlw	1	; case 3
  3425  0013FE  E0B9               	bz	l18759
  3426  001400  0A07               	xorlw	7	; case 4
  3427  001402  E0BB               	bz	l18761
  3428  001404  0A01               	xorlw	1	; case 5
  3429  001406  E0BD               	bz	l18763
  3430  001408  0A03               	xorlw	3	; case 6
  3431  00140A  E0BF               	bz	l18765
  3432  00140C  0A01               	xorlw	1	; case 7
  3433  00140E  E0C1               	bz	l18767
  3434  001410  0A0F               	xorlw	15	; case 8
  3435  001412  E0C3               	bz	l18769
  3436  001414  0A01               	xorlw	1	; case 9
  3437  001416  E0C5               	bz	l18771
  3438  001418  0A03               	xorlw	3	; case 10
  3439  00141A  E0C7               	bz	l18773
  3440  00141C  0A01               	xorlw	1	; case 11
  3441  00141E  E0C9               	bz	l18775
  3442  001420  0A07               	xorlw	7	; case 12
  3443  001422  E0CB               	bz	l18777
  3444  001424  0A01               	xorlw	1	; case 13
  3445  001426  E0CD               	bz	l18779
  3446  001428  0A03               	xorlw	3	; case 14
  3447  00142A  E0CF               	bz	l18781
  3448  00142C  0A01               	xorlw	1	; case 15
  3449  00142E  E0D1               	bz	l18783
  3450  001430  0A1F               	xorlw	31	; case 16
  3451  001432  E0D3               	bz	l18785
  3452  001434  0A01               	xorlw	1	; case 17
  3453  001436  E0D5               	bz	l18787
  3454  001438  0012               	return		;funcret
  3455  00143A                     __end_of_find_task:
  3456                           	opt stack 0
  3457                           tblptru	equ	0xFF8
  3458                           tblptrh	equ	0xFF7
  3459                           tblptrl	equ	0xFF6
  3460                           tablat	equ	0xFF5
  3461                           prodl	equ	0xFF3
  3462                           intcon	equ	0xFF2
  3463                           intcon2	equ	0xFF1
  3464                           intcon3	equ	0xFF0
  3465                           postinc0	equ	0xFEE
  3466                           wreg	equ	0xFE8
  3467                           postdec1	equ	0xFE5
  3468                           fsr1l	equ	0xFE1
  3469                           indf2	equ	0xFDF
  3470                           postinc2	equ	0xFDE
  3471                           postdec2	equ	0xFDD
  3472                           fsr2h	equ	0xFDA
  3473                           fsr2l	equ	0xFD9
  3474                           status	equ	0xFD8
  3475                           
  3476 ;; *************** function _ui_ts_on *****************
  3477 ;; Defined at:
  3478 ;;		line 461 in file ".\src\ui.c"
  3479 ;; Parameters:    Size  Location     Type
  3480 ;;  task_           1   14[COMRAM] PTR struct task
  3481 ;;		 -> task_list(72), 
  3482 ;; Auto vars:     Size  Location     Type
  3483 ;;		None
  3484 ;; Return value:  Size  Location     Type
  3485 ;;                  1    wreg      void 
  3486 ;; Registers used:
  3487 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3488 ;; Tracked objects:
  3489 ;;		On entry : 3F/0
  3490 ;;		On exit  : 0/0
  3491 ;;		Unchanged: 0/0
  3492 ;; Data sizes:     COMRAM   BANK0
  3493 ;;      Params:         1       0
  3494 ;;      Locals:         0       0
  3495 ;;      Temps:          1       0
  3496 ;;      Totals:         2       0
  3497 ;;Total ram usage:        2 bytes
  3498 ;; Hardware stack levels used:    1
  3499 ;; Hardware stack levels required when called:    3
  3500 ;; This function calls:
  3501 ;;		___lbdiv
  3502 ;;		_add_task_id
  3503 ;;		_ldz
  3504 ;;		_new_nixie
  3505 ;; This function is called by:
  3506 ;;		_find_task
  3507 ;; This function uses a non-reentrant model
  3508 ;;
  3509                           
  3510                           	psect	text3
  3511  00143A                     __ptext3:
  3512                           	opt stack 0
  3513  00143A                     _ui_ts_on:
  3514                           	opt stack 3
  3515                           
  3516                           ; BSR set to: 0
  3517                           ;ui.c: 463: if(task_->sucCnt<=9)
  3518                           
  3519                           ;incstack = 0
  3520  00143A  504A               	movf	ui_ts_on@task_,w,c
  3521  00143C  D84F               	call	PL2	;call to abstracted procedure
  3522  00143E  0E0A               	movlw	10
  3523  001440  60DF               	cpfslt	indf2,c
  3524  001442  D013               	goto	l18571
  3525                           
  3526                           ; BSR set to: 0
  3527                           ;ui.c: 464: {
  3528                           ;ui.c: 465: if(task_->sucCnt==0)
  3529  001444  504A               	movf	ui_ts_on@task_,w,c
  3530  001446  D84A               	call	PL2	;call to abstracted procedure
  3531  001448  50DF               	movf	indf2,w,c
  3532  00144A  E107               	bnz	l18569
  3533                           
  3534                           ; BSR set to: 0
  3535                           ;ui.c: 466: {
  3536                           ;ui.c: 467: ui.w =1;
  3537                           
  3538                           ;ui.c: 468: ui.u =1;
  3539                           
  3540                           ;ui.c: 469: ui.q =10;
  3541                           
  3542                           ; BSR set to: 0
  3543                           ;ui.c: 471: ui.ou_d =0;
  3544                           
  3545                           ;ui.c: 472: ui.wa =1;
  3546  00144C  ECC2  F00A         	call	PL12	;call to abstracted procedure
  3547                           
  3548                           ;ui.c: 473: ui.ts =1;
  3549  001450  6E14               	movwf	_ui+7,c	;volatile
  3550                           
  3551                           ; BSR set to: 0
  3552                           ;ui.c: 474: ui.yd =yd;
  3553                           
  3554                           ; BSR set to: 0
  3555                           ;ui.c: 476: ui.cnt =0;
  3556                           
  3557                           ; BSR set to: 0
  3558                           ;ui.c: 477: ldz(0);
  3559  001452  ECCB  F00A         	call	PL84	;call to abstracted procedure
  3560  001456  EC27  F00F         	call	_ldz
  3561  00145A                     l18569:
  3562                           
  3563                           ;ui.c: 481: }
  3564                           ;ui.c: 482: ldz(task_->sucCnt+1);
  3565  00145A  504A               	movf	ui_ts_on@task_,w,c
  3566  00145C  D83F               	call	PL2	;call to abstracted procedure
  3567  00145E  50DF               	movf	indf2,w,c
  3568  001460  6E4B               	movwf	??_ui_ts_on& (0+255),c
  3569  001462  284B               	incf	??_ui_ts_on,w,c
  3570  001464  EC27  F00F         	call	_ldz
  3571                           
  3572                           ;ui.c: 483: }
  3573  001468  D01C               	goto	l18585
  3574  00146A                     l18571:
  3575                           
  3576                           ; BSR set to: 0
  3577                           ;ui.c: 484: else if(task_->sucCnt<=30)
  3578  00146A  504A               	movf	ui_ts_on@task_,w,c
  3579  00146C  D837               	call	PL2	;call to abstracted procedure
  3580  00146E  0E1F               	movlw	31
  3581  001470  60DF               	cpfslt	indf2,c
  3582  001472  D001               	goto	l18575
  3583  001474  D016               	goto	l18585
  3584  001476                     l18575:
  3585                           
  3586                           ; BSR set to: 0
  3587                           ;ui.c: 489: else if(task_->sucCnt<=40)
  3588  001476  504A               	movf	ui_ts_on@task_,w,c
  3589  001478  D831               	call	PL2	;call to abstracted procedure
  3590  00147A  0E29               	movlw	41
  3591  00147C  60DF               	cpfslt	indf2,c
  3592  00147E  D00B               	goto	l18581
  3593                           
  3594                           ; BSR set to: 0
  3595                           ;ui.c: 490: {
  3596                           ;ui.c: 491: ldz(40-task_->sucCnt);
  3597  001480  504A               	movf	ui_ts_on@task_,w,c
  3598  001482  D82C               	call	PL2	;call to abstracted procedure
  3599  001484  50DF               	movf	indf2,w,c
  3600  001486  6E4B               	movwf	??_ui_ts_on& (0+255),c
  3601  001488  504B               	movf	??_ui_ts_on,w,c
  3602  00148A  0828               	sublw	40
  3603  00148C  EC27  F00F         	call	_ldz
  3604                           
  3605                           ;ui.c: 492: ui_ld.ts=10;
  3606  001490  0E0A               	movlw	10
  3607  001492  6E6B               	movwf	_ui_ld+4,c
  3608                           
  3609                           ;ui.c: 493: }
  3610  001494  D006               	goto	l18585
  3611  001496                     l18581:
  3612                           
  3613                           ; BSR set to: 0
  3614                           ;ui.c: 494: else
  3615                           ;ui.c: 495: {
  3616                           ;ui.c: 496: if(task_->sucCnt==99)
  3617  001496  504A               	movf	ui_ts_on@task_,w,c
  3618  001498  D821               	call	PL2	;call to abstracted procedure
  3619  00149A  0E63               	movlw	99
  3620  00149C  18DE               	xorwf	postinc2,w,c
  3621  00149E  E101               	bnz	l18585
  3622                           
  3623                           ; BSR set to: 0
  3624                           ;ui.c: 497: {
  3625                           ;ui.c: 498: ui_ld.ts=0;
  3626  0014A0  6A6B               	clrf	_ui_ld+4,c
  3627  0014A2                     l18585:
  3628                           
  3629                           ;ui.c: 499: }
  3630                           ;ui.c: 500: }
  3631                           ;ui.c: 501: if(((task_->sucCnt&1)==0)&&task_->sucCnt<40)
  3632  0014A2  504A               	movf	ui_ts_on@task_,w,c
  3633  0014A4  D81B               	call	PL2	;call to abstracted procedure
  3634  0014A6  B0DF               	btfsc	indf2,0,c
  3635  0014A8  D00B               	goto	l18595
  3636  0014AA  504A               	movf	ui_ts_on@task_,w,c
  3637  0014AC  D817               	call	PL2	;call to abstracted procedure
  3638  0014AE  0E28               	movlw	40
  3639  0014B0  60DF               	cpfslt	indf2,c
  3640  0014B2  D006               	goto	l18595
  3641                           
  3642                           ;ui.c: 502: {
  3643                           ;ui.c: 503: ui.num1 =pw/10;
  3644  0014B4  ECA8  F009         	call	PL48	;call to abstracted procedure
  3645  0014B8  ECAD  F00E         	call	___lbdiv
  3646                           
  3647                           ;ui.c: 504: ui.num2 =pw-ui.num1*10;
  3648                           
  3649                           ;ui.c: 505: ui.dian =bat.dian;
  3650  0014BC  ECB9  F00A         	call	PL10	;call to abstracted procedure
  3651  0014C0                     l18595:
  3652                           
  3653                           ;ui.c: 506: }
  3654                           ;ui.c: 507: new_nixie();
  3655  0014C0  EC35  F005         	call	_new_nixie	;wreg free
  3656                           
  3657                           ;ui.c: 508: if(task_->sucCnt==99)
  3658  0014C4  504A               	movf	ui_ts_on@task_,w,c
  3659  0014C6  D80A               	call	PL2	;call to abstracted procedure
  3660  0014C8  0E63               	movlw	99
  3661  0014CA  18DE               	xorwf	postinc2,w,c
  3662  0014CC  B4D8               	btfsc	status,2,c
  3663                           
  3664                           ;ui.c: 509: {
  3665                           ;ui.c: 510: if(PINA5&&(PINA1==0))
  3666  0014CE  AA86               	btfss	3974,5,c	;volatile
  3667  0014D0  0012               	return	
  3668  0014D2  B286               	btfsc	3974,1,c	;volatile
  3669  0014D4  0012               	return	
  3670                           
  3671                           ;ui.c: 511: {
  3672                           ;ui.c: 512: add_task_id(1,500,0,ui_id);
  3673  0014D6  D807               	call	PL4	;call to abstracted procedure
  3674  0014D8  EF1F  F00B         	goto	_add_task_id
  3675  0014DC                     __end_of_ui_ts_on:
  3676                           	opt stack 0
  3677  0014DC                     PL2:
  3678                           	opt stack 4
  3679  0014DC  6ED9               	movwf	fsr2l,c
  3680  0014DE  6ADA               	clrf	fsr2h,c
  3681  0014E0  0E08               	movlw	8
  3682  0014E2  26D9               	addwf	fsr2l,f,c
  3683  0014E4  0C08               	retlw	8
  3684  0014E6                     __end_ofPL2:
  3685                           	opt stack 0
  3686  0014E6                     PL4:
  3687                           	opt stack 2
  3688  0014E6  0EF4               	movlw	244
  3689  0014E8  6E3D               	movwf	add_task_id@interval_ms,c
  3690  0014EA  0E01               	movlw	1
  3691  0014EC  6E3E               	movwf	add_task_id@interval_ms+1,c
  3692  0014EE  6A3F               	clrf	add_task_id@interval_ms+2,c
  3693  0014F0  6A40               	clrf	add_task_id@interval_ms+3,c
  3694  0014F2  6A41               	clrf	add_task_id@suc_max,c
  3695  0014F4  C07B  F042         	movff	_ui_id,add_task_id@task_id
  3696  0014F8  0C01               	retlw	1
  3697  0014FA                     __end_ofPL4:
  3698                           	opt stack 0
  3699                           tblptru	equ	0xFF8
  3700                           tblptrh	equ	0xFF7
  3701                           tblptrl	equ	0xFF6
  3702                           tablat	equ	0xFF5
  3703                           prodl	equ	0xFF3
  3704                           intcon	equ	0xFF2
  3705                           intcon2	equ	0xFF1
  3706                           intcon3	equ	0xFF0
  3707                           postinc0	equ	0xFEE
  3708                           wreg	equ	0xFE8
  3709                           postdec1	equ	0xFE5
  3710                           fsr1l	equ	0xFE1
  3711                           indf2	equ	0xFDF
  3712                           postinc2	equ	0xFDE
  3713                           postdec2	equ	0xFDD
  3714                           fsr2h	equ	0xFDA
  3715                           fsr2l	equ	0xFD9
  3716                           status	equ	0xFD8
  3717                           
  3718 ;; *************** function _ui_ts_off *****************
  3719 ;; Defined at:
  3720 ;;		line 518 in file ".\src\ui.c"
  3721 ;; Parameters:    Size  Location     Type
  3722 ;;  task_           1   14[COMRAM] PTR struct task
  3723 ;;		 -> task_list(72), 
  3724 ;; Auto vars:     Size  Location     Type
  3725 ;;		None
  3726 ;; Return value:  Size  Location     Type
  3727 ;;                  1    wreg      void 
  3728 ;; Registers used:
  3729 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3730 ;; Tracked objects:
  3731 ;;		On entry : 3F/0
  3732 ;;		On exit  : 0/0
  3733 ;;		Unchanged: 0/0
  3734 ;; Data sizes:     COMRAM   BANK0
  3735 ;;      Params:         1       0
  3736 ;;      Locals:         0       0
  3737 ;;      Temps:          1       0
  3738 ;;      Totals:         2       0
  3739 ;;Total ram usage:        2 bytes
  3740 ;; Hardware stack levels used:    1
  3741 ;; Hardware stack levels required when called:    3
  3742 ;; This function calls:
  3743 ;;		___lbdiv
  3744 ;;		_add_task_id
  3745 ;;		_ldz
  3746 ;;		_new_nixie
  3747 ;; This function is called by:
  3748 ;;		_find_task
  3749 ;; This function uses a non-reentrant model
  3750 ;;
  3751                           
  3752                           	psect	text4
  3753  0014FA                     __ptext4:
  3754                           	opt stack 0
  3755  0014FA                     _ui_ts_off:
  3756                           	opt stack 3
  3757                           
  3758                           ; BSR set to: 0
  3759                           ;ui.c: 520: if(task_->sucCnt<=9)
  3760                           
  3761                           ;incstack = 0
  3762  0014FA  504A               	movf	ui_ts_off@task_,w,c
  3763  0014FC  EC6E  F00A         	call	PL2	;call to abstracted procedure
  3764  001500  0E0A               	movlw	10
  3765  001502  60DF               	cpfslt	indf2,c
  3766  001504  D013               	goto	l18623
  3767                           
  3768                           ; BSR set to: 0
  3769                           ;ui.c: 521: {
  3770                           ;ui.c: 522: if(task_->sucCnt==0)
  3771  001506  504A               	movf	ui_ts_off@task_,w,c
  3772  001508  EC6E  F00A         	call	PL2	;call to abstracted procedure
  3773  00150C  50DF               	movf	indf2,w,c
  3774  00150E  E105               	bnz	l18621
  3775                           
  3776                           ; BSR set to: 0
  3777                           ;ui.c: 523: {
  3778                           ;ui.c: 524: ui.w =1;
  3779                           
  3780                           ;ui.c: 525: ui.u =1;
  3781                           
  3782                           ;ui.c: 526: ui.q =10;
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;ui.c: 528: ui.ou_d =0;
  3786                           
  3787                           ;ui.c: 529: ui.wa =1;
  3788  001510  D839               	call	PL12	;call to abstracted procedure
  3789                           
  3790                           ; BSR set to: 0
  3791                           ;ui.c: 530: ui.ts =0;
  3792  001512  6A14               	clrf	_ui+7,c	;volatile
  3793                           
  3794                           ; BSR set to: 0
  3795                           ;ui.c: 531: ui.yd =yd;
  3796                           
  3797                           ; BSR set to: 0
  3798                           ;ui.c: 533: ui.cnt =0;
  3799                           
  3800                           ; BSR set to: 0
  3801                           ;ui.c: 534: ldz(0);
  3802  001514  D840               	call	PL84	;call to abstracted procedure
  3803  001516  EC27  F00F         	call	_ldz
  3804  00151A                     l18621:
  3805                           
  3806                           ;ui.c: 538: }
  3807                           ;ui.c: 539: ldz(task_->sucCnt+1);
  3808  00151A  504A               	movf	ui_ts_off@task_,w,c
  3809  00151C  EC6E  F00A         	call	PL2	;call to abstracted procedure
  3810  001520  50DF               	movf	indf2,w,c
  3811  001522  6E4B               	movwf	??_ui_ts_off& (0+255),c
  3812  001524  284B               	incf	??_ui_ts_off,w,c
  3813  001526  EC27  F00F         	call	_ldz
  3814                           
  3815                           ;ui.c: 540: }
  3816  00152A  D009               	goto	l18627
  3817  00152C                     l18623:
  3818                           
  3819                           ; BSR set to: 0
  3820                           ;ui.c: 541: else
  3821                           ;ui.c: 542: {
  3822                           ;ui.c: 543: if(task_->sucCnt==42)
  3823  00152C  504A               	movf	ui_ts_off@task_,w,c
  3824  00152E  EC6E  F00A         	call	PL2	;call to abstracted procedure
  3825  001532  0E2A               	movlw	42
  3826  001534  18DE               	xorwf	postinc2,w,c
  3827  001536  E103               	bnz	l18627
  3828                           
  3829                           ; BSR set to: 0
  3830                           ;ui.c: 544: {
  3831                           ;ui.c: 545: ldz(0);
  3832  001538  0E00               	movlw	0
  3833  00153A  EC27  F00F         	call	_ldz
  3834  00153E                     l18627:
  3835                           
  3836                           ;ui.c: 546: }
  3837                           ;ui.c: 547: }
  3838                           ;ui.c: 548: if((task_->sucCnt&1)==0)
  3839  00153E  504A               	movf	ui_ts_off@task_,w,c
  3840  001540  EC6E  F00A         	call	PL2	;call to abstracted procedure
  3841  001544  B0DF               	btfsc	indf2,0,c
  3842  001546  D005               	goto	l18635
  3843                           
  3844                           ;ui.c: 549: {
  3845                           ;ui.c: 550: ui.num1 =pw/10;
  3846  001548  ECA8  F009         	call	PL48	;call to abstracted procedure
  3847  00154C  ECAD  F00E         	call	___lbdiv
  3848                           
  3849                           ;ui.c: 551: ui.num2 =pw-ui.num1*10;
  3850                           
  3851                           ;ui.c: 552: ui.dian =bat.dian;
  3852  001550  D810               	call	PL10	;call to abstracted procedure
  3853  001552                     l18635:
  3854                           
  3855                           ;ui.c: 553: }
  3856                           ;ui.c: 554: new_nixie();
  3857  001552  EC35  F005         	call	_new_nixie	;wreg free
  3858                           
  3859                           ;ui.c: 555: if(task_->sucCnt==42)
  3860  001556  504A               	movf	ui_ts_off@task_,w,c
  3861  001558  EC6E  F00A         	call	PL2	;call to abstracted procedure
  3862  00155C  0E2A               	movlw	42
  3863  00155E  18DE               	xorwf	postinc2,w,c
  3864  001560  B4D8               	btfsc	status,2,c
  3865                           
  3866                           ;ui.c: 556: {
  3867                           ;ui.c: 557: if(PINA5&&(PINA1==0))
  3868  001562  AA86               	btfss	3974,5,c	;volatile
  3869  001564  0012               	return	
  3870  001566  B286               	btfsc	3974,1,c	;volatile
  3871  001568  0012               	return	
  3872                           
  3873                           ;ui.c: 558: {
  3874                           ;ui.c: 559: add_task_id(1,500,0,ui_id);
  3875  00156A  EC73  F00A         	call	PL4	;call to abstracted procedure
  3876  00156E  EF1F  F00B         	goto	_add_task_id
  3877  001572                     __end_of_ui_ts_off:
  3878                           	opt stack 0
  3879  001572                     PL10:
  3880                           	opt stack 3
  3881  001572  6E10               	movwf	_ui+3,c	;volatile
  3882  001574  5010               	movf	_ui+3,w,c	;volatile
  3883  001576  0DF6               	mullw	246
  3884  001578  50F3               	movf	prodl,w,c
  3885  00157A  247C               	addwf	_pw,w,c
  3886  00157C  6E11               	movwf	_ui+4,c	;volatile
  3887  00157E  C070  F016         	movff	_bat,_ui+9	;volatile
  3888  001582  0012               	return	
  3889  001584                     __end_ofPL10:
  3890                           	opt stack 0
  3891  001584                     PL12:
  3892                           	opt stack 3
  3893  001584  0E01               	movlw	1
  3894  001586  6E0D               	movwf	_ui,c	;volatile
  3895  001588  6E0E               	movwf	_ui+1,c	;volatile
  3896  00158A  0E0A               	movlw	10
  3897  00158C  6E0F               	movwf	_ui+2,c	;volatile
  3898  00158E  6A12               	clrf	_ui+5,c	;volatile
  3899  001590  0E01               	movlw	1
  3900  001592  6E13               	movwf	_ui+6,c	;volatile
  3901  001594  0C01               	retlw	1
  3902  001596                     __end_ofPL12:
  3903                           	opt stack 0
  3904  001596                     PL84:
  3905                           	opt stack 3
  3906  001596  C038  F015         	movff	_yd,_ui+8	;volatile
  3907  00159A  6A17               	clrf	_ui+10,c	;volatile
  3908  00159C  0C00               	retlw	0
  3909  00159E                     __end_ofPL84:
  3910                           	opt stack 0
  3911                           tblptru	equ	0xFF8
  3912                           tblptrh	equ	0xFF7
  3913                           tblptrl	equ	0xFF6
  3914                           tablat	equ	0xFF5
  3915                           prodl	equ	0xFF3
  3916                           intcon	equ	0xFF2
  3917                           intcon2	equ	0xFF1
  3918                           intcon3	equ	0xFF0
  3919                           postinc0	equ	0xFEE
  3920                           wreg	equ	0xFE8
  3921                           postdec1	equ	0xFE5
  3922                           fsr1l	equ	0xFE1
  3923                           indf2	equ	0xFDF
  3924                           postinc2	equ	0xFDE
  3925                           postdec2	equ	0xFDD
  3926                           fsr2h	equ	0xFDA
  3927                           fsr2l	equ	0xFD9
  3928                           status	equ	0xFD8
  3929                           
  3930 ;; *************** function _ui_timout *****************
  3931 ;; Defined at:
  3932 ;;		line 565 in file ".\src\ui.c"
  3933 ;; Parameters:    Size  Location     Type
  3934 ;;  task_           1   12[COMRAM] PTR struct task
  3935 ;;		 -> task_list(72), 
  3936 ;; Auto vars:     Size  Location     Type
  3937 ;;		None
  3938 ;; Return value:  Size  Location     Type
  3939 ;;                  1    wreg      void 
  3940 ;; Registers used:
  3941 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3942 ;; Tracked objects:
  3943 ;;		On entry : 3F/0
  3944 ;;		On exit  : 0/0
  3945 ;;		Unchanged: 0/0
  3946 ;; Data sizes:     COMRAM   BANK0
  3947 ;;      Params:         1       0
  3948 ;;      Locals:         0       0
  3949 ;;      Temps:          0       0
  3950 ;;      Totals:         1       0
  3951 ;;Total ram usage:        1 bytes
  3952 ;; Hardware stack levels used:    1
  3953 ;; Hardware stack levels required when called:    3
  3954 ;; This function calls:
  3955 ;;		___lbdiv
  3956 ;;		_ldz
  3957 ;;		_new_nixie
  3958 ;; This function is called by:
  3959 ;;		_find_task
  3960 ;; This function uses a non-reentrant model
  3961 ;;
  3962                           
  3963                           	psect	text5
  3964  001D24                     __ptext5:
  3965                           	opt stack 0
  3966  001D24                     _ui_timout:
  3967                           	opt stack 3
  3968                           
  3969                           ; BSR set to: 0
  3970                           ;ui.c: 567: if(task_->sucCnt&1)
  3971                           
  3972                           ;incstack = 0
  3973  001D24  5048               	movf	ui_timout@task_,w,c
  3974  001D26  EC6E  F00A         	call	PL2	;call to abstracted procedure
  3975  001D2A  A0DF               	btfss	indf2,0,c
  3976  001D2C  D005               	goto	l18649
  3977                           
  3978                           ; BSR set to: 0
  3979                           ;ui.c: 568: {
  3980                           ;ui.c: 569: ldz(0);
  3981  001D2E  0E00               	movlw	0
  3982  001D30  EC27  F00F         	call	_ldz
  3983                           
  3984                           ;ui.c: 570: }
  3985  001D34  EF35  F005         	goto	_new_nixie
  3986  001D38                     l18649:
  3987                           
  3988                           ; BSR set to: 0
  3989                           ;ui.c: 571: else
  3990                           ;ui.c: 572: {
  3991                           ;ui.c: 573: ui.w =1;
  3992                           
  3993                           ;ui.c: 574: ui.u =1;
  3994                           
  3995                           ;ui.c: 575: ui.q =10;
  3996                           
  3997                           ; BSR set to: 0
  3998                           ;ui.c: 577: ui.ou_d =0;
  3999                           
  4000                           ;ui.c: 578: ui.wa =1;
  4001  001D38  ECC2  F00A         	call	PL12	;call to abstracted procedure
  4002                           
  4003                           ; BSR set to: 0
  4004                           ;ui.c: 579: ui.ts =0;
  4005  001D3C  6A14               	clrf	_ui+7,c	;volatile
  4006                           
  4007                           ; BSR set to: 0
  4008                           ;ui.c: 580: ui.yd =yd;
  4009  001D3E  C038  F015         	movff	_yd,_ui+8	;volatile
  4010                           
  4011                           ; BSR set to: 0
  4012                           ;ui.c: 582: ui.cnt =0;
  4013  001D42  6A17               	clrf	_ui+10,c	;volatile
  4014                           
  4015                           ; BSR set to: 0
  4016                           ;ui.c: 583: ldz(10);
  4017  001D44  0E0A               	movlw	10
  4018  001D46  EC27  F00F         	call	_ldz
  4019                           
  4020                           ;ui.c: 588: ui.num1 =pw/10;
  4021  001D4A  ECA8  F009         	call	PL48	;call to abstracted procedure
  4022  001D4E  ECAD  F00E         	call	___lbdiv
  4023                           
  4024                           ;ui.c: 589: ui.num2 =pw-ui.num1*10;
  4025                           
  4026                           ;ui.c: 590: ui.dian =bat.dian;
  4027  001D52  ECB9  F00A         	call	PL10	;call to abstracted procedure
  4028                           
  4029                           ;ui.c: 592: }
  4030                           ;ui.c: 593: new_nixie();
  4031  001D56  EF35  F005         	goto	_new_nixie	;wreg free
  4032  001D5A                     __end_of_ui_timout:
  4033                           	opt stack 0
  4034                           tblptru	equ	0xFF8
  4035                           tblptrh	equ	0xFF7
  4036                           tblptrl	equ	0xFF6
  4037                           tablat	equ	0xFF5
  4038                           prodl	equ	0xFF3
  4039                           intcon	equ	0xFF2
  4040                           intcon2	equ	0xFF1
  4041                           intcon3	equ	0xFF0
  4042                           postinc0	equ	0xFEE
  4043                           wreg	equ	0xFE8
  4044                           postdec1	equ	0xFE5
  4045                           fsr1l	equ	0xFE1
  4046                           indf2	equ	0xFDF
  4047                           postinc2	equ	0xFDE
  4048                           postdec2	equ	0xFDD
  4049                           fsr2h	equ	0xFDA
  4050                           fsr2l	equ	0xFD9
  4051                           status	equ	0xFD8
  4052                           
  4053 ;; *************** function _ui_smoing *****************
  4054 ;; Defined at:
  4055 ;;		line 288 in file ".\src\ui.c"
  4056 ;; Parameters:    Size  Location     Type
  4057 ;;  task_           1   12[COMRAM] PTR struct task
  4058 ;;		 -> task_list(72), 
  4059 ;; Auto vars:     Size  Location     Type
  4060 ;;		None
  4061 ;; Return value:  Size  Location     Type
  4062 ;;                  1    wreg      void 
  4063 ;; Registers used:
  4064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4065 ;; Tracked objects:
  4066 ;;		On entry : 3F/0
  4067 ;;		On exit  : 0/0
  4068 ;;		Unchanged: 0/0
  4069 ;; Data sizes:     COMRAM   BANK0
  4070 ;;      Params:         1       0
  4071 ;;      Locals:         0       0
  4072 ;;      Temps:          1       0
  4073 ;;      Totals:         2       0
  4074 ;;Total ram usage:        2 bytes
  4075 ;; Hardware stack levels used:    1
  4076 ;; Hardware stack levels required when called:    3
  4077 ;; This function calls:
  4078 ;;		_ldz
  4079 ;;		_new_nixie
  4080 ;; This function is called by:
  4081 ;;		_find_task
  4082 ;; This function uses a non-reentrant model
  4083 ;;
  4084                           
  4085                           	psect	text6
  4086  0016DA                     __ptext6:
  4087                           	opt stack 0
  4088  0016DA                     _ui_smoing:
  4089                           	opt stack 3
  4090                           
  4091                           ; BSR set to: 0
  4092                           ;ui.c: 290: if(task_->sucCnt==0)
  4093                           
  4094                           ;incstack = 0
  4095  0016DA  5048               	movf	ui_smoing@task_,w,c
  4096  0016DC  EC6E  F00A         	call	PL2	;call to abstracted procedure
  4097  0016E0  50DF               	movf	indf2,w,c
  4098  0016E2  E10D               	bnz	l18443
  4099                           
  4100                           ; BSR set to: 0
  4101                           ;ui.c: 291: {
  4102                           ;ui.c: 292: ui.w =1;
  4103  0016E4  0E01               	movlw	1
  4104                           
  4105                           ;ui.c: 293: ui.u =1;
  4106                           
  4107                           ;ui.c: 294: ui.q =10;
  4108  0016E6  ECDB  F00E         	call	PL18	;call to abstracted procedure
  4109                           
  4110                           ; BSR set to: 0
  4111                           ;ui.c: 296: ui.ou_d =0;
  4112  0016EA  6A12               	clrf	_ui+5,c	;volatile
  4113                           
  4114                           ; BSR set to: 0
  4115                           ;ui.c: 297: ui.wa =0;
  4116  0016EC  6A13               	clrf	_ui+6,c	;volatile
  4117                           
  4118                           ; BSR set to: 0
  4119                           ;ui.c: 298: ui.ts =0;
  4120  0016EE  6A14               	clrf	_ui+7,c	;volatile
  4121                           
  4122                           ; BSR set to: 0
  4123                           ;ui.c: 299: ui.yd =0;
  4124  0016F0  6A15               	clrf	_ui+8,c	;volatile
  4125                           
  4126                           ; BSR set to: 0
  4127                           ;ui.c: 300: ui.dian =0;
  4128  0016F2  6A16               	clrf	_ui+9,c	;volatile
  4129                           
  4130                           ; BSR set to: 0
  4131                           ;ui.c: 302: ldz(10);
  4132  0016F4  0E0A               	movlw	10
  4133  0016F6  EC27  F00F         	call	_ldz
  4134                           
  4135                           ;ui.c: 304: ui.num1 =10;
  4136                           
  4137                           ;ui.c: 305: ui.num2 =10;
  4138  0016FA  ECC2  F00D         	call	PL92	;call to abstracted procedure
  4139  0016FE                     l18443:
  4140                           
  4141                           ;ui.c: 306: }
  4142                           ;ui.c: 307: if(task_->sucCnt<=9)
  4143  0016FE  5048               	movf	ui_smoing@task_,w,c
  4144  001700  EC6E  F00A         	call	PL2	;call to abstracted procedure
  4145  001704  0E0A               	movlw	10
  4146  001706  60DF               	cpfslt	indf2,c
  4147  001708  D007               	goto	l18447
  4148                           
  4149                           ;ui.c: 308: {
  4150                           ;ui.c: 309: ui_ld.w1=task_->sucCnt+1;
  4151  00170A  5048               	movf	ui_smoing@task_,w,c
  4152  00170C  EC6E  F00A         	call	PL2	;call to abstracted procedure
  4153  001710  50DF               	movf	indf2,w,c
  4154  001712  6E49               	movwf	??_ui_smoing& (0+255),c
  4155  001714  2849               	incf	??_ui_smoing,w,c
  4156  001716  D007               	goto	L3
  4157  001718                     l18447:
  4158                           
  4159                           ;ui.c: 311: else
  4160                           ;ui.c: 312: {
  4161                           ;ui.c: 313: ui_ld.w1=19-task_->sucCnt;
  4162  001718  5048               	movf	ui_smoing@task_,w,c
  4163  00171A  EC6E  F00A         	call	PL2	;call to abstracted procedure
  4164  00171E  50DF               	movf	indf2,w,c
  4165  001720  6E49               	movwf	??_ui_smoing& (0+255),c
  4166  001722  5049               	movf	??_ui_smoing,w,c
  4167  001724  0813               	sublw	19
  4168  001726                     L3:
  4169  001726  6E67               	movwf	_ui_ld,c
  4170                           
  4171                           ;ui.c: 315: }
  4172                           ;ui.c: 316: if((task_->sucCnt==0)||(task_->sucCnt==10))
  4173  001728  5048               	movf	ui_smoing@task_,w,c
  4174  00172A  EC6E  F00A         	call	PL2	;call to abstracted procedure
  4175  00172E  50DF               	movf	indf2,w,c
  4176  001730  E006               	bz	l18451
  4177  001732  5048               	movf	ui_smoing@task_,w,c
  4178  001734  EC6E  F00A         	call	PL2	;call to abstracted procedure
  4179  001738  0E0A               	movlw	10
  4180  00173A  18DE               	xorwf	postinc2,w,c
  4181  00173C  E108               	bnz	l18459
  4182  00173E                     l18451:
  4183                           
  4184                           ;ui.c: 317: {
  4185                           ;ui.c: 318: ui.cnt++;
  4186  00173E  2A17               	incf	_ui+10,f,c	;volatile
  4187                           
  4188                           ;ui.c: 319: if(ui.cnt>=6)
  4189  001740  0E05               	movlw	5
  4190  001742  6417               	cpfsgt	_ui+10,c	;volatile
  4191  001744  D002               	goto	l18457
  4192                           
  4193                           ;ui.c: 320: {
  4194                           ;ui.c: 321: ui.cnt=1;
  4195  001746  0E01               	movlw	1
  4196  001748  6E17               	movwf	_ui+10,c	;volatile
  4197  00174A                     l18457:
  4198                           
  4199                           ;ui.c: 322: }
  4200                           ;ui.c: 323: new_nixie();
  4201  00174A  EC35  F005         	call	_new_nixie	;wreg free
  4202  00174E                     l18459:
  4203                           
  4204                           ;ui.c: 324: }
  4205                           ;ui.c: 325: task_->sucCnt++;
  4206  00174E  5048               	movf	ui_smoing@task_,w,c
  4207  001750  EC6E  F00A         	call	PL2	;call to abstracted procedure
  4208  001754  2ADF               	incf	indf2,f,c
  4209                           
  4210                           ;ui.c: 326: if(task_->sucCnt>=20)
  4211  001756  5048               	movf	ui_smoing@task_,w,c
  4212  001758  EC6E  F00A         	call	PL2	;call to abstracted procedure
  4213  00175C  0E13               	movlw	19
  4214  00175E  64DF               	cpfsgt	indf2,c
  4215  001760  0C13               	retlw	19
  4216                           
  4217                           ;ui.c: 327: {
  4218                           ;ui.c: 328: task_->sucCnt=0;
  4219  001762  5048               	movf	ui_smoing@task_,w,c
  4220  001764  EC6E  F00A         	call	PL2	;call to abstracted procedure
  4221  001768  6ADF               	clrf	indf2,c
  4222  00176A  0C00               	retlw	0	;funcret
  4223  00176C                     __end_of_ui_smoing:
  4224                           	opt stack 0
  4225                           tblptru	equ	0xFF8
  4226                           tblptrh	equ	0xFF7
  4227                           tblptrl	equ	0xFF6
  4228                           tablat	equ	0xFF5
  4229                           prodl	equ	0xFF3
  4230                           intcon	equ	0xFF2
  4231                           intcon2	equ	0xFF1
  4232                           intcon3	equ	0xFF0
  4233                           postinc0	equ	0xFEE
  4234                           wreg	equ	0xFE8
  4235                           postdec1	equ	0xFE5
  4236                           fsr1l	equ	0xFE1
  4237                           indf2	equ	0xFDF
  4238                           postinc2	equ	0xFDE
  4239                           postdec2	equ	0xFDD
  4240                           fsr2h	equ	0xFDA
  4241                           fsr2l	equ	0xFD9
  4242                           status	equ	0xFD8
  4243                           
  4244 ;; *************** function _ui_smoend *****************
  4245 ;; Defined at:
  4246 ;;		line 374 in file ".\src\ui.c"
  4247 ;; Parameters:    Size  Location     Type
  4248 ;;  task_           1   12[COMRAM] PTR struct task
  4249 ;;		 -> task_list(72), 
  4250 ;; Auto vars:     Size  Location     Type
  4251 ;;		None
  4252 ;; Return value:  Size  Location     Type
  4253 ;;                  1    wreg      void 
  4254 ;; Registers used:
  4255 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4256 ;; Tracked objects:
  4257 ;;		On entry : 3F/0
  4258 ;;		On exit  : 0/0
  4259 ;;		Unchanged: 0/0
  4260 ;; Data sizes:     COMRAM   BANK0
  4261 ;;      Params:         1       0
  4262 ;;      Locals:         0       0
  4263 ;;      Temps:          1       0
  4264 ;;      Totals:         2       0
  4265 ;;Total ram usage:        2 bytes
  4266 ;; Hardware stack levels used:    1
  4267 ;; Hardware stack levels required when called:    3
  4268 ;; This function calls:
  4269 ;;		___lbdiv
  4270 ;;		_ldz
  4271 ;;		_new_nixie
  4272 ;; This function is called by:
  4273 ;;		_find_task
  4274 ;; This function uses a non-reentrant model
  4275 ;;
  4276                           
  4277                           	psect	text7
  4278  00176C                     __ptext7:
  4279                           	opt stack 0
  4280  00176C                     _ui_smoend:
  4281                           	opt stack 3
  4282                           
  4283                           ; BSR set to: 0
  4284                           ;ui.c: 376: if(task_->sucCnt<=9)
  4285                           
  4286                           ;incstack = 0
  4287  00176C  5048               	movf	ui_smoend@task_,w,c
  4288  00176E  EC6E  F00A         	call	PL2	;call to abstracted procedure
  4289  001772  0E0A               	movlw	10
  4290  001774  60DF               	cpfslt	indf2,c
  4291  001776  D01E               	goto	l18721
  4292                           
  4293                           ; BSR set to: 0
  4294                           ;ui.c: 377: {
  4295                           ;ui.c: 378: if(task_->sucCnt==0)
  4296  001778  5048               	movf	ui_smoend@task_,w,c
  4297  00177A  EC6E  F00A         	call	PL2	;call to abstracted procedure
  4298  00177E  50DF               	movf	indf2,w,c
  4299  001780  E107               	bnz	l18717
  4300                           
  4301                           ; BSR set to: 0
  4302                           ;ui.c: 379: {
  4303                           ;ui.c: 380: ui.w =1;
  4304                           
  4305                           ;ui.c: 381: ui.u =1;
  4306                           
  4307                           ;ui.c: 382: ui.q =10;
  4308                           
  4309                           ; BSR set to: 0
  4310                           ;ui.c: 384: ui.ou_d =0;
  4311                           
  4312                           ;ui.c: 385: ui.wa =1;
  4313  001782  ECC2  F00A         	call	PL12	;call to abstracted procedure
  4314                           
  4315                           ; BSR set to: 0
  4316                           ;ui.c: 386: ui.ts =ts;
  4317                           
  4318                           ; BSR set to: 0
  4319                           ;ui.c: 387: ui.yd =yd;
  4320  001786  ECF2  F00C         	call	PL36	;call to abstracted procedure
  4321                           
  4322                           ;ui.c: 391: ui_ld.w2=10;
  4323  00178A  0E0A               	movlw	10
  4324  00178C  6E68               	movwf	_ui_ld+1,c
  4325                           
  4326                           ; BSR set to: 0
  4327                           ;ui.c: 392: ui_ld.ts=0;
  4328  00178E  6A6B               	clrf	_ui_ld+4,c
  4329  001790                     l18717:
  4330                           
  4331                           ; BSR set to: 0
  4332                           ;ui.c: 393: }
  4333                           ;ui.c: 394: ui_ld.w1=ui_ld.n=task_->sucCnt+1;
  4334  001790  5048               	movf	ui_smoend@task_,w,c
  4335  001792  EC6E  F00A         	call	PL2	;call to abstracted procedure
  4336  001796  50DF               	movf	indf2,w,c
  4337  001798  6E49               	movwf	??_ui_smoend& (0+255),c
  4338  00179A  2849               	incf	??_ui_smoend,w,c
  4339  00179C  6E6A               	movwf	_ui_ld+3,c
  4340  00179E  C06A  F067         	movff	_ui_ld+3,_ui_ld
  4341                           
  4342                           ; BSR set to: 0
  4343                           ;ui.c: 395: ui_ld.cnt=9-task_->sucCnt;
  4344  0017A2  5048               	movf	ui_smoend@task_,w,c
  4345  0017A4  EC6E  F00A         	call	PL2	;call to abstracted procedure
  4346  0017A8  50DF               	movf	indf2,w,c
  4347  0017AA  6E49               	movwf	??_ui_smoend& (0+255),c
  4348  0017AC  5049               	movf	??_ui_smoend,w,c
  4349  0017AE  0809               	sublw	9
  4350  0017B0  6E69               	movwf	_ui_ld+2,c
  4351                           
  4352                           ;ui.c: 397: }
  4353  0017B2  D011               	goto	l18729
  4354  0017B4                     l18721:
  4355                           
  4356                           ; BSR set to: 0
  4357                           ;ui.c: 398: else if(task_->sucCnt<=62)
  4358  0017B4  5048               	movf	ui_smoend@task_,w,c
  4359  0017B6  EC6E  F00A         	call	PL2	;call to abstracted procedure
  4360  0017BA  0E3F               	movlw	63
  4361  0017BC  60DF               	cpfslt	indf2,c
  4362  0017BE  D001               	goto	l18725
  4363  0017C0  D00A               	goto	l18729
  4364  0017C2                     l18725:
  4365                           
  4366                           ; BSR set to: 0
  4367                           ;ui.c: 402: else
  4368                           ;ui.c: 403: {
  4369                           ;ui.c: 404: ldz(72-task_->sucCnt);
  4370  0017C2  5048               	movf	ui_smoend@task_,w,c
  4371  0017C4  EC6E  F00A         	call	PL2	;call to abstracted procedure
  4372  0017C8  50DF               	movf	indf2,w,c
  4373  0017CA  6E49               	movwf	??_ui_smoend& (0+255),c
  4374  0017CC  5049               	movf	??_ui_smoend,w,c
  4375  0017CE  0848               	sublw	72
  4376  0017D0  EC27  F00F         	call	_ldz
  4377                           
  4378                           ;ui.c: 405: ui_ld.cnt=0;
  4379  0017D4  6A69               	clrf	_ui_ld+2,c
  4380  0017D6                     l18729:
  4381                           
  4382                           ;ui.c: 406: }
  4383                           ;ui.c: 407: if((task_->sucCnt&1)==0)
  4384  0017D6  5048               	movf	ui_smoend@task_,w,c
  4385  0017D8  EC6E  F00A         	call	PL2	;call to abstracted procedure
  4386  0017DC  B0DF               	btfsc	indf2,0,c
  4387  0017DE  EF35  F005         	goto	_new_nixie
  4388                           
  4389                           ;ui.c: 408: {
  4390                           ;ui.c: 409: ui.num1 =pw/10;
  4391  0017E2  ECA8  F009         	call	PL48	;call to abstracted procedure
  4392  0017E6  ECAD  F00E         	call	___lbdiv
  4393                           
  4394                           ;ui.c: 410: ui.num2 =pw-ui.num1*10;
  4395                           
  4396                           ;ui.c: 411: ui.dian =bat.dian;
  4397  0017EA  ECB9  F00A         	call	PL10	;call to abstracted procedure
  4398                           
  4399                           ;ui.c: 412: }
  4400                           ;ui.c: 413: new_nixie();
  4401  0017EE  EF35  F005         	goto	_new_nixie	;wreg free
  4402  0017F2                     __end_of_ui_smoend:
  4403                           	opt stack 0
  4404                           tblptru	equ	0xFF8
  4405                           tblptrh	equ	0xFF7
  4406                           tblptrl	equ	0xFF6
  4407                           tablat	equ	0xFF5
  4408                           prodl	equ	0xFF3
  4409                           intcon	equ	0xFF2
  4410                           intcon2	equ	0xFF1
  4411                           intcon3	equ	0xFF0
  4412                           postinc0	equ	0xFEE
  4413                           wreg	equ	0xFE8
  4414                           postdec1	equ	0xFE5
  4415                           fsr1l	equ	0xFE1
  4416                           indf2	equ	0xFDF
  4417                           postinc2	equ	0xFDE
  4418                           postdec2	equ	0xFDD
  4419                           fsr2h	equ	0xFDA
  4420                           fsr2l	equ	0xFD9
  4421                           status	equ	0xFD8
  4422                           
  4423 ;; *************** function _ui_kl *****************
  4424 ;; Defined at:
  4425 ;;		line 417 in file ".\src\ui.c"
  4426 ;; Parameters:    Size  Location     Type
  4427 ;;  task_           1   12[COMRAM] PTR struct task
  4428 ;;		 -> task_list(72), 
  4429 ;; Auto vars:     Size  Location     Type
  4430 ;;		None
  4431 ;; Return value:  Size  Location     Type
  4432 ;;                  1    wreg      void 
  4433 ;; Registers used:
  4434 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4435 ;; Tracked objects:
  4436 ;;		On entry : 3F/0
  4437 ;;		On exit  : 0/0
  4438 ;;		Unchanged: 0/0
  4439 ;; Data sizes:     COMRAM   BANK0
  4440 ;;      Params:         1       0
  4441 ;;      Locals:         0       0
  4442 ;;      Temps:          1       0
  4443 ;;      Totals:         2       0
  4444 ;;Total ram usage:        2 bytes
  4445 ;; Hardware stack levels used:    1
  4446 ;; Hardware stack levels required when called:    3
  4447 ;; This function calls:
  4448 ;;		_ldz
  4449 ;;		_new_nixie
  4450 ;; This function is called by:
  4451 ;;		_find_task
  4452 ;; This function uses a non-reentrant model
  4453 ;;
  4454                           
  4455                           	psect	text8
  4456  001B34                     __ptext8:
  4457                           	opt stack 0
  4458  001B34                     _ui_kl:
  4459                           	opt stack 3
  4460                           
  4461                           ; BSR set to: 0
  4462                           ;ui.c: 419: if(task_->sucCnt&1)
  4463                           
  4464                           ;incstack = 0
  4465  001B34  5048               	movf	ui_kl@task_,w,c
  4466  001B36  EC6E  F00A         	call	PL2	;call to abstracted procedure
  4467  001B3A  A0DF               	btfss	indf2,0,c
  4468  001B3C  D007               	goto	l18527
  4469                           
  4470                           ; BSR set to: 0
  4471                           ;ui.c: 420: {
  4472                           ;ui.c: 421: ui.w =1;
  4473                           
  4474                           ; BSR set to: 0
  4475                           ;ui.c: 422: ui.u =0;
  4476                           
  4477                           ; BSR set to: 0
  4478                           ;ui.c: 423: ui.q =0;
  4479                           
  4480                           ; BSR set to: 0
  4481                           ;ui.c: 425: ui.ou_d =0;
  4482                           
  4483                           ; BSR set to: 0
  4484                           ;ui.c: 426: ui.wa =0;
  4485                           
  4486                           ; BSR set to: 0
  4487                           ;ui.c: 427: ui.ts =0;
  4488  001B3E  D81A               	call	PL40	;call to abstracted procedure
  4489                           
  4490                           ; BSR set to: 0
  4491                           ;ui.c: 428: ui.yd =0;
  4492  001B40  6A15               	clrf	_ui+8,c	;volatile
  4493                           
  4494                           ; BSR set to: 0
  4495                           ;ui.c: 429: ui.dian =0;
  4496                           
  4497                           ; BSR set to: 0
  4498                           ;ui.c: 430: ui.cnt =0;
  4499                           
  4500                           ; BSR set to: 0
  4501                           ;ui.c: 431: ldz(10);
  4502  001B42  D824               	call	PL94	;call to abstracted procedure
  4503  001B44  EC27  F00F         	call	_ldz
  4504  001B48                     l18523:
  4505                           
  4506                           ;ui.c: 433: ui.num1 =10;
  4507                           
  4508                           ;ui.c: 434: ui.num2 =10;
  4509  001B48  D81D               	call	PL92	;call to abstracted procedure
  4510                           
  4511                           ;ui.c: 435: }
  4512  001B4A  D007               	goto	l18549
  4513  001B4C                     l18527:
  4514                           
  4515                           ; BSR set to: 0
  4516                           ;ui.c: 436: else
  4517                           ;ui.c: 437: {
  4518                           ;ui.c: 438: ui.w =1;
  4519                           
  4520                           ; BSR set to: 0
  4521                           ;ui.c: 439: ui.u =0;
  4522                           
  4523                           ; BSR set to: 0
  4524                           ;ui.c: 440: ui.q =0;
  4525                           
  4526                           ; BSR set to: 0
  4527                           ;ui.c: 442: ui.ou_d =0;
  4528                           
  4529                           ; BSR set to: 0
  4530                           ;ui.c: 443: ui.wa =0;
  4531                           
  4532                           ; BSR set to: 0
  4533                           ;ui.c: 444: ui.ts =0;
  4534  001B4C  D813               	call	PL40	;call to abstracted procedure
  4535                           
  4536                           ;ui.c: 445: ui.yd =1;
  4537  001B4E  0E01               	movlw	1
  4538  001B50  6E15               	movwf	_ui+8,c	;volatile
  4539                           
  4540                           ; BSR set to: 0
  4541                           ;ui.c: 446: ui.dian =0;
  4542                           
  4543                           ; BSR set to: 0
  4544                           ;ui.c: 447: ui.cnt =0;
  4545                           
  4546                           ; BSR set to: 0
  4547                           ;ui.c: 448: ldz(10);
  4548  001B52  D81C               	call	PL94	;call to abstracted procedure
  4549  001B54  EC27  F00F         	call	_ldz
  4550  001B58  D7F7               	goto	l18523
  4551  001B5A                     l18549:
  4552                           
  4553                           ;ui.c: 452: }
  4554                           ;ui.c: 453: if(task_->sucCnt==9)
  4555  001B5A  5048               	movf	ui_kl@task_,w,c
  4556  001B5C  EC6E  F00A         	call	PL2	;call to abstracted procedure
  4557  001B60  0E09               	movlw	9
  4558  001B62  18DE               	xorwf	postinc2,w,c
  4559  001B64  E002 EF35  F005    	bnz	_new_nixie
  4560                           
  4561                           ;ui.c: 454: {
  4562                           ;ui.c: 455: ldz(0);
  4563  001B6A  0E00               	movlw	0
  4564  001B6C  EC27  F00F         	call	_ldz
  4565                           
  4566                           ;ui.c: 456: }
  4567                           ;ui.c: 457: new_nixie();
  4568  001B70  EF35  F005         	goto	_new_nixie	;wreg free
  4569  001B74                     __end_of_ui_kl:
  4570                           	opt stack 0
  4571  001B74                     PL40:
  4572                           	opt stack 3
  4573  001B74  0E01               	movlw	1
  4574  001B76  6E0D               	movwf	_ui,c	;volatile
  4575  001B78  6A0E               	clrf	_ui+1,c	;volatile
  4576  001B7A  6A0F               	clrf	_ui+2,c	;volatile
  4577  001B7C  6A12               	clrf	_ui+5,c	;volatile
  4578  001B7E  6A13               	clrf	_ui+6,c	;volatile
  4579  001B80  6A14               	clrf	_ui+7,c	;volatile
  4580  001B82  0012               	return	
  4581  001B84                     __end_ofPL40:
  4582                           	opt stack 0
  4583  001B84                     PL92:
  4584                           	opt stack 3
  4585  001B84  0E0A               	movlw	10
  4586  001B86  6E10               	movwf	_ui+3,c	;volatile
  4587  001B88  6E11               	movwf	_ui+4,c	;volatile
  4588  001B8A  0C0A               	retlw	10
  4589  001B8C                     __end_ofPL92:
  4590                           	opt stack 0
  4591  001B8C                     PL94:
  4592                           	opt stack 3
  4593  001B8C  6A16               	clrf	_ui+9,c	;volatile
  4594  001B8E  6A17               	clrf	_ui+10,c	;volatile
  4595  001B90  0C0A               	retlw	10
  4596  001B92                     __end_ofPL94:
  4597                           	opt stack 0
  4598                           tblptru	equ	0xFF8
  4599                           tblptrh	equ	0xFF7
  4600                           tblptrl	equ	0xFF6
  4601                           tablat	equ	0xFF5
  4602                           prodl	equ	0xFF3
  4603                           intcon	equ	0xFF2
  4604                           intcon2	equ	0xFF1
  4605                           intcon3	equ	0xFF0
  4606                           postinc0	equ	0xFEE
  4607                           wreg	equ	0xFE8
  4608                           postdec1	equ	0xFE5
  4609                           fsr1l	equ	0xFE1
  4610                           indf2	equ	0xFDF
  4611                           postinc2	equ	0xFDE
  4612                           postdec2	equ	0xFDD
  4613                           fsr2h	equ	0xFDA
  4614                           fsr2l	equ	0xFD9
  4615                           status	equ	0xFD8
  4616                           
  4617 ;; *************** function _ui_dl_getup *****************
  4618 ;; Defined at:
  4619 ;;		line 333 in file ".\src\ui.c"
  4620 ;; Parameters:    Size  Location     Type
  4621 ;;  task_           1   14[COMRAM] PTR struct task
  4622 ;;		 -> task_list(72), 
  4623 ;; Auto vars:     Size  Location     Type
  4624 ;;		None
  4625 ;; Return value:  Size  Location     Type
  4626 ;;                  1    wreg      void 
  4627 ;; Registers used:
  4628 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4629 ;; Tracked objects:
  4630 ;;		On entry : 3F/0
  4631 ;;		On exit  : 0/0
  4632 ;;		Unchanged: 0/0
  4633 ;; Data sizes:     COMRAM   BANK0
  4634 ;;      Params:         1       0
  4635 ;;      Locals:         0       0
  4636 ;;      Temps:          1       0
  4637 ;;      Totals:         2       0
  4638 ;;Total ram usage:        2 bytes
  4639 ;; Hardware stack levels used:    1
  4640 ;; Hardware stack levels required when called:    3
  4641 ;; This function calls:
  4642 ;;		___lbdiv
  4643 ;;		_add_task_id
  4644 ;;		_ldz
  4645 ;;		_new_nixie
  4646 ;; This function is called by:
  4647 ;;		_find_task
  4648 ;; This function uses a non-reentrant model
  4649 ;;
  4650                           
  4651                           	psect	text9
  4652  001976                     __ptext9:
  4653                           	opt stack 0
  4654  001976                     _ui_dl_getup:
  4655                           	opt stack 3
  4656                           
  4657                           ; BSR set to: 0
  4658                           ;ui.c: 335: if(task_->sucCnt<=62)
  4659                           
  4660                           ;incstack = 0
  4661  001976  504A               	movf	ui_dl_getup@task_,w,c
  4662  001978  EC6E  F00A         	call	PL2	;call to abstracted procedure
  4663  00197C  0E3F               	movlw	63
  4664  00197E  60DF               	cpfslt	indf2,c
  4665  001980  D00D               	goto	l18481
  4666                           
  4667                           ; BSR set to: 0
  4668                           ;ui.c: 336: {
  4669                           ;ui.c: 337: if(task_->sucCnt==0)
  4670  001982  504A               	movf	ui_dl_getup@task_,w,c
  4671  001984  EC6E  F00A         	call	PL2	;call to abstracted procedure
  4672  001988  50DF               	movf	indf2,w,c
  4673  00198A  E111               	bnz	l18483
  4674                           
  4675                           ; BSR set to: 0
  4676                           ;ui.c: 338: {
  4677                           ;ui.c: 339: ui.w =1;
  4678                           
  4679                           ;ui.c: 340: ui.u =1;
  4680                           
  4681                           ;ui.c: 341: ui.q =10;
  4682                           
  4683                           ; BSR set to: 0
  4684                           ;ui.c: 343: ui.ou_d =0;
  4685                           
  4686                           ;ui.c: 344: ui.wa =1;
  4687  00198C  ECC2  F00A         	call	PL12	;call to abstracted procedure
  4688                           
  4689                           ; BSR set to: 0
  4690                           ;ui.c: 345: ui.ts =ts;
  4691                           
  4692                           ; BSR set to: 0
  4693                           ;ui.c: 346: ui.yd =yd;
  4694  001990  D829               	call	PL36	;call to abstracted procedure
  4695                           
  4696                           ; BSR set to: 0
  4697                           ;ui.c: 348: ui.cnt =0;
  4698  001992  6A17               	clrf	_ui+10,c	;volatile
  4699                           
  4700                           ; BSR set to: 0
  4701                           ;ui.c: 349: ldz(10);
  4702  001994  0E0A               	movlw	10
  4703  001996  EC27  F00F         	call	_ldz
  4704  00199A  D009               	goto	l18483
  4705  00199C                     l18481:
  4706                           
  4707                           ; BSR set to: 0
  4708                           ;ui.c: 353: else
  4709                           ;ui.c: 354: {
  4710                           ;ui.c: 355: ldz(72-task_->sucCnt);
  4711  00199C  504A               	movf	ui_dl_getup@task_,w,c
  4712  00199E  EC6E  F00A         	call	PL2	;call to abstracted procedure
  4713  0019A2  50DF               	movf	indf2,w,c
  4714  0019A4  6E4B               	movwf	??_ui_dl_getup& (0+255),c
  4715  0019A6  504B               	movf	??_ui_dl_getup,w,c
  4716  0019A8  0848               	sublw	72
  4717  0019AA  EC27  F00F         	call	_ldz
  4718  0019AE                     l18483:
  4719                           
  4720                           ;ui.c: 356: }
  4721                           ;ui.c: 357: if((task_->sucCnt&1)==0)
  4722  0019AE  504A               	movf	ui_dl_getup@task_,w,c
  4723  0019B0  EC6E  F00A         	call	PL2	;call to abstracted procedure
  4724  0019B4  B0DF               	btfsc	indf2,0,c
  4725  0019B6  D006               	goto	l18491
  4726                           
  4727                           ;ui.c: 358: {
  4728                           ;ui.c: 359: ui.num1 =pw/10;
  4729  0019B8  ECA8  F009         	call	PL48	;call to abstracted procedure
  4730  0019BC  ECAD  F00E         	call	___lbdiv
  4731                           
  4732                           ;ui.c: 360: ui.num2 =pw-ui.num1*10;
  4733                           
  4734                           ;ui.c: 361: ui.dian =bat.dian;
  4735  0019C0  ECB9  F00A         	call	PL10	;call to abstracted procedure
  4736  0019C4                     l18491:
  4737                           
  4738                           ;ui.c: 362: }
  4739                           ;ui.c: 363: new_nixie();
  4740  0019C4  EC35  F005         	call	_new_nixie	;wreg free
  4741                           
  4742                           ;ui.c: 364: if(task_->sucCnt==72)
  4743  0019C8  504A               	movf	ui_dl_getup@task_,w,c
  4744  0019CA  EC6E  F00A         	call	PL2	;call to abstracted procedure
  4745  0019CE  0E48               	movlw	72
  4746  0019D0  18DE               	xorwf	postinc2,w,c
  4747  0019D2  B4D8               	btfsc	status,2,c
  4748                           
  4749                           ;ui.c: 365: {
  4750                           ;ui.c: 366: if(PINA5&&(PINA1==0))
  4751  0019D4  AA86               	btfss	3974,5,c	;volatile
  4752  0019D6  0012               	return	
  4753  0019D8  B286               	btfsc	3974,1,c	;volatile
  4754  0019DA  0012               	return	
  4755                           
  4756                           ;ui.c: 367: {
  4757                           ;ui.c: 368: add_task_id(1,500,0,ui_id);
  4758  0019DC  EC73  F00A         	call	PL4	;call to abstracted procedure
  4759  0019E0  EF1F  F00B         	goto	_add_task_id
  4760  0019E4                     __end_of_ui_dl_getup:
  4761                           	opt stack 0
  4762  0019E4                     PL36:
  4763                           	opt stack 3
  4764  0019E4  C037  F014         	movff	_ts,_ui+7	;volatile
  4765  0019E8  C038  F015         	movff	_yd,_ui+8	;volatile
  4766  0019EC  0012               	return	
  4767  0019EE                     __end_ofPL36:
  4768                           	opt stack 0
  4769                           tblptru	equ	0xFF8
  4770                           tblptrh	equ	0xFF7
  4771                           tblptrl	equ	0xFF6
  4772                           tablat	equ	0xFF5
  4773                           prodl	equ	0xFF3
  4774                           intcon	equ	0xFF2
  4775                           intcon2	equ	0xFF1
  4776                           intcon3	equ	0xFF0
  4777                           postinc0	equ	0xFEE
  4778                           wreg	equ	0xFE8
  4779                           postdec1	equ	0xFE5
  4780                           fsr1l	equ	0xFE1
  4781                           indf2	equ	0xFDF
  4782                           postinc2	equ	0xFDE
  4783                           postdec2	equ	0xFDD
  4784                           fsr2h	equ	0xFDA
  4785                           fsr2l	equ	0xFD9
  4786                           status	equ	0xFD8
  4787                           
  4788 ;; *************** function _ui_chrgfull *****************
  4789 ;; Defined at:
  4790 ;;		line 261 in file ".\src\ui.c"
  4791 ;; Parameters:    Size  Location     Type
  4792 ;;  task_           1   12[COMRAM] PTR struct task
  4793 ;;		 -> task_list(72), 
  4794 ;; Auto vars:     Size  Location     Type
  4795 ;;		None
  4796 ;; Return value:  Size  Location     Type
  4797 ;;                  1    wreg      void 
  4798 ;; Registers used:
  4799 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4800 ;; Tracked objects:
  4801 ;;		On entry : 3F/0
  4802 ;;		On exit  : 0/0
  4803 ;;		Unchanged: 0/0
  4804 ;; Data sizes:     COMRAM   BANK0
  4805 ;;      Params:         1       0
  4806 ;;      Locals:         0       0
  4807 ;;      Temps:          1       0
  4808 ;;      Totals:         2       0
  4809 ;;Total ram usage:        2 bytes
  4810 ;; Hardware stack levels used:    1
  4811 ;; Hardware stack levels required when called:    3
  4812 ;; This function calls:
  4813 ;;		_ldz
  4814 ;;		_new_nixie
  4815 ;; This function is called by:
  4816 ;;		_find_task
  4817 ;; This function uses a non-reentrant model
  4818 ;;
  4819                           
  4820                           	psect	text10
  4821  001CE4                     __ptext10:
  4822                           	opt stack 0
  4823  001CE4                     _ui_chrgfull:
  4824                           	opt stack 3
  4825                           
  4826                           ; BSR set to: 0
  4827                           ;ui.c: 263: if(task_->sucCnt==0)
  4828                           
  4829                           ;incstack = 0
  4830  001CE4  5048               	movf	ui_chrgfull@task_,w,c
  4831  001CE6  EC6E  F00A         	call	PL2	;call to abstracted procedure
  4832  001CEA  50DF               	movf	indf2,w,c
  4833  001CEC  E111               	bnz	l18419
  4834                           
  4835                           ; BSR set to: 0
  4836                           ;ui.c: 264: {
  4837                           ;ui.c: 265: ui.w =0;
  4838  001CEE  6A0D               	clrf	_ui,c	;volatile
  4839                           
  4840                           ;ui.c: 266: ui.u =0;
  4841  001CF0  6A0E               	clrf	_ui+1,c	;volatile
  4842                           
  4843                           ;ui.c: 267: ui.q =0;
  4844  001CF2  6A0F               	clrf	_ui+2,c	;volatile
  4845                           
  4846                           ;ui.c: 269: ui.ou_d =0;
  4847  001CF4  6A12               	clrf	_ui+5,c	;volatile
  4848                           
  4849                           ;ui.c: 270: ui.wa =0;
  4850  001CF6  6A13               	clrf	_ui+6,c	;volatile
  4851                           
  4852                           ;ui.c: 271: ui.ts =ts;
  4853                           
  4854                           ;ui.c: 272: ui.yd =yd;
  4855  001CF8  ECF2  F00C         	call	PL36	;call to abstracted procedure
  4856                           
  4857                           ; BSR set to: 0
  4858                           ;ui.c: 273: ui.dian =4;
  4859  001CFC  0E04               	movlw	4
  4860  001CFE  6E16               	movwf	_ui+9,c	;volatile
  4861                           
  4862                           ; BSR set to: 0
  4863                           ;ui.c: 274: ui.cnt =0;
  4864  001D00  6A17               	clrf	_ui+10,c	;volatile
  4865                           
  4866                           ; BSR set to: 0
  4867                           ;ui.c: 275: ldz(10);
  4868  001D02  0E0A               	movlw	10
  4869  001D04  EC27  F00F         	call	_ldz
  4870                           
  4871                           ;ui.c: 277: ui.num1 =10;
  4872                           
  4873                           ;ui.c: 278: ui.num2 =10;
  4874  001D08  ECC2  F00D         	call	PL92	;call to abstracted procedure
  4875                           
  4876                           ;ui.c: 279: new_nixie();
  4877  001D0C  EF35  F005         	goto	_new_nixie	;wreg free
  4878  001D10                     l18419:
  4879                           
  4880                           ; BSR set to: 0
  4881                           ;ui.c: 281: else if(task_->sucCnt==2)
  4882  001D10  5048               	movf	ui_chrgfull@task_,w,c
  4883  001D12  EC6E  F00A         	call	PL2	;call to abstracted procedure
  4884  001D16  0E02               	movlw	2
  4885  001D18  18DE               	xorwf	postinc2,w,c
  4886  001D1A  A4D8               	btfss	status,2,c
  4887  001D1C  0012               	return	
  4888                           
  4889                           ; BSR set to: 0
  4890                           ;ui.c: 282: {
  4891                           ;ui.c: 283: ldz(0);
  4892  001D1E  0E00               	movlw	0
  4893  001D20  EF27  F00F         	goto	_ldz
  4894  001D24                     __end_of_ui_chrgfull:
  4895                           	opt stack 0
  4896                           tblptru	equ	0xFF8
  4897                           tblptrh	equ	0xFF7
  4898                           tblptrl	equ	0xFF6
  4899                           tablat	equ	0xFF5
  4900                           prodl	equ	0xFF3
  4901                           intcon	equ	0xFF2
  4902                           intcon2	equ	0xFF1
  4903                           intcon3	equ	0xFF0
  4904                           postinc0	equ	0xFEE
  4905                           wreg	equ	0xFE8
  4906                           postdec1	equ	0xFE5
  4907                           fsr1l	equ	0xFE1
  4908                           indf2	equ	0xFDF
  4909                           postinc2	equ	0xFDE
  4910                           postdec2	equ	0xFDD
  4911                           fsr2h	equ	0xFDA
  4912                           fsr2l	equ	0xFD9
  4913                           status	equ	0xFD8
  4914                           
  4915 ;; *************** function _ui_chrgfree *****************
  4916 ;; Defined at:
  4917 ;;		line 234 in file ".\src\ui.c"
  4918 ;; Parameters:    Size  Location     Type
  4919 ;;  task_           1   12[COMRAM] PTR struct task
  4920 ;;		 -> task_list(72), 
  4921 ;; Auto vars:     Size  Location     Type
  4922 ;;		None
  4923 ;; Return value:  Size  Location     Type
  4924 ;;                  1    wreg      void 
  4925 ;; Registers used:
  4926 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4927 ;; Tracked objects:
  4928 ;;		On entry : 3F/0
  4929 ;;		On exit  : 0/0
  4930 ;;		Unchanged: 0/0
  4931 ;; Data sizes:     COMRAM   BANK0
  4932 ;;      Params:         1       0
  4933 ;;      Locals:         0       0
  4934 ;;      Temps:          0       0
  4935 ;;      Totals:         1       0
  4936 ;;Total ram usage:        1 bytes
  4937 ;; Hardware stack levels used:    1
  4938 ;; Hardware stack levels required when called:    3
  4939 ;; This function calls:
  4940 ;;		_ldz
  4941 ;;		_new_nixie
  4942 ;; This function is called by:
  4943 ;;		_find_task
  4944 ;; This function uses a non-reentrant model
  4945 ;;
  4946                           
  4947                           	psect	text11
  4948  001D8E                     __ptext11:
  4949                           	opt stack 0
  4950  001D8E                     _ui_chrgfree:
  4951                           	opt stack 3
  4952                           
  4953                           ; BSR set to: 0
  4954                           ;ui.c: 236: if(task_->sucCnt&1)
  4955                           
  4956                           ;incstack = 0
  4957  001D8E  5048               	movf	ui_chrgfree@task_,w,c
  4958  001D90  EC6E  F00A         	call	PL2	;call to abstracted procedure
  4959  001D94  A0DF               	btfss	indf2,0,c
  4960  001D96  D005               	goto	l18393
  4961                           
  4962                           ; BSR set to: 0
  4963                           ;ui.c: 237: {
  4964                           ;ui.c: 238: ldz(0);
  4965  001D98  0E00               	movlw	0
  4966  001D9A  EC27  F00F         	call	_ldz
  4967                           
  4968                           ;ui.c: 239: }
  4969  001D9E  EF35  F005         	goto	_new_nixie
  4970  001DA2                     l18393:
  4971                           
  4972                           ; BSR set to: 0
  4973                           ;ui.c: 240: else
  4974                           ;ui.c: 241: {
  4975                           ;ui.c: 242: ui.w =1;
  4976  001DA2  0E01               	movlw	1
  4977                           
  4978                           ;ui.c: 243: ui.u =1;
  4979                           
  4980                           ;ui.c: 244: ui.q =10;
  4981  001DA4  D808               	call	PL18	;call to abstracted procedure
  4982                           
  4983                           ;ui.c: 246: ui.ou_d =1;
  4984                           
  4985                           ;ui.c: 247: ui.wa =1;
  4986                           
  4987                           ;ui.c: 248: ui.ts =1;
  4988                           
  4989                           ;ui.c: 249: ui.yd =1;
  4990                           
  4991                           ;ui.c: 250: ui.dian =4;
  4992                           
  4993                           ;ui.c: 251: ui.cnt =5;
  4994                           
  4995                           ; BSR set to: 0
  4996                           ;ui.c: 252: ldz(10);
  4997  001DA6  EC2D  F00C         	call	PL32	;call to abstracted procedure
  4998  001DAA  EC27  F00F         	call	_ldz
  4999                           
  5000                           ;ui.c: 254: ui.num1 =8;
  5001                           
  5002                           ;ui.c: 255: ui.num2 =8;
  5003  001DAE  EC37  F00C         	call	PL96	;call to abstracted procedure
  5004                           
  5005                           ;ui.c: 256: }
  5006                           ;ui.c: 257: new_nixie();
  5007  001DB2  EF35  F005         	goto	_new_nixie	;wreg free
  5008  001DB6                     __end_of_ui_chrgfree:
  5009                           	opt stack 0
  5010  001DB6                     PL18:
  5011                           	opt stack 3
  5012  001DB6  6E0D               	movwf	_ui,c	;volatile
  5013  001DB8  6E0E               	movwf	_ui+1,c	;volatile
  5014  001DBA  0E0A               	movlw	10
  5015  001DBC  6E0F               	movwf	_ui+2,c	;volatile
  5016  001DBE  0C0A               	retlw	10
  5017  001DC0                     __end_ofPL18:
  5018                           	opt stack 0
  5019                           tblptru	equ	0xFF8
  5020                           tblptrh	equ	0xFF7
  5021                           tblptrl	equ	0xFF6
  5022                           tablat	equ	0xFF5
  5023                           prodl	equ	0xFF3
  5024                           intcon	equ	0xFF2
  5025                           intcon2	equ	0xFF1
  5026                           intcon3	equ	0xFF0
  5027                           postinc0	equ	0xFEE
  5028                           wreg	equ	0xFE8
  5029                           postdec1	equ	0xFE5
  5030                           fsr1l	equ	0xFE1
  5031                           indf2	equ	0xFDF
  5032                           postinc2	equ	0xFDE
  5033                           postdec2	equ	0xFDD
  5034                           fsr2h	equ	0xFDA
  5035                           fsr2l	equ	0xFD9
  5036                           status	equ	0xFD8
  5037                           
  5038 ;; *************** function _ui_chrg *****************
  5039 ;; Defined at:
  5040 ;;		line 207 in file ".\src\ui.c"
  5041 ;; Parameters:    Size  Location     Type
  5042 ;;  task_           1   12[COMRAM] PTR struct task
  5043 ;;		 -> task_list(72), 
  5044 ;; Auto vars:     Size  Location     Type
  5045 ;;		None
  5046 ;; Return value:  Size  Location     Type
  5047 ;;                  1    wreg      void 
  5048 ;; Registers used:
  5049 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5050 ;; Tracked objects:
  5051 ;;		On entry : 3F/0
  5052 ;;		On exit  : 0/0
  5053 ;;		Unchanged: 0/0
  5054 ;; Data sizes:     COMRAM   BANK0
  5055 ;;      Params:         1       0
  5056 ;;      Locals:         0       0
  5057 ;;      Temps:          0       0
  5058 ;;      Totals:         1       0
  5059 ;;Total ram usage:        1 bytes
  5060 ;; Hardware stack levels used:    1
  5061 ;; Hardware stack levels required when called:    3
  5062 ;; This function calls:
  5063 ;;		___lbdiv
  5064 ;;		_ldz
  5065 ;;		_new_nixie
  5066 ;; This function is called by:
  5067 ;;		_find_task
  5068 ;; This function uses a non-reentrant model
  5069 ;;
  5070                           
  5071                           	psect	text12
  5072  001C4A                     __ptext12:
  5073                           	opt stack 0
  5074  001C4A                     _ui_chrg:
  5075                           	opt stack 3
  5076                           
  5077                           ; BSR set to: 0
  5078                           ;ui.c: 209: if(task_->sucCnt==0)
  5079                           
  5080                           ;incstack = 0
  5081  001C4A  5048               	movf	ui_chrg@task_,w,c
  5082  001C4C  EC6E  F00A         	call	PL2	;call to abstracted procedure
  5083  001C50  50DF               	movf	indf2,w,c
  5084  001C52  E10A               	bnz	l18375
  5085                           
  5086                           ; BSR set to: 0
  5087                           ;ui.c: 210: {
  5088                           ;ui.c: 211: ui.w =0;
  5089  001C54  6A0D               	clrf	_ui,c	;volatile
  5090                           
  5091                           ;ui.c: 212: ui.u =0;
  5092  001C56  6A0E               	clrf	_ui+1,c	;volatile
  5093                           
  5094                           ;ui.c: 214: ui.ou_d =0;
  5095  001C58  6A12               	clrf	_ui+5,c	;volatile
  5096                           
  5097                           ;ui.c: 215: ui.ts =ts;
  5098                           
  5099                           ;ui.c: 216: ui.yd =yd;
  5100  001C5A  ECF2  F00C         	call	PL36	;call to abstracted procedure
  5101                           
  5102                           ;ui.c: 217: ui.wa =0;
  5103  001C5E  6A13               	clrf	_ui+6,c	;volatile
  5104                           
  5105                           ;ui.c: 218: ui.dian =0;
  5106                           
  5107                           ;ui.c: 219: ui.cnt =0;
  5108                           
  5109                           ; BSR set to: 0
  5110                           ;ui.c: 220: ldz(10);
  5111  001C60  ECC6  F00D         	call	PL94	;call to abstracted procedure
  5112  001C64  EC27  F00F         	call	_ldz
  5113  001C68                     l18375:
  5114                           
  5115                           ;ui.c: 221: }
  5116                           ;ui.c: 222: task_->sucCnt=1;
  5117  001C68  5048               	movf	ui_chrg@task_,w,c
  5118  001C6A  EC6E  F00A         	call	PL2	;call to abstracted procedure
  5119  001C6E  0E01               	movlw	1
  5120  001C70  6EDF               	movwf	indf2,c
  5121                           
  5122                           ;ui.c: 223: ui.cnt++;
  5123  001C72  2A17               	incf	_ui+10,f,c	;volatile
  5124                           
  5125                           ;ui.c: 224: if(ui.cnt>=6)
  5126  001C74  0E05               	movlw	5
  5127  001C76  6417               	cpfsgt	_ui+10,c	;volatile
  5128  001C78  D002               	goto	l18383
  5129                           
  5130                           ;ui.c: 225: {
  5131                           ;ui.c: 226: ui.cnt=1;
  5132  001C7A  0E01               	movlw	1
  5133  001C7C  6E17               	movwf	_ui+10,c	;volatile
  5134  001C7E                     l18383:
  5135                           
  5136                           ;ui.c: 227: }
  5137                           ;ui.c: 228: ui.num1 =chrg_num/10;
  5138  001C7E  0E0A               	movlw	10
  5139  001C80  6E3D               	movwf	___lbdiv@divisor,c
  5140  001C82  5078               	movf	_chrg_num,w,c
  5141  001C84  ECAD  F00E         	call	___lbdiv
  5142  001C88  6E10               	movwf	_ui+3,c	;volatile
  5143                           
  5144                           ;ui.c: 229: ui.num2 =chrg_num-ui.num1*10;
  5145  001C8A  5010               	movf	_ui+3,w,c	;volatile
  5146  001C8C  0DF6               	mullw	246
  5147  001C8E  50F3               	movf	prodl,w,c
  5148  001C90  2478               	addwf	_chrg_num,w,c
  5149  001C92  6E11               	movwf	_ui+4,c	;volatile
  5150                           
  5151                           ;ui.c: 230: new_nixie();
  5152  001C94  EF35  F005         	goto	_new_nixie	;wreg free
  5153  001C98                     __end_of_ui_chrg:
  5154                           	opt stack 0
  5155                           tblptru	equ	0xFF8
  5156                           tblptrh	equ	0xFF7
  5157                           tblptrl	equ	0xFF6
  5158                           tablat	equ	0xFF5
  5159                           prodl	equ	0xFF3
  5160                           intcon	equ	0xFF2
  5161                           intcon2	equ	0xFF1
  5162                           intcon3	equ	0xFF0
  5163                           postinc0	equ	0xFEE
  5164                           wreg	equ	0xFE8
  5165                           postdec1	equ	0xFE5
  5166                           fsr1l	equ	0xFE1
  5167                           indf2	equ	0xFDF
  5168                           postinc2	equ	0xFDE
  5169                           postdec2	equ	0xFDD
  5170                           fsr2h	equ	0xFDA
  5171                           fsr2l	equ	0xFD9
  5172                           status	equ	0xFD8
  5173                           
  5174 ;; *************** function _ui_cb *****************
  5175 ;; Defined at:
  5176 ;;		line 138 in file ".\src\ui.c"
  5177 ;; Parameters:    Size  Location     Type
  5178 ;;  task_           1   14[COMRAM] PTR struct task
  5179 ;;		 -> task_list(72), 
  5180 ;; Auto vars:     Size  Location     Type
  5181 ;;		None
  5182 ;; Return value:  Size  Location     Type
  5183 ;;                  1    wreg      void 
  5184 ;; Registers used:
  5185 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5186 ;; Tracked objects:
  5187 ;;		On entry : 3F/0
  5188 ;;		On exit  : 0/0
  5189 ;;		Unchanged: 0/0
  5190 ;; Data sizes:     COMRAM   BANK0
  5191 ;;      Params:         1       0
  5192 ;;      Locals:         0       0
  5193 ;;      Temps:          1       0
  5194 ;;      Totals:         2       0
  5195 ;;Total ram usage:        2 bytes
  5196 ;; Hardware stack levels used:    1
  5197 ;; Hardware stack levels required when called:    3
  5198 ;; This function calls:
  5199 ;;		___lbdiv
  5200 ;;		___lbmod
  5201 ;;		_add_task_id
  5202 ;;		_ldz
  5203 ;;		_new_nixie
  5204 ;; This function is called by:
  5205 ;;		_find_task
  5206 ;; This function uses a non-reentrant model
  5207 ;;
  5208                           
  5209                           	psect	text13
  5210  00125E                     __ptext13:
  5211                           	opt stack 0
  5212  00125E                     _ui_cb:
  5213                           	opt stack 3
  5214                           
  5215                           ; BSR set to: 0
  5216                           ;ui.c: 140: if(task_->sucCnt<=21)
  5217                           
  5218                           ;incstack = 0
  5219  00125E  504A               	movf	ui_cb@task_,w,c
  5220  001260  EC6E  F00A         	call	PL2	;call to abstracted procedure
  5221  001264  0E16               	movlw	22
  5222  001266  60DF               	cpfslt	indf2,c
  5223  001268  D02E               	goto	l18333
  5224                           
  5225                           ; BSR set to: 0
  5226                           ;ui.c: 141: {
  5227                           ;ui.c: 142: if(task_->sucCnt==0)
  5228  00126A  504A               	movf	ui_cb@task_,w,c
  5229  00126C  EC6E  F00A         	call	PL2	;call to abstracted procedure
  5230  001270  50DF               	movf	indf2,w,c
  5231  001272  E10E               	bnz	l18325
  5232                           
  5233                           ; BSR set to: 0
  5234                           ;ui.c: 143: {
  5235                           ;ui.c: 144: ui.w =0;
  5236  001274  6A0D               	clrf	_ui,c	;volatile
  5237                           
  5238                           ;ui.c: 145: ui.u =0;
  5239  001276  6A0E               	clrf	_ui+1,c	;volatile
  5240                           
  5241                           ; BSR set to: 0
  5242                           ;ui.c: 146: ui.q =10;
  5243  001278  0E0A               	movlw	10
  5244  00127A  6E0F               	movwf	_ui+2,c	;volatile
  5245                           
  5246                           ;ui.c: 148: ui.ou_d =1;
  5247  00127C  0E01               	movlw	1
  5248  00127E  6E12               	movwf	_ui+5,c	;volatile
  5249                           
  5250                           ; BSR set to: 0
  5251                           ;ui.c: 149: ui.wa =0;
  5252  001280  6A13               	clrf	_ui+6,c	;volatile
  5253                           
  5254                           ; BSR set to: 0
  5255                           ;ui.c: 150: ui.ts =ts;
  5256                           
  5257                           ; BSR set to: 0
  5258                           ;ui.c: 151: ui.yd =yd;
  5259  001282  ECF2  F00C         	call	PL36	;call to abstracted procedure
  5260                           
  5261                           ; BSR set to: 0
  5262                           ;ui.c: 152: ui.cnt =0;
  5263  001286  6A17               	clrf	_ui+10,c	;volatile
  5264                           
  5265                           ; BSR set to: 0
  5266                           ;ui.c: 153: ui.dian =0;
  5267  001288  6A16               	clrf	_ui+9,c	;volatile
  5268                           
  5269                           ; BSR set to: 0
  5270                           ;ui.c: 154: ldz(10);
  5271  00128A  0E0A               	movlw	10
  5272  00128C  EC27  F00F         	call	_ldz
  5273  001290                     l18325:
  5274                           
  5275                           ;ui.c: 155: }
  5276                           ;ui.c: 156: if((task_->sucCnt&1)==0)
  5277  001290  504A               	movf	ui_cb@task_,w,c
  5278  001292  EC6E  F00A         	call	PL2	;call to abstracted procedure
  5279  001296  B0DF               	btfsc	indf2,0,c
  5280  001298  D048               	goto	l18361
  5281                           
  5282                           ;ui.c: 157: {
  5283                           ;ui.c: 158: if(zz)
  5284  00129A  507A               	movf	_zz,w,c
  5285  00129C  E00F               	bz	l12646
  5286                           
  5287                           ;ui.c: 159: {
  5288                           ;ui.c: 160: ui.num1 =zz/100;
  5289  00129E  0E64               	movlw	100
  5290  0012A0  6E3D               	movwf	___lbdiv@divisor,c
  5291  0012A2  507A               	movf	_zz,w,c
  5292  0012A4  ECAD  F00E         	call	___lbdiv
  5293  0012A8  6E10               	movwf	_ui+3,c	;volatile
  5294                           
  5295                           ;ui.c: 161: ui.num2 =(zz/10)%10;
  5296  0012AA  0E0A               	movlw	10
  5297  0012AC  6E41               	movwf	___lbmod@divisor,c
  5298  0012AE  6E3D               	movwf	___lbdiv@divisor,c
  5299  0012B0  507A               	movf	_zz,w,c
  5300  0012B2  ECAD  F00E         	call	___lbdiv
  5301  0012B6  ECF3  F00E         	call	___lbmod
  5302  0012BA  D01E               	goto	L4
  5303  0012BC                     l12646:
  5304                           
  5305                           ;ui.c: 164: else
  5306                           ;ui.c: 165: {
  5307                           ;ui.c: 166: ui.num1 =0;
  5308  0012BC  6A10               	clrf	_ui+3,c	;volatile
  5309                           
  5310                           ;ui.c: 167: ui.num2 =0;
  5311  0012BE  6A11               	clrf	_ui+4,c	;volatile
  5312  0012C0                     l18331:
  5313                           
  5314                           ;ui.c: 168: }
  5315                           ;ui.c: 169: new_nixie();
  5316  0012C0  EC35  F005         	call	_new_nixie	;wreg free
  5317  0012C4  D032               	goto	l18361
  5318  0012C6                     l18333:
  5319                           
  5320                           ; BSR set to: 0
  5321                           ;ui.c: 172: else if(task_->sucCnt<=42)
  5322  0012C6  504A               	movf	ui_cb@task_,w,c
  5323  0012C8  EC6E  F00A         	call	PL2	;call to abstracted procedure
  5324  0012CC  0E2B               	movlw	43
  5325  0012CE  60DF               	cpfslt	indf2,c
  5326  0012D0  D015               	goto	l18349
  5327                           
  5328                           ; BSR set to: 0
  5329                           ;ui.c: 173: {
  5330                           ;ui.c: 174: if(task_->sucCnt==22)
  5331  0012D2  504A               	movf	ui_cb@task_,w,c
  5332  0012D4  EC6E  F00A         	call	PL2	;call to abstracted procedure
  5333  0012D8  0E16               	movlw	22
  5334  0012DA  18DE               	xorwf	postinc2,w,c
  5335  0012DC  E103               	bnz	l18341
  5336                           
  5337                           ; BSR set to: 0
  5338                           ;ui.c: 175: {
  5339                           ;ui.c: 176: ui.ou_d =0;
  5340  0012DE  6A12               	clrf	_ui+5,c	;volatile
  5341                           
  5342                           ; BSR set to: 0
  5343                           ;ui.c: 177: ui.wa =1;
  5344  0012E0  0E01               	movlw	1
  5345  0012E2  6E13               	movwf	_ui+6,c	;volatile
  5346  0012E4                     l18341:
  5347                           
  5348                           ; BSR set to: 0
  5349                           ;ui.c: 178: }
  5350                           ;ui.c: 179: if((task_->sucCnt&1)==0)
  5351  0012E4  504A               	movf	ui_cb@task_,w,c
  5352  0012E6  EC6E  F00A         	call	PL2	;call to abstracted procedure
  5353  0012EA  B0DF               	btfsc	indf2,0,c
  5354  0012EC  D01E               	goto	l18361
  5355                           
  5356                           ; BSR set to: 0
  5357                           ;ui.c: 180: {
  5358                           ;ui.c: 181: ui.num1 =pw/10;
  5359  0012EE  D830               	call	PL48	;call to abstracted procedure
  5360  0012F0  ECAD  F00E         	call	___lbdiv
  5361  0012F4  6E10               	movwf	_ui+3,c	;volatile
  5362                           
  5363                           ;ui.c: 182: ui.num2 =pw-ui.num1*10;
  5364  0012F6  D827               	call	PL20	;call to abstracted procedure
  5365  0012F8                     L4:
  5366  0012F8  6E11               	movwf	_ui+4,c	;volatile
  5367  0012FA  D7E2               	goto	l18331
  5368  0012FC                     l18349:
  5369                           
  5370                           ; BSR set to: 0
  5371                           ;ui.c: 186: else
  5372                           ;ui.c: 187: {
  5373                           ;ui.c: 188: if(task_->sucCnt&1)
  5374  0012FC  504A               	movf	ui_cb@task_,w,c
  5375  0012FE  EC6E  F00A         	call	PL2	;call to abstracted procedure
  5376  001302  A0DF               	btfss	indf2,0,c
  5377  001304  D009               	goto	l18359
  5378                           
  5379                           ; BSR set to: 0
  5380                           ;ui.c: 189: {
  5381                           ;ui.c: 190: ui.num1 =pw/10;
  5382  001306  D824               	call	PL48	;call to abstracted procedure
  5383  001308  ECAD  F00E         	call	___lbdiv
  5384  00130C  6E10               	movwf	_ui+3,c	;volatile
  5385                           
  5386                           ;ui.c: 191: ui.num2 =pw-ui.num1*10;
  5387  00130E  D81B               	call	PL20	;call to abstracted procedure
  5388  001310  6E11               	movwf	_ui+4,c	;volatile
  5389                           
  5390                           ;ui.c: 192: ui.dian =0;
  5391  001312  6A16               	clrf	_ui+9,c	;volatile
  5392                           
  5393                           ;ui.c: 193: new_nixie();
  5394  001314  EC35  F005         	call	_new_nixie	;wreg free
  5395  001318                     l18359:
  5396                           
  5397                           ;ui.c: 194: }
  5398                           ;ui.c: 195: ldz(52-task_->sucCnt);
  5399  001318  504A               	movf	ui_cb@task_,w,c
  5400  00131A  EC6E  F00A         	call	PL2	;call to abstracted procedure
  5401  00131E  50DF               	movf	indf2,w,c
  5402  001320  6E4B               	movwf	??_ui_cb& (0+255),c
  5403  001322  504B               	movf	??_ui_cb,w,c
  5404  001324  0834               	sublw	52
  5405  001326  EC27  F00F         	call	_ldz
  5406  00132A                     l18361:
  5407                           
  5408                           ;ui.c: 196: }
  5409                           ;ui.c: 197: if(task_->sucCnt==52)
  5410  00132A  504A               	movf	ui_cb@task_,w,c
  5411  00132C  EC6E  F00A         	call	PL2	;call to abstracted procedure
  5412  001330  0E34               	movlw	52
  5413  001332  18DE               	xorwf	postinc2,w,c
  5414  001334  B4D8               	btfsc	status,2,c
  5415                           
  5416                           ;ui.c: 198: {
  5417                           ;ui.c: 199: if(PINA5&&(PINA1==0))
  5418  001336  AA86               	btfss	3974,5,c	;volatile
  5419  001338  0012               	return	
  5420  00133A  B286               	btfsc	3974,1,c	;volatile
  5421  00133C  0012               	return	
  5422                           
  5423                           ;ui.c: 200: {
  5424                           ;ui.c: 201: add_task_id(1,500,0,ui_id);
  5425  00133E  EC73  F00A         	call	PL4	;call to abstracted procedure
  5426  001342  EF1F  F00B         	goto	_add_task_id
  5427  001346                     __end_of_ui_cb:
  5428                           	opt stack 0
  5429  001346                     PL20:
  5430                           	opt stack 3
  5431  001346  5010               	movf	_ui+3,w,c	;volatile
  5432  001348  0DF6               	mullw	246
  5433  00134A  50F3               	movf	prodl,w,c
  5434  00134C  247C               	addwf	_pw,w,c
  5435  00134E  0012               	return	
  5436  001350                     __end_ofPL20:
  5437                           	opt stack 0
  5438  001350                     PL48:
  5439                           	opt stack 3
  5440  001350  0E0A               	movlw	10
  5441  001352  6E3D               	movwf	___lbdiv@divisor,c
  5442  001354  507C               	movf	_pw,w,c
  5443  001356  0012               	return	
  5444  001358                     __end_ofPL48:
  5445                           	opt stack 0
  5446                           tblptru	equ	0xFF8
  5447                           tblptrh	equ	0xFF7
  5448                           tblptrl	equ	0xFF6
  5449                           tablat	equ	0xFF5
  5450                           prodl	equ	0xFF3
  5451                           intcon	equ	0xFF2
  5452                           intcon2	equ	0xFF1
  5453                           intcon3	equ	0xFF0
  5454                           postinc0	equ	0xFEE
  5455                           wreg	equ	0xFE8
  5456                           postdec1	equ	0xFE5
  5457                           fsr1l	equ	0xFE1
  5458                           indf2	equ	0xFDF
  5459                           postinc2	equ	0xFDE
  5460                           postdec2	equ	0xFDD
  5461                           fsr2h	equ	0xFDA
  5462                           fsr2l	equ	0xFD9
  5463                           status	equ	0xFD8
  5464                           
  5465 ;; *************** function ___lbmod *****************
  5466 ;; Defined at:
  5467 ;;		line 4 in file "c:\Users\Administrator\.vscode\extensions\ad.adide-1.1.7\resource\Microchip\xc8\v1.41\sources\common
      +\lbmod.c"
  5468 ;; Parameters:    Size  Location     Type
  5469 ;;  dividend        1    wreg     unsigned char 
  5470 ;;  divisor         1    5[COMRAM] unsigned char 
  5471 ;; Auto vars:     Size  Location     Type
  5472 ;;  dividend        1    6[COMRAM] unsigned char 
  5473 ;;  rem             1    8[COMRAM] unsigned char 
  5474 ;;  counter         1    7[COMRAM] unsigned char 
  5475 ;; Return value:  Size  Location     Type
  5476 ;;                  1    wreg      unsigned char 
  5477 ;; Registers used:
  5478 ;;		wreg, status,2, status,0
  5479 ;; Tracked objects:
  5480 ;;		On entry : 0/0
  5481 ;;		On exit  : 0/0
  5482 ;;		Unchanged: 0/0
  5483 ;; Data sizes:     COMRAM   BANK0
  5484 ;;      Params:         1       0
  5485 ;;      Locals:         3       0
  5486 ;;      Temps:          0       0
  5487 ;;      Totals:         4       0
  5488 ;;Total ram usage:        4 bytes
  5489 ;; Hardware stack levels used:    1
  5490 ;; Hardware stack levels required when called:    2
  5491 ;; This function calls:
  5492 ;;		Nothing
  5493 ;; This function is called by:
  5494 ;;		_ui_cb
  5495 ;; This function uses a non-reentrant model
  5496 ;;
  5497                           
  5498                           	psect	text14
  5499  001DE6                     __ptext14:
  5500                           	opt stack 0
  5501  001DE6                     ___lbmod:
  5502                           	opt stack 3
  5503                           
  5504                           ;incstack = 0
  5505                           ;___lbmod@dividend stored from wreg
  5506  001DE6  6E42               	movwf	___lbmod@dividend,c
  5507  001DE8  0E08               	movlw	8
  5508  001DEA  6E43               	movwf	___lbmod@counter,c
  5509  001DEC  6A44               	clrf	___lbmod@rem,c
  5510  001DEE                     l17875:
  5511  001DEE  90D8               	bcf	status,0,c
  5512  001DF0  3442               	rlcf	___lbmod@dividend,w,c
  5513  001DF2  3444               	rlcf	___lbmod@rem,w,c
  5514  001DF4  6E44               	movwf	___lbmod@rem,c
  5515  001DF6  90D8               	bcf	status,0,c
  5516  001DF8  3642               	rlcf	___lbmod@dividend,f,c
  5517  001DFA  5041               	movf	___lbmod@divisor,w,c
  5518  001DFC  5C44               	subwf	___lbmod@rem,w,c
  5519  001DFE  E302               	bnc	l17883
  5520  001E00  5041               	movf	___lbmod@divisor,w,c
  5521  001E02  5E44               	subwf	___lbmod@rem,f,c
  5522  001E04                     l17883:
  5523  001E04  2E43               	decfsz	___lbmod@counter,f,c
  5524  001E06  D7F3               	goto	l17875
  5525  001E08  5044               	movf	___lbmod@rem,w,c
  5526  001E0A  0012               	return		;funcret
  5527  001E0C                     __end_of___lbmod:
  5528                           	opt stack 0
  5529                           tblptru	equ	0xFF8
  5530                           tblptrh	equ	0xFF7
  5531                           tblptrl	equ	0xFF6
  5532                           tablat	equ	0xFF5
  5533                           prodl	equ	0xFF3
  5534                           intcon	equ	0xFF2
  5535                           intcon2	equ	0xFF1
  5536                           intcon3	equ	0xFF0
  5537                           postinc0	equ	0xFEE
  5538                           wreg	equ	0xFE8
  5539                           postdec1	equ	0xFE5
  5540                           fsr1l	equ	0xFE1
  5541                           indf2	equ	0xFDF
  5542                           postinc2	equ	0xFDE
  5543                           postdec2	equ	0xFDD
  5544                           fsr2h	equ	0xFDA
  5545                           fsr2l	equ	0xFD9
  5546                           status	equ	0xFD8
  5547                           
  5548 ;; *************** function ___lbdiv *****************
  5549 ;; Defined at:
  5550 ;;		line 4 in file "c:\Users\Administrator\.vscode\extensions\ad.adide-1.1.7\resource\Microchip\xc8\v1.41\sources\common
      +\lbdiv.c"
  5551 ;; Parameters:    Size  Location     Type
  5552 ;;  dividend        1    wreg     unsigned char 
  5553 ;;  divisor         1    1[COMRAM] unsigned char 
  5554 ;; Auto vars:     Size  Location     Type
  5555 ;;  dividend        1    2[COMRAM] unsigned char 
  5556 ;;  quotient        1    4[COMRAM] unsigned char 
  5557 ;;  counter         1    3[COMRAM] unsigned char 
  5558 ;; Return value:  Size  Location     Type
  5559 ;;                  1    wreg      unsigned char 
  5560 ;; Registers used:
  5561 ;;		wreg, status,2, status,0
  5562 ;; Tracked objects:
  5563 ;;		On entry : 0/0
  5564 ;;		On exit  : 0/0
  5565 ;;		Unchanged: 0/0
  5566 ;; Data sizes:     COMRAM   BANK0
  5567 ;;      Params:         1       0
  5568 ;;      Locals:         3       0
  5569 ;;      Temps:          0       0
  5570 ;;      Totals:         4       0
  5571 ;;Total ram usage:        4 bytes
  5572 ;; Hardware stack levels used:    1
  5573 ;; Hardware stack levels required when called:    2
  5574 ;; This function calls:
  5575 ;;		Nothing
  5576 ;; This function is called by:
  5577 ;;		_ui_cb
  5578 ;;		_ui_chrg
  5579 ;;		_ui_dl_getup
  5580 ;;		_ui_smoend
  5581 ;;		_ui_ts_on
  5582 ;;		_ui_ts_off
  5583 ;;		_ui_timout
  5584 ;; This function uses a non-reentrant model
  5585 ;;
  5586                           
  5587                           	psect	text15
  5588  001D5A                     __ptext15:
  5589                           	opt stack 0
  5590  001D5A                     ___lbdiv:
  5591                           	opt stack 3
  5592                           
  5593                           ;incstack = 0
  5594                           ;___lbdiv@dividend stored from wreg
  5595  001D5A  6E3E               	movwf	___lbdiv@dividend,c
  5596  001D5C  6A40               	clrf	___lbdiv@quotient,c
  5597  001D5E  503D               	movf	___lbdiv@divisor,w,c
  5598  001D60  E014               	bz	l17867
  5599  001D62  0E01               	movlw	1
  5600  001D64  6E3F               	movwf	___lbdiv@counter,c
  5601  001D66  D003               	goto	l17855
  5602  001D68                     l17851:
  5603  001D68  90D8               	bcf	status,0,c
  5604  001D6A  363D               	rlcf	___lbdiv@divisor,f,c
  5605  001D6C  2A3F               	incf	___lbdiv@counter,f,c
  5606  001D6E                     l17855:
  5607  001D6E  AE3D               	btfss	___lbdiv@divisor,7,c
  5608  001D70  D7FB               	goto	l17851
  5609  001D72                     l17857:
  5610  001D72  90D8               	bcf	status,0,c
  5611  001D74  3640               	rlcf	___lbdiv@quotient,f,c
  5612  001D76  503D               	movf	___lbdiv@divisor,w,c
  5613  001D78  5C3E               	subwf	___lbdiv@dividend,w,c
  5614  001D7A  E303               	bnc	l17863
  5615  001D7C  503D               	movf	___lbdiv@divisor,w,c
  5616  001D7E  5E3E               	subwf	___lbdiv@dividend,f,c
  5617  001D80  8040               	bsf	___lbdiv@quotient,0,c
  5618  001D82                     l17863:
  5619  001D82  90D8               	bcf	status,0,c
  5620  001D84  323D               	rrcf	___lbdiv@divisor,f,c
  5621  001D86  2E3F               	decfsz	___lbdiv@counter,f,c
  5622  001D88  D7F4               	goto	l17857
  5623  001D8A                     l17867:
  5624  001D8A  5040               	movf	___lbdiv@quotient,w,c
  5625  001D8C  0012               	return		;funcret
  5626  001D8E                     __end_of___lbdiv:
  5627                           	opt stack 0
  5628                           tblptru	equ	0xFF8
  5629                           tblptrh	equ	0xFF7
  5630                           tblptrl	equ	0xFF6
  5631                           tablat	equ	0xFF5
  5632                           prodl	equ	0xFF3
  5633                           intcon	equ	0xFF2
  5634                           intcon2	equ	0xFF1
  5635                           intcon3	equ	0xFF0
  5636                           postinc0	equ	0xFEE
  5637                           wreg	equ	0xFE8
  5638                           postdec1	equ	0xFE5
  5639                           fsr1l	equ	0xFE1
  5640                           indf2	equ	0xFDF
  5641                           postinc2	equ	0xFDE
  5642                           postdec2	equ	0xFDD
  5643                           fsr2h	equ	0xFDA
  5644                           fsr2l	equ	0xFD9
  5645                           status	equ	0xFD8
  5646                           
  5647 ;; *************** function _ui_begin *****************
  5648 ;; Defined at:
  5649 ;;		line 597 in file ".\src\ui.c"
  5650 ;; Parameters:    Size  Location     Type
  5651 ;;  task_           1   12[COMRAM] PTR struct task
  5652 ;;		 -> task_list(72), 
  5653 ;; Auto vars:     Size  Location     Type
  5654 ;;		None
  5655 ;; Return value:  Size  Location     Type
  5656 ;;                  1    wreg      void 
  5657 ;; Registers used:
  5658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5659 ;; Tracked objects:
  5660 ;;		On entry : 3F/0
  5661 ;;		On exit  : 0/0
  5662 ;;		Unchanged: 0/0
  5663 ;; Data sizes:     COMRAM   BANK0
  5664 ;;      Params:         1       0
  5665 ;;      Locals:         0       0
  5666 ;;      Temps:          1       0
  5667 ;;      Totals:         2       0
  5668 ;;Total ram usage:        2 bytes
  5669 ;; Hardware stack levels used:    1
  5670 ;; Hardware stack levels required when called:    3
  5671 ;; This function calls:
  5672 ;;		_cmp0_init
  5673 ;;		_gpio_init
  5674 ;;		_ldz
  5675 ;;		_new_nixie
  5676 ;;		_sleep_mode
  5677 ;;		_timer0_init
  5678 ;;		_timer1_init
  5679 ;;		_timer2_init
  5680 ;; This function is called by:
  5681 ;;		_find_task
  5682 ;; This function uses a non-reentrant model
  5683 ;;
  5684                           
  5685                           	psect	text16
  5686  0017F2                     __ptext16:
  5687                           	opt stack 0
  5688  0017F2                     _ui_begin:
  5689                           	opt stack 3
  5690                           
  5691                           ; BSR set to: 0
  5692                           ;ui.c: 599: if(task_->sucCnt==0)
  5693                           
  5694                           ;incstack = 0
  5695  0017F2  5048               	movf	ui_begin@task_,w,c
  5696  0017F4  EC6E  F00A         	call	PL2	;call to abstracted procedure
  5697  0017F8  50DF               	movf	indf2,w,c
  5698  0017FA  E109               	bnz	l18679
  5699                           
  5700                           ; BSR set to: 0
  5701                           ;ui.c: 600: {
  5702                           ;ui.c: 601: ui.w =1;
  5703  0017FC  0E01               	movlw	1
  5704                           
  5705                           ;ui.c: 602: ui.u =1;
  5706                           
  5707                           ;ui.c: 603: ui.q =10;
  5708  0017FE  ECDB  F00E         	call	PL18	;call to abstracted procedure
  5709                           
  5710                           ;ui.c: 605: ui.ou_d =1;
  5711                           
  5712                           ;ui.c: 606: ui.wa =1;
  5713                           
  5714                           ;ui.c: 607: ui.ts =1;
  5715                           
  5716                           ;ui.c: 608: ui.yd =1;
  5717                           
  5718                           ;ui.c: 609: ui.dian =4;
  5719                           
  5720                           ;ui.c: 610: ui.cnt =5;
  5721                           
  5722                           ; BSR set to: 0
  5723                           ;ui.c: 611: ldz(10);
  5724  001802  D82B               	call	PL32	;call to abstracted procedure
  5725  001804  EC27  F00F         	call	_ldz
  5726                           
  5727                           ;ui.c: 613: ui.num1 =8;
  5728                           
  5729                           ;ui.c: 614: ui.num2 =8;
  5730  001808  D832               	call	PL96	;call to abstracted procedure
  5731                           
  5732                           ;ui.c: 616: }
  5733  00180A  EF35  F005         	goto	_new_nixie
  5734  00180E                     l18679:
  5735                           
  5736                           ; BSR set to: 0
  5737                           ;ui.c: 617: else if(task_->sucCnt==1)
  5738  00180E  5048               	movf	ui_begin@task_,w,c
  5739  001810  EC6E  F00A         	call	PL2	;call to abstracted procedure
  5740  001814  04DE               	decf	postinc2,w,c
  5741  001816  E105               	bnz	l18683
  5742                           
  5743                           ; BSR set to: 0
  5744                           ;ui.c: 618: {
  5745                           ;ui.c: 619: ldz(0);
  5746  001818  0E00               	movlw	0
  5747  00181A  EC27  F00F         	call	_ldz
  5748                           
  5749                           ;ui.c: 621: }
  5750  00181E  EF35  F005         	goto	_new_nixie
  5751  001822                     l18683:
  5752                           
  5753                           ; BSR set to: 0
  5754                           ;ui.c: 622: else
  5755                           ;ui.c: 623: {
  5756                           ;ui.c: 627: cb_o=PINB1;
  5757  001822  EC15  F00B         	call	PL46	;call to abstracted procedure
  5758                           
  5759                           ; BSR set to: 0
  5760                           ;ui.c: 628: sleep_mode();
  5761  001826  ECC9  F00D         	call	_sleep_mode	;wreg free
  5762  00182A  F000               	nop		;# 
  5763                           
  5764                           ;ui.c: 630: gpio_init();
  5765  00182C  EC06  F00F         	call	_gpio_init	;wreg free
  5766                           
  5767                           ;ui.c: 631: timer0_init();
  5768  001830  EC55  F00F         	call	_timer0_init	;wreg free
  5769                           
  5770                           ;ui.c: 632: _delay((unsigned long)((30)*(16000000/4000000)));
  5771  001834  0E28               	movlw	40
  5772  001836                     u11887:
  5773  001836  2EE8               	decfsz	wreg,f,c
  5774  001838  D7FE               	bra	u11887
  5775                           
  5776                           ;ui.c: 633: timer1_init();
  5777  00183A  EC19  F00F         	call	_timer1_init	;wreg free
  5778                           
  5779                           ;ui.c: 634: timer2_init();
  5780  00183E  EC4A  F00F         	call	_timer2_init	;wreg free
  5781                           
  5782                           ;ui.c: 635: cmp0_init();
  5783  001842  EC33  F00F         	call	_cmp0_init	;wreg free
  5784                           
  5785                           ;ui.c: 639: _delay((unsigned long)((20)*(16000000/4000.0)));
  5786  001846  0E68               	movlw	104
  5787  001848  6E49               	movwf	??_ui_begin& (0+255),c
  5788  00184A  0EE4               	movlw	228
  5789  00184C                     u11897:
  5790  00184C  2EE8               	decfsz	wreg,f,c
  5791  00184E  D7FE               	bra	u11897
  5792  001850  2E49               	decfsz	??_ui_begin& (0+255),f,c
  5793  001852  D7FC               	bra	u11897
  5794  001854  D000               	nop2	
  5795                           
  5796                           ;ui.c: 640: }
  5797                           ;ui.c: 641: new_nixie();
  5798  001856  EF35  F005         	goto	_new_nixie	;wreg free
  5799  00185A                     __end_of_ui_begin:
  5800                           	opt stack 0
  5801  00185A                     PL32:
  5802                           	opt stack 3
  5803  00185A  0E01               	movlw	1
  5804  00185C  6E12               	movwf	_ui+5,c	;volatile
  5805  00185E  6E13               	movwf	_ui+6,c	;volatile
  5806  001860  6E14               	movwf	_ui+7,c	;volatile
  5807  001862  6E15               	movwf	_ui+8,c	;volatile
  5808  001864  0E04               	movlw	4
  5809  001866  6E16               	movwf	_ui+9,c	;volatile
  5810  001868  0E05               	movlw	5
  5811  00186A  6E17               	movwf	_ui+10,c	;volatile
  5812  00186C  0C0A               	retlw	10
  5813  00186E                     __end_ofPL32:
  5814                           	opt stack 0
  5815  00186E                     PL96:
  5816                           	opt stack 3
  5817  00186E  0E08               	movlw	8
  5818  001870  6E10               	movwf	_ui+3,c	;volatile
  5819  001872  6E11               	movwf	_ui+4,c	;volatile
  5820  001874  0C08               	retlw	8
  5821  001876                     __end_ofPL96:
  5822                           	opt stack 0
  5823                           tblptru	equ	0xFF8
  5824                           tblptrh	equ	0xFF7
  5825                           tblptrl	equ	0xFF6
  5826                           tablat	equ	0xFF5
  5827                           prodl	equ	0xFF3
  5828                           intcon	equ	0xFF2
  5829                           intcon2	equ	0xFF1
  5830                           intcon3	equ	0xFF0
  5831                           postinc0	equ	0xFEE
  5832                           wreg	equ	0xFE8
  5833                           postdec1	equ	0xFE5
  5834                           fsr1l	equ	0xFE1
  5835                           indf2	equ	0xFDF
  5836                           postinc2	equ	0xFDE
  5837                           postdec2	equ	0xFDD
  5838                           fsr2h	equ	0xFDA
  5839                           fsr2l	equ	0xFD9
  5840                           status	equ	0xFD8
  5841                           
  5842 ;; *************** function _new_nixie *****************
  5843 ;; Defined at:
  5844 ;;		line 29 in file ".\src\ui.c"
  5845 ;; Parameters:    Size  Location     Type
  5846 ;;		None
  5847 ;; Auto vars:     Size  Location     Type
  5848 ;;		None
  5849 ;; Return value:  Size  Location     Type
  5850 ;;                  1    wreg      void 
  5851 ;; Registers used:
  5852 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  5853 ;; Tracked objects:
  5854 ;;		On entry : 0/0
  5855 ;;		On exit  : 0/0
  5856 ;;		Unchanged: 0/0
  5857 ;; Data sizes:     COMRAM   BANK0
  5858 ;;      Params:         0       0
  5859 ;;      Locals:         8       0
  5860 ;;      Temps:          3       0
  5861 ;;      Totals:        11       0
  5862 ;;Total ram usage:       11 bytes
  5863 ;; Hardware stack levels used:    1
  5864 ;; Hardware stack levels required when called:    2
  5865 ;; This function calls:
  5866 ;;		Nothing
  5867 ;; This function is called by:
  5868 ;;		_ui_cb
  5869 ;;		_ui_chrg
  5870 ;;		_ui_chrgfree
  5871 ;;		_ui_chrgfull
  5872 ;;		_ui_smoing
  5873 ;;		_ui_dl_getup
  5874 ;;		_ui_smoend
  5875 ;;		_ui_kl
  5876 ;;		_ui_ts_on
  5877 ;;		_ui_ts_off
  5878 ;;		_ui_timout
  5879 ;;		_ui_begin
  5880 ;; This function uses a non-reentrant model
  5881 ;;
  5882                           
  5883                           	psect	text17
  5884  000A6A                     __ptext17:
  5885                           	opt stack 0
  5886  000A6A                     _new_nixie:
  5887                           	opt stack 3
  5888                           
  5889                           ;ui.c: 31: if(ui.num1<10)
  5890                           
  5891                           ;incstack = 0
  5892  000A6A  0E0A               	movlw	10
  5893  000A6C  6010               	cpfslt	_ui+3,c	;volatile
  5894  000A6E  D00C               	goto	l12591
  5895                           
  5896                           ;ui.c: 32: {
  5897                           ;ui.c: 33: ui_buff[0].buf=nixienum[ui.num1];
  5898  000A70  5010               	movf	_ui+3,w,c	;volatile
  5899  000A72  D8E6               	call	PL44	;call to abstracted procedure
  5900  000A74  CFF5 F001          	movff	tablat,_ui_buff	;volatile
  5901                           
  5902                           ;ui.c: 34: if((ui.num1==1)&&(ui.num2==6))
  5903  000A78  0410               	decf	_ui+3,w,c	;volatile
  5904  000A7A  E107               	bnz	l12593
  5905  000A7C  0E06               	movlw	6
  5906  000A7E  1811               	xorwf	_ui+4,w,c	;volatile
  5907  000A80  E104               	bnz	l12593
  5908                           
  5909                           ;ui.c: 35: {
  5910                           ;ui.c: 36: ui_buff[0].buf=0x30;
  5911  000A82  0E30               	movlw	48
  5912  000A84  6E01               	movwf	_ui_buff,c	;volatile
  5913  000A86  D001               	goto	l12593
  5914  000A88                     l12591:
  5915                           
  5916                           ;ui.c: 39: else
  5917                           ;ui.c: 40: {
  5918                           ;ui.c: 41: ui_buff[0].buf=0;
  5919  000A88  6A01               	clrf	_ui_buff,c	;volatile
  5920  000A8A                     l12593:
  5921                           
  5922                           ;ui.c: 42: }
  5923                           ;ui.c: 43: ui_buff[0].h=ui.ou_d;
  5924  000A8A  B012               	btfsc	_ui+5,0,c	;volatile
  5925  000A8C  D002               	bra	u8285
  5926  000A8E  9E01               	bcf	_ui_buff,7,c	;volatile
  5927  000A90  D001               	bra	u8286
  5928  000A92                     u8285:
  5929  000A92  8E01               	bsf	_ui_buff,7,c	;volatile
  5930  000A94                     u8286:
  5931                           
  5932                           ;ui.c: 44: ui_buff[10].j0=ui.wa;
  5933  000A94  B013               	btfsc	_ui+6,0,c	;volatile
  5934  000A96  D002               	bra	u8295
  5935  000A98  900B               	bcf	_ui_buff+10,0,c	;volatile
  5936  000A9A  D001               	bra	u8296
  5937  000A9C                     u8295:
  5938  000A9C  800B               	bsf	_ui_buff+10,0,c	;volatile
  5939  000A9E                     u8296:
  5940                           
  5941                           ;ui.c: 46: if(ui.num2<10)
  5942  000A9E  0E0A               	movlw	10
  5943  000AA0  6011               	cpfslt	_ui+4,c	;volatile
  5944  000AA2  D005               	goto	l12594
  5945                           
  5946                           ;ui.c: 47: {
  5947                           ;ui.c: 48: ui_buff[1].buf=nixienum[ui.num2];
  5948  000AA4  5011               	movf	_ui+4,w,c	;volatile
  5949  000AA6  D8CC               	call	PL44	;call to abstracted procedure
  5950  000AA8  CFF5 F002          	movff	tablat,_ui_buff+1	;volatile
  5951                           
  5952                           ;ui.c: 49: }
  5953  000AAC  D001               	goto	l12595
  5954  000AAE                     l12594:
  5955                           
  5956                           ;ui.c: 50: else
  5957                           ;ui.c: 51: {
  5958                           ;ui.c: 52: ui_buff[1].buf=0;
  5959  000AAE  6A02               	clrf	_ui_buff+1,c	;volatile
  5960  000AB0                     l12595:
  5961                           
  5962                           ;ui.c: 53: }
  5963                           ;ui.c: 54: ui_buff[1].h=ui.ou_d;
  5964  000AB0  B012               	btfsc	_ui+5,0,c	;volatile
  5965  000AB2  D002               	bra	u8315
  5966  000AB4  9E02               	bcf	_ui_buff+1,7,c	;volatile
  5967  000AB6  D001               	bra	u8316
  5968  000AB8                     u8315:
  5969  000AB8  8E02               	bsf	_ui_buff+1,7,c	;volatile
  5970  000ABA                     u8316:
  5971                           
  5972                           ;ui.c: 55: ui_buff[10].j1=ui.ts;
  5973  000ABA  B014               	btfsc	_ui+7,0,c	;volatile
  5974  000ABC  D002               	bra	u8325
  5975  000ABE  920B               	bcf	_ui_buff+10,1,c	;volatile
  5976  000AC0  D001               	bra	u8326
  5977  000AC2                     u8325:
  5978  000AC2  820B               	bsf	_ui_buff+10,1,c	;volatile
  5979  000AC4                     u8326:
  5980                           
  5981                           ;ui.c: 57: ui_buff[2].buf=(ui.w)?0xff:0;
  5982  000AC4  500D               	movf	_ui,w,c	;volatile
  5983  000AC6  E103               	bnz	l17777
  5984  000AC8  6A40               	clrf	_new_nixie$6626,c
  5985  000ACA  6A41               	clrf	_new_nixie$6626+1,c
  5986  000ACC  D002               	goto	l17779
  5987  000ACE                     l17777:
  5988  000ACE  6A41               	clrf	_new_nixie$6626+1,c
  5989  000AD0  6840               	setf	_new_nixie$6626,c
  5990  000AD2                     l17779:
  5991  000AD2  C040  F003         	movff	_new_nixie$6626,_ui_buff+2	;volatile
  5992                           
  5993                           ;ui.c: 58: ui_buff[10].j2=ui.w;
  5994  000AD6  B00D               	btfsc	_ui,0,c	;volatile
  5995  000AD8  D002               	bra	u8345
  5996  000ADA  940B               	bcf	_ui_buff+10,2,c	;volatile
  5997  000ADC  D001               	bra	u8346
  5998  000ADE                     u8345:
  5999  000ADE  840B               	bsf	_ui_buff+10,2,c	;volatile
  6000  000AE0                     u8346:
  6001                           
  6002                           ;ui.c: 60: if(ui.w){ui_buff[3].buf=0x1f;}else{ui_buff[3].buf=0;}
  6003  000AE0  500D               	movf	_ui,w,c	;volatile
  6004  000AE2  E003               	bz	l12600
  6005  000AE4  0E1F               	movlw	31
  6006  000AE6  6E04               	movwf	_ui_buff+3,c	;volatile
  6007  000AE8  D001               	goto	l12601
  6008  000AEA                     l12600:
  6009  000AEA  6A04               	clrf	_ui_buff+3,c	;volatile
  6010  000AEC                     l12601:
  6011                           
  6012                           ;ui.c: 61: ui_buff[3].f=ui.yd;
  6013  000AEC  B015               	btfsc	_ui+8,0,c	;volatile
  6014  000AEE  D002               	bra	u8365
  6015  000AF0  9A04               	bcf	_ui_buff+3,5,c	;volatile
  6016  000AF2  D001               	bra	u8366
  6017  000AF4                     u8365:
  6018  000AF4  8A04               	bsf	_ui_buff+3,5,c	;volatile
  6019  000AF6                     u8366:
  6020                           
  6021                           ;ui.c: 62: ui_buff[10].j3=(ui.q>=8)?1:0;
  6022  000AF6  0E08               	movlw	8
  6023  000AF8  600F               	cpfslt	_ui+2,c	;volatile
  6024  000AFA  D001               	goto	u8371
  6025  000AFC  D003               	goto	u8370
  6026  000AFE                     u8371:
  6027  000AFE  6A3D               	clrf	??_new_nixie& (0+255),c
  6028  000B00  2A3D               	incf	??_new_nixie& (0+255),f,c
  6029  000B02  D001               	goto	u8388
  6030  000B04                     u8370:
  6031  000B04  6A3D               	clrf	??_new_nixie& (0+255),c
  6032  000B06                     u8388:
  6033  000B06  463D               	rlncf	??_new_nixie,f,c
  6034  000B08  D8A3               	call	PL70	;call to abstracted procedure
  6035  000B0A  0BF7               	andlw	-9
  6036  000B0C  183D               	xorwf	??_new_nixie,w,c
  6037  000B0E  6E0B               	movwf	_ui_buff+10,c	;volatile
  6038                           
  6039                           ;ui.c: 63: if(ui.q>=9){
  6040  000B10  0E08               	movlw	8
  6041  000B12  640F               	cpfsgt	_ui+2,c	;volatile
  6042  000B14  D005               	goto	l17793
  6043                           
  6044                           ;ui.c: 64: ui_buff[3].h=1;
  6045  000B16  8E04               	bsf	_ui_buff+3,7,c	;volatile
  6046                           
  6047                           ;ui.c: 65: if(ui.q==10)
  6048  000B18  0E0A               	movlw	10
  6049  000B1A  180F               	xorwf	_ui+2,w,c	;volatile
  6050  000B1C  E101               	bnz	l17793
  6051                           
  6052                           ;ui.c: 66: {
  6053                           ;ui.c: 67: ui_buff[3].g=1;
  6054  000B1E  8C04               	bsf	_ui_buff+3,6,c	;volatile
  6055  000B20                     l17793:
  6056                           
  6057                           ;ui.c: 68: }
  6058                           ;ui.c: 69: }
  6059                           ;ui.c: 71: ui_buff[4].buf=(unsigned char)(0xff<<(10-ui.q));
  6060  000B20  500F               	movf	_ui+2,w,c	;volatile
  6061  000B22  080A               	sublw	10
  6062  000B24  6E3D               	movwf	??_new_nixie& (0+255),c
  6063  000B26  683E               	setf	(??_new_nixie+1)& (0+255),c
  6064  000B28  2A3D               	incf	??_new_nixie,f,c
  6065  000B2A  D002               	goto	u8414
  6066  000B2C                     u8415:
  6067  000B2C  90D8               	bcf	status,0,c
  6068  000B2E  363E               	rlcf	??_new_nixie+1,f,c
  6069  000B30                     u8414:
  6070  000B30  2E3D               	decfsz	??_new_nixie,f,c
  6071  000B32  D7FC               	goto	u8415
  6072  000B34  503E               	movf	??_new_nixie+1,w,c
  6073  000B36  6E05               	movwf	_ui_buff+4,c	;volatile
  6074                           
  6075                           ;ui.c: 72: if(ui.q>=2){ui_buff[10].j4=1;}else{ui_buff[10].j4=0;}
  6076  000B38  0E01               	movlw	1
  6077  000B3A  640F               	cpfsgt	_ui+2,c	;volatile
  6078  000B3C  D002               	goto	l12604
  6079  000B3E  880B               	bsf	_ui_buff+10,4,c	;volatile
  6080  000B40  D001               	goto	l17797
  6081  000B42                     l12604:
  6082  000B42  980B               	bcf	_ui_buff+10,4,c	;volatile
  6083  000B44                     l17797:
  6084                           
  6085                           ;ui.c: 74: if(ui.q)
  6086  000B44  500F               	movf	_ui+2,w,c	;volatile
  6087  000B46  E014               	bz	l12606
  6088                           
  6089                           ;ui.c: 75: {
  6090                           ;ui.c: 76: if(ui.q<=7){ui_buff[5].buf=(0xff>>(7-ui.q));}else{ui_buff[5].buf=0xff;}
  6091  000B48  0E08               	movlw	8
  6092  000B4A  600F               	cpfslt	_ui+2,c	;volatile
  6093  000B4C  D00F               	goto	l12607
  6094  000B4E  500F               	movf	_ui+2,w,c	;volatile
  6095  000B50  0807               	sublw	7
  6096  000B52  6E3D               	movwf	??_new_nixie& (0+255),c
  6097  000B54  683E               	setf	(??_new_nixie+1)& (0+255),c
  6098  000B56  6A3F               	clrf	(??_new_nixie+2)& (0+255),c
  6099  000B58  2A3D               	incf	??_new_nixie,f,c
  6100  000B5A  D003               	goto	u8454
  6101  000B5C                     u8455:
  6102  000B5C  343F               	rlcf	??_new_nixie+2,w,c
  6103  000B5E  323F               	rrcf	??_new_nixie+2,f,c
  6104  000B60  323E               	rrcf	??_new_nixie+1,f,c
  6105  000B62                     u8454:
  6106  000B62  2E3D               	decfsz	??_new_nixie,f,c
  6107  000B64  D7FB               	goto	u8455
  6108  000B66  503E               	movf	??_new_nixie+1,w,c
  6109  000B68  6E06               	movwf	_ui_buff+5,c	;volatile
  6110  000B6A  D003               	goto	l17803
  6111  000B6C                     l12607:
  6112  000B6C  6806               	setf	_ui_buff+5,c	;volatile
  6113  000B6E  D001               	goto	l17803
  6114  000B70                     l12606:
  6115                           
  6116                           ;ui.c: 78: else
  6117                           ;ui.c: 79: {
  6118                           ;ui.c: 80: ui_buff[5].buf=0;
  6119  000B70  6A06               	clrf	_ui_buff+5,c	;volatile
  6120  000B72                     l17803:
  6121                           
  6122                           ;ui.c: 81: }
  6123                           ;ui.c: 82: ui_buff[10].j5=(ui.cnt>=5)?1:0;
  6124  000B72  0E05               	movlw	5
  6125  000B74  6017               	cpfslt	_ui+10,c	;volatile
  6126  000B76  D001               	goto	u8461
  6127  000B78  D003               	goto	u8460
  6128  000B7A                     u8461:
  6129  000B7A  6A3D               	clrf	??_new_nixie& (0+255),c
  6130  000B7C  2A3D               	incf	??_new_nixie& (0+255),f,c
  6131  000B7E  D001               	goto	u8478
  6132  000B80                     u8460:
  6133  000B80  6A3D               	clrf	??_new_nixie& (0+255),c
  6134  000B82                     u8478:
  6135  000B82  3A3D               	swapf	??_new_nixie,f,c
  6136  000B84  463D               	rlncf	??_new_nixie,f,c
  6137  000B86  500B               	movf	_ui_buff+10,w,c	;volatile
  6138  000B88  183D               	xorwf	??_new_nixie,w,c
  6139  000B8A  0BDF               	andlw	-33
  6140  000B8C  183D               	xorwf	??_new_nixie,w,c
  6141  000B8E  6E0B               	movwf	_ui_buff+10,c	;volatile
  6142                           
  6143                           ;ui.c: 84: ui_buff[6].buf=0;
  6144  000B90  6A07               	clrf	_ui_buff+6,c	;volatile
  6145                           
  6146                           ;ui.c: 85: switch (ui.cnt)
  6147  000B92  D005               	goto	l17809
  6148  000B94                     l12612:
  6149                           
  6150                           ;ui.c: 88: case 4:
  6151                           ;ui.c: 89: ui_buff[6].a=1;
  6152  000B94  8007               	bsf	_ui_buff+6,0,c	;volatile
  6153  000B96                     l12613:
  6154                           
  6155                           ;ui.c: 91: ui_buff[6].b=1;
  6156  000B96  8207               	bsf	_ui_buff+6,1,c	;volatile
  6157  000B98                     l12614:
  6158                           
  6159                           ;ui.c: 93: ui_buff[6].c=1;
  6160  000B98  8407               	bsf	_ui_buff+6,2,c	;volatile
  6161  000B9A                     l12615:
  6162                           
  6163                           ;ui.c: 95: ui_buff[6].d=1;
  6164  000B9A  8607               	bsf	_ui_buff+6,3,c	;volatile
  6165                           
  6166                           ;ui.c: 96: break;
  6167  000B9C  D011               	goto	l17813
  6168  000B9E                     l17809:
  6169  000B9E  5017               	movf	_ui+10,w,c	;volatile
  6170                           
  6171                           ; Switch size 1, requested type "space"
  6172                           ; Number of cases is 5, Range of values is 1 to 5
  6173                           ; switch strategies available:
  6174                           ; Name         Instructions Cycles
  6175                           ; simple_byte           16     9 (average)
  6176                           ;	Chosen strategy is simple_byte
  6177  000BA0  0A01               	xorlw	1	; case 1
  6178  000BA2  E0FB               	bz	l12615
  6179  000BA4  0A03               	xorlw	3	; case 2
  6180  000BA6  E0F8               	bz	l12614
  6181  000BA8  0A01               	xorlw	1	; case 3
  6182  000BAA  E0F5               	bz	l12613
  6183  000BAC  0A07               	xorlw	7	; case 4
  6184  000BAE  E0F2               	bz	l12612
  6185  000BB0  0A01               	xorlw	1	; case 5
  6186  000BB2  E0F0               	bz	l12612
  6187  000BB4  D005               	goto	l17813
  6188  000BB6                     l12619:
  6189                           
  6190                           ;ui.c: 104: ui_buff[6].e=1;
  6191  000BB6  8807               	bsf	_ui_buff+6,4,c	;volatile
  6192  000BB8                     l12620:
  6193                           
  6194                           ;ui.c: 106: ui_buff[6].f=1;
  6195  000BB8  8A07               	bsf	_ui_buff+6,5,c	;volatile
  6196  000BBA                     l12621:
  6197                           
  6198                           ;ui.c: 108: ui_buff[6].g=1;
  6199  000BBA  8C07               	bsf	_ui_buff+6,6,c	;volatile
  6200  000BBC                     l12622:
  6201                           
  6202                           ;ui.c: 110: ui_buff[6].h=1;
  6203  000BBC  8E07               	bsf	_ui_buff+6,7,c	;volatile
  6204                           
  6205                           ;ui.c: 111: break;
  6206  000BBE  D009               	goto	l17815
  6207  000BC0                     l17813:
  6208  000BC0  5016               	movf	_ui+9,w,c	;volatile
  6209                           
  6210                           ; Switch size 1, requested type "space"
  6211                           ; Number of cases is 4, Range of values is 1 to 4
  6212                           ; switch strategies available:
  6213                           ; Name         Instructions Cycles
  6214                           ; simple_byte           13     7 (average)
  6215                           ;	Chosen strategy is simple_byte
  6216  000BC2  0A01               	xorlw	1	; case 1
  6217  000BC4  E0FB               	bz	l12622
  6218  000BC6  0A03               	xorlw	3	; case 2
  6219  000BC8  E0F8               	bz	l12621
  6220  000BCA  0A01               	xorlw	1	; case 3
  6221  000BCC  E0F5               	bz	l12620
  6222  000BCE  0A07               	xorlw	7	; case 4
  6223  000BD0  E0F2               	bz	l12619
  6224  000BD2                     l17815:
  6225                           
  6226                           ;ui.c: 116: ui_buff[10].j6=(ui.w)?1:0;
  6227  000BD2  500D               	movf	_ui,w,c	;volatile
  6228  000BD4  E003               	bz	u8480
  6229  000BD6  6A3D               	clrf	??_new_nixie& (0+255),c
  6230  000BD8  2A3D               	incf	??_new_nixie& (0+255),f,c
  6231  000BDA  D001               	goto	u8498
  6232  000BDC                     u8480:
  6233  000BDC  6A3D               	clrf	??_new_nixie& (0+255),c
  6234  000BDE                     u8498:
  6235  000BDE  3A3D               	swapf	??_new_nixie,f,c
  6236  000BE0  D837               	call	PL70	;call to abstracted procedure
  6237  000BE2  0BBF               	andlw	-65
  6238  000BE4  183D               	xorwf	??_new_nixie,w,c
  6239  000BE6  6E0B               	movwf	_ui_buff+10,c	;volatile
  6240                           
  6241                           ;ui.c: 118: ui_buff[7].buf=(ui.u)?0xff:0;
  6242  000BE8  500E               	movf	_ui+1,w,c	;volatile
  6243  000BEA  E103               	bnz	l17821
  6244  000BEC  6A42               	clrf	_new_nixie$6627,c
  6245  000BEE  6A43               	clrf	_new_nixie$6627+1,c
  6246  000BF0  D002               	goto	l17823
  6247  000BF2                     l17821:
  6248  000BF2  6A43               	clrf	_new_nixie$6627+1,c
  6249  000BF4  6842               	setf	_new_nixie$6627,c
  6250  000BF6                     l17823:
  6251  000BF6  C042  F008         	movff	_new_nixie$6627,_ui_buff+7	;volatile
  6252                           
  6253                           ;ui.c: 119: ui_buff[10].j7=ui.u;
  6254  000BFA  B00E               	btfsc	_ui+1,0,c	;volatile
  6255  000BFC  D002               	bra	u8515
  6256  000BFE  9E0B               	bcf	_ui_buff+10,7,c	;volatile
  6257  000C00  D001               	bra	u8516
  6258  000C02                     u8515:
  6259  000C02  8E0B               	bsf	_ui_buff+10,7,c	;volatile
  6260  000C04                     u8516:
  6261                           
  6262                           ;ui.c: 121: ui_buff[8].buf=(ui.u)?0xff:0;
  6263  000C04  500E               	movf	_ui+1,w,c	;volatile
  6264  000C06  E103               	bnz	l17829
  6265  000C08  6A44               	clrf	_new_nixie$6628,c
  6266  000C0A  6A45               	clrf	_new_nixie$6628+1,c
  6267  000C0C  D002               	goto	l17831
  6268  000C0E                     l17829:
  6269  000C0E  6A45               	clrf	_new_nixie$6628+1,c
  6270  000C10  6844               	setf	_new_nixie$6628,c
  6271  000C12                     l17831:
  6272  000C12  C044  F009         	movff	_new_nixie$6628,_ui_buff+8	;volatile
  6273                           
  6274                           ;ui.c: 122: ui_buff[11].j8=ui.u;
  6275  000C16  B00E               	btfsc	_ui+1,0,c	;volatile
  6276  000C18  D002               	bra	u8535
  6277  000C1A  900C               	bcf	_ui_buff+11,0,c	;volatile
  6278  000C1C  D001               	bra	u8536
  6279  000C1E                     u8535:
  6280  000C1E  800C               	bsf	_ui_buff+11,0,c	;volatile
  6281  000C20                     u8536:
  6282                           
  6283                           ;ui.c: 124: ui_buff[9].buf=(ui.w)?0xff:0;
  6284  000C20  500D               	movf	_ui,w,c	;volatile
  6285  000C22  E103               	bnz	l17837
  6286  000C24  6A46               	clrf	_new_nixie$6629,c
  6287  000C26  6A47               	clrf	_new_nixie$6629+1,c
  6288  000C28  D003               	goto	l17839
  6289  000C2A                     l17837:
  6290  000C2A  0E00               	movlw	0
  6291  000C2C  6A47               	clrf	_new_nixie$6629+1,c
  6292  000C2E  6846               	setf	_new_nixie$6629,c
  6293  000C30                     l17839:
  6294  000C30  C046  F00A         	movff	_new_nixie$6629,_ui_buff+9	;volatile
  6295                           
  6296                           ;ui.c: 125: ui_buff[11].j9=ui.w;
  6297  000C34  B00D               	btfsc	_ui,0,c	;volatile
  6298  000C36  D002               	bra	u8555
  6299  000C38  920C               	bcf	_ui_buff+11,1,c	;volatile
  6300  000C3A  D001               	bra	u8556
  6301  000C3C                     u8555:
  6302  000C3C  820C               	bsf	_ui_buff+11,1,c	;volatile
  6303  000C3E                     u8556:
  6304  000C3E  0012               	return		;funcret
  6305  000C40                     __end_of_new_nixie:
  6306                           	opt stack 0
  6307  000C40                     PL44:
  6308                           	opt stack 3
  6309  000C40  0F01               	addlw	low _nixienum
  6310  000C42  6E3D               	movwf	??_new_nixie& (0+255),c
  6311  000C44  C03D  FFF6         	movff	??_new_nixie,tblptrl
  6312  000C48                     	if	1	;There is more than 1 active tblptr byte
  6313  000C48  0E01               	movlw	high __smallconst
  6314  000C4A  6EF7               	movwf	tblptrh,c
  6315  000C4C                     	endif
  6316  000C4C                     	if	0	;tblptru may be non-zero
  6317  000C4C                     	endif
  6318  000C4C                     	if	0	;tblptru may be non-zero
  6319  000C4C                     	endif
  6320  000C4C  0008               	tblrd		*
  6321  000C4E  0012               	return	
  6322  000C50                     __end_ofPL44:
  6323                           	opt stack 0
  6324  000C50                     PL70:
  6325                           	opt stack 3
  6326  000C50  463D               	rlncf	??_new_nixie,f,c
  6327  000C52  463D               	rlncf	??_new_nixie,f,c
  6328  000C54  500B               	movf	_ui_buff+10,w,c	;volatile
  6329  000C56  183D               	xorwf	??_new_nixie,w,c
  6330  000C58  0012               	return	
  6331  000C5A                     __end_ofPL70:
  6332                           	opt stack 0
  6333                           tblptru	equ	0xFF8
  6334                           tblptrh	equ	0xFF7
  6335                           tblptrl	equ	0xFF6
  6336                           tablat	equ	0xFF5
  6337                           prodl	equ	0xFF3
  6338                           intcon	equ	0xFF2
  6339                           intcon2	equ	0xFF1
  6340                           intcon3	equ	0xFF0
  6341                           postinc0	equ	0xFEE
  6342                           wreg	equ	0xFE8
  6343                           postdec1	equ	0xFE5
  6344                           fsr1l	equ	0xFE1
  6345                           indf2	equ	0xFDF
  6346                           postinc2	equ	0xFDE
  6347                           postdec2	equ	0xFDD
  6348                           fsr2h	equ	0xFDA
  6349                           fsr2l	equ	0xFD9
  6350                           status	equ	0xFD8
  6351                           
  6352 ;; *************** function _ldz *****************
  6353 ;; Defined at:
  6354 ;;		line 128 in file ".\src\ui.c"
  6355 ;; Parameters:    Size  Location     Type
  6356 ;;  a               1    wreg     unsigned char 
  6357 ;; Auto vars:     Size  Location     Type
  6358 ;;  a               1    1[COMRAM] unsigned char 
  6359 ;; Return value:  Size  Location     Type
  6360 ;;                  1    wreg      void 
  6361 ;; Registers used:
  6362 ;;		wreg
  6363 ;; Tracked objects:
  6364 ;;		On entry : 0/0
  6365 ;;		On exit  : 0/0
  6366 ;;		Unchanged: 0/0
  6367 ;; Data sizes:     COMRAM   BANK0
  6368 ;;      Params:         0       0
  6369 ;;      Locals:         1       0
  6370 ;;      Temps:          0       0
  6371 ;;      Totals:         1       0
  6372 ;;Total ram usage:        1 bytes
  6373 ;; Hardware stack levels used:    1
  6374 ;; Hardware stack levels required when called:    2
  6375 ;; This function calls:
  6376 ;;		Nothing
  6377 ;; This function is called by:
  6378 ;;		_ui_cb
  6379 ;;		_ui_chrg
  6380 ;;		_ui_chrgfree
  6381 ;;		_ui_chrgfull
  6382 ;;		_ui_smoing
  6383 ;;		_ui_dl_getup
  6384 ;;		_ui_smoend
  6385 ;;		_ui_kl
  6386 ;;		_ui_ts_on
  6387 ;;		_ui_ts_off
  6388 ;;		_ui_timout
  6389 ;;		_ui_begin
  6390 ;; This function uses a non-reentrant model
  6391 ;;
  6392                           
  6393                           	psect	text18
  6394  001E4E                     __ptext18:
  6395                           	opt stack 0
  6396  001E4E                     _ldz:
  6397                           	opt stack 3
  6398                           
  6399                           ;incstack = 0
  6400                           ;ldz@a stored from wreg
  6401  001E4E  6E3D               	movwf	ldz@a,c
  6402                           
  6403                           ;ui.c: 130: ui_ld.w1 =a;
  6404  001E50  C03D  F067         	movff	ldz@a,_ui_ld
  6405                           
  6406                           ;ui.c: 131: ui_ld.w2 =a;
  6407  001E54  C03D  F068         	movff	ldz@a,_ui_ld+1
  6408                           
  6409                           ;ui.c: 132: ui_ld.cnt =a;
  6410  001E58  C03D  F069         	movff	ldz@a,_ui_ld+2
  6411                           
  6412                           ;ui.c: 133: ui_ld.n =a;
  6413  001E5C  C03D  F06A         	movff	ldz@a,_ui_ld+3
  6414                           
  6415                           ;ui.c: 134: ui_ld.ts =a;
  6416  001E60  C03D  F06B         	movff	ldz@a,_ui_ld+4
  6417  001E64  0012               	return		;funcret
  6418  001E66                     __end_of_ldz:
  6419                           	opt stack 0
  6420                           tblptru	equ	0xFF8
  6421                           tblptrh	equ	0xFF7
  6422                           tblptrl	equ	0xFF6
  6423                           tablat	equ	0xFF5
  6424                           prodl	equ	0xFF3
  6425                           intcon	equ	0xFF2
  6426                           intcon2	equ	0xFF1
  6427                           intcon3	equ	0xFF0
  6428                           postinc0	equ	0xFEE
  6429                           wreg	equ	0xFE8
  6430                           postdec1	equ	0xFE5
  6431                           fsr1l	equ	0xFE1
  6432                           indf2	equ	0xFDF
  6433                           postinc2	equ	0xFDE
  6434                           postdec2	equ	0xFDD
  6435                           fsr2h	equ	0xFDA
  6436                           fsr2l	equ	0xFD9
  6437                           status	equ	0xFD8
  6438                           
  6439 ;; *************** function _sleep_task *****************
  6440 ;; Defined at:
  6441 ;;		line 5 in file ".\src\sleep.c"
  6442 ;; Parameters:    Size  Location     Type
  6443 ;;  task_           1    1[COMRAM] PTR struct task
  6444 ;;		 -> task_list(72), 
  6445 ;; Auto vars:     Size  Location     Type
  6446 ;;		None
  6447 ;; Return value:  Size  Location     Type
  6448 ;;                  1    wreg      void 
  6449 ;; Registers used:
  6450 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6451 ;; Tracked objects:
  6452 ;;		On entry : 3F/0
  6453 ;;		On exit  : 0/0
  6454 ;;		Unchanged: 0/0
  6455 ;; Data sizes:     COMRAM   BANK0
  6456 ;;      Params:         1       0
  6457 ;;      Locals:         0       0
  6458 ;;      Temps:          2       0
  6459 ;;      Totals:         3       0
  6460 ;;Total ram usage:        3 bytes
  6461 ;; Hardware stack levels used:    1
  6462 ;; Hardware stack levels required when called:    3
  6463 ;; This function calls:
  6464 ;;		_cmp0_init
  6465 ;;		_gpio_init
  6466 ;;		_sleep_mode
  6467 ;;		_timer0_init
  6468 ;;		_timer1_init
  6469 ;;		_timer2_init
  6470 ;; This function is called by:
  6471 ;;		_main
  6472 ;;		_find_task
  6473 ;; This function uses a non-reentrant model
  6474 ;;
  6475                           
  6476                           	psect	text19
  6477  001A64                     __ptext19:
  6478                           	opt stack 0
  6479  001A64                     _sleep_task:
  6480                           	opt stack 4
  6481                           
  6482                           ; BSR set to: 0
  6483                           ;sleep.c: 7: if(task_list[ui_id].active==0)
  6484                           
  6485                           ;incstack = 0
  6486  001A64  507B               	movf	_ui_id,w,c
  6487  001A66  EC1C  F007         	call	PL22	;call to abstracted procedure
  6488  001A6A  50DF               	movf	indf2,w,c
  6489  001A6C  E12B               	bnz	l18303
  6490                           
  6491                           ; BSR set to: 0
  6492                           ;sleep.c: 8: {
  6493                           ;sleep.c: 9: task_->sucCnt++;
  6494  001A6E  503D               	movf	sleep_task@task_,w,c
  6495  001A70  EC6E  F00A         	call	PL2	;call to abstracted procedure
  6496  001A74  2ADF               	incf	indf2,f,c
  6497                           
  6498                           ;sleep.c: 10: if(task_->sucCnt>=25)
  6499  001A76  503D               	movf	sleep_task@task_,w,c
  6500  001A78  EC6E  F00A         	call	PL2	;call to abstracted procedure
  6501  001A7C  0E18               	movlw	24
  6502  001A7E  64DF               	cpfsgt	indf2,c
  6503  001A80  0C18               	retlw	24
  6504                           
  6505                           ; BSR set to: 0
  6506                           ;sleep.c: 11: {
  6507                           ;sleep.c: 12: task_->sucCnt=0;
  6508  001A82  503D               	movf	sleep_task@task_,w,c
  6509  001A84  EC6E  F00A         	call	PL2	;call to abstracted procedure
  6510  001A88  6ADF               	clrf	indf2,c
  6511                           
  6512                           ; BSR set to: 0
  6513                           ;sleep.c: 13: sleep_mode();
  6514  001A8A  ECC9  F00D         	call	_sleep_mode	;wreg free
  6515  001A8E  F000               	nop		;# 
  6516                           
  6517                           ;sleep.c: 16: gpio_init();
  6518  001A90  EC06  F00F         	call	_gpio_init	;wreg free
  6519                           
  6520                           ;sleep.c: 17: timer0_init();
  6521  001A94  EC55  F00F         	call	_timer0_init	;wreg free
  6522                           
  6523                           ;sleep.c: 18: _delay((unsigned long)((30)*(16000000/4000000)));
  6524  001A98  0E28               	movlw	40
  6525  001A9A                     u11907:
  6526  001A9A  2EE8               	decfsz	wreg,f,c
  6527  001A9C  D7FE               	bra	u11907
  6528                           
  6529                           ;sleep.c: 19: timer1_init();
  6530  001A9E  EC19  F00F         	call	_timer1_init	;wreg free
  6531                           
  6532                           ;sleep.c: 20: timer2_init();
  6533  001AA2  EC4A  F00F         	call	_timer2_init	;wreg free
  6534                           
  6535                           ;sleep.c: 21: cmp0_init();
  6536  001AA6  EC33  F00F         	call	_cmp0_init	;wreg free
  6537                           
  6538                           ;sleep.c: 26: _delay((unsigned long)((50)*(16000000/4000.0)));
  6539  001AAA  0E02               	movlw	2
  6540  001AAC  6E3F               	movwf	(??_sleep_task+1)& (0+255),c
  6541  001AAE  0E04               	movlw	4
  6542  001AB0  6E3E               	movwf	??_sleep_task& (0+255),c
  6543  001AB2  0EBA               	movlw	186
  6544  001AB4                     u11917:
  6545  001AB4  2EE8               	decfsz	wreg,f,c
  6546  001AB6  D7FE               	bra	u11917
  6547  001AB8  2E3E               	decfsz	??_sleep_task& (0+255),f,c
  6548  001ABA  D7FC               	bra	u11917
  6549  001ABC  2E3F               	decfsz	(??_sleep_task+1)& (0+255),f,c
  6550  001ABE  D7FA               	bra	u11917
  6551  001AC0  D000               	nop2	
  6552  001AC2  0012               	return	
  6553  001AC4                     l18303:
  6554                           
  6555                           ; BSR set to: 0
  6556                           ;sleep.c: 30: else
  6557                           ;sleep.c: 31: {
  6558                           ;sleep.c: 32: task_->sucCnt=0;
  6559  001AC4  503D               	movf	sleep_task@task_,w,c
  6560  001AC6  EC6E  F00A         	call	PL2	;call to abstracted procedure
  6561  001ACA  6ADF               	clrf	indf2,c
  6562  001ACC  0C00               	retlw	0	;funcret
  6563  001ACE                     __end_of_sleep_task:
  6564                           	opt stack 0
  6565                           tblptru	equ	0xFF8
  6566                           tblptrh	equ	0xFF7
  6567                           tblptrl	equ	0xFF6
  6568                           tablat	equ	0xFF5
  6569                           prodl	equ	0xFF3
  6570                           intcon	equ	0xFF2
  6571                           intcon2	equ	0xFF1
  6572                           intcon3	equ	0xFF0
  6573                           postinc0	equ	0xFEE
  6574                           wreg	equ	0xFE8
  6575                           postdec1	equ	0xFE5
  6576                           fsr1l	equ	0xFE1
  6577                           indf2	equ	0xFDF
  6578                           postinc2	equ	0xFDE
  6579                           postdec2	equ	0xFDD
  6580                           fsr2h	equ	0xFDA
  6581                           fsr2l	equ	0xFD9
  6582                           status	equ	0xFD8
  6583                           
  6584 ;; *************** function _timer2_init *****************
  6585 ;; Defined at:
  6586 ;;		line 64 in file ".\src\peripheral.c"
  6587 ;; Parameters:    Size  Location     Type
  6588 ;;		None
  6589 ;; Auto vars:     Size  Location     Type
  6590 ;;		None
  6591 ;; Return value:  Size  Location     Type
  6592 ;;                  1    wreg      void 
  6593 ;; Registers used:
  6594 ;;		wreg, status,2
  6595 ;; Tracked objects:
  6596 ;;		On entry : 0/0
  6597 ;;		On exit  : 0/0
  6598 ;;		Unchanged: 0/0
  6599 ;; Data sizes:     COMRAM   BANK0
  6600 ;;      Params:         0       0
  6601 ;;      Locals:         0       0
  6602 ;;      Temps:          0       0
  6603 ;;      Totals:         0       0
  6604 ;;Total ram usage:        0 bytes
  6605 ;; Hardware stack levels used:    1
  6606 ;; Hardware stack levels required when called:    2
  6607 ;; This function calls:
  6608 ;;		Nothing
  6609 ;; This function is called by:
  6610 ;;		_main
  6611 ;;		_sleep_task
  6612 ;;		_ui_begin
  6613 ;; This function uses a non-reentrant model
  6614 ;;
  6615                           
  6616                           	psect	text20
  6617  001E94                     __ptext20:
  6618                           	opt stack 0
  6619  001E94                     _timer2_init:
  6620                           	opt stack 5
  6621                           
  6622                           ;peripheral.c: 67: PR2=79;
  6623                           
  6624                           ;incstack = 0
  6625  001E94  0E4F               	movlw	79
  6626  001E96  6EC8               	movwf	4040,c	;volatile
  6627                           
  6628                           ;peripheral.c: 68: TMR2=0;
  6629  001E98  6ACA               	clrf	4042,c	;volatile
  6630                           
  6631                           ;peripheral.c: 69: T2CON0=0x0;
  6632  001E9A  6AC1               	clrf	4033,c	;volatile
  6633                           
  6634                           ;peripheral.c: 70: T2CON1=2;
  6635  001E9C  0E02               	movlw	2
  6636  001E9E  6EC0               	movwf	4032,c	;volatile
  6637                           
  6638                           ;peripheral.c: 71: TMR2IF=0;
  6639  001EA0  98B0               	bcf	4016,4,c	;volatile
  6640                           
  6641                           ;peripheral.c: 72: TMR2IE=0;
  6642  001EA2  98AF               	bcf	4015,4,c	;volatile
  6643                           
  6644                           ;peripheral.c: 73: TMR2IP=0;
  6645  001EA4  98B1               	bcf	4017,4,c	;volatile
  6646                           
  6647                           ;peripheral.c: 74: TMR2ON=1;
  6648  001EA6  84C1               	bsf	4033,2,c	;volatile
  6649  001EA8  0C02               	retlw	2	;funcret
  6650  001EAA                     __end_of_timer2_init:
  6651                           	opt stack 0
  6652                           tblptru	equ	0xFF8
  6653                           tblptrh	equ	0xFF7
  6654                           tblptrl	equ	0xFF6
  6655                           tablat	equ	0xFF5
  6656                           prodl	equ	0xFF3
  6657                           intcon	equ	0xFF2
  6658                           intcon2	equ	0xFF1
  6659                           intcon3	equ	0xFF0
  6660                           postinc0	equ	0xFEE
  6661                           wreg	equ	0xFE8
  6662                           postdec1	equ	0xFE5
  6663                           fsr1l	equ	0xFE1
  6664                           indf2	equ	0xFDF
  6665                           postinc2	equ	0xFDE
  6666                           postdec2	equ	0xFDD
  6667                           fsr2h	equ	0xFDA
  6668                           fsr2l	equ	0xFD9
  6669                           status	equ	0xFD8
  6670                           
  6671 ;; *************** function _timer1_init *****************
  6672 ;; Defined at:
  6673 ;;		line 40 in file ".\src\peripheral.c"
  6674 ;; Parameters:    Size  Location     Type
  6675 ;;		None
  6676 ;; Auto vars:     Size  Location     Type
  6677 ;;		None
  6678 ;; Return value:  Size  Location     Type
  6679 ;;                  1    wreg      void 
  6680 ;; Registers used:
  6681 ;;		wreg, status,2
  6682 ;; Tracked objects:
  6683 ;;		On entry : 0/0
  6684 ;;		On exit  : 0/0
  6685 ;;		Unchanged: 0/0
  6686 ;; Data sizes:     COMRAM   BANK0
  6687 ;;      Params:         0       0
  6688 ;;      Locals:         0       0
  6689 ;;      Temps:          0       0
  6690 ;;      Totals:         0       0
  6691 ;;Total ram usage:        0 bytes
  6692 ;; Hardware stack levels used:    1
  6693 ;; Hardware stack levels required when called:    2
  6694 ;; This function calls:
  6695 ;;		Nothing
  6696 ;; This function is called by:
  6697 ;;		_main
  6698 ;;		_sleep_task
  6699 ;;		_ui_begin
  6700 ;; This function uses a non-reentrant model
  6701 ;;
  6702                           
  6703                           	psect	text21
  6704  001E32                     __ptext21:
  6705                           	opt stack 0
  6706  001E32                     _timer1_init:
  6707                           	opt stack 5
  6708                           
  6709                           ;peripheral.c: 43: PR1H=0x1;
  6710                           
  6711                           ;incstack = 0
  6712  001E32  0E01               	movlw	1
  6713  001E34  6ECF               	movwf	4047,c	;volatile
  6714                           
  6715                           ;peripheral.c: 44: PR1L=0xf3;
  6716  001E36  0EF3               	movlw	243
  6717  001E38  6ECE               	movwf	4046,c	;volatile
  6718                           
  6719                           ;peripheral.c: 50: TMR1H=0x0;
  6720  001E3A  6AD1               	clrf	4049,c	;volatile
  6721                           
  6722                           ;peripheral.c: 51: TMR1L=0x0;
  6723  001E3C  6AD0               	clrf	4048,c	;volatile
  6724                           
  6725                           ;peripheral.c: 53: T1CON0=0x18;
  6726  001E3E  0E18               	movlw	24
  6727  001E40  6ECD               	movwf	4045,c	;volatile
  6728                           
  6729                           ;peripheral.c: 54: T1CON1=0;
  6730  001E42  6ACC               	clrf	4044,c	;volatile
  6731                           
  6732                           ;peripheral.c: 56: TMR1ON=1;
  6733  001E44  80CD               	bsf	4045,0,c	;volatile
  6734                           
  6735                           ;peripheral.c: 58: TMR1IE=1;
  6736  001E46  82AF               	bsf	4015,1,c	;volatile
  6737                           
  6738                           ;peripheral.c: 59: PEIE=1;
  6739  001E48  8CF2               	bsf	intcon,6,c	;volatile
  6740                           
  6741                           ;peripheral.c: 60: GIE=1;
  6742  001E4A  8EF2               	bsf	intcon,7,c	;volatile
  6743  001E4C  0012               	return		;funcret
  6744  001E4E                     __end_of_timer1_init:
  6745                           	opt stack 0
  6746                           tblptru	equ	0xFF8
  6747                           tblptrh	equ	0xFF7
  6748                           tblptrl	equ	0xFF6
  6749                           tablat	equ	0xFF5
  6750                           prodl	equ	0xFF3
  6751                           intcon	equ	0xFF2
  6752                           intcon2	equ	0xFF1
  6753                           intcon3	equ	0xFF0
  6754                           postinc0	equ	0xFEE
  6755                           wreg	equ	0xFE8
  6756                           postdec1	equ	0xFE5
  6757                           fsr1l	equ	0xFE1
  6758                           indf2	equ	0xFDF
  6759                           postinc2	equ	0xFDE
  6760                           postdec2	equ	0xFDD
  6761                           fsr2h	equ	0xFDA
  6762                           fsr2l	equ	0xFD9
  6763                           status	equ	0xFD8
  6764                           
  6765 ;; *************** function _timer0_init *****************
  6766 ;; Defined at:
  6767 ;;		line 97 in file ".\src\peripheral.c"
  6768 ;; Parameters:    Size  Location     Type
  6769 ;;		None
  6770 ;; Auto vars:     Size  Location     Type
  6771 ;;		None
  6772 ;; Return value:  Size  Location     Type
  6773 ;;                  1    wreg      void 
  6774 ;; Registers used:
  6775 ;;		wreg, status,2
  6776 ;; Tracked objects:
  6777 ;;		On entry : 0/0
  6778 ;;		On exit  : 0/0
  6779 ;;		Unchanged: 0/0
  6780 ;; Data sizes:     COMRAM   BANK0
  6781 ;;      Params:         0       0
  6782 ;;      Locals:         0       0
  6783 ;;      Temps:          0       0
  6784 ;;      Totals:         0       0
  6785 ;;Total ram usage:        0 bytes
  6786 ;; Hardware stack levels used:    1
  6787 ;; Hardware stack levels required when called:    2
  6788 ;; This function calls:
  6789 ;;		Nothing
  6790 ;; This function is called by:
  6791 ;;		_main
  6792 ;;		_sleep_task
  6793 ;;		_ui_begin
  6794 ;; This function uses a non-reentrant model
  6795 ;;
  6796                           
  6797                           	psect	text22
  6798  001EAA                     __ptext22:
  6799                           	opt stack 0
  6800  001EAA                     _timer0_init:
  6801                           	opt stack 5
  6802                           
  6803                           ;peripheral.c: 99: PR0=49;
  6804                           
  6805                           ;incstack = 0
  6806  001EAA  0E31               	movlw	49
  6807  001EAC  6ED6               	movwf	4054,c	;volatile
  6808                           
  6809                           ;peripheral.c: 100: TMR0=0;
  6810  001EAE  6AD5               	clrf	4053,c	;volatile
  6811                           
  6812                           ;peripheral.c: 103: T0CON=0x03;
  6813  001EB0  0E03               	movlw	3
  6814  001EB2  6ED7               	movwf	4055,c	;volatile
  6815                           
  6816                           ;peripheral.c: 108: TMR0IF=0;
  6817  001EB4  90B0               	bcf	4016,0,c	;volatile
  6818                           
  6819                           ;peripheral.c: 109: TMR0IE=1;
  6820  001EB6  80AF               	bsf	4015,0,c	;volatile
  6821                           
  6822                           ;peripheral.c: 110: PEIE=1;
  6823  001EB8  8CF2               	bsf	intcon,6,c	;volatile
  6824                           
  6825                           ;peripheral.c: 111: GIE=1;
  6826  001EBA  8EF2               	bsf	intcon,7,c	;volatile
  6827  001EBC  0C03               	retlw	3	;funcret
  6828  001EBE                     __end_of_timer0_init:
  6829                           	opt stack 0
  6830                           tblptru	equ	0xFF8
  6831                           tblptrh	equ	0xFF7
  6832                           tblptrl	equ	0xFF6
  6833                           tablat	equ	0xFF5
  6834                           prodl	equ	0xFF3
  6835                           intcon	equ	0xFF2
  6836                           intcon2	equ	0xFF1
  6837                           intcon3	equ	0xFF0
  6838                           postinc0	equ	0xFEE
  6839                           wreg	equ	0xFE8
  6840                           postdec1	equ	0xFE5
  6841                           fsr1l	equ	0xFE1
  6842                           indf2	equ	0xFDF
  6843                           postinc2	equ	0xFDE
  6844                           postdec2	equ	0xFDD
  6845                           fsr2h	equ	0xFDA
  6846                           fsr2l	equ	0xFD9
  6847                           status	equ	0xFD8
  6848                           
  6849 ;; *************** function _sleep_mode *****************
  6850 ;; Defined at:
  6851 ;;		line 35 in file ".\src\sleep.c"
  6852 ;; Parameters:    Size  Location     Type
  6853 ;;		None
  6854 ;; Auto vars:     Size  Location     Type
  6855 ;;		None
  6856 ;; Return value:  Size  Location     Type
  6857 ;;                  1    wreg      void 
  6858 ;; Registers used:
  6859 ;;		wreg, status,2
  6860 ;; Tracked objects:
  6861 ;;		On entry : 3F/0
  6862 ;;		On exit  : 0/0
  6863 ;;		Unchanged: 0/0
  6864 ;; Data sizes:     COMRAM   BANK0
  6865 ;;      Params:         0       0
  6866 ;;      Locals:         0       0
  6867 ;;      Temps:          0       0
  6868 ;;      Totals:         0       0
  6869 ;;Total ram usage:        0 bytes
  6870 ;; Hardware stack levels used:    1
  6871 ;; Hardware stack levels required when called:    2
  6872 ;; This function calls:
  6873 ;;		Nothing
  6874 ;; This function is called by:
  6875 ;;		_sleep_task
  6876 ;;		_ui_begin
  6877 ;; This function uses a non-reentrant model
  6878 ;;
  6879                           
  6880                           	psect	text23
  6881  001B92                     __ptext23:
  6882                           	opt stack 0
  6883  001B92                     _sleep_mode:
  6884                           	opt stack 4
  6885                           
  6886                           ; BSR set to: 0
  6887                           ;sleep.c: 37: PME=0;
  6888                           
  6889                           ;incstack = 0
  6890  001B92  6ABD               	clrf	4029,c	;volatile
  6891                           
  6892                           ; BSR set to: 0
  6893                           ;sleep.c: 38: PORTA = 0X01;
  6894                           
  6895                           ;sleep.c: 39: PORTB = 0X01;
  6896                           
  6897                           ; BSR set to: 0
  6898                           ;sleep.c: 40: PORTC = 0X00;
  6899  001B94  D827               	call	PL78	;call to abstracted procedure
  6900                           
  6901                           ; BSR set to: 0
  6902                           ;sleep.c: 47: PAPU = 0XfF;
  6903  001B96  6883               	setf	3971,c	;volatile
  6904                           
  6905                           ; BSR set to: 0
  6906                           ;sleep.c: 48: PBPU = 0XFf;
  6907                           
  6908                           ;sleep.c: 49: PCPU = 0Xbf;
  6909                           
  6910                           ;sleep.c: 51: PAPD = 0XeF;
  6911  001B98  D81F               	call	PL56	;call to abstracted procedure
  6912                           
  6913                           ; BSR set to: 0
  6914                           ;sleep.c: 53: PAOD = 0X00;
  6915  001B9A  6A92               	clrf	3986,c	;volatile
  6916                           
  6917                           ; BSR set to: 0
  6918                           ;sleep.c: 55: TMR1ON=0;
  6919  001B9C  90CD               	bcf	4045,0,c	;volatile
  6920                           
  6921                           ; BSR set to: 0
  6922                           ;sleep.c: 56: TMR2ON=0;
  6923  001B9E  94C1               	bcf	4033,2,c	;volatile
  6924                           
  6925                           ; BSR set to: 0
  6926                           ;sleep.c: 58: FVREN=0;
  6927  001BA0  90D3               	bcf	4051,0,c	;volatile
  6928                           
  6929                           ; BSR set to: 0
  6930                           ;sleep.c: 59: DACEN=0;
  6931  001BA2  9CA4               	bcf	4004,6,c	;volatile
  6932                           
  6933                           ; BSR set to: 0
  6934                           ;sleep.c: 60: CMP0EN=0;
  6935  001BA4  9EA8               	bcf	4008,7,c	;volatile
  6936                           
  6937                           ; BSR set to: 0
  6938                           ;sleep.c: 61: CMP1EN=0;
  6939  001BA6  9EA6               	bcf	4006,7,c	;volatile
  6940                           
  6941                           ; BSR set to: 0
  6942                           ;sleep.c: 63: ADON=0;
  6943  001BA8  90A1               	bcf	4001,0,c	;volatile
  6944                           
  6945                           ;sleep.c: 69: TRISA = 0X30;
  6946  001BAA  0E30               	movlw	48
  6947  001BAC  6E89               	movwf	3977,c	;volatile
  6948                           
  6949                           ;sleep.c: 70: TRISB = 0X02;
  6950  001BAE  0E02               	movlw	2
  6951  001BB0  6E8A               	movwf	3978,c	;volatile
  6952                           
  6953                           ;sleep.c: 71: TRISC = 0X40;
  6954  001BB2  0E40               	movlw	64
  6955  001BB4  6E8B               	movwf	3979,c	;volatile
  6956                           
  6957                           ; BSR set to: 0
  6958                           ;sleep.c: 73: PA4MSK=1;
  6959  001BB6  888F               	bsf	3983,4,c	;volatile
  6960                           
  6961                           ; BSR set to: 0
  6962                           ;sleep.c: 74: PA5MSK=1;
  6963  001BB8  8A8F               	bsf	3983,5,c	;volatile
  6964                           
  6965                           ; BSR set to: 0
  6966                           ;sleep.c: 75: PB1MSK=1;
  6967  001BBA  8290               	bsf	3984,1,c	;volatile
  6968                           
  6969                           ; BSR set to: 0
  6970                           ;sleep.c: 76: PC6MSK=1;
  6971  001BBC  8C91               	bsf	3985,6,c	;volatile
  6972                           
  6973                           ; BSR set to: 0
  6974                           ;sleep.c: 78: PAIF=0;
  6975  001BBE  9AAD               	bcf	4013,5,c	;volatile
  6976                           
  6977                           ; BSR set to: 0
  6978                           ;sleep.c: 79: PBIF=0;
  6979  001BC0  9CAD               	bcf	4013,6,c	;volatile
  6980                           
  6981                           ; BSR set to: 0
  6982                           ;sleep.c: 80: PCIF=0;
  6983  001BC2  9EAD               	bcf	4013,7,c	;volatile
  6984                           
  6985                           ; BSR set to: 0
  6986                           ;sleep.c: 87: PAIE=1;
  6987                           
  6988                           ; BSR set to: 0
  6989                           ;sleep.c: 85: PINC6;
  6990                           
  6991                           ; BSR set to: 0
  6992                           ;sleep.c: 84: PINB1;
  6993                           
  6994                           ; BSR set to: 0
  6995                           ;sleep.c: 83: PINA5;
  6996                           
  6997                           ; BSR set to: 0
  6998                           ;sleep.c: 82: PINA4;
  6999  001BC4  8AAC               	bsf	4012,5,c	;volatile
  7000                           
  7001                           ; BSR set to: 0
  7002                           ;sleep.c: 88: PBIE=1;
  7003  001BC6  8CAC               	bsf	4012,6,c	;volatile
  7004                           
  7005                           ; BSR set to: 0
  7006                           ;sleep.c: 89: PCIE=1;
  7007  001BC8  8EAC               	bsf	4012,7,c	;volatile
  7008                           
  7009                           ; BSR set to: 0
  7010                           ;sleep.c: 90: PEIE=1;
  7011  001BCA  8CF2               	bsf	intcon,6,c	;volatile
  7012                           
  7013                           ; BSR set to: 0
  7014                           ;sleep.c: 91: GIE=1;
  7015  001BCC  8EF2               	bsf	intcon,7,c	;volatile
  7016                           
  7017                           ;sleep.c: 93: SMCR = 0X07; asm(" sleep");asm(" nop");
  7018  001BCE  0E07               	movlw	7
  7019  001BD0  6ED4               	movwf	4052,c	;volatile
  7020  001BD2  0003               	sleep		;# 
  7021  001BD4  F000               	nop		;# 
  7022  001BD6  0C07               	retlw	7	;funcret
  7023  001BD8                     __end_of_sleep_mode:
  7024                           	opt stack 0
  7025  001BD8                     PL56:
  7026                           	opt stack 4
  7027  001BD8  6884               	setf	3972,c	;volatile
  7028  001BDA  0EBF               	movlw	191
  7029  001BDC  6E85               	movwf	3973,c	;volatile
  7030  001BDE  0EEF               	movlw	239
  7031  001BE0  6E94               	movwf	3988,c	;volatile
  7032  001BE2  0CEF               	retlw	239
  7033  001BE4                     __end_ofPL56:
  7034                           	opt stack 0
  7035  001BE4                     PL78:
  7036                           	opt stack 4
  7037  001BE4  0E01               	movlw	1
  7038  001BE6  6E80               	movwf	3968,c	;volatile
  7039  001BE8  6E81               	movwf	3969,c	;volatile
  7040  001BEA  6A82               	clrf	3970,c	;volatile
  7041  001BEC  0012               	return	
  7042  001BEE                     __end_ofPL78:
  7043                           	opt stack 0
  7044                           tblptru	equ	0xFF8
  7045                           tblptrh	equ	0xFF7
  7046                           tblptrl	equ	0xFF6
  7047                           tablat	equ	0xFF5
  7048                           prodl	equ	0xFF3
  7049                           intcon	equ	0xFF2
  7050                           intcon2	equ	0xFF1
  7051                           intcon3	equ	0xFF0
  7052                           postinc0	equ	0xFEE
  7053                           wreg	equ	0xFE8
  7054                           postdec1	equ	0xFE5
  7055                           fsr1l	equ	0xFE1
  7056                           indf2	equ	0xFDF
  7057                           postinc2	equ	0xFDE
  7058                           postdec2	equ	0xFDD
  7059                           fsr2h	equ	0xFDA
  7060                           fsr2l	equ	0xFD9
  7061                           status	equ	0xFD8
  7062                           
  7063 ;; *************** function _gpio_init *****************
  7064 ;; Defined at:
  7065 ;;		line 4 in file ".\src\peripheral.c"
  7066 ;; Parameters:    Size  Location     Type
  7067 ;;		None
  7068 ;; Auto vars:     Size  Location     Type
  7069 ;;		None
  7070 ;; Return value:  Size  Location     Type
  7071 ;;                  1    wreg      void 
  7072 ;; Registers used:
  7073 ;;		wreg, status,2
  7074 ;; Tracked objects:
  7075 ;;		On entry : 0/0
  7076 ;;		On exit  : 0/0
  7077 ;;		Unchanged: 0/0
  7078 ;; Data sizes:     COMRAM   BANK0
  7079 ;;      Params:         0       0
  7080 ;;      Locals:         0       0
  7081 ;;      Temps:          0       0
  7082 ;;      Totals:         0       0
  7083 ;;Total ram usage:        0 bytes
  7084 ;; Hardware stack levels used:    1
  7085 ;; Hardware stack levels required when called:    2
  7086 ;; This function calls:
  7087 ;;		Nothing
  7088 ;; This function is called by:
  7089 ;;		_main
  7090 ;;		_sleep_task
  7091 ;;		_ui_begin
  7092 ;; This function uses a non-reentrant model
  7093 ;;
  7094                           
  7095                           	psect	text24
  7096  001E0C                     __ptext24:
  7097                           	opt stack 0
  7098  001E0C                     _gpio_init:
  7099                           	opt stack 4
  7100                           
  7101                           ;peripheral.c: 6: OSCCON=0x73;
  7102                           
  7103                           ;incstack = 0
  7104  001E0C  0E73               	movlw	115
  7105  001E0E  6EF0               	movwf	intcon3,c	;volatile
  7106                           
  7107                           ;peripheral.c: 7: PCON=0;
  7108  001E10  6AF1               	clrf	intcon2,c	;volatile
  7109                           
  7110                           ;peripheral.c: 8: PORTA= 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 ;
  7111                           
  7112                           ;peripheral.c: 9: PORTB= 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 ;
  7113                           
  7114                           ;peripheral.c: 10: PORTC= 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 ;
  7115  001E12  ECF2  F00D         	call	PL78	;call to abstracted procedure
  7116                           
  7117                           ;peripheral.c: 12: TRISA= 0 | 2 | 4 | 8 | 16 | 32 | 64 | 128 ;
  7118  001E16  0EFE               	movlw	254
  7119  001E18  6E89               	movwf	3977,c	;volatile
  7120                           
  7121                           ;peripheral.c: 13: TRISB= 0 | 2 | 4 | 8 | 16 | 32 | 64 | 128 ;
  7122  001E1A  6E8A               	movwf	3978,c	;volatile
  7123                           
  7124                           ;peripheral.c: 14: TRISC= 1 | 2 | 4 | 8 | 16 | 32 | 64 | 128 ;
  7125  001E1C  688B               	setf	3979,c	;volatile
  7126                           
  7127                           ;peripheral.c: 17: PAPU= 1 | 0 | 4 | 8 | 16 | 32 | 64 | 128 ;
  7128  001E1E  0EFD               	movlw	253
  7129  001E20  6E83               	movwf	3971,c	;volatile
  7130                           
  7131                           ;peripheral.c: 18: PBPU= 1 | 2 | 4 | 8 | 16 | 32 | 64 | 128 ;
  7132                           
  7133                           ;peripheral.c: 19: PCPU= 1 | 2 | 4 | 8 | 16 | 32 | 0 | 128 ;
  7134                           
  7135                           ;peripheral.c: 25: PAPD= 1 | 2 | 4 | 8 | 0 | 32 | 64 | 128 ;
  7136  001E22  ECEC  F00D         	call	PL56	;call to abstracted procedure
  7137                           
  7138                           ;peripheral.c: 30: PAOD= 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 ;
  7139  001E26  0E01               	movlw	1
  7140  001E28  6E92               	movwf	3986,c	;volatile
  7141                           
  7142                           ;peripheral.c: 32: FVRCON=0x01;
  7143  001E2A  6ED3               	movwf	4051,c	;volatile
  7144                           
  7145                           ;peripheral.c: 34: IOCUR=0xff;
  7146  001E2C  68B6               	setf	4022,c	;volatile
  7147                           
  7148                           ;peripheral.c: 35: ADIP=0;
  7149  001E2E  94AB               	bcf	4011,2,c	;volatile
  7150  001E30  0012               	return		;funcret
  7151  001E32                     __end_of_gpio_init:
  7152                           	opt stack 0
  7153                           tblptru	equ	0xFF8
  7154                           tblptrh	equ	0xFF7
  7155                           tblptrl	equ	0xFF6
  7156                           tablat	equ	0xFF5
  7157                           prodl	equ	0xFF3
  7158                           intcon	equ	0xFF2
  7159                           intcon2	equ	0xFF1
  7160                           intcon3	equ	0xFF0
  7161                           postinc0	equ	0xFEE
  7162                           wreg	equ	0xFE8
  7163                           postdec1	equ	0xFE5
  7164                           fsr1l	equ	0xFE1
  7165                           indf2	equ	0xFDF
  7166                           postinc2	equ	0xFDE
  7167                           postdec2	equ	0xFDD
  7168                           fsr2h	equ	0xFDA
  7169                           fsr2l	equ	0xFD9
  7170                           status	equ	0xFD8
  7171                           
  7172 ;; *************** function _cmp0_init *****************
  7173 ;; Defined at:
  7174 ;;		line 78 in file ".\src\peripheral.c"
  7175 ;; Parameters:    Size  Location     Type
  7176 ;;		None
  7177 ;; Auto vars:     Size  Location     Type
  7178 ;;		None
  7179 ;; Return value:  Size  Location     Type
  7180 ;;                  1    wreg      void 
  7181 ;; Registers used:
  7182 ;;		wreg, status,2
  7183 ;; Tracked objects:
  7184 ;;		On entry : 0/0
  7185 ;;		On exit  : 0/0
  7186 ;;		Unchanged: 0/0
  7187 ;; Data sizes:     COMRAM   BANK0
  7188 ;;      Params:         0       0
  7189 ;;      Locals:         0       0
  7190 ;;      Temps:          0       0
  7191 ;;      Totals:         0       0
  7192 ;;Total ram usage:        0 bytes
  7193 ;; Hardware stack levels used:    1
  7194 ;; Hardware stack levels required when called:    2
  7195 ;; This function calls:
  7196 ;;		Nothing
  7197 ;; This function is called by:
  7198 ;;		_main
  7199 ;;		_sleep_task
  7200 ;;		_ui_begin
  7201 ;; This function uses a non-reentrant model
  7202 ;;
  7203                           
  7204                           	psect	text25
  7205  001E66                     __ptext25:
  7206                           	opt stack 0
  7207  001E66                     _cmp0_init:
  7208                           	opt stack 4
  7209                           
  7210                           ;peripheral.c: 80: DACCON=0xfF;
  7211                           
  7212                           ;incstack = 0
  7213  001E66  68A4               	setf	4004,c	;volatile
  7214                           
  7215                           ;peripheral.c: 82: CMP0CON0=0x39;
  7216  001E68  0E39               	movlw	57
  7217  001E6A  6EA8               	movwf	4008,c	;volatile
  7218                           
  7219                           ;peripheral.c: 86: CMP0CON1=0x14;
  7220  001E6C  0E14               	movlw	20
  7221  001E6E  6EA7               	movwf	4007,c	;volatile
  7222                           
  7223                           ;peripheral.c: 88: CMP0EN=1;
  7224  001E70  8EA8               	bsf	4008,7,c	;volatile
  7225                           
  7226                           ;peripheral.c: 89: CMP0IF=0;
  7227  001E72  96AA               	bcf	4010,3,c	;volatile
  7228                           
  7229                           ;peripheral.c: 90: CMP0IE=1;
  7230  001E74  86A9               	bsf	4009,3,c	;volatile
  7231                           
  7232                           ;peripheral.c: 91: PEIE=1;
  7233  001E76  8CF2               	bsf	intcon,6,c	;volatile
  7234                           
  7235                           ;peripheral.c: 92: GIE=1;
  7236  001E78  8EF2               	bsf	intcon,7,c	;volatile
  7237                           
  7238                           ;peripheral.c: 94: CMP0IF=0;
  7239  001E7A  96AA               	bcf	4010,3,c	;volatile
  7240  001E7C  0C14               	retlw	20	;funcret
  7241  001E7E                     __end_of_cmp0_init:
  7242                           	opt stack 0
  7243                           tblptru	equ	0xFF8
  7244                           tblptrh	equ	0xFF7
  7245                           tblptrl	equ	0xFF6
  7246                           tablat	equ	0xFF5
  7247                           prodl	equ	0xFF3
  7248                           intcon	equ	0xFF2
  7249                           intcon2	equ	0xFF1
  7250                           intcon3	equ	0xFF0
  7251                           postinc0	equ	0xFEE
  7252                           wreg	equ	0xFE8
  7253                           postdec1	equ	0xFE5
  7254                           fsr1l	equ	0xFE1
  7255                           indf2	equ	0xFDF
  7256                           postinc2	equ	0xFDE
  7257                           postdec2	equ	0xFDD
  7258                           fsr2h	equ	0xFDA
  7259                           fsr2l	equ	0xFD9
  7260                           status	equ	0xFD8
  7261                           
  7262 ;; *************** function _si_mic_task *****************
  7263 ;; Defined at:
  7264 ;;		line 18 in file ".\src\si_mic.c"
  7265 ;; Parameters:    Size  Location     Type
  7266 ;;  task_           1   34[COMRAM] PTR struct task
  7267 ;;		 -> task_list(72), 
  7268 ;; Auto vars:     Size  Location     Type
  7269 ;;		None
  7270 ;; Return value:  Size  Location     Type
  7271 ;;                  1    wreg      void 
  7272 ;; Registers used:
  7273 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7274 ;; Tracked objects:
  7275 ;;		On entry : 3F/0
  7276 ;;		On exit  : 0/0
  7277 ;;		Unchanged: 0/0
  7278 ;; Data sizes:     COMRAM   BANK0
  7279 ;;      Params:         1       0
  7280 ;;      Locals:         4       0
  7281 ;;      Temps:          1       0
  7282 ;;      Totals:         6       0
  7283 ;;Total ram usage:        6 bytes
  7284 ;; Hardware stack levels used:    1
  7285 ;; Hardware stack levels required when called:    4
  7286 ;; This function calls:
  7287 ;;		_add_task_id
  7288 ;;		_get_bat
  7289 ;;		_get_load
  7290 ;; This function is called by:
  7291 ;;		_main
  7292 ;;		_find_task
  7293 ;; This function uses a non-reentrant model
  7294 ;;
  7295                           
  7296                           	psect	text26
  7297  000C5A                     __ptext26:
  7298                           	opt stack 0
  7299  000C5A                     _si_mic_task:
  7300                           	opt stack 3
  7301                           
  7302                           ; BSR set to: 0
  7303                           ;si_mic.c: 21: if(si_mic_state.o==0 && PINA4==1 && PINA5==0)
  7304                           
  7305                           ;incstack = 0
  7306  000C5A  5028               	movf	_si_mic_state,w,c
  7307  000C5C  E12D               	bnz	l18167
  7308                           
  7309                           ; BSR set to: 0
  7310  000C5E  B886               	btfsc	3974,4,c	;volatile
  7311                           
  7312                           ; BSR set to: 0
  7313  000C60  BA86               	btfsc	3974,5,c	;volatile
  7314  000C62  D02A               	goto	l18167
  7315                           
  7316                           ; BSR set to: 0
  7317                           ;si_mic.c: 22: {
  7318                           ;si_mic.c: 23: yd=PINB1;
  7319  000C64  EC1D  F005         	call	PL76	;call to abstracted procedure
  7320                           
  7321                           ;si_mic.c: 24: if(yd)
  7322  000C68  5038               	movf	_yd,w,c
  7323  000C6A  E003               	bz	l18147
  7324                           
  7325                           ; BSR set to: 0
  7326                           ;si_mic.c: 25: {
  7327                           ;si_mic.c: 26: si_mic_flag.kl=1;
  7328  000C6C  0E01               	movlw	1
  7329  000C6E  6E19               	movwf	_si_mic_flag+1,c
  7330                           
  7331                           ;si_mic.c: 30: }
  7332  000C70  D038               	goto	l18179
  7333  000C72                     l18147:
  7334                           
  7335                           ; BSR set to: 0
  7336                           ;si_mic.c: 31: else if(get_load()<=28)
  7337  000C72  EC3B  F00C         	call	_get_load	;wreg free
  7338  000C76  6E5F               	movwf	??_si_mic_task& (0+255),c
  7339  000C78  0E1D               	movlw	29
  7340  000C7A  605F               	cpfslt	??_si_mic_task,c
  7341  000C7C  D003               	goto	l8462
  7342                           
  7343                           ;si_mic.c: 32: {
  7344                           ;si_mic.c: 33: si_mic_flag.dl=1;
  7345  000C7E  0E01               	movlw	1
  7346  000C80  6E18               	movwf	_si_mic_flag,c
  7347                           
  7348                           ;si_mic.c: 34: }
  7349  000C82  D02F               	goto	l18179
  7350  000C84                     l8462:
  7351                           
  7352                           ;si_mic.c: 35: else if(PINA5==0)
  7353  000C84  BA86               	btfsc	3974,5,c	;volatile
  7354  000C86  D02D               	goto	l18179
  7355                           
  7356                           ;si_mic.c: 36: {
  7357                           ;si_mic.c: 37: if(bat.dian)
  7358  000C88  5070               	movf	_bat,w,c
  7359  000C8A  E00B               	bz	l18159
  7360                           
  7361                           ;si_mic.c: 38: {
  7362                           ;si_mic.c: 39: if(get_bat()<=310)
  7363  000C8C  ECF7  F00D         	call	_get_bat	;wreg free
  7364  000C90  0E37               	movlw	55
  7365  000C92  5C56               	subwf	?_get_bat,w,c
  7366  000C94  0E01               	movlw	1
  7367  000C96  5857               	subwfb	?_get_bat+1,w,c
  7368  000C98  E204               	bc	l18159
  7369                           
  7370                           ;si_mic.c: 40: {
  7371                           ;si_mic.c: 41: bat.bat=310;
  7372  000C9A  EC0C  F005         	call	PL66	;call to abstracted procedure
  7373  000C9E  6E71               	movwf	_bat+1,c
  7374                           
  7375                           ;si_mic.c: 42: bat.dian=0;
  7376  000CA0  6A70               	clrf	_bat,c
  7377  000CA2                     l18159:
  7378                           
  7379                           ;si_mic.c: 46: }
  7380                           ;si_mic.c: 74: }
  7381                           ;si_mic.c: 75: lowbat_init=0;
  7382  000CA2  6A2F               	clrf	_lowbat_init,c
  7383                           
  7384                           ;si_mic.c: 81: cfg_flag=1;
  7385  000CA4  0E01               	movlw	1
  7386  000CA6  6E75               	movwf	_cfg_flag,c
  7387                           
  7388                           ;si_mic.c: 82: timout=0;
  7389  000CA8  6A27               	clrf	_timout,c
  7390                           
  7391                           ;si_mic.c: 83: kl_init=1;
  7392  000CAA  0E01               	movlw	1
  7393  000CAC  6E25               	movwf	_kl_init,c
  7394                           
  7395                           ;si_mic.c: 84: si_mic_flag.kl_zt=0;
  7396  000CAE  6A1B               	clrf	_si_mic_flag+3,c
  7397                           
  7398                           ;si_mic.c: 85: si_mic_flag.smo_init=1;
  7399  000CB0  0E01               	movlw	1
  7400  000CB2  6E1C               	movwf	_si_mic_flag+4,c
  7401                           
  7402                           ;si_mic.c: 86: si_mic_flag.dl_zt=0;
  7403  000CB4  6A1A               	clrf	_si_mic_flag+2,c
  7404                           
  7405                           ;si_mic.c: 88: }
  7406                           ;si_mic.c: 89: }
  7407  000CB6  D015               	goto	l18179
  7408  000CB8                     l18167:
  7409                           
  7410                           ; BSR set to: 0
  7411                           ;si_mic.c: 90: else if(si_mic_state.o==1 && PINA4==0)
  7412  000CB8  0428               	decf	_si_mic_state,w,c
  7413  000CBA  E113               	bnz	l18179
  7414                           
  7415                           ; BSR set to: 0
  7416                           ;si_mic.c: 91: {
  7417                           ;si_mic.c: 92: timout_cnt=0;
  7418  000CBC  B886               	btfsc	3974,4,c	;volatile
  7419  000CBE  D011               	goto	l18179
  7420                           
  7421                           ; BSR set to: 0
  7422                           ;si_mic.c: 93: task_->sucCnt=0;
  7423  000CC0  505E               	movf	si_mic_task@task_,w,c
  7424  000CC2  EC6E  F00A         	call	PL2	;call to abstracted procedure
  7425  000CC6  0E00               	movlw	0
  7426  000CC8  6EDF               	movwf	indf2,c
  7427                           
  7428                           ; BSR set to: 0
  7429                           ;si_mic.c: 94: if(smoing)
  7430  000CCA  5026               	movf	_smoing,w,c
  7431  000CCC  E00A               	bz	l18179
  7432                           
  7433                           ; BSR set to: 0
  7434                           ;si_mic.c: 95: {
  7435                           ;si_mic.c: 96: smoing=0;
  7436  000CCE  6A26               	clrf	_smoing,c
  7437                           
  7438                           ; BSR set to: 0
  7439                           ;si_mic.c: 97: add_task_id(17,50,73,ui_id);
  7440  000CD0  0E32               	movlw	50
  7441  000CD2  D8AD               	call	PL6	;call to abstracted procedure
  7442  000CD4  0E49               	movlw	73
  7443  000CD6  6E41               	movwf	add_task_id@suc_max,c
  7444  000CD8  C07B  F042         	movff	_ui_id,add_task_id@task_id
  7445  000CDC  0E11               	movlw	17
  7446  000CDE  EC1F  F00B         	call	_add_task_id
  7447  000CE2                     l18179:
  7448                           
  7449                           ;si_mic.c: 101: }
  7450                           ;si_mic.c: 102: }
  7451                           ;si_mic.c: 103: si_mic_state.o=PINA4;
  7452  000CE2  0E00               	movlw	0
  7453  000CE4  B886               	btfsc	3974,4,c	;volatile
  7454  000CE6  0E01               	movlw	1
  7455  000CE8  6E28               	movwf	_si_mic_state,c
  7456                           
  7457                           ;si_mic.c: 104: if(si_mic_flag.dl)
  7458  000CEA  5018               	movf	_si_mic_flag,w,c
  7459  000CEC  E011               	bz	l18193
  7460                           
  7461                           ;si_mic.c: 105: {
  7462                           ;si_mic.c: 106: si_mic_flag.kl=0;
  7463  000CEE  6A19               	clrf	_si_mic_flag+1,c
  7464                           
  7465                           ;si_mic.c: 107: smoing=0;
  7466  000CF0  6A26               	clrf	_smoing,c
  7467                           
  7468                           ;si_mic.c: 108: si_mic_flag.smo_init=0;
  7469  000CF2  6A1C               	clrf	_si_mic_flag+4,c
  7470                           
  7471                           ;si_mic.c: 109: si_mic_flag.dl=0;
  7472  000CF4  6A18               	clrf	_si_mic_flag,c
  7473                           
  7474                           ;si_mic.c: 110: si_mic_flag.dl_zt=1;
  7475  000CF6  0E01               	movlw	1
  7476  000CF8  6E1A               	movwf	_si_mic_flag+2,c
  7477                           
  7478                           ;si_mic.c: 111: pwm.duty=0;
  7479  000CFA  0100               	movlb	0	; () banked
  7480  000CFC  6BCE               	clrf	_pwm& (0+255),b
  7481                           
  7482                           ; BSR set to: 0
  7483                           ;si_mic.c: 112: task_list[ui_id].active=0;
  7484  000CFE  507B               	movf	_ui_id,w,c
  7485  000D00  D89B               	call	PL22	;call to abstracted procedure
  7486  000D02  6ADF               	clrf	indf2,c
  7487                           
  7488                           ; BSR set to: 0
  7489                           ;si_mic.c: 113: add_task_id(5,50,73,ui_id);
  7490  000D04  0E32               	movlw	50
  7491  000D06  D893               	call	PL6	;call to abstracted procedure
  7492  000D08  EC2A  F009         	call	PL38	;call to abstracted procedure
  7493  000D0C  EC1F  F00B         	call	_add_task_id
  7494  000D10                     l18193:
  7495                           
  7496                           ;si_mic.c: 117: }
  7497                           ;si_mic.c: 118: if(si_mic_flag.kl)
  7498  000D10  5019               	movf	_si_mic_flag+1,w,c
  7499  000D12  E016               	bz	l18211
  7500                           
  7501                           ;si_mic.c: 119: {
  7502                           ;si_mic.c: 120: si_mic_flag.dl=0;
  7503  000D14  6A18               	clrf	_si_mic_flag,c
  7504                           
  7505                           ;si_mic.c: 121: cb_o=PINB1;
  7506  000D16  EC15  F00B         	call	PL46	;call to abstracted procedure
  7507                           
  7508                           ;si_mic.c: 122: smoing=0;
  7509  000D1A  6A26               	clrf	_smoing,c
  7510                           
  7511                           ;si_mic.c: 123: si_mic_flag.kl=0;
  7512  000D1C  6A19               	clrf	_si_mic_flag+1,c
  7513                           
  7514                           ;si_mic.c: 124: si_mic_flag.smo_init=0;
  7515  000D1E  6A1C               	clrf	_si_mic_flag+4,c
  7516                           
  7517                           ;si_mic.c: 125: pwm.duty=0;
  7518  000D20  0100               	movlb	0	; () banked
  7519  000D22  6BCE               	clrf	_pwm& (0+255),b
  7520                           
  7521                           ;si_mic.c: 126: si_mic_flag.kl_zt=1;
  7522  000D24  0E01               	movlw	1
  7523  000D26  6E1B               	movwf	_si_mic_flag+3,c
  7524                           
  7525                           ; BSR set to: 0
  7526                           ;si_mic.c: 127: task_list[ui_id].active=0;
  7527  000D28  507B               	movf	_ui_id,w,c
  7528  000D2A  D886               	call	PL22	;call to abstracted procedure
  7529  000D2C  6ADF               	clrf	indf2,c
  7530                           
  7531                           ; BSR set to: 0
  7532                           ;si_mic.c: 128: add_task_id(6,250,10,ui_id);
  7533  000D2E  0EFA               	movlw	250
  7534  000D30  D87E               	call	PL6	;call to abstracted procedure
  7535  000D32  0E0A               	movlw	10
  7536  000D34  6E41               	movwf	add_task_id@suc_max,c
  7537  000D36  C07B  F042         	movff	_ui_id,add_task_id@task_id
  7538  000D3A  0E06               	movlw	6
  7539  000D3C  EC1F  F00B         	call	_add_task_id
  7540  000D40                     l18211:
  7541                           
  7542                           ;si_mic.c: 132: }
  7543                           ;si_mic.c: 133: if(si_mic_flag.kl_zt || si_mic_flag.dl_zt )
  7544  000D40  501B               	movf	_si_mic_flag+3,w,c
  7545  000D42  E102               	bnz	l8474
  7546  000D44  501A               	movf	_si_mic_flag+2,w,c
  7547  000D46  E002               	bz	l8472
  7548  000D48                     l8474:
  7549                           
  7550                           ;si_mic.c: 134: {
  7551                           ;si_mic.c: 135: smoing=0;
  7552  000D48  6A26               	clrf	_smoing,c
  7553                           
  7554                           ;si_mic.c: 137: return;
  7555  000D4A  0012               	return	
  7556  000D4C                     l8472:
  7557                           
  7558                           ;si_mic.c: 138: }
  7559                           ;si_mic.c: 140: if(PINA4 &&(PINA5==0)&&(ts==0)&&(timout==0))
  7560  000D4C  B886               	btfsc	3974,4,c	;volatile
  7561  000D4E  BA86               	btfsc	3974,5,c	;volatile
  7562  000D50  D063               	goto	l18273
  7563  000D52  5037               	movf	_ts,w,c
  7564  000D54  E161               	bnz	l18273
  7565  000D56  5027               	movf	_timout,w,c
  7566  000D58  E15F               	bnz	l18273
  7567                           
  7568                           ;si_mic.c: 141: {
  7569                           ;si_mic.c: 142: if(kl_init)
  7570  000D5A  5025               	movf	_kl_init,w,c
  7571  000D5C  E006               	bz	l18229
  7572                           
  7573                           ;si_mic.c: 143: {
  7574                           ;si_mic.c: 144: kl_init=0;
  7575  000D5E  6A25               	clrf	_kl_init,c
  7576                           
  7577                           ;si_mic.c: 145: if(PINB1)
  7578  000D60  A287               	btfss	3975,1,c	;volatile
  7579  000D62  D003               	goto	l18229
  7580                           
  7581                           ;si_mic.c: 146: {
  7582                           ;si_mic.c: 147: si_mic_flag.kl=1;
  7583  000D64  0E01               	movlw	1
  7584  000D66  6E19               	movwf	_si_mic_flag+1,c
  7585  000D68  0C01               	retlw	1
  7586  000D6A                     l18229:
  7587                           
  7588                           ;si_mic.c: 149: }
  7589                           ;si_mic.c: 150: }
  7590                           ;si_mic.c: 154: if(bat.dian==0)
  7591  000D6A  5070               	movf	_bat,w,c
  7592  000D6C  E111               	bnz	l18239
  7593                           
  7594                           ;si_mic.c: 156: {
  7595                           ;si_mic.c: 159: pwm.duty=0;
  7596  000D6E  0100               	movlb	0	; () banked
  7597  000D70  6BCE               	clrf	_pwm& (0+255),b
  7598                           
  7599                           ;si_mic.c: 160: smoing=0;
  7600  000D72  6A26               	clrf	_smoing,c
  7601                           
  7602                           ; BSR set to: 0
  7603                           ;si_mic.c: 162: if(lowbat_init==0)
  7604  000D74  502F               	movf	_lowbat_init,w,c
  7605  000D76  A4D8               	btfss	status,2,c
  7606  000D78  0012               	return	
  7607                           
  7608                           ; BSR set to: 0
  7609                           ;si_mic.c: 163: {
  7610                           ;si_mic.c: 164: lowbat_init=1;
  7611  000D7A  0E01               	movlw	1
  7612  000D7C  6E2F               	movwf	_lowbat_init,c
  7613                           
  7614                           ; BSR set to: 0
  7615                           ;si_mic.c: 165: add_task_id(10,250,20,ui_id);
  7616  000D7E  0EFA               	movlw	250
  7617  000D80  D856               	call	PL6	;call to abstracted procedure
  7618  000D82  0E14               	movlw	20
  7619  000D84  6E41               	movwf	add_task_id@suc_max,c
  7620  000D86  C07B  F042         	movff	_ui_id,add_task_id@task_id
  7621  000D8A  0E0A               	movlw	10
  7622  000D8C  EF1F  F00B         	goto	_add_task_id
  7623  000D90                     l18239:
  7624                           
  7625                           ;si_mic.c: 168: else
  7626                           ;si_mic.c: 169: {
  7627                           ;si_mic.c: 170: smoing=1;
  7628  000D90  0E01               	movlw	1
  7629  000D92  6E26               	movwf	_smoing,c
  7630                           
  7631                           ;si_mic.c: 174: if(cfg_flag)
  7632  000D94  5075               	movf	_cfg_flag,w,c
  7633  000D96  E019               	bz	l18253
  7634                           
  7635                           ;si_mic.c: 175: {
  7636                           ;si_mic.c: 185: cfg_flag=0;
  7637  000D98  6A75               	clrf	_cfg_flag,c
  7638                           
  7639                           ;si_mic.c: 186: pwm.duty=(pw_t==0)?30:pw_t;
  7640  000D9A  506C               	movf	_pw_t,w,c
  7641  000D9C  106D               	iorwf	_pw_t+1,w,c
  7642  000D9E  106E               	iorwf	_pw_t+2,w,c
  7643  000DA0  106F               	iorwf	_pw_t+3,w,c
  7644  000DA2  E009               	bz	l18247
  7645  000DA4  C06C  F060         	movff	_pw_t,_si_mic_task$4421
  7646  000DA8  C06D  F061         	movff	_pw_t+1,_si_mic_task$4421+1
  7647  000DAC  C06E  F062         	movff	_pw_t+2,_si_mic_task$4421+2
  7648  000DB0  C06F  F063         	movff	_pw_t+3,_si_mic_task$4421+3
  7649  000DB4  D005               	goto	l18249
  7650  000DB6                     l18247:
  7651  000DB6  0E1E               	movlw	30
  7652  000DB8  6E60               	movwf	_si_mic_task$4421,c
  7653  000DBA  6A61               	clrf	_si_mic_task$4421+1,c
  7654  000DBC  6A62               	clrf	_si_mic_task$4421+2,c
  7655  000DBE  6A63               	clrf	_si_mic_task$4421+3,c
  7656  000DC0                     l18249:
  7657  000DC0  C060  F0CE         	movff	_si_mic_task$4421,_pwm
  7658                           
  7659                           ;si_mic.c: 187: pwm.duty_t=pwm.duty-1;
  7660  000DC4  0100               	movlb	0	; () banked
  7661  000DC6  05CE               	decf	_pwm& (0+255),w,b
  7662  000DC8  6FCF               	movwf	(_pwm+1)& (0+255),b
  7663  000DCA                     l18253:
  7664                           
  7665                           ;si_mic.c: 190: } ;
  7666                           ;si_mic.c: 196: if(si_mic_flag.smo_init)
  7667  000DCA  501C               	movf	_si_mic_flag+4,w,c
  7668  000DCC  E009               	bz	l18259
  7669                           
  7670                           ;si_mic.c: 197: {
  7671                           ;si_mic.c: 198: si_mic_flag.smo_init=0;
  7672  000DCE  6A1C               	clrf	_si_mic_flag+4,c
  7673                           
  7674                           ;si_mic.c: 199: add_task_id(4,50,0,ui_id);
  7675  000DD0  0E32               	movlw	50
  7676  000DD2  D82D               	call	PL6	;call to abstracted procedure
  7677  000DD4  6A41               	clrf	add_task_id@suc_max,c
  7678  000DD6  C07B  F042         	movff	_ui_id,add_task_id@task_id
  7679  000DDA  0E04               	movlw	4
  7680  000DDC  EC1F  F00B         	call	_add_task_id
  7681  000DE0                     l18259:
  7682                           
  7683                           ;si_mic.c: 200: }
  7684                           ;si_mic.c: 201: task_->sucCnt++;
  7685  000DE0  505E               	movf	si_mic_task@task_,w,c
  7686  000DE2  EC6E  F00A         	call	PL2	;call to abstracted procedure
  7687  000DE6  2ADF               	incf	indf2,f,c
  7688                           
  7689                           ;si_mic.c: 202: if(task_->sucCnt>=250)
  7690  000DE8  505E               	movf	si_mic_task@task_,w,c
  7691  000DEA  EC6E  F00A         	call	PL2	;call to abstracted procedure
  7692  000DEE  0EF9               	movlw	249
  7693  000DF0  64DF               	cpfsgt	indf2,c
  7694  000DF2  0CF9               	retlw	249
  7695                           
  7696                           ;si_mic.c: 205: timout_cnt++;
  7697  000DF4  505E               	movf	si_mic_task@task_,w,c
  7698  000DF6  EC6E  F00A         	call	PL2	;call to abstracted procedure
  7699  000DFA  6ADF               	clrf	indf2,c
  7700                           
  7701                           ;si_mic.c: 212: pwm.duty=0;
  7702  000DFC  0100               	movlb	0	; () banked
  7703  000DFE  6BCE               	clrf	_pwm& (0+255),b
  7704                           
  7705                           ; BSR set to: 0
  7706                           ;si_mic.c: 213: smoing=0;
  7707  000E00  6A26               	clrf	_smoing,c
  7708                           
  7709                           ; BSR set to: 0
  7710                           ;si_mic.c: 214: add_task_id(10,250,10,ui_id);
  7711  000E02  0EFA               	movlw	250
  7712  000E04  D814               	call	PL6	;call to abstracted procedure
  7713  000E06  0E0A               	movlw	10
  7714  000E08  6E41               	movwf	add_task_id@suc_max,c
  7715  000E0A  C07B  F042         	movff	_ui_id,add_task_id@task_id
  7716  000E0E  EC1F  F00B         	call	_add_task_id
  7717                           
  7718                           ;si_mic.c: 215: timout=1;
  7719  000E12  0E01               	movlw	1
  7720  000E14  6E27               	movwf	_timout,c
  7721  000E16  0C01               	retlw	1
  7722  000E18                     l18273:
  7723                           
  7724                           ;si_mic.c: 230: timout_cnt=0;
  7725  000E18  0E01               	movlw	1
  7726  000E1A  6E75               	movwf	_cfg_flag,c
  7727                           
  7728                           ;si_mic.c: 231: smoing=0;
  7729  000E1C  6A26               	clrf	_smoing,c
  7730                           
  7731                           ;si_mic.c: 232: task_->sucCnt=0;
  7732  000E1E  505E               	movf	si_mic_task@task_,w,c
  7733  000E20  EC6E  F00A         	call	PL2	;call to abstracted procedure
  7734  000E24  0E00               	movlw	0
  7735  000E26  6ADF               	clrf	indf2,c
  7736                           
  7737                           ;si_mic.c: 233: pwm.duty=0;
  7738  000E28  0100               	movlb	0	; () banked
  7739  000E2A  6BCE               	clrf	_pwm& (0+255),b
  7740  000E2C  0012               	return		;funcret
  7741  000E2E                     __end_of_si_mic_task:
  7742                           	opt stack 0
  7743  000E2E                     PL6:
  7744                           	opt stack 3
  7745  000E2E  6E3D               	movwf	add_task_id@interval_ms,c
  7746  000E30  6A3E               	clrf	add_task_id@interval_ms+1,c
  7747  000E32  6A3F               	clrf	add_task_id@interval_ms+2,c
  7748  000E34  6A40               	clrf	add_task_id@interval_ms+3,c
  7749  000E36  0012               	return	
  7750  000E38                     __end_ofPL6:
  7751                           	opt stack 0
  7752  000E38                     PL22:
  7753                           	opt stack 3
  7754  000E38  0D09               	mullw	9
  7755  000E3A  50F3               	movf	prodl,w,c
  7756  000E3C  0F8B               	addlw	low (_task_list+5)
  7757  000E3E  6ED9               	movwf	fsr2l,c
  7758  000E40  6ADA               	clrf	fsr2h,c
  7759  000E42  0012               	return	
  7760  000E44                     __end_ofPL22:
  7761                           	opt stack 0
  7762                           tblptru	equ	0xFF8
  7763                           tblptrh	equ	0xFF7
  7764                           tblptrl	equ	0xFF6
  7765                           tablat	equ	0xFF5
  7766                           prodl	equ	0xFF3
  7767                           intcon	equ	0xFF2
  7768                           intcon2	equ	0xFF1
  7769                           intcon3	equ	0xFF0
  7770                           postinc0	equ	0xFEE
  7771                           wreg	equ	0xFE8
  7772                           postdec1	equ	0xFE5
  7773                           fsr1l	equ	0xFE1
  7774                           indf2	equ	0xFDF
  7775                           postinc2	equ	0xFDE
  7776                           postdec2	equ	0xFDD
  7777                           fsr2h	equ	0xFDA
  7778                           fsr2l	equ	0xFD9
  7779                           status	equ	0xFD8
  7780                           
  7781 ;; *************** function _key_task *****************
  7782 ;; Defined at:
  7783 ;;		line 19 in file ".\src\key.c"
  7784 ;; Parameters:    Size  Location     Type
  7785 ;;  task_           1   14[COMRAM] PTR struct task
  7786 ;;		 -> task_list(72), 
  7787 ;; Auto vars:     Size  Location     Type
  7788 ;;		None
  7789 ;; Return value:  Size  Location     Type
  7790 ;;                  1    wreg      void 
  7791 ;; Registers used:
  7792 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7793 ;; Tracked objects:
  7794 ;;		On entry : 3F/0
  7795 ;;		On exit  : 0/0
  7796 ;;		Unchanged: 0/0
  7797 ;; Data sizes:     COMRAM   BANK0
  7798 ;;      Params:         1       0
  7799 ;;      Locals:         0       0
  7800 ;;      Temps:          1       0
  7801 ;;      Totals:         2       0
  7802 ;;Total ram usage:        2 bytes
  7803 ;; Hardware stack levels used:    1
  7804 ;; Hardware stack levels required when called:    3
  7805 ;; This function calls:
  7806 ;;		_add_task_id
  7807 ;; This function is called by:
  7808 ;;		_main
  7809 ;;		_find_task
  7810 ;; This function uses a non-reentrant model
  7811 ;;
  7812                           
  7813                           	psect	text27
  7814  00111C                     __ptext27:
  7815                           	opt stack 0
  7816  00111C                     _key_task:
  7817                           	opt stack 4
  7818                           
  7819                           ; BSR set to: 0
  7820                           ;key.c: 21: if ((task_list[ui_id].active==0)||(task_list[ui_id].id!=5))
  7821                           
  7822                           ;incstack = 0
  7823  00111C  507B               	movf	_ui_id,w,c
  7824  00111E  EC1C  F007         	call	PL22	;call to abstracted procedure
  7825  001122  50DF               	movf	indf2,w,c
  7826  001124  E006               	bz	l4076
  7827                           
  7828                           ; BSR set to: 0
  7829  001126  507B               	movf	_ui_id,w,c
  7830  001128  EC88  F008         	call	PL24	;call to abstracted procedure
  7831  00112C  0E05               	movlw	5
  7832  00112E  18DE               	xorwf	postinc2,w,c
  7833  001130  E001               	bz	l18047
  7834  001132                     l4076:
  7835                           
  7836                           ; BSR set to: 0
  7837                           ;key.c: 22: {
  7838                           ;key.c: 23: pw_mode=0;
  7839  001132  6A30               	clrf	_pw_mode,c
  7840  001134                     l18047:
  7841                           
  7842                           ; BSR set to: 0
  7843                           ;key.c: 24: }
  7844                           ;key.c: 30: if(key_o&& (PINC6==0))
  7845  001134  5077               	movf	_key_o,w,c
  7846  001136  E01F               	bz	l18075
  7847                           
  7848                           ; BSR set to: 0
  7849  001138  BC88               	btfsc	3976,6,c	;volatile
  7850  00113A  D01D               	goto	l18075
  7851                           
  7852                           ; BSR set to: 0
  7853                           ;key.c: 31: {
  7854                           ;key.c: 32: if((task_list[ui_id].id!=4)&&(ts==0)&&pw_mode)
  7855  00113C  D882               	call	PL8	;call to abstracted procedure
  7856  00113E  E00A               	bz	l4078
  7857                           
  7858                           ; BSR set to: 0
  7859  001140  5037               	movf	_ts,w,c
  7860  001142  E108               	bnz	l4078
  7861                           
  7862                           ; BSR set to: 0
  7863  001144  5030               	movf	_pw_mode,w,c
  7864  001146  E006               	bz	l4078
  7865                           
  7866                           ; BSR set to: 0
  7867                           ;key.c: 33: {
  7868                           ;key.c: 34: pw++;
  7869  001148  2A7C               	incf	_pw,f,c
  7870                           
  7871                           ; BSR set to: 0
  7872                           ;key.c: 35: if(pw>=31)
  7873  00114A  0E1E               	movlw	30
  7874  00114C  647C               	cpfsgt	_pw,c
  7875  00114E  D002               	goto	l4078
  7876                           
  7877                           ; BSR set to: 0
  7878                           ;key.c: 36: {
  7879                           ;key.c: 37: pw=5;
  7880  001150  0E05               	movlw	5
  7881  001152  6E7C               	movwf	_pw,c
  7882  001154                     l4078:
  7883                           
  7884                           ; BSR set to: 0
  7885                           ;key.c: 38: }
  7886                           ;key.c: 40: }
  7887                           ;key.c: 49: if(key_cnt_flag==0)
  7888  001154  5032               	movf	_key_cnt_flag,w,c
  7889  001156  E103               	bnz	l18065
  7890                           
  7891                           ; BSR set to: 0
  7892                           ;key.c: 50: {
  7893                           ;key.c: 51: key_cnt_flag=1;
  7894  001158  0E01               	movlw	1
  7895  00115A  6E32               	movwf	_key_cnt_flag,c
  7896                           
  7897                           ;key.c: 52: }
  7898  00115C  D002               	goto	l18069
  7899  00115E                     l18065:
  7900                           
  7901                           ; BSR set to: 0
  7902                           ;key.c: 53: else
  7903                           ;key.c: 54: {
  7904                           ;key.c: 55: ts_cnt++;
  7905  00115E  2A31               	incf	_ts_cnt,f,c
  7906                           
  7907                           ; BSR set to: 0
  7908                           ;key.c: 56: key_cnt=0;
  7909  001160  6A33               	clrf	_key_cnt,c
  7910  001162                     l18069:
  7911                           
  7912                           ; BSR set to: 0
  7913                           ;key.c: 57: }
  7914                           ;key.c: 58: if(task_list[ui_id].id!=4)
  7915  001162  D86F               	call	PL8	;call to abstracted procedure
  7916  001164  E006               	bz	l18073
  7917                           
  7918                           ; BSR set to: 0
  7919                           ;key.c: 59: {
  7920                           ;key.c: 60: add_task_id(5,50,73,ui_id);
  7921  001166  0E32               	movlw	50
  7922  001168  EC17  F007         	call	PL6	;call to abstracted procedure
  7923  00116C  D873               	call	PL38	;call to abstracted procedure
  7924  00116E  EC1F  F00B         	call	_add_task_id
  7925  001172                     l18073:
  7926                           
  7927                           ;key.c: 61: }
  7928                           ;key.c: 62: pw_add_flag=1;
  7929  001172  0E01               	movlw	1
  7930  001174  6E76               	movwf	_pw_add_flag,c
  7931  001176                     l18075:
  7932                           
  7933                           ;key.c: 63: }
  7934                           ;key.c: 71: key_o=PINC6;
  7935  001176  0E00               	movlw	0
  7936  001178  BC88               	btfsc	3976,6,c	;volatile
  7937  00117A  0E01               	movlw	1
  7938  00117C  6E77               	movwf	_key_o,c
  7939                           
  7940                           ;key.c: 76: if((PINC6==0))
  7941  00117E  BC88               	btfsc	3976,6,c	;volatile
  7942  001180  D029               	goto	l18105
  7943                           
  7944                           ;key.c: 77: {
  7945                           ;key.c: 78: if((task_list[ui_id].id!=4)&&(ts==0)&&pw_mode)
  7946  001182  D85F               	call	PL8	;call to abstracted procedure
  7947  001184  E02C               	bz	l18107
  7948  001186  5037               	movf	_ts,w,c
  7949  001188  E12A               	bnz	l18107
  7950  00118A  5030               	movf	_pw_mode,w,c
  7951  00118C  E028               	bz	l18107
  7952                           
  7953                           ;key.c: 79: {
  7954                           ;key.c: 80: task_->sucCnt++;
  7955  00118E  504A               	movf	key_task@task_,w,c
  7956  001190  EC6E  F00A         	call	PL2	;call to abstracted procedure
  7957  001194  2ADF               	incf	indf2,f,c
  7958                           
  7959                           ;key.c: 81: if(task_->sucCnt>=6)
  7960  001196  504A               	movf	key_task@task_,w,c
  7961  001198  EC6E  F00A         	call	PL2	;call to abstracted procedure
  7962  00119C  0E05               	movlw	5
  7963  00119E  64DF               	cpfsgt	indf2,c
  7964  0011A0  D01E               	goto	l18107
  7965                           
  7966                           ;key.c: 82: {
  7967                           ;key.c: 83: task_->sucCnt=0;
  7968  0011A2  504A               	movf	key_task@task_,w,c
  7969  0011A4  EC6E  F00A         	call	PL2	;call to abstracted procedure
  7970  0011A8  6ADF               	clrf	indf2,c
  7971                           
  7972                           ;key.c: 84: if(task_list[ui_id].id!=4)
  7973  0011AA  D84B               	call	PL8	;call to abstracted procedure
  7974  0011AC  E006               	bz	l18093
  7975                           
  7976                           ;key.c: 85: {
  7977                           ;key.c: 86: add_task_id(5,50,73,ui_id);
  7978  0011AE  0E32               	movlw	50
  7979  0011B0  EC17  F007         	call	PL6	;call to abstracted procedure
  7980  0011B4  D84F               	call	PL38	;call to abstracted procedure
  7981  0011B6  EC1F  F00B         	call	_add_task_id
  7982  0011BA                     l18093:
  7983                           
  7984                           ;key.c: 87: }
  7985                           ;key.c: 88: if(pw_add_flag)
  7986  0011BA  5076               	movf	_pw_add_flag,w,c
  7987  0011BC  E006               	bz	l18101
  7988                           
  7989                           ;key.c: 89: {
  7990                           ;key.c: 90: pw++;
  7991  0011BE  2A7C               	incf	_pw,f,c
  7992                           
  7993                           ;key.c: 91: if(pw>=31)
  7994  0011C0  0E1E               	movlw	30
  7995  0011C2  647C               	cpfsgt	_pw,c
  7996  0011C4  D002               	goto	l18101
  7997                           
  7998                           ;key.c: 92: {
  7999                           ;key.c: 93: pw=5;
  8000  0011C6  0E05               	movlw	5
  8001  0011C8  6E7C               	movwf	_pw,c
  8002  0011CA                     l18101:
  8003                           
  8004                           ;key.c: 94: }
  8005                           ;key.c: 95: }
  8006                           ;key.c: 96: if(pw==30)
  8007  0011CA  0E1E               	movlw	30
  8008  0011CC  187C               	xorwf	_pw,w,c
  8009  0011CE  E107               	bnz	l18107
  8010                           
  8011                           ;key.c: 97: {
  8012                           ;key.c: 98: pw_add_flag=0;
  8013  0011D0  6A76               	clrf	_pw_add_flag,c
  8014                           
  8015                           ;key.c: 99: }
  8016                           ;key.c: 101: }
  8017                           ;key.c: 102: }
  8018                           ;key.c: 103: }
  8019  0011D2  D005               	goto	l18107
  8020  0011D4                     l18105:
  8021                           
  8022                           ;key.c: 104: else
  8023                           ;key.c: 105: {
  8024                           ;key.c: 106: task_->sucCnt=0;
  8025  0011D4  504A               	movf	key_task@task_,w,c
  8026  0011D6  EC6E  F00A         	call	PL2	;call to abstracted procedure
  8027  0011DA  0E00               	movlw	0
  8028  0011DC  6EDF               	movwf	indf2,c
  8029  0011DE                     l18107:
  8030                           
  8031                           ;key.c: 107: }
  8032                           ;key.c: 108: if(key_cnt_flag)
  8033  0011DE  5032               	movf	_key_cnt_flag,w,c
  8034  0011E0  E007               	bz	l18115
  8035                           
  8036                           ;key.c: 109: {
  8037                           ;key.c: 110: key_cnt++;
  8038  0011E2  2A33               	incf	_key_cnt,f,c
  8039                           
  8040                           ;key.c: 111: if(key_cnt>=13)
  8041  0011E4  0E0C               	movlw	12
  8042  0011E6  6433               	cpfsgt	_key_cnt,c
  8043  0011E8  0C0C               	retlw	12
  8044                           
  8045                           ;key.c: 112: {
  8046                           ;key.c: 113: key_cnt_flag=0;
  8047  0011EA  6A32               	clrf	_key_cnt_flag,c
  8048                           
  8049                           ;key.c: 114: key_cnt=0;
  8050  0011EC  6A33               	clrf	_key_cnt,c
  8051  0011EE  0012               	return	
  8052  0011F0                     l18115:
  8053                           
  8054                           ;key.c: 117: else
  8055                           ;key.c: 118: {
  8056                           ;key.c: 119: if(ts_cnt==1)
  8057  0011F0  0431               	decf	_ts_cnt,w,c
  8058  0011F2  E103               	bnz	l18119
  8059                           
  8060                           ;key.c: 120: {
  8061                           ;key.c: 121: pw_mode=1;
  8062  0011F4  0E01               	movlw	1
  8063  0011F6  6E30               	movwf	_pw_mode,c
  8064                           
  8065                           ;key.c: 122: }
  8066  0011F8  D021               	goto	l18133
  8067  0011FA                     l18119:
  8068                           
  8069                           ;key.c: 123: else if(ts_cnt>=4)
  8070  0011FA  0E03               	movlw	3
  8071  0011FC  6431               	cpfsgt	_ts_cnt,c
  8072  0011FE  D01E               	goto	l18133
  8073                           
  8074                           ;key.c: 124: {
  8075                           ;key.c: 125: if((task_list[ui_id].id!=4)&&(pw_mode==0))
  8076  001200  D820               	call	PL8	;call to abstracted procedure
  8077  001202  E01C               	bz	l18133
  8078  001204  5030               	movf	_pw_mode,w,c
  8079  001206  E11A               	bnz	l18133
  8080                           
  8081                           ;key.c: 126: {
  8082                           ;key.c: 127: if(ts==0)
  8083  001208  5037               	movf	_ts,w,c
  8084  00120A  E10D               	bnz	l4098
  8085                           
  8086                           ;key.c: 128: {
  8087                           ;key.c: 129: ts=1;
  8088  00120C  0E01               	movlw	1
  8089  00120E  6E37               	movwf	_ts,c
  8090                           
  8091                           ;key.c: 130: add_task_id(7,50,100,ui_id);
  8092  001210  0E32               	movlw	50
  8093  001212  EC17  F007         	call	PL6	;call to abstracted procedure
  8094  001216  0E64               	movlw	100
  8095  001218  6E41               	movwf	add_task_id@suc_max,c
  8096  00121A  C07B  F042         	movff	_ui_id,add_task_id@task_id
  8097  00121E  0E07               	movlw	7
  8098  001220  EC1F  F00B         	call	_add_task_id
  8099                           
  8100                           ;key.c: 134: }
  8101  001224  D00B               	goto	l18133
  8102  001226                     l4098:
  8103                           
  8104                           ;key.c: 135: else
  8105                           ;key.c: 136: {
  8106                           ;key.c: 137: ts=0;
  8107  001226  6A37               	clrf	_ts,c
  8108                           
  8109                           ;key.c: 138: add_task_id(8,50,43,ui_id);
  8110  001228  0E32               	movlw	50
  8111  00122A  EC17  F007         	call	PL6	;call to abstracted procedure
  8112  00122E  0E2B               	movlw	43
  8113  001230  6E41               	movwf	add_task_id@suc_max,c
  8114  001232  C07B  F042         	movff	_ui_id,add_task_id@task_id
  8115  001236  0E08               	movlw	8
  8116  001238  EC1F  F00B         	call	_add_task_id
  8117  00123C                     l18133:
  8118                           
  8119                           ;key.c: 142: }
  8120                           ;key.c: 143: }
  8121                           ;key.c: 144: }
  8122                           ;key.c: 145: key_cnt=0;
  8123  00123C  6A33               	clrf	_key_cnt,c
  8124                           
  8125                           ;key.c: 146: ts_cnt=0;
  8126  00123E  6A31               	clrf	_ts_cnt,c
  8127  001240  0012               	return		;funcret
  8128  001242                     __end_of_key_task:
  8129                           	opt stack 0
  8130  001242                     PL8:
  8131                           	opt stack 4
  8132  001242  507B               	movf	_ui_id,w,c
  8133  001244  0D09               	mullw	9
  8134  001246  50F3               	movf	prodl,w,c
  8135  001248  0F86               	addlw	low _task_list
  8136  00124A  6ED9               	movwf	fsr2l,c
  8137  00124C  6ADA               	clrf	fsr2h,c
  8138  00124E  0E04               	movlw	4
  8139  001250  18DE               	xorwf	postinc2,w,c
  8140  001252  0012               	return	
  8141  001254                     __end_ofPL8:
  8142                           	opt stack 0
  8143  001254                     PL38:
  8144                           	opt stack 3
  8145  001254  0E49               	movlw	73
  8146  001256  6E41               	movwf	add_task_id@suc_max,c
  8147  001258  C07B  F042         	movff	_ui_id,add_task_id@task_id
  8148  00125C  0C05               	retlw	5
  8149  00125E                     __end_ofPL38:
  8150                           	opt stack 0
  8151                           tblptru	equ	0xFF8
  8152                           tblptrh	equ	0xFF7
  8153                           tblptrl	equ	0xFF6
  8154                           tablat	equ	0xFF5
  8155                           prodl	equ	0xFF3
  8156                           intcon	equ	0xFF2
  8157                           intcon2	equ	0xFF1
  8158                           intcon3	equ	0xFF0
  8159                           postinc0	equ	0xFEE
  8160                           wreg	equ	0xFE8
  8161                           postdec1	equ	0xFE5
  8162                           fsr1l	equ	0xFE1
  8163                           indf2	equ	0xFDF
  8164                           postinc2	equ	0xFDE
  8165                           postdec2	equ	0xFDD
  8166                           fsr2h	equ	0xFDA
  8167                           fsr2l	equ	0xFD9
  8168                           status	equ	0xFD8
  8169                           
  8170 ;; *************** function _chrg_task *****************
  8171 ;; Defined at:
  8172 ;;		line 15 in file ".\src\chrg.c"
  8173 ;; Parameters:    Size  Location     Type
  8174 ;;  task_           1   34[COMRAM] PTR struct task
  8175 ;;		 -> task_list(72), 
  8176 ;; Auto vars:     Size  Location     Type
  8177 ;;		None
  8178 ;; Return value:  Size  Location     Type
  8179 ;;                  1    wreg      void 
  8180 ;; Registers used:
  8181 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8182 ;; Tracked objects:
  8183 ;;		On entry : 3F/0
  8184 ;;		On exit  : 0/0
  8185 ;;		Unchanged: 0/0
  8186 ;; Data sizes:     COMRAM   BANK0
  8187 ;;      Params:         1       0
  8188 ;;      Locals:         0       0
  8189 ;;      Temps:          1       0
  8190 ;;      Totals:         2       0
  8191 ;;Total ram usage:        2 bytes
  8192 ;; Hardware stack levels used:    1
  8193 ;; Hardware stack levels required when called:    4
  8194 ;; This function calls:
  8195 ;;		_add_task_id
  8196 ;;		_get_bat
  8197 ;; This function is called by:
  8198 ;;		_main
  8199 ;;		_find_task
  8200 ;; This function uses a non-reentrant model
  8201 ;;
  8202                           
  8203                           	psect	text28
  8204  000FBA                     __ptext28:
  8205                           	opt stack 0
  8206  000FBA                     _chrg_task:
  8207                           	opt stack 2
  8208                           
  8209                           ; BSR set to: 0
  8210                           ;chrg.c: 17: if(chrg_o&& (PINA5==0))
  8211                           
  8212                           ;incstack = 0
  8213  000FBA  5036               	movf	_chrg_o,w,c
  8214  000FBC  E014               	bz	l3039
  8215                           
  8216                           ; BSR set to: 0
  8217  000FBE  BA86               	btfsc	3974,5,c	;volatile
  8218  000FC0  D012               	goto	l3039
  8219                           
  8220                           ; BSR set to: 0
  8221                           ;chrg.c: 18: {
  8222                           ;chrg.c: 19: add_task_id(2,300,6,ui_id);
  8223  000FC2  0E2C               	movlw	44
  8224  000FC4  ECCF  F004         	call	PL14	;call to abstracted procedure
  8225  000FC8  0E06               	movlw	6
  8226  000FCA  6E41               	movwf	add_task_id@suc_max,c
  8227  000FCC  C07B  F042         	movff	_ui_id,add_task_id@task_id
  8228  000FD0  0E02               	movlw	2
  8229  000FD2  EC1F  F00B         	call	_add_task_id
  8230                           
  8231                           ;chrg.c: 20: full=0;
  8232  000FD6  6A35               	clrf	_full,c
  8233                           
  8234                           ;chrg.c: 21: bat.bat=get_bat();
  8235  000FD8  ECF7  F00D         	call	_get_bat	;wreg free
  8236  000FDC  C056  F071         	movff	?_get_bat,_bat+1
  8237  000FE0  C057  F072         	movff	?_get_bat+1,_bat+2
  8238                           
  8239                           ;chrg.c: 24: }
  8240  000FE4  D00D               	goto	l3040
  8241  000FE6                     l3039:
  8242                           
  8243                           ; BSR set to: 0
  8244                           ;chrg.c: 25: else if(PINA5&& (chrg_o==0))
  8245  000FE6  AA86               	btfss	3974,5,c	;volatile
  8246  000FE8  D00B               	goto	l3040
  8247                           
  8248                           ; BSR set to: 0
  8249  000FEA  5036               	movf	_chrg_o,w,c
  8250  000FEC  E109               	bnz	l3040
  8251                           
  8252                           ; BSR set to: 0
  8253                           ;chrg.c: 26: {
  8254                           ;chrg.c: 27: task_->sucCnt=0;
  8255  000FEE  505E               	movf	chrg_task@task_,w,c
  8256  000FF0  EC6E  F00A         	call	PL2	;call to abstracted procedure
  8257  000FF4  6ADF               	clrf	indf2,c
  8258                           
  8259                           ; BSR set to: 0
  8260                           ;chrg.c: 28: chrg_cnt=0;
  8261  000FF6  6A34               	clrf	_chrg_cnt,c
  8262                           
  8263                           ; BSR set to: 0
  8264                           ;chrg.c: 29: if (PINA1==0)
  8265  000FF8  B286               	btfsc	3974,1,c	;volatile
  8266  000FFA  D002               	goto	l3040
  8267                           
  8268                           ; BSR set to: 0
  8269                           ;chrg.c: 30: {
  8270                           ;chrg.c: 31: chrging=1;
  8271  000FFC  0E01               	movlw	1
  8272  000FFE  6E79               	movwf	_chrging,c
  8273  001000                     l3040:
  8274                           
  8275                           ;chrg.c: 32: }
  8276                           ;chrg.c: 34: }
  8277                           ;chrg.c: 35: chrg_o=PINA5;
  8278  001000  0E00               	movlw	0
  8279  001002  BA86               	btfsc	3974,5,c	;volatile
  8280  001004  0E01               	movlw	1
  8281  001006  6E36               	movwf	_chrg_o,c
  8282                           
  8283                           ;chrg.c: 37: if(full)
  8284  001008  5035               	movf	_full,w,c
  8285  00100A  E007               	bz	l3043
  8286                           
  8287                           ;chrg.c: 38: {
  8288                           ;chrg.c: 39: task_->sucCnt=0;
  8289  00100C  505E               	movf	chrg_task@task_,w,c
  8290  00100E  EC6E  F00A         	call	PL2	;call to abstracted procedure
  8291  001012  0E00               	movlw	0
  8292  001014  6ADF               	clrf	indf2,c
  8293                           
  8294                           ;chrg.c: 40: chrg_cnt=0;
  8295  001016  6A34               	clrf	_chrg_cnt,c
  8296  001018  0012               	return	
  8297  00101A                     l3043:
  8298                           
  8299                           ;chrg.c: 42: }
  8300                           ;chrg.c: 43: if(PINA5)
  8301  00101A  AA86               	btfss	3974,5,c	;volatile
  8302  00101C  D054               	goto	l3045
  8303                           
  8304                           ;chrg.c: 44: {
  8305                           ;chrg.c: 45: if(PINA1)
  8306  00101E  A286               	btfss	3974,1,c	;volatile
  8307  001020  D018               	goto	l17981
  8308                           
  8309                           ;chrg.c: 46: {
  8310                           ;chrg.c: 47: full=1;
  8311  001022  0E01               	movlw	1
  8312  001024  6E35               	movwf	_full,c
  8313                           
  8314                           ;chrg.c: 48: bat.dian=4;
  8315  001026  0E04               	movlw	4
  8316  001028  6E70               	movwf	_bat,c
  8317                           
  8318                           ;chrg.c: 50: chrg_num=95;
  8319  00102A  0E5F               	movlw	95
  8320  00102C  6E78               	movwf	_chrg_num,c
  8321                           
  8322                           ;chrg.c: 52: if(get_bat()>390)
  8323  00102E  ECF7  F00D         	call	_get_bat	;wreg free
  8324  001032  0E87               	movlw	135
  8325  001034  5C56               	subwf	?_get_bat,w,c
  8326  001036  0E01               	movlw	1
  8327  001038  5857               	subwfb	?_get_bat+1,w,c
  8328  00103A  A0D8               	btfss	status,0,c
  8329  00103C  0012               	return	
  8330                           
  8331                           ;chrg.c: 53: {
  8332                           ;chrg.c: 54: add_task_id(3,5000,3,ui_id);
  8333  00103E  0E88               	movlw	136
  8334  001040  6E3D               	movwf	add_task_id@interval_ms,c
  8335  001042  0E13               	movlw	19
  8336  001044  6E3E               	movwf	add_task_id@interval_ms+1,c
  8337  001046  6A3F               	clrf	add_task_id@interval_ms+2,c
  8338  001048  6A40               	clrf	add_task_id@interval_ms+3,c
  8339  00104A  EC22  F005         	call	PL82	;call to abstracted procedure
  8340  00104E  EF1F  F00B         	goto	_add_task_id
  8341  001052                     l17981:
  8342                           
  8343                           ;chrg.c: 57: }
  8344                           ;chrg.c: 58: if(chrging&&((task_list[ui_id].active==0)||(task_list[ui_id].id==16)))
  8345  001052  5079               	movf	_chrging,w,c
  8346  001054  E00F               	bz	l17989
  8347  001056  507B               	movf	_ui_id,w,c
  8348  001058  EC1C  F007         	call	PL22	;call to abstracted procedure
  8349  00105C  50DF               	movf	indf2,w,c
  8350  00105E  E005               	bz	l3050
  8351  001060  507B               	movf	_ui_id,w,c
  8352  001062  D856               	call	PL24	;call to abstracted procedure
  8353  001064  0E10               	movlw	16
  8354  001066  18DE               	xorwf	postinc2,w,c
  8355  001068  E105               	bnz	l17989
  8356  00106A                     l3050:
  8357                           
  8358                           ;chrg.c: 59: {
  8359                           ;chrg.c: 60: chrging=0;
  8360  00106A  6A79               	clrf	_chrging,c
  8361                           
  8362                           ;chrg.c: 61: add_task_id(1,500,0,ui_id);
  8363  00106C  EC73  F00A         	call	PL4	;call to abstracted procedure
  8364  001070  EC1F  F00B         	call	_add_task_id
  8365  001074                     l17989:
  8366                           
  8367                           ;chrg.c: 62: }
  8368                           ;chrg.c: 63: task_->sucCnt++;
  8369  001074  505E               	movf	chrg_task@task_,w,c
  8370  001076  EC6E  F00A         	call	PL2	;call to abstracted procedure
  8371  00107A  2ADF               	incf	indf2,f,c
  8372                           
  8373                           ;chrg.c: 65: if(task_->sucCnt>=250)
  8374  00107C  505E               	movf	chrg_task@task_,w,c
  8375  00107E  EC6E  F00A         	call	PL2	;call to abstracted procedure
  8376  001082  0EF9               	movlw	249
  8377  001084  64DF               	cpfsgt	indf2,c
  8378  001086  D025               	goto	l18019
  8379                           
  8380                           ;chrg.c: 66: {
  8381                           ;chrg.c: 67: task_->sucCnt=0;
  8382  001088  505E               	movf	chrg_task@task_,w,c
  8383  00108A  EC6E  F00A         	call	PL2	;call to abstracted procedure
  8384  00108E  6ADF               	clrf	indf2,c
  8385                           
  8386                           ;chrg.c: 69: if(chrg_cnt==11||chrg_cnt==23||chrg_cnt==35||chrg_cnt==47)
  8387  001090  0E0B               	movlw	11
  8388  001092  1834               	xorwf	_chrg_cnt,w,c
  8389  001094  E009               	bz	l18003
  8390  001096  0E17               	movlw	23
  8391  001098  1834               	xorwf	_chrg_cnt,w,c
  8392  00109A  E006               	bz	l18003
  8393  00109C  0E23               	movlw	35
  8394  00109E  1834               	xorwf	_chrg_cnt,w,c
  8395  0010A0  E003               	bz	l18003
  8396  0010A2  0E2F               	movlw	47
  8397  0010A4  1834               	xorwf	_chrg_cnt,w,c
  8398  0010A6  E105               	bnz	l18007
  8399  0010A8                     l18003:
  8400                           
  8401                           ;chrg.c: 70: {
  8402                           ;chrg.c: 71: if(chrg_num<=90)
  8403  0010A8  0E5B               	movlw	91
  8404  0010AA  6078               	cpfslt	_chrg_num,c
  8405  0010AC  D002               	goto	l18007
  8406                           
  8407                           ;chrg.c: 72: {
  8408                           ;chrg.c: 73: chrg_num+=5;
  8409  0010AE  0E05               	movlw	5
  8410  0010B0  2678               	addwf	_chrg_num,f,c
  8411  0010B2                     l18007:
  8412                           
  8413                           ;chrg.c: 74: }
  8414                           ;chrg.c: 75: }
  8415                           ;chrg.c: 77: chrg_cnt++;
  8416  0010B2  2A34               	incf	_chrg_cnt,f,c
  8417                           
  8418                           ;chrg.c: 78: if(chrg_cnt>=48)
  8419  0010B4  0E2F               	movlw	47
  8420  0010B6  6434               	cpfsgt	_chrg_cnt,c
  8421  0010B8  D00C               	goto	l18019
  8422                           
  8423                           ;chrg.c: 79: {
  8424                           ;chrg.c: 80: chrg_cnt=0;
  8425  0010BA  6A34               	clrf	_chrg_cnt,c
  8426                           
  8427                           ;chrg.c: 81: if(bat.dian<3){bat.dian++;}
  8428  0010BC  0E03               	movlw	3
  8429  0010BE  6070               	cpfslt	_bat,c
  8430  0010C0  D008               	goto	l18019
  8431  0010C2  2A70               	incf	_bat,f,c
  8432                           
  8433                           ;chrg.c: 82: }
  8434                           ;chrg.c: 83: }
  8435                           ;chrg.c: 85: }
  8436  0010C4  D006               	goto	l18019
  8437  0010C6                     l3045:
  8438                           
  8439                           ;chrg.c: 86: else
  8440                           ;chrg.c: 87: {
  8441                           ;chrg.c: 88: chrg_cnt=0;
  8442  0010C6  6A34               	clrf	_chrg_cnt,c
  8443                           
  8444                           ;chrg.c: 89: task_->sucCnt=0;
  8445  0010C8  505E               	movf	chrg_task@task_,w,c
  8446  0010CA  EC6E  F00A         	call	PL2	;call to abstracted procedure
  8447  0010CE  0E00               	movlw	0
  8448  0010D0  6EDF               	movwf	indf2,c
  8449  0010D2                     l18019:
  8450                           
  8451                           ;chrg.c: 90: }
  8452                           ;chrg.c: 93: if(PINA4&&ts==0&&yd==0&&zz>=30&&bat.dian)
  8453  0010D2  A886               	btfss	3974,4,c	;volatile
  8454  0010D4  D019               	goto	l18039
  8455  0010D6  5037               	movf	_ts,w,c
  8456  0010D8  E117               	bnz	l18039
  8457  0010DA  5038               	movf	_yd,w,c
  8458  0010DC  E115               	bnz	l18039
  8459  0010DE  0E1D               	movlw	29
  8460  0010E0  647A               	cpfsgt	_zz,c
  8461  0010E2  D012               	goto	l18039
  8462  0010E4  5070               	movf	_bat,w,c
  8463  0010E6  E010               	bz	l18039
  8464                           
  8465                           ;chrg.c: 94: {
  8466                           ;chrg.c: 95: static unsigned int cheg_num_d=0;
  8467                           ;chrg.c: 96: cheg_num_d++;
  8468  0010E8  4A23               	infsnz	chrg_task@cheg_num_d,f,c
  8469  0010EA  2A24               	incf	chrg_task@cheg_num_d+1,f,c
  8470                           
  8471                           ;chrg.c: 97: if(cheg_num_d>=400)
  8472  0010EC  0E90               	movlw	144
  8473  0010EE  5C23               	subwf	chrg_task@cheg_num_d,w,c
  8474  0010F0  0E01               	movlw	1
  8475  0010F2  5824               	subwfb	chrg_task@cheg_num_d+1,w,c
  8476  0010F4  A0D8               	btfss	status,0,c
  8477  0010F6  0012               	return	
  8478                           
  8479                           ;chrg.c: 98: {
  8480                           ;chrg.c: 99: cheg_num_d=0;
  8481  0010F8  6A23               	clrf	chrg_task@cheg_num_d,c
  8482  0010FA  6A24               	clrf	chrg_task@cheg_num_d+1,c
  8483                           
  8484                           ;chrg.c: 100: if(chrg_num>=10)
  8485  0010FC  0E09               	movlw	9
  8486  0010FE  6478               	cpfsgt	_chrg_num,c
  8487  001100  0C09               	retlw	9
  8488                           
  8489                           ;chrg.c: 101: {
  8490                           ;chrg.c: 102: chrg_num-=5;
  8491  001102  0E05               	movlw	5
  8492  001104  5E78               	subwf	_chrg_num,f,c
  8493  001106  0C05               	retlw	5
  8494  001108                     l18039:
  8495                           
  8496                           ;chrg.c: 106: else
  8497                           ;chrg.c: 107: {
  8498                           ;chrg.c: 108: if(bat.dian==0)
  8499  001108  5070               	movf	_bat,w,c
  8500  00110A  B4D8               	btfsc	status,2,c
  8501                           
  8502                           ;chrg.c: 109: {
  8503                           ;chrg.c: 110: chrg_num=0;
  8504  00110C  6A78               	clrf	_chrg_num,c
  8505  00110E  0012               	return		;funcret
  8506  001110                     __end_of_chrg_task:
  8507                           	opt stack 0
  8508  001110                     PL24:
  8509                           	opt stack 4
  8510  001110  0D09               	mullw	9
  8511  001112  50F3               	movf	prodl,w,c
  8512  001114  0F86               	addlw	low _task_list
  8513  001116  6ED9               	movwf	fsr2l,c
  8514  001118  6ADA               	clrf	fsr2h,c
  8515  00111A  0012               	return	
  8516  00111C                     __end_ofPL24:
  8517                           	opt stack 0
  8518                           tblptru	equ	0xFF8
  8519                           tblptrh	equ	0xFF7
  8520                           tblptrl	equ	0xFF6
  8521                           tablat	equ	0xFF5
  8522                           prodl	equ	0xFF3
  8523                           intcon	equ	0xFF2
  8524                           intcon2	equ	0xFF1
  8525                           intcon3	equ	0xFF0
  8526                           postinc0	equ	0xFEE
  8527                           wreg	equ	0xFE8
  8528                           postdec1	equ	0xFE5
  8529                           fsr1l	equ	0xFE1
  8530                           indf2	equ	0xFDF
  8531                           postinc2	equ	0xFDE
  8532                           postdec2	equ	0xFDD
  8533                           fsr2h	equ	0xFDA
  8534                           fsr2l	equ	0xFD9
  8535                           status	equ	0xFD8
  8536                           
  8537 ;; *************** function _cb_task *****************
  8538 ;; Defined at:
  8539 ;;		line 38 in file ".\src\cb.c"
  8540 ;; Parameters:    Size  Location     Type
  8541 ;;  task_           1   32[COMRAM] PTR struct task
  8542 ;;		 -> task_list(72), 
  8543 ;; Auto vars:     Size  Location     Type
  8544 ;;  zz_t            2   35[COMRAM] unsigned int 
  8545 ;; Return value:  Size  Location     Type
  8546 ;;                  1    wreg      void 
  8547 ;; Registers used:
  8548 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8549 ;; Tracked objects:
  8550 ;;		On entry : 3F/0
  8551 ;;		On exit  : 0/0
  8552 ;;		Unchanged: 0/0
  8553 ;; Data sizes:     COMRAM   BANK0
  8554 ;;      Params:         1       0
  8555 ;;      Locals:         2       0
  8556 ;;      Temps:          2       0
  8557 ;;      Totals:         5       0
  8558 ;;Total ram usage:        5 bytes
  8559 ;; Hardware stack levels used:    1
  8560 ;; Hardware stack levels required when called:    4
  8561 ;; This function calls:
  8562 ;;		_add_task_id
  8563 ;;		_get_load
  8564 ;; This function is called by:
  8565 ;;		_main
  8566 ;;		_find_task
  8567 ;; This function uses a non-reentrant model
  8568 ;;
  8569                           
  8570                           	psect	text29
  8571  00159E                     __ptext29:
  8572                           	opt stack 0
  8573  00159E                     _cb_task:
  8574                           	opt stack 2
  8575                           
  8576                           ; BSR set to: 0
  8577                           ;cb.c: 40: if(PA0&&(PINA4==0))
  8578                           
  8579                           ;incstack = 0
  8580  00159E  B080               	btfsc	3968,0,c	;volatile
  8581                           
  8582                           ; BSR set to: 0
  8583  0015A0  B886               	btfsc	3974,4,c	;volatile
  8584  0015A2  D009               	goto	l2022
  8585                           
  8586                           ; BSR set to: 0
  8587                           ;cb.c: 41: {
  8588                           ;cb.c: 42: if(cb_o!=PINB1)
  8589  0015A4  0E00               	movlw	0
  8590  0015A6  B287               	btfsc	3975,1,c	;volatile
  8591  0015A8  0E01               	movlw	1
  8592  0015AA  1839               	xorwf	_cb_o,w,c
  8593  0015AC  E003               	bz	l2023
  8594                           
  8595                           ; BSR set to: 0
  8596                           ;cb.c: 43: {
  8597                           ;cb.c: 44: zz_begin=1;
  8598  0015AE  0E01               	movlw	1
  8599  0015B0  6E3B               	movwf	_zz_begin,c
  8600                           
  8601                           ; BSR set to: 0
  8602                           ;cb.c: 45: zz_p=0;
  8603  0015B2  6A3A               	clrf	_zz_p,c
  8604  0015B4                     l2023:
  8605                           
  8606                           ; BSR set to: 0
  8607                           ;cb.c: 49: }
  8608                           ;cb.c: 50: cb_o=PINB1;
  8609  0015B4  D83A               	call	PL46	;call to abstracted procedure
  8610  0015B6                     l2022:
  8611                           
  8612                           ; BSR set to: 0
  8613                           ;cb.c: 51: }
  8614                           ;cb.c: 52: if(zz_begin)
  8615  0015B6  503B               	movf	_zz_begin,w,c
  8616  0015B8  B4D8               	btfsc	status,2,c
  8617  0015BA  0012               	return	
  8618                           
  8619                           ; BSR set to: 0
  8620                           ;cb.c: 53: {
  8621                           ;cb.c: 54: zz_[zz_p]=get_load();
  8622  0015BC  D83B               	call	PL80	;call to abstracted procedure
  8623  0015BE  EC3B  F00C         	call	_get_load	;wreg free
  8624  0015C2  6EDF               	movwf	indf2,c
  8625                           
  8626                           ;cb.c: 55: yd=(zz_[zz_p]==0)?1:0;
  8627  0015C4  D837               	call	PL80	;call to abstracted procedure
  8628  0015C6  50DF               	movf	indf2,w,c
  8629  0015C8  0E01               	movlw	1
  8630  0015CA  A4D8               	btfss	status,2,c
  8631  0015CC  0E00               	movlw	0
  8632  0015CE  6E38               	movwf	_yd,c
  8633                           
  8634                           ;cb.c: 56: zz_p++;
  8635  0015D0  2A3A               	incf	_zz_p,f,c
  8636                           
  8637                           ;cb.c: 57: if(zz_p>=6)
  8638  0015D2  0E05               	movlw	5
  8639  0015D4  643A               	cpfsgt	_zz_p,c
  8640  0015D6  0C05               	retlw	5
  8641                           
  8642                           ;cb.c: 58: {
  8643                           ;cb.c: 59: unsigned int zz_t=zz_[2]+zz_[3]+zz_[4]+zz_[5];
  8644  0015D8  0100               	movlb	0	; () banked
  8645  0015DA  5183               	movf	(_zz_+3)& (0+255),w,b
  8646  0015DC  C082  F05D         	movff	_zz_+2,??_cb_task
  8647  0015E0  6A5E               	clrf	(??_cb_task+1)& (0+255),c
  8648  0015E2  265D               	addwf	??_cb_task,f,c
  8649  0015E4  0E00               	movlw	0
  8650  0015E6  225E               	addwfc	??_cb_task+1,f,c
  8651  0015E8  5184               	movf	(_zz_+4)& (0+255),w,b
  8652  0015EA  265D               	addwf	??_cb_task,f,c
  8653  0015EC  0E00               	movlw	0
  8654  0015EE  225E               	addwfc	??_cb_task+1,f,c
  8655  0015F0  5185               	movf	(_zz_+5)& (0+255),w,b
  8656  0015F2  245D               	addwf	??_cb_task,w,c
  8657  0015F4  6E5F               	movwf	cb_task@zz_t,c
  8658  0015F6  0E00               	movlw	0
  8659  0015F8  205E               	addwfc	??_cb_task+1,w,c
  8660  0015FA  6E60               	movwf	cb_task@zz_t+1,c
  8661                           
  8662                           ;cb.c: 60: zz=zz_t>>2;
  8663  0015FC  C05F  F05D         	movff	cb_task@zz_t,??_cb_task
  8664  001600  C060  F05E         	movff	cb_task@zz_t+1,??_cb_task+1
  8665  001604  90D8               	bcf	status,0,c
  8666  001606  325E               	rrcf	??_cb_task+1,f,c
  8667  001608  325D               	rrcf	??_cb_task,f,c
  8668  00160A  90D8               	bcf	status,0,c
  8669  00160C  325E               	rrcf	??_cb_task+1,f,c
  8670  00160E  325D               	rrcf	??_cb_task,f,c
  8671  001610  505D               	movf	??_cb_task,w,c
  8672  001612  6E7A               	movwf	_zz,c
  8673                           
  8674                           ; BSR set to: 0
  8675                           ;cb.c: 61: zz_begin=0;
  8676  001614  6A3B               	clrf	_zz_begin,c
  8677                           
  8678                           ; BSR set to: 0
  8679                           ;cb.c: 62: add_task_id(0,50,53,ui_id);
  8680  001616  0E32               	movlw	50
  8681  001618  EC17  F007         	call	PL6	;call to abstracted procedure
  8682  00161C  0E35               	movlw	53
  8683  00161E  6E41               	movwf	add_task_id@suc_max,c
  8684  001620  C07B  F042         	movff	_ui_id,add_task_id@task_id
  8685  001624  0E00               	movlw	0
  8686  001626  EF1F  F00B         	goto	_add_task_id
  8687  00162A                     __end_of_cb_task:
  8688                           	opt stack 0
  8689  00162A                     PL46:
  8690                           	opt stack 3
  8691  00162A  0E00               	movlw	0
  8692  00162C  B287               	btfsc	3975,1,c	;volatile
  8693  00162E  0E01               	movlw	1
  8694  001630  6E39               	movwf	_cb_o,c
  8695  001632  0012               	return	
  8696  001634                     __end_ofPL46:
  8697                           	opt stack 0
  8698  001634                     PL80:
  8699                           	opt stack 2
  8700  001634  503A               	movf	_zz_p,w,c
  8701  001636  0F80               	addlw	low _zz_
  8702  001638  6ED9               	movwf	fsr2l,c
  8703  00163A  6ADA               	clrf	fsr2h,c
  8704  00163C  0012               	return	
  8705  00163E                     __end_ofPL80:
  8706                           	opt stack 0
  8707                           tblptru	equ	0xFF8
  8708                           tblptrh	equ	0xFF7
  8709                           tblptrl	equ	0xFF6
  8710                           tablat	equ	0xFF5
  8711                           prodl	equ	0xFF3
  8712                           intcon	equ	0xFF2
  8713                           intcon2	equ	0xFF1
  8714                           intcon3	equ	0xFF0
  8715                           postinc0	equ	0xFEE
  8716                           wreg	equ	0xFE8
  8717                           postdec1	equ	0xFE5
  8718                           fsr1l	equ	0xFE1
  8719                           indf2	equ	0xFDF
  8720                           postinc2	equ	0xFDE
  8721                           postdec2	equ	0xFDD
  8722                           fsr2h	equ	0xFDA
  8723                           fsr2l	equ	0xFD9
  8724                           status	equ	0xFD8
  8725                           
  8726 ;; *************** function _get_load *****************
  8727 ;; Defined at:
  8728 ;;		line 6 in file ".\src\cb.c"
  8729 ;; Parameters:    Size  Location     Type
  8730 ;;		None
  8731 ;; Auto vars:     Size  Location     Type
  8732 ;;  temp            4   28[COMRAM] unsigned long 
  8733 ;; Return value:  Size  Location     Type
  8734 ;;                  1    wreg      unsigned char 
  8735 ;; Registers used:
  8736 ;;		wreg, status,2, status,0, cstack
  8737 ;; Tracked objects:
  8738 ;;		On entry : 3F/0
  8739 ;;		On exit  : 0/0
  8740 ;;		Unchanged: 0/0
  8741 ;; Data sizes:     COMRAM   BANK0
  8742 ;;      Params:         0       0
  8743 ;;      Locals:         4       0
  8744 ;;      Temps:          2       0
  8745 ;;      Totals:         6       0
  8746 ;;Total ram usage:        6 bytes
  8747 ;; Hardware stack levels used:    1
  8748 ;; Hardware stack levels required when called:    3
  8749 ;; This function calls:
  8750 ;;		___lldiv
  8751 ;;		___lmul
  8752 ;; This function is called by:
  8753 ;;		_cb_task
  8754 ;;		_si_mic_task
  8755 ;; This function uses a non-reentrant model
  8756 ;;
  8757                           
  8758                           	psect	text30
  8759  001876                     __ptext30:
  8760                           	opt stack 0
  8761  001876                     _get_load:
  8762                           	opt stack 3
  8763                           
  8764                           ; BSR set to: 0
  8765                           ;cb.c: 9: PB0=0;
  8766                           
  8767                           ;incstack = 0
  8768  001876  9081               	bcf	3969,0,c	;volatile
  8769                           
  8770                           ; BSR set to: 0
  8771                           ;cb.c: 10: _delay((unsigned long)((10)*(16000000/4000000)));
  8772  001878  0E0D               	movlw	13
  8773  00187A                     u11927:
  8774  00187A  2EE8               	decfsz	wreg,f,c
  8775  00187C  D7FE               	bra	u11927
  8776  00187E  F000               	nop	
  8777                           
  8778                           ;cb.c: 14: ADCON1=0x60;
  8779                           
  8780                           ;cb.c: 16: ADCON0=0x15;
  8781  001880  ECEB  F004         	call	PL30	;call to abstracted procedure
  8782                           
  8783                           ;cb.c: 17: ADIF=0;
  8784                           
  8785                           ;cb.c: 18: ADIE=0;
  8786                           
  8787                           ;cb.c: 19: GO=1;
  8788                           
  8789                           ;cb.c: 20: while(GO==1);
  8790                           
  8791                           ;cb.c: 21: ADIF=0;
  8792                           
  8793                           ;cb.c: 22: temp=((ADRESH&0x0f)<<8)|ADRESL;
  8794  001884  ECD5  F004         	call	PL16	;call to abstracted procedure
  8795  001888  6E57               	movwf	(??_get_load+1)& (0+255),c
  8796  00188A  6A56               	clrf	??_get_load& (0+255),c
  8797  00188C  50A2               	movf	4002,w,c	;volatile
  8798  00188E  1256               	iorwf	??_get_load,f,c
  8799  001890  0E00               	movlw	0
  8800  001892  C056  F058         	movff	??_get_load,get_load@temp
  8801  001896  C057  F059         	movff	??_get_load+1,get_load@temp+1
  8802  00189A  BE59               	btfsc	get_load@temp+1,7,c
  8803  00189C  0EFF               	movlw	-1
  8804  00189E  6E5A               	movwf	get_load@temp+2,c
  8805  0018A0  6E5B               	movwf	get_load@temp+3,c
  8806                           
  8807                           ;cb.c: 23: PB0=1;
  8808  0018A2  8081               	bsf	3969,0,c	;volatile
  8809                           
  8810                           ;cb.c: 24: temp=510ul*temp/(4095ul-temp);
  8811  0018A4  C058  F03D         	movff	get_load@temp,___lmul@multiplier
  8812  0018A8  C059  F03E         	movff	get_load@temp+1,___lmul@multiplier+1
  8813  0018AC  C05A  F03F         	movff	get_load@temp+2,___lmul@multiplier+2
  8814  0018B0  C05B  F040         	movff	get_load@temp+3,___lmul@multiplier+3
  8815  0018B4  0EFE               	movlw	254
  8816  0018B6  6E41               	movwf	___lmul@multiplicand,c
  8817  0018B8  0E01               	movlw	1
  8818  0018BA  6E42               	movwf	___lmul@multiplicand+1,c
  8819  0018BC  6A43               	clrf	___lmul@multiplicand+2,c
  8820  0018BE  6A44               	clrf	___lmul@multiplicand+3,c
  8821  0018C0  EC4C  F00E         	call	___lmul	;wreg free
  8822  0018C4  ECDF  F004         	call	PL26	;call to abstracted procedure
  8823  0018C8  5058               	movf	get_load@temp,w,c
  8824  0018CA  08FF               	sublw	255
  8825  0018CC  6E4D               	movwf	___lldiv@divisor,c
  8826  0018CE  0E0F               	movlw	15
  8827  0018D0  5459               	subfwb	get_load@temp+1,w,c
  8828  0018D2  6E4E               	movwf	___lldiv@divisor+1,c
  8829  0018D4  0E00               	movlw	0
  8830  0018D6  545A               	subfwb	get_load@temp+2,w,c
  8831  0018D8  6E4F               	movwf	___lldiv@divisor+2,c
  8832  0018DA  0E00               	movlw	0
  8833  0018DC  545B               	subfwb	get_load@temp+3,w,c
  8834  0018DE  6E50               	movwf	___lldiv@divisor+3,c
  8835  0018E0  ECF7  F00C         	call	___lldiv	;wreg free
  8836  0018E4  C049  F058         	movff	?___lldiv,get_load@temp
  8837  0018E8  C04A  F059         	movff	?___lldiv+1,get_load@temp+1
  8838  0018EC  C04B  F05A         	movff	?___lldiv+2,get_load@temp+2
  8839  0018F0  C04C  F05B         	movff	?___lldiv+3,get_load@temp+3
  8840                           
  8841                           ;cb.c: 26: return temp;
  8842  0018F4  5058               	movf	get_load@temp,w,c
  8843  0018F6  0012               	return		;funcret
  8844  0018F8                     __end_of_get_load:
  8845                           	opt stack 0
  8846                           tblptru	equ	0xFF8
  8847                           tblptrh	equ	0xFF7
  8848                           tblptrl	equ	0xFF6
  8849                           tablat	equ	0xFF5
  8850                           prodl	equ	0xFF3
  8851                           intcon	equ	0xFF2
  8852                           intcon2	equ	0xFF1
  8853                           intcon3	equ	0xFF0
  8854                           postinc0	equ	0xFEE
  8855                           wreg	equ	0xFE8
  8856                           postdec1	equ	0xFE5
  8857                           fsr1l	equ	0xFE1
  8858                           indf2	equ	0xFDF
  8859                           postinc2	equ	0xFDE
  8860                           postdec2	equ	0xFDD
  8861                           fsr2h	equ	0xFDA
  8862                           fsr2l	equ	0xFD9
  8863                           status	equ	0xFD8
  8864                           
  8865 ;; *************** function ___lmul *****************
  8866 ;; Defined at:
  8867 ;;		line 15 in file "c:\Users\Administrator\.vscode\extensions\ad.adide-1.1.7\resource\Microchip\xc8\v1.41\sources\commo
      +n\Umul32.c"
  8868 ;; Parameters:    Size  Location     Type
  8869 ;;  multiplier      4    1[COMRAM] unsigned long 
  8870 ;;  multiplicand    4    5[COMRAM] unsigned long 
  8871 ;; Auto vars:     Size  Location     Type
  8872 ;;  product         4    9[COMRAM] unsigned long 
  8873 ;; Return value:  Size  Location     Type
  8874 ;;                  4    1[COMRAM] unsigned long 
  8875 ;; Registers used:
  8876 ;;		wreg, status,2, status,0
  8877 ;; Tracked objects:
  8878 ;;		On entry : 0/0
  8879 ;;		On exit  : 0/0
  8880 ;;		Unchanged: 0/0
  8881 ;; Data sizes:     COMRAM   BANK0
  8882 ;;      Params:         8       0
  8883 ;;      Locals:         4       0
  8884 ;;      Temps:          0       0
  8885 ;;      Totals:        12       0
  8886 ;;Total ram usage:       12 bytes
  8887 ;; Hardware stack levels used:    1
  8888 ;; Hardware stack levels required when called:    2
  8889 ;; This function calls:
  8890 ;;		Nothing
  8891 ;; This function is called by:
  8892 ;;		_get_load
  8893 ;;		_main
  8894 ;; This function uses a non-reentrant model
  8895 ;;
  8896                           
  8897                           	psect	text31
  8898  001C98                     __ptext31:
  8899                           	opt stack 0
  8900  001C98                     ___lmul:
  8901                           	opt stack 3
  8902                           
  8903                           ;incstack = 0
  8904  001C98  6A45               	clrf	___lmul@product,c
  8905  001C9A  6A46               	clrf	___lmul@product+1,c
  8906  001C9C  6A47               	clrf	___lmul@product+2,c
  8907  001C9E  6A48               	clrf	___lmul@product+3,c
  8908  001CA0                     l12755:
  8909  001CA0  A03D               	btfss	___lmul@multiplier,0,c
  8910  001CA2  D008               	goto	l17549
  8911  001CA4  5041               	movf	___lmul@multiplicand,w,c
  8912  001CA6  2645               	addwf	___lmul@product,f,c
  8913  001CA8  5042               	movf	___lmul@multiplicand+1,w,c
  8914  001CAA  2246               	addwfc	___lmul@product+1,f,c
  8915  001CAC  5043               	movf	___lmul@multiplicand+2,w,c
  8916  001CAE  2247               	addwfc	___lmul@product+2,f,c
  8917  001CB0  5044               	movf	___lmul@multiplicand+3,w,c
  8918  001CB2  2248               	addwfc	___lmul@product+3,f,c
  8919  001CB4                     l17549:
  8920  001CB4  90D8               	bcf	status,0,c
  8921  001CB6  3641               	rlcf	___lmul@multiplicand,f,c
  8922  001CB8  3642               	rlcf	___lmul@multiplicand+1,f,c
  8923  001CBA  3643               	rlcf	___lmul@multiplicand+2,f,c
  8924  001CBC  3644               	rlcf	___lmul@multiplicand+3,f,c
  8925  001CBE  90D8               	bcf	status,0,c
  8926  001CC0  3240               	rrcf	___lmul@multiplier+3,f,c
  8927  001CC2  323F               	rrcf	___lmul@multiplier+2,f,c
  8928  001CC4  323E               	rrcf	___lmul@multiplier+1,f,c
  8929  001CC6  323D               	rrcf	___lmul@multiplier,f,c
  8930  001CC8  503D               	movf	___lmul@multiplier,w,c
  8931  001CCA  103E               	iorwf	___lmul@multiplier+1,w,c
  8932  001CCC  103F               	iorwf	___lmul@multiplier+2,w,c
  8933  001CCE  1040               	iorwf	___lmul@multiplier+3,w,c
  8934  001CD0  E1E7               	bnz	l12755
  8935  001CD2  C045  F03D         	movff	___lmul@product,?___lmul
  8936  001CD6  C046  F03E         	movff	___lmul@product+1,?___lmul+1
  8937  001CDA  C047  F03F         	movff	___lmul@product+2,?___lmul+2
  8938  001CDE  C048  F040         	movff	___lmul@product+3,?___lmul+3
  8939  001CE2  0012               	return		;funcret
  8940  001CE4                     __end_of___lmul:
  8941                           	opt stack 0
  8942                           tblptru	equ	0xFF8
  8943                           tblptrh	equ	0xFF7
  8944                           tblptrl	equ	0xFF6
  8945                           tablat	equ	0xFF5
  8946                           prodl	equ	0xFF3
  8947                           intcon	equ	0xFF2
  8948                           intcon2	equ	0xFF1
  8949                           intcon3	equ	0xFF0
  8950                           postinc0	equ	0xFEE
  8951                           wreg	equ	0xFE8
  8952                           postdec1	equ	0xFE5
  8953                           fsr1l	equ	0xFE1
  8954                           indf2	equ	0xFDF
  8955                           postinc2	equ	0xFDE
  8956                           postdec2	equ	0xFDD
  8957                           fsr2h	equ	0xFDA
  8958                           fsr2l	equ	0xFD9
  8959                           status	equ	0xFD8
  8960                           
  8961 ;; *************** function _add_task_id *****************
  8962 ;; Defined at:
  8963 ;;		line 42 in file ".\src\task.c"
  8964 ;; Parameters:    Size  Location     Type
  8965 ;;  id              1    wreg     unsigned char 
  8966 ;;  interval_ms     4    1[COMRAM] unsigned long 
  8967 ;;  suc_max         1    5[COMRAM] unsigned char 
  8968 ;;  task_id         1    6[COMRAM] char 
  8969 ;; Auto vars:     Size  Location     Type
  8970 ;;  id              1   11[COMRAM] unsigned char 
  8971 ;;  interval_tic    2   12[COMRAM] unsigned int 
  8972 ;; Return value:  Size  Location     Type
  8973 ;;                  1    wreg      char 
  8974 ;; Registers used:
  8975 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8976 ;; Tracked objects:
  8977 ;;		On entry : 0/0
  8978 ;;		On exit  : 0/0
  8979 ;;		Unchanged: 0/0
  8980 ;; Data sizes:     COMRAM   BANK0
  8981 ;;      Params:         6       0
  8982 ;;      Locals:         3       0
  8983 ;;      Temps:          4       0
  8984 ;;      Totals:        13       0
  8985 ;;Total ram usage:       13 bytes
  8986 ;; Hardware stack levels used:    1
  8987 ;; Hardware stack levels required when called:    2
  8988 ;; This function calls:
  8989 ;;		Nothing
  8990 ;; This function is called by:
  8991 ;;		_cb_task
  8992 ;;		_chrg_task
  8993 ;;		_key_task
  8994 ;;		_main
  8995 ;;		_si_mic_task
  8996 ;;		_ui_cb
  8997 ;;		_ui_dl_getup
  8998 ;;		_ui_ts_on
  8999 ;;		_ui_ts_off
  9000 ;; This function uses a non-reentrant model
  9001 ;;
  9002                           
  9003                           	psect	text32
  9004  00163E                     __ptext32:
  9005                           	opt stack 0
  9006  00163E                     _add_task_id:
  9007                           	opt stack 4
  9008                           
  9009                           ;incstack = 0
  9010                           ;add_task_id@id stored from wreg
  9011  00163E  6E47               	movwf	add_task_id@id,c
  9012                           
  9013                           ;task.c: 43: unsigned int interval_ticks = interval_ms >>3;
  9014  001640  C03D  F043         	movff	add_task_id@interval_ms,??_add_task_id
  9015  001644  C03E  F044         	movff	add_task_id@interval_ms+1,??_add_task_id+1
  9016  001648  C03F  F045         	movff	add_task_id@interval_ms+2,??_add_task_id+2
  9017  00164C  C040  F046         	movff	add_task_id@interval_ms+3,??_add_task_id+3
  9018  001650  0E04               	movlw	4
  9019  001652  D005               	goto	u8220
  9020  001654                     u8225:
  9021  001654  90D8               	bcf	status,0,c
  9022  001656  3246               	rrcf	??_add_task_id+3,f,c
  9023  001658  3245               	rrcf	??_add_task_id+2,f,c
  9024  00165A  3244               	rrcf	??_add_task_id+1,f,c
  9025  00165C  3243               	rrcf	??_add_task_id,f,c
  9026  00165E                     u8220:
  9027  00165E  2EE8               	decfsz	wreg,f,c
  9028  001660  D7F9               	goto	u8225
  9029  001662  C043  F048         	movff	??_add_task_id,add_task_id@interval_ticks
  9030  001666  C044  F049         	movff	??_add_task_id+1,add_task_id@interval_ticks+1
  9031                           
  9032                           ;task.c: 46: if(interval_ticks == 0 || task_id<0)
  9033  00166A  5048               	movf	add_task_id@interval_ticks,w,c
  9034  00166C  1049               	iorwf	add_task_id@interval_ticks+1,w,c
  9035  00166E  A4D8               	btfss	status,2,c
  9036  001670  BE42               	btfsc	add_task_id@task_id,7,c
  9037  001672  0012               	return	
  9038                           
  9039                           ;task.c: 51: GIE=0;PEIE=0;
  9040  001674  9EF2               	bcf	intcon,7,c	;volatile
  9041  001676  9CF2               	bcf	intcon,6,c	;volatile
  9042                           
  9043                           ;task.c: 53: task_list[task_id].id = id;
  9044  001678  5042               	movf	add_task_id@task_id,w,c
  9045  00167A  EC88  F008         	call	PL24	;call to abstracted procedure
  9046  00167E  C047  FFDF         	movff	add_task_id@id,indf2
  9047                           
  9048                           ;task.c: 54: task_list[task_id].interval = interval_ticks;
  9049  001682  5042               	movf	add_task_id@task_id,w,c
  9050  001684  0D09               	mullw	9
  9051  001686  50F3               	movf	prodl,w,c
  9052  001688  0F87               	addlw	low (_task_list+1)
  9053                           
  9054                           ;task.c: 55: task_list[task_id].counter = interval_ticks;
  9055  00168A  D81B               	call	PL34	;call to abstracted procedure
  9056  00168C  0D09               	mullw	9
  9057  00168E  50F3               	movf	prodl,w,c
  9058  001690  0F89               	addlw	low (_task_list+3)
  9059                           
  9060                           ;task.c: 56: task_list[task_id].active = 1;
  9061  001692  D817               	call	PL34	;call to abstracted procedure
  9062  001694  EC1C  F007         	call	PL22	;call to abstracted procedure
  9063                           
  9064                           ;task.c: 57: task_list[task_id].ready = 1;
  9065  001698  D81C               	call	PL62	;call to abstracted procedure
  9066  00169A  ECED  F00E         	call	PL58	;call to abstracted procedure
  9067                           
  9068                           ;task.c: 58: task_list[task_id].maxSuc=suc_max;
  9069  00169E  D819               	call	PL62	;call to abstracted procedure
  9070  0016A0  0D09               	mullw	9
  9071  0016A2  50F3               	movf	prodl,w,c
  9072  0016A4  0F8D               	addlw	low (_task_list+7)
  9073  0016A6  6ED9               	movwf	fsr2l,c
  9074  0016A8  6ADA               	clrf	fsr2h,c
  9075  0016AA  C041  FFDF         	movff	add_task_id@suc_max,indf2
  9076                           
  9077                           ;task.c: 59: task_list[task_id].sucCnt=0;
  9078  0016AE  5042               	movf	add_task_id@task_id,w,c
  9079  0016B0  0D09               	mullw	9
  9080  0016B2  50F3               	movf	prodl,w,c
  9081  0016B4  0F8E               	addlw	low (_task_list+8)
  9082  0016B6  6ED9               	movwf	fsr2l,c
  9083  0016B8  6ADA               	clrf	fsr2h,c
  9084  0016BA  6ADF               	clrf	indf2,c
  9085                           
  9086                           ;task.c: 61: GIE=1;PEIE=1;
  9087  0016BC  8EF2               	bsf	intcon,7,c	;volatile
  9088  0016BE  8CF2               	bsf	intcon,6,c	;volatile
  9089  0016C0  0C00               	retlw	0	;funcret
  9090  0016C2                     __end_of_add_task_id:
  9091                           	opt stack 0
  9092  0016C2                     PL34:
  9093                           	opt stack 4
  9094  0016C2  6ED9               	movwf	fsr2l,c
  9095  0016C4  6ADA               	clrf	fsr2h,c
  9096  0016C6  C048  FFDE         	movff	add_task_id@interval_ticks,postinc2
  9097  0016CA  C049  FFDD         	movff	add_task_id@interval_ticks+1,postdec2
  9098  0016CE  5042               	movf	add_task_id@task_id,w,c
  9099  0016D0  0012               	return	
  9100  0016D2                     __end_ofPL34:
  9101                           	opt stack 0
  9102  0016D2                     PL62:
  9103                           	opt stack 4
  9104  0016D2  0E01               	movlw	1
  9105  0016D4  6EDF               	movwf	indf2,c
  9106  0016D6  5042               	movf	add_task_id@task_id,w,c
  9107  0016D8  0012               	return	
  9108  0016DA                     __end_ofPL62:
  9109                           	opt stack 0
  9110                           tblptru	equ	0xFF8
  9111                           tblptrh	equ	0xFF7
  9112                           tblptrl	equ	0xFF6
  9113                           tablat	equ	0xFF5
  9114                           prodl	equ	0xFF3
  9115                           intcon	equ	0xFF2
  9116                           intcon2	equ	0xFF1
  9117                           intcon3	equ	0xFF0
  9118                           postinc0	equ	0xFEE
  9119                           wreg	equ	0xFE8
  9120                           postdec1	equ	0xFE5
  9121                           fsr1l	equ	0xFE1
  9122                           indf2	equ	0xFDF
  9123                           postinc2	equ	0xFDE
  9124                           postdec2	equ	0xFDD
  9125                           fsr2h	equ	0xFDA
  9126                           fsr2l	equ	0xFD9
  9127                           status	equ	0xFD8
  9128                           
  9129 ;; *************** function _bat_task *****************
  9130 ;; Defined at:
  9131 ;;		line 35 in file ".\src\bat.c"
  9132 ;; Parameters:    Size  Location     Type
  9133 ;;  task_           1   34[COMRAM] PTR struct task
  9134 ;;		 -> task_list(72), 
  9135 ;; Auto vars:     Size  Location     Type
  9136 ;;  b               2   37[COMRAM] unsigned int 
  9137 ;; Return value:  Size  Location     Type
  9138 ;;                  1    wreg      void 
  9139 ;; Registers used:
  9140 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9141 ;; Tracked objects:
  9142 ;;		On entry : 3F/0
  9143 ;;		On exit  : 0/0
  9144 ;;		Unchanged: 0/0
  9145 ;; Data sizes:     COMRAM   BANK0
  9146 ;;      Params:         1       0
  9147 ;;      Locals:         2       0
  9148 ;;      Temps:          2       0
  9149 ;;      Totals:         5       0
  9150 ;;Total ram usage:        5 bytes
  9151 ;; Hardware stack levels used:    1
  9152 ;; Hardware stack levels required when called:    4
  9153 ;; This function calls:
  9154 ;;		_get_bat
  9155 ;; This function is called by:
  9156 ;;		_main
  9157 ;;		_find_task
  9158 ;; This function uses a non-reentrant model
  9159 ;;
  9160                           
  9161                           	psect	text33
  9162  0018F8                     __ptext33:
  9163                           	opt stack 0
  9164  0018F8                     _bat_task:
  9165                           	opt stack 2
  9166                           
  9167                           ; BSR set to: 0
  9168                           ;bat.c: 38: if(PA0&&(PINA5==0)&&(PINA4==0)&&(task_list[ui_id].active==0))
  9169                           
  9170                           ;incstack = 0
  9171  0018F8  B080               	btfsc	3968,0,c	;volatile
  9172                           
  9173                           ; BSR set to: 0
  9174  0018FA  BA86               	btfsc	3974,5,c	;volatile
  9175  0018FC  0012               	return	
  9176                           
  9177                           ; BSR set to: 0
  9178  0018FE  B886               	btfsc	3974,4,c	;volatile
  9179  001900  0012               	return	
  9180                           
  9181                           ; BSR set to: 0
  9182  001902  507B               	movf	_ui_id,w,c
  9183  001904  EC1C  F007         	call	PL22	;call to abstracted procedure
  9184  001908  50DF               	movf	indf2,w,c
  9185  00190A  A4D8               	btfss	status,2,c
  9186  00190C  0012               	return	
  9187                           
  9188                           ; BSR set to: 0
  9189                           ;bat.c: 39: {
  9190                           ;bat.c: 40: b=get_bat();
  9191  00190E  ECF7  F00D         	call	_get_bat	;wreg free
  9192  001912  C056  F061         	movff	?_get_bat,bat_task@b
  9193  001916  C057  F062         	movff	?_get_bat+1,bat_task@b+1
  9194                           
  9195                           ;bat.c: 42: if((bat.bat>b)||((bat.bat+50)<=b))
  9196  00191A  5071               	movf	_bat+1,w,c
  9197  00191C  5C61               	subwf	bat_task@b,w,c
  9198  00191E  5072               	movf	_bat+2,w,c
  9199  001920  5862               	subwfb	bat_task@b+1,w,c
  9200  001922  E30B               	bnc	l1002
  9201  001924  0E32               	movlw	50
  9202  001926  2471               	addwf	_bat+1,w,c
  9203  001928  6E5F               	movwf	??_bat_task& (0+255),c
  9204  00192A  0E00               	movlw	0
  9205  00192C  2072               	addwfc	_bat+2,w,c
  9206  00192E  6E60               	movwf	(??_bat_task+1)& (0+255),c
  9207  001930  505F               	movf	??_bat_task,w,c
  9208  001932  5C61               	subwf	bat_task@b,w,c
  9209  001934  5060               	movf	??_bat_task+1,w,c
  9210  001936  5862               	subwfb	bat_task@b+1,w,c
  9211  001938  E304               	bnc	l17903
  9212  00193A                     l1002:
  9213                           
  9214                           ;bat.c: 43: {
  9215                           ;bat.c: 44: bat.bat=b;
  9216  00193A  C061  F071         	movff	bat_task@b,_bat+1
  9217  00193E  C062  F072         	movff	bat_task@b+1,_bat+2
  9218  001942                     l17903:
  9219                           
  9220                           ;bat.c: 45: }
  9221                           ;bat.c: 46: if( bat.bat<=317)
  9222  001942  EC27  F005         	call	PL86	;call to abstracted procedure
  9223  001946  E202               	bc	l17907
  9224                           
  9225                           ;bat.c: 47: {
  9226                           ;bat.c: 48: bat.dian=0;
  9227  001948  6A70               	clrf	_bat,c
  9228                           
  9229                           ;bat.c: 50: }
  9230  00194A  0012               	return	
  9231  00194C                     l17907:
  9232                           
  9233                           ;bat.c: 51: else if ( bat.bat<=345)
  9234  00194C  EC2C  F005         	call	PL88	;call to abstracted procedure
  9235  001950  E203               	bc	l17911
  9236                           
  9237                           ;bat.c: 52: {
  9238                           ;bat.c: 53: bat.dian=1;
  9239  001952  0E01               	movlw	1
  9240  001954  6E70               	movwf	_bat,c
  9241                           
  9242                           ;bat.c: 54: }
  9243  001956  0C01               	retlw	1
  9244  001958                     l17911:
  9245                           
  9246                           ;bat.c: 55: else if ( bat.bat<=370)
  9247  001958  EC13  F005         	call	PL72	;call to abstracted procedure
  9248  00195C  E203               	bc	l17915
  9249                           
  9250                           ;bat.c: 56: {
  9251                           ;bat.c: 57: bat.dian=2;
  9252  00195E  0E02               	movlw	2
  9253  001960  6E70               	movwf	_bat,c
  9254                           
  9255                           ;bat.c: 58: }
  9256  001962  0C02               	retlw	2
  9257  001964                     l17915:
  9258                           
  9259                           ;bat.c: 59: else if ( bat.bat<=390)
  9260  001964  EC18  F005         	call	PL74	;call to abstracted procedure
  9261  001968  E203               	bc	l17919
  9262                           
  9263                           ;bat.c: 60: {
  9264                           ;bat.c: 61: bat.dian=3;
  9265  00196A  0E03               	movlw	3
  9266  00196C  6E70               	movwf	_bat,c
  9267                           
  9268                           ;bat.c: 62: }
  9269  00196E  0C03               	retlw	3
  9270  001970                     l17919:
  9271                           
  9272                           ;bat.c: 63: else
  9273                           ;bat.c: 64: {
  9274                           ;bat.c: 65: bat.dian=4;
  9275  001970  0E04               	movlw	4
  9276  001972  6E70               	movwf	_bat,c
  9277  001974  0C04               	retlw	4	;funcret
  9278  001976                     __end_of_bat_task:
  9279                           	opt stack 0
  9280                           tblptru	equ	0xFF8
  9281                           tblptrh	equ	0xFF7
  9282                           tblptrl	equ	0xFF6
  9283                           tablat	equ	0xFF5
  9284                           prodl	equ	0xFF3
  9285                           intcon	equ	0xFF2
  9286                           intcon2	equ	0xFF1
  9287                           intcon3	equ	0xFF0
  9288                           postinc0	equ	0xFEE
  9289                           wreg	equ	0xFE8
  9290                           postdec1	equ	0xFE5
  9291                           fsr1l	equ	0xFE1
  9292                           indf2	equ	0xFDF
  9293                           postinc2	equ	0xFDE
  9294                           postdec2	equ	0xFDD
  9295                           fsr2h	equ	0xFDA
  9296                           fsr2l	equ	0xFD9
  9297                           status	equ	0xFD8
  9298                           
  9299 ;; *************** function _get_bat *****************
  9300 ;; Defined at:
  9301 ;;		line 7 in file ".\src\bat.c"
  9302 ;; Parameters:    Size  Location     Type
  9303 ;;		None
  9304 ;; Auto vars:     Size  Location     Type
  9305 ;;  ttt             4   30[COMRAM] unsigned long 
  9306 ;; Return value:  Size  Location     Type
  9307 ;;                  2   26[COMRAM] unsigned int 
  9308 ;; Registers used:
  9309 ;;		wreg, status,2, status,0, cstack
  9310 ;; Tracked objects:
  9311 ;;		On entry : 0/0
  9312 ;;		On exit  : 0/0
  9313 ;;		Unchanged: 0/0
  9314 ;; Data sizes:     COMRAM   BANK0
  9315 ;;      Params:         2       0
  9316 ;;      Locals:         4       0
  9317 ;;      Temps:          2       0
  9318 ;;      Totals:         8       0
  9319 ;;Total ram usage:        8 bytes
  9320 ;; Hardware stack levels used:    1
  9321 ;; Hardware stack levels required when called:    3
  9322 ;; This function calls:
  9323 ;;		___lldiv
  9324 ;; This function is called by:
  9325 ;;		_bat_task
  9326 ;;		_chrg_task
  9327 ;;		_main
  9328 ;;		_si_mic_task
  9329 ;; This function uses a non-reentrant model
  9330 ;;
  9331                           
  9332                           	psect	text34
  9333  001BEE                     __ptext34:
  9334                           	opt stack 0
  9335  001BEE                     _get_bat:
  9336                           	opt stack 0
  9337                           
  9338                           ;bat.c: 14: ADCON1=0x60;
  9339                           
  9340                           ;incstack = 0
  9341                           
  9342                           ;bat.c: 16: ADCON0=0x39; ADIF=0; ADIE=0; GO=1; while(GO);
  9343  001BEE  ECE8  F004         	call	PL28	;call to abstracted procedure
  9344                           
  9345                           ;bat.c: 21: ADIF=0;
  9346                           
  9347                           ;bat.c: 22: ttt=((ADRESH&0x0f)<<8)|ADRESL;
  9348  001BF2  ECD5  F004         	call	PL16	;call to abstracted procedure
  9349  001BF6  6E59               	movwf	(??_get_bat+1)& (0+255),c
  9350  001BF8  6A58               	clrf	??_get_bat& (0+255),c
  9351  001BFA  50A2               	movf	4002,w,c	;volatile
  9352  001BFC  1258               	iorwf	??_get_bat,f,c
  9353  001BFE  0E00               	movlw	0
  9354  001C00  C058  F05A         	movff	??_get_bat,get_bat@ttt
  9355  001C04  C059  F05B         	movff	??_get_bat+1,get_bat@ttt+1
  9356  001C08  BE5B               	btfsc	get_bat@ttt+1,7,c
  9357  001C0A  0EFF               	movlw	-1
  9358  001C0C  6E5C               	movwf	get_bat@ttt+2,c
  9359  001C0E  6E5D               	movwf	get_bat@ttt+3,c
  9360                           
  9361                           ;bat.c: 23: ttt=491520ul/ttt;
  9362  001C10  6A49               	clrf	___lldiv@dividend,c
  9363  001C12  0E80               	movlw	128
  9364  001C14  6E4A               	movwf	___lldiv@dividend+1,c
  9365  001C16  0E07               	movlw	7
  9366  001C18  6E4B               	movwf	___lldiv@dividend+2,c
  9367  001C1A  6A4C               	clrf	___lldiv@dividend+3,c
  9368  001C1C  C05A  F04D         	movff	get_bat@ttt,___lldiv@divisor
  9369  001C20  C05B  F04E         	movff	get_bat@ttt+1,___lldiv@divisor+1
  9370  001C24  C05C  F04F         	movff	get_bat@ttt+2,___lldiv@divisor+2
  9371  001C28  C05D  F050         	movff	get_bat@ttt+3,___lldiv@divisor+3
  9372  001C2C  ECF7  F00C         	call	___lldiv	;wreg free
  9373  001C30  C049  F05A         	movff	?___lldiv,get_bat@ttt
  9374  001C34  C04A  F05B         	movff	?___lldiv+1,get_bat@ttt+1
  9375  001C38  C04B  F05C         	movff	?___lldiv+2,get_bat@ttt+2
  9376  001C3C  C04C  F05D         	movff	?___lldiv+3,get_bat@ttt+3
  9377                           
  9378                           ;bat.c: 24: return ttt;
  9379  001C40  C05A  F056         	movff	get_bat@ttt,?_get_bat
  9380  001C44  C05B  F057         	movff	get_bat@ttt+1,?_get_bat+1
  9381  001C48  0012               	return		;funcret
  9382  001C4A                     __end_of_get_bat:
  9383                           	opt stack 0
  9384                           tblptru	equ	0xFF8
  9385                           tblptrh	equ	0xFF7
  9386                           tblptrl	equ	0xFF6
  9387                           tablat	equ	0xFF5
  9388                           prodl	equ	0xFF3
  9389                           intcon	equ	0xFF2
  9390                           intcon2	equ	0xFF1
  9391                           intcon3	equ	0xFF0
  9392                           postinc0	equ	0xFEE
  9393                           wreg	equ	0xFE8
  9394                           postdec1	equ	0xFE5
  9395                           fsr1l	equ	0xFE1
  9396                           indf2	equ	0xFDF
  9397                           postinc2	equ	0xFDE
  9398                           postdec2	equ	0xFDD
  9399                           fsr2h	equ	0xFDA
  9400                           fsr2l	equ	0xFD9
  9401                           status	equ	0xFD8
  9402                           
  9403 ;; *************** function ___lldiv *****************
  9404 ;; Defined at:
  9405 ;;		line 8 in file "c:\Users\Administrator\.vscode\extensions\ad.adide-1.1.7\resource\Microchip\xc8\v1.41\sources\common
      +\lldiv.c"
  9406 ;; Parameters:    Size  Location     Type
  9407 ;;  dividend        4   13[COMRAM] unsigned long 
  9408 ;;  divisor         4   17[COMRAM] unsigned long 
  9409 ;; Auto vars:     Size  Location     Type
  9410 ;;  quotient        4   21[COMRAM] unsigned long 
  9411 ;;  counter         1   25[COMRAM] unsigned char 
  9412 ;; Return value:  Size  Location     Type
  9413 ;;                  4   13[COMRAM] unsigned long 
  9414 ;; Registers used:
  9415 ;;		wreg, status,2, status,0
  9416 ;; Tracked objects:
  9417 ;;		On entry : 0/0
  9418 ;;		On exit  : 0/0
  9419 ;;		Unchanged: 0/0
  9420 ;; Data sizes:     COMRAM   BANK0
  9421 ;;      Params:         8       0
  9422 ;;      Locals:         5       0
  9423 ;;      Temps:          0       0
  9424 ;;      Totals:        13       0
  9425 ;;Total ram usage:       13 bytes
  9426 ;; Hardware stack levels used:    1
  9427 ;; Hardware stack levels required when called:    2
  9428 ;; This function calls:
  9429 ;;		Nothing
  9430 ;; This function is called by:
  9431 ;;		_get_bat
  9432 ;;		_get_load
  9433 ;;		_main
  9434 ;; This function uses a non-reentrant model
  9435 ;;
  9436                           
  9437                           	psect	text35
  9438  0019EE                     __ptext35:
  9439                           	opt stack 0
  9440  0019EE                     ___lldiv:
  9441                           	opt stack 3
  9442                           
  9443                           ;incstack = 0
  9444  0019EE  6A51               	clrf	___lldiv@quotient,c
  9445  0019F0  6A52               	clrf	___lldiv@quotient+1,c
  9446  0019F2  6A53               	clrf	___lldiv@quotient+2,c
  9447  0019F4  6A54               	clrf	___lldiv@quotient+3,c
  9448  0019F6  504D               	movf	___lldiv@divisor,w,c
  9449  0019F8  104E               	iorwf	___lldiv@divisor+1,w,c
  9450  0019FA  104F               	iorwf	___lldiv@divisor+2,w,c
  9451  0019FC  1050               	iorwf	___lldiv@divisor+3,w,c
  9452  0019FE  E029               	bz	l13093
  9453  001A00  0E01               	movlw	1
  9454  001A02  6E55               	movwf	___lldiv@counter,c
  9455  001A04  D006               	goto	l17561
  9456  001A06                     l17559:
  9457  001A06  90D8               	bcf	status,0,c
  9458  001A08  364D               	rlcf	___lldiv@divisor,f,c
  9459  001A0A  364E               	rlcf	___lldiv@divisor+1,f,c
  9460  001A0C  364F               	rlcf	___lldiv@divisor+2,f,c
  9461  001A0E  3650               	rlcf	___lldiv@divisor+3,f,c
  9462  001A10  2A55               	incf	___lldiv@counter,f,c
  9463  001A12                     l17561:
  9464  001A12  AE50               	btfss	___lldiv@divisor+3,7,c
  9465  001A14  D7F8               	goto	l17559
  9466  001A16                     l17563:
  9467  001A16  90D8               	bcf	status,0,c
  9468  001A18  3651               	rlcf	___lldiv@quotient,f,c
  9469  001A1A  3652               	rlcf	___lldiv@quotient+1,f,c
  9470  001A1C  3653               	rlcf	___lldiv@quotient+2,f,c
  9471  001A1E  3654               	rlcf	___lldiv@quotient+3,f,c
  9472  001A20  504D               	movf	___lldiv@divisor,w,c
  9473  001A22  5C49               	subwf	___lldiv@dividend,w,c
  9474  001A24  504E               	movf	___lldiv@divisor+1,w,c
  9475  001A26  584A               	subwfb	___lldiv@dividend+1,w,c
  9476  001A28  504F               	movf	___lldiv@divisor+2,w,c
  9477  001A2A  584B               	subwfb	___lldiv@dividend+2,w,c
  9478  001A2C  5050               	movf	___lldiv@divisor+3,w,c
  9479  001A2E  584C               	subwfb	___lldiv@dividend+3,w,c
  9480  001A30  E309               	bnc	l17571
  9481  001A32  504D               	movf	___lldiv@divisor,w,c
  9482  001A34  5E49               	subwf	___lldiv@dividend,f,c
  9483  001A36  504E               	movf	___lldiv@divisor+1,w,c
  9484  001A38  5A4A               	subwfb	___lldiv@dividend+1,f,c
  9485  001A3A  504F               	movf	___lldiv@divisor+2,w,c
  9486  001A3C  5A4B               	subwfb	___lldiv@dividend+2,f,c
  9487  001A3E  5050               	movf	___lldiv@divisor+3,w,c
  9488  001A40  5A4C               	subwfb	___lldiv@dividend+3,f,c
  9489  001A42  8051               	bsf	___lldiv@quotient,0,c
  9490  001A44                     l17571:
  9491  001A44  90D8               	bcf	status,0,c
  9492  001A46  3250               	rrcf	___lldiv@divisor+3,f,c
  9493  001A48  324F               	rrcf	___lldiv@divisor+2,f,c
  9494  001A4A  324E               	rrcf	___lldiv@divisor+1,f,c
  9495  001A4C  324D               	rrcf	___lldiv@divisor,f,c
  9496  001A4E  2E55               	decfsz	___lldiv@counter,f,c
  9497  001A50  D7E2               	goto	l17563
  9498  001A52                     l13093:
  9499  001A52  C051  F049         	movff	___lldiv@quotient,?___lldiv
  9500  001A56  C052  F04A         	movff	___lldiv@quotient+1,?___lldiv+1
  9501  001A5A  C053  F04B         	movff	___lldiv@quotient+2,?___lldiv+2
  9502  001A5E  C054  F04C         	movff	___lldiv@quotient+3,?___lldiv+3
  9503  001A62  0012               	return		;funcret
  9504  001A64                     __end_of___lldiv:
  9505                           	opt stack 0
  9506                           tblptru	equ	0xFF8
  9507                           tblptrh	equ	0xFF7
  9508                           tblptrl	equ	0xFF6
  9509                           tablat	equ	0xFF5
  9510                           prodl	equ	0xFF3
  9511                           intcon	equ	0xFF2
  9512                           intcon2	equ	0xFF1
  9513                           intcon3	equ	0xFF0
  9514                           postinc0	equ	0xFEE
  9515                           wreg	equ	0xFE8
  9516                           postdec1	equ	0xFE5
  9517                           fsr1l	equ	0xFE1
  9518                           indf2	equ	0xFDF
  9519                           postinc2	equ	0xFDE
  9520                           postdec2	equ	0xFDD
  9521                           fsr2h	equ	0xFDA
  9522                           fsr2l	equ	0xFD9
  9523                           status	equ	0xFD8
  9524                           
  9525 ;; *************** function _ISR_l *****************
  9526 ;; Defined at:
  9527 ;;		line 533 in file ".\src\main.c"
  9528 ;; Parameters:    Size  Location     Type
  9529 ;;		None
  9530 ;; Auto vars:     Size  Location     Type
  9531 ;;		None
  9532 ;; Return value:  Size  Location     Type
  9533 ;;                  1    wreg      void 
  9534 ;; Registers used:
  9535 ;;		None
  9536 ;; Tracked objects:
  9537 ;;		On entry : 0/0
  9538 ;;		On exit  : 0/0
  9539 ;;		Unchanged: 0/0
  9540 ;; Data sizes:     COMRAM   BANK0
  9541 ;;      Params:         0       0
  9542 ;;      Locals:         0       0
  9543 ;;      Temps:          1       0
  9544 ;;      Totals:         1       0
  9545 ;;Total ram usage:        1 bytes
  9546 ;; Hardware stack levels used:    1
  9547 ;; Hardware stack levels required when called:    1
  9548 ;; This function calls:
  9549 ;;		Nothing
  9550 ;; This function is called by:
  9551 ;;		Interrupt level 1
  9552 ;; This function uses a non-reentrant model
  9553 ;;
  9554                           
  9555                           	psect	intcodelo
  9556  000018                     __pintcodelo:
  9557                           	opt stack 0
  9558  000018                     _ISR_l:
  9559                           	opt stack 2
  9560                           
  9561                           ;incstack = 0
  9562  000018  807D               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  9563  00001A  CFE0 F03C          	movff	bsr,??_ISR_l
  9564                           
  9565                           ;main.c: 536: if(TMR2IF||ADIF)
  9566  00001E  B8B0               	btfsc	4016,4,c	;volatile
  9567  000020  D002               	goto	i1l5402
  9568  000022  A4AA               	btfss	4010,2,c	;volatile
  9569  000024  D002               	goto	i1l5403
  9570  000026                     i1l5402:
  9571                           
  9572                           ;main.c: 537: {
  9573                           ;main.c: 538: TMR2IF=0;
  9574  000026  98B0               	bcf	4016,4,c	;volatile
  9575                           
  9576                           ;main.c: 539: ADIF=0;
  9577  000028  94AA               	bcf	4010,2,c	;volatile
  9578  00002A                     i1l5403:
  9579  00002A  C03C  FFE0         	movff	??_ISR_l,bsr
  9580  00002E  907D               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  9581  000030  0010               	retfie	
  9582  000032                     __end_of_ISR_l:
  9583                           	opt stack 0
  9584                           tblptru	equ	0xFF8
  9585                           tblptrh	equ	0xFF7
  9586                           tblptrl	equ	0xFF6
  9587                           tablat	equ	0xFF5
  9588                           prodl	equ	0xFF3
  9589                           intcon	equ	0xFF2
  9590                           intcon2	equ	0xFF1
  9591                           intcon3	equ	0xFF0
  9592                           postinc0	equ	0xFEE
  9593                           wreg	equ	0xFE8
  9594                           postdec1	equ	0xFE5
  9595                           fsr1l	equ	0xFE1
  9596                           bsr	equ	0xFE0
  9597                           indf2	equ	0xFDF
  9598                           postinc2	equ	0xFDE
  9599                           postdec2	equ	0xFDD
  9600                           fsr2h	equ	0xFDA
  9601                           fsr2l	equ	0xFD9
  9602                           status	equ	0xFD8
  9603                           
  9604 ;; *************** function _ISR_h *****************
  9605 ;; Defined at:
  9606 ;;		line 383 in file ".\src\main.c"
  9607 ;; Parameters:    Size  Location     Type
  9608 ;;		None
  9609 ;; Auto vars:     Size  Location     Type
  9610 ;;		None
  9611 ;; Return value:  Size  Location     Type
  9612 ;;                  1    wreg      void 
  9613 ;; Registers used:
  9614 ;;		wreg, status,2, status,0
  9615 ;; Tracked objects:
  9616 ;;		On entry : 0/0
  9617 ;;		On exit  : 0/0
  9618 ;;		Unchanged: 0/0
  9619 ;; Data sizes:     COMRAM   BANK0
  9620 ;;      Params:         0       0
  9621 ;;      Locals:         0       0
  9622 ;;      Temps:          0       0
  9623 ;;      Totals:         0       0
  9624 ;;Total ram usage:        0 bytes
  9625 ;; Hardware stack levels used:    1
  9626 ;; This function calls:
  9627 ;;		Nothing
  9628 ;; This function is called by:
  9629 ;;		Interrupt level 2
  9630 ;; This function uses a non-reentrant model
  9631 ;;
  9632                           
  9633                           	psect	intcode
  9634  000008                     __pintcode:
  9635                           	opt stack 0
  9636  000008                     _ISR_h:
  9637                           	opt stack 2
  9638                           
  9639                           ;incstack = 0
  9640  000008  827D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9641  00000A  ED22  F007         	call	int_func,f	;refresh shadow registers
  9642                           tblptru	equ	0xFF8
  9643                           tblptrh	equ	0xFF7
  9644                           tblptrl	equ	0xFF6
  9645                           tablat	equ	0xFF5
  9646                           prodl	equ	0xFF3
  9647                           intcon	equ	0xFF2
  9648                           intcon2	equ	0xFF1
  9649                           intcon3	equ	0xFF0
  9650                           postinc0	equ	0xFEE
  9651                           wreg	equ	0xFE8
  9652                           postdec1	equ	0xFE5
  9653                           fsr1l	equ	0xFE1
  9654                           bsr	equ	0xFE0
  9655                           indf2	equ	0xFDF
  9656                           postinc2	equ	0xFDE
  9657                           postdec2	equ	0xFDD
  9658                           fsr2h	equ	0xFDA
  9659                           fsr2l	equ	0xFD9
  9660                           status	equ	0xFD8
  9661                           
  9662                           	psect	intcode_body
  9663  000E44                     __pintcode_body:
  9664                           	opt stack 2
  9665  000E44                     int_func:
  9666                           	opt stack 2
  9667  000E44  0006               	pop		; remove dummy address from shadow register refresh
  9668                           
  9669                           ;main.c: 386: if(CMP0IF)
  9670  000E46  A6AA               	btfss	4010,3,c	;volatile
  9671  000E48  D00B               	goto	i2l17433
  9672                           
  9673                           ;main.c: 387: {
  9674                           ;main.c: 390: if(CMP0OUT&&CMP0IE)
  9675  000E4A  BCA8               	btfsc	4008,6,c	;volatile
  9676  000E4C  A6A9               	btfss	4009,3,c	;volatile
  9677  000E4E  D007               	goto	i2l17431
  9678                           
  9679                           ;main.c: 391: {
  9680                           ;main.c: 393: PA0OD=0;
  9681  000E50  9092               	bcf	3986,0,c	;volatile
  9682                           
  9683                           ;main.c: 395: PA0=1;
  9684  000E52  8080               	bsf	3968,0,c	;volatile
  9685                           
  9686                           ;main.c: 396: si_mic_flag.dl=1;
  9687  000E54  0E01               	movlw	1
  9688  000E56  6E18               	movwf	_si_mic_flag,c
  9689                           
  9690                           ;main.c: 397: pwm.duty=0;
  9691  000E58  0100               	movlb	0	; () banked
  9692  000E5A  6BCE               	clrf	_pwm& (0+255),b
  9693                           
  9694                           ; BSR set to: 0
  9695                           ;main.c: 400: PA0OD=1;
  9696  000E5C  8092               	bsf	3986,0,c	;volatile
  9697  000E5E                     i2l17431:
  9698                           
  9699                           ;main.c: 413: }
  9700                           ;main.c: 451: CMP0IF=0;
  9701  000E5E  96AA               	bcf	4010,3,c	;volatile
  9702  000E60                     i2l17433:
  9703                           
  9704                           ;main.c: 452: }
  9705                           ;main.c: 454: if(TMR1IE && TMR1IF)
  9706  000E60  B2AF               	btfsc	4015,1,c	;volatile
  9707  000E62  A2B0               	btfss	4016,1,c	;volatile
  9708  000E64  D074               	goto	i2l17505
  9709                           
  9710                           ;main.c: 455: {
  9711                           ;main.c: 456: TMR1IF=0;
  9712  000E66  92B0               	bcf	4016,1,c	;volatile
  9713                           
  9714                           ;main.c: 457: if(task_list[0].active) { task_list[0].counter--; if(task_list[0].counter 
      +                          == 0) { task_list[0].ready = 1; task_list[0].counter = task_list[0].interval; } } if(tas
      +                          k_list[1].active) { task_list[1].counter--; if(task_list[1].counter == 0) { task_list[1]
  9715  000E68  0100               	movlb	0	; () banked
  9716  000E6A  518B               	movf	(_task_list+5)& (0+255),w,b
  9717  000E6C  E00C               	bz	i2l5372
  9718                           
  9719                           ; BSR set to: 0
  9720  000E6E  0789               	decf	(_task_list+3)& (0+255),f,b
  9721  000E70  A0D8               	btfss	status,0,c
  9722  000E72  078A               	decf	(_task_list+4)& (0+255),f,b
  9723                           
  9724                           ; BSR set to: 0
  9725  000E74  5189               	movf	(_task_list+3)& (0+255),w,b
  9726  000E76  118A               	iorwf	(_task_list+4)& (0+255),w,b
  9727  000E78  E106               	bnz	i2l5372
  9728                           
  9729                           ; BSR set to: 0
  9730  000E7A  0E01               	movlw	1
  9731  000E7C  6F8C               	movwf	(_task_list+6)& (0+255),b
  9732                           
  9733                           ; BSR set to: 0
  9734  000E7E  C087  F089         	movff	_task_list+1,_task_list+3
  9735  000E82  C088  F08A         	movff	_task_list+2,_task_list+4
  9736  000E86                     i2l5372:
  9737                           
  9738                           ; BSR set to: 0
  9739  000E86  5194               	movf	(_task_list+14)& (0+255),w,b
  9740  000E88  E00C               	bz	i2l5374
  9741                           
  9742                           ; BSR set to: 0
  9743  000E8A  0792               	decf	(_task_list+12)& (0+255),f,b
  9744  000E8C  A0D8               	btfss	status,0,c
  9745  000E8E  0793               	decf	(_task_list+13)& (0+255),f,b
  9746                           
  9747                           ; BSR set to: 0
  9748  000E90  5192               	movf	(_task_list+12)& (0+255),w,b
  9749  000E92  1193               	iorwf	(_task_list+13)& (0+255),w,b
  9750  000E94  E106               	bnz	i2l5374
  9751                           
  9752                           ; BSR set to: 0
  9753  000E96  0E01               	movlw	1
  9754  000E98  6F95               	movwf	(_task_list+15)& (0+255),b
  9755                           
  9756                           ; BSR set to: 0
  9757  000E9A  C090  F092         	movff	_task_list+10,_task_list+12
  9758  000E9E  C091  F093         	movff	_task_list+11,_task_list+13
  9759  000EA2                     i2l5374:
  9760                           
  9761                           ; BSR set to: 0
  9762  000EA2  519D               	movf	(_task_list+23)& (0+255),w,b
  9763  000EA4  E00C               	bz	i2l5376
  9764                           
  9765                           ; BSR set to: 0
  9766  000EA6  079B               	decf	(_task_list+21)& (0+255),f,b
  9767  000EA8  A0D8               	btfss	status,0,c
  9768  000EAA  079C               	decf	(_task_list+22)& (0+255),f,b
  9769                           
  9770                           ; BSR set to: 0
  9771  000EAC  519B               	movf	(_task_list+21)& (0+255),w,b
  9772  000EAE  119C               	iorwf	(_task_list+22)& (0+255),w,b
  9773  000EB0  E106               	bnz	i2l5376
  9774                           
  9775                           ; BSR set to: 0
  9776  000EB2  0E01               	movlw	1
  9777  000EB4  6F9E               	movwf	(_task_list+24)& (0+255),b
  9778                           
  9779                           ; BSR set to: 0
  9780  000EB6  C099  F09B         	movff	_task_list+19,_task_list+21
  9781  000EBA  C09A  F09C         	movff	_task_list+20,_task_list+22
  9782  000EBE                     i2l5376:
  9783                           
  9784                           ; BSR set to: 0
  9785  000EBE  51A6               	movf	(_task_list+32)& (0+255),w,b
  9786  000EC0  E00C               	bz	i2l5378
  9787                           
  9788                           ; BSR set to: 0
  9789  000EC2  07A4               	decf	(_task_list+30)& (0+255),f,b
  9790  000EC4  A0D8               	btfss	status,0,c
  9791  000EC6  07A5               	decf	(_task_list+31)& (0+255),f,b
  9792                           
  9793                           ; BSR set to: 0
  9794  000EC8  51A4               	movf	(_task_list+30)& (0+255),w,b
  9795  000ECA  11A5               	iorwf	(_task_list+31)& (0+255),w,b
  9796  000ECC  E106               	bnz	i2l5378
  9797                           
  9798                           ; BSR set to: 0
  9799  000ECE  0E01               	movlw	1
  9800  000ED0  6FA7               	movwf	(_task_list+33)& (0+255),b
  9801                           
  9802                           ; BSR set to: 0
  9803  000ED2  C0A2  F0A4         	movff	_task_list+28,_task_list+30
  9804  000ED6  C0A3  F0A5         	movff	_task_list+29,_task_list+31
  9805  000EDA                     i2l5378:
  9806                           
  9807                           ; BSR set to: 0
  9808  000EDA  51AF               	movf	(_task_list+41)& (0+255),w,b
  9809  000EDC  E00C               	bz	i2l5380
  9810                           
  9811                           ; BSR set to: 0
  9812  000EDE  07AD               	decf	(_task_list+39)& (0+255),f,b
  9813  000EE0  A0D8               	btfss	status,0,c
  9814  000EE2  07AE               	decf	(_task_list+40)& (0+255),f,b
  9815                           
  9816                           ; BSR set to: 0
  9817  000EE4  51AD               	movf	(_task_list+39)& (0+255),w,b
  9818  000EE6  11AE               	iorwf	(_task_list+40)& (0+255),w,b
  9819  000EE8  E106               	bnz	i2l5380
  9820                           
  9821                           ; BSR set to: 0
  9822  000EEA  0E01               	movlw	1
  9823  000EEC  6FB0               	movwf	(_task_list+42)& (0+255),b
  9824                           
  9825                           ; BSR set to: 0
  9826  000EEE  C0AB  F0AD         	movff	_task_list+37,_task_list+39
  9827  000EF2  C0AC  F0AE         	movff	_task_list+38,_task_list+40
  9828  000EF6                     i2l5380:
  9829                           
  9830                           ; BSR set to: 0
  9831  000EF6  51B8               	movf	(_task_list+50)& (0+255),w,b
  9832  000EF8  E00C               	bz	i2l5382
  9833                           
  9834                           ; BSR set to: 0
  9835  000EFA  07B6               	decf	(_task_list+48)& (0+255),f,b
  9836  000EFC  A0D8               	btfss	status,0,c
  9837  000EFE  07B7               	decf	(_task_list+49)& (0+255),f,b
  9838                           
  9839                           ; BSR set to: 0
  9840  000F00  51B6               	movf	(_task_list+48)& (0+255),w,b
  9841  000F02  11B7               	iorwf	(_task_list+49)& (0+255),w,b
  9842  000F04  E106               	bnz	i2l5382
  9843                           
  9844                           ; BSR set to: 0
  9845  000F06  0E01               	movlw	1
  9846  000F08  6FB9               	movwf	(_task_list+51)& (0+255),b
  9847                           
  9848                           ; BSR set to: 0
  9849  000F0A  C0B4  F0B6         	movff	_task_list+46,_task_list+48
  9850  000F0E  C0B5  F0B7         	movff	_task_list+47,_task_list+49
  9851  000F12                     i2l5382:
  9852                           
  9853                           ; BSR set to: 0
  9854  000F12  51C1               	movf	(_task_list+59)& (0+255),w,b
  9855  000F14  E00C               	bz	i2l5384
  9856                           
  9857                           ; BSR set to: 0
  9858  000F16  07BF               	decf	(_task_list+57)& (0+255),f,b
  9859  000F18  A0D8               	btfss	status,0,c
  9860  000F1A  07C0               	decf	(_task_list+58)& (0+255),f,b
  9861                           
  9862                           ; BSR set to: 0
  9863  000F1C  51BF               	movf	(_task_list+57)& (0+255),w,b
  9864  000F1E  11C0               	iorwf	(_task_list+58)& (0+255),w,b
  9865  000F20  E106               	bnz	i2l5384
  9866                           
  9867                           ; BSR set to: 0
  9868  000F22  0E01               	movlw	1
  9869  000F24  6FC2               	movwf	(_task_list+60)& (0+255),b
  9870                           
  9871                           ; BSR set to: 0
  9872  000F26  C0BD  F0BF         	movff	_task_list+55,_task_list+57
  9873  000F2A  C0BE  F0C0         	movff	_task_list+56,_task_list+58
  9874  000F2E                     i2l5384:
  9875                           
  9876                           ; BSR set to: 0
  9877  000F2E  51CA               	movf	(_task_list+68)& (0+255),w,b
  9878  000F30  E00C               	bz	i2l5386
  9879                           
  9880                           ; BSR set to: 0
  9881  000F32  07C8               	decf	(_task_list+66)& (0+255),f,b
  9882  000F34  A0D8               	btfss	status,0,c
  9883  000F36  07C9               	decf	(_task_list+67)& (0+255),f,b
  9884                           
  9885                           ; BSR set to: 0
  9886  000F38  51C8               	movf	(_task_list+66)& (0+255),w,b
  9887  000F3A  11C9               	iorwf	(_task_list+67)& (0+255),w,b
  9888  000F3C  E106               	bnz	i2l5386
  9889                           
  9890                           ; BSR set to: 0
  9891  000F3E  0E01               	movlw	1
  9892  000F40  6FCB               	movwf	(_task_list+69)& (0+255),b
  9893                           
  9894                           ; BSR set to: 0
  9895  000F42  C0C6  F0C8         	movff	_task_list+64,_task_list+66
  9896  000F46  C0C7  F0C9         	movff	_task_list+65,_task_list+67
  9897  000F4A                     i2l5386:
  9898                           
  9899                           ; BSR set to: 0
  9900                           ;main.c: 458: pwm_flag=1;
  9901  000F4A  0E01               	movlw	1
  9902  000F4C  6E2E               	movwf	_pwm_flag,c
  9903  000F4E                     i2l17505:
  9904                           
  9905                           ;main.c: 460: }
  9906                           ;main.c: 461: if(TMR0IE && TMR0IF)
  9907  000F4E  B0AF               	btfsc	4015,0,c	;volatile
  9908  000F50  A0B0               	btfss	4016,0,c	;volatile
  9909  000F52  D00D               	goto	i2l17525
  9910                           
  9911                           ;main.c: 462: {
  9912                           ;main.c: 463: TMR0IF=0;
  9913  000F54  90B0               	bcf	4016,0,c	;volatile
  9914                           
  9915                           ;main.c: 464: tim_ui.ok=1;
  9916  000F56  0E01               	movlw	1
  9917  000F58  6E22               	movwf	_tim_ui+1,c	;volatile
  9918                           
  9919                           ;main.c: 465: if(adc_flag==1)
  9920  000F5A  042D               	decf	_adc_flag,w,c
  9921  000F5C  E108               	bnz	i2l17525
  9922                           
  9923                           ;main.c: 466: {
  9924                           ;main.c: 467: adc_cnt++;
  9925  000F5E  2A2C               	incf	_adc_cnt,f,c
  9926                           
  9927                           ;main.c: 468: if(adc_cnt>=5)
  9928  000F60  0E04               	movlw	4
  9929  000F62  642C               	cpfsgt	_adc_cnt,c
  9930  000F64  D004               	goto	i2l17525
  9931                           
  9932                           ;main.c: 469: {
  9933                           ;main.c: 470: adc_begin=1;
  9934  000F66  0E01               	movlw	1
  9935  000F68  6E2B               	movwf	_adc_begin,c
  9936                           
  9937                           ;main.c: 471: adc_cnt=0;
  9938  000F6A  6A2C               	clrf	_adc_cnt,c
  9939                           
  9940                           ;main.c: 472: adc_flag=0;
  9941  000F6C  6A2D               	clrf	_adc_flag,c
  9942  000F6E                     i2l17525:
  9943                           
  9944                           ;main.c: 473: }
  9945                           ;main.c: 474: }
  9946                           ;main.c: 477: }
  9947                           ;main.c: 478: if(TMR3IF && TMR3IE)
  9948  000F6E  BAAA               	btfsc	4010,5,c	;volatile
  9949  000F70  AAA9               	btfss	4009,5,c	;volatile
  9950  000F72  D005               	goto	i2l5391
  9951                           
  9952                           ;main.c: 479: {
  9953                           ;main.c: 482: TMR3IF=0;
  9954  000F74  9AAA               	bcf	4010,5,c	;volatile
  9955                           
  9956                           ;main.c: 483: CMP0IE=0;CMP0IF=0;
  9957  000F76  96A9               	bcf	4009,3,c	;volatile
  9958  000F78  96AA               	bcf	4010,3,c	;volatile
  9959                           
  9960                           ;main.c: 484: PA0=1;
  9961  000F7A  8080               	bsf	3968,0,c	;volatile
  9962                           
  9963                           ;main.c: 485: TMR3ON=0;
  9964  000F7C  94B8               	bcf	4024,2,c	;volatile
  9965  000F7E                     i2l5391:
  9966                           
  9967                           ;main.c: 486: }
  9968                           ;main.c: 488: if(TMR3IE && TMR2IF)
  9969  000F7E  BAA9               	btfsc	4009,5,c	;volatile
  9970  000F80  A8B0               	btfss	4016,4,c	;volatile
  9971  000F82  D00A               	goto	i2l5392
  9972                           
  9973                           ;main.c: 489: {
  9974                           ;main.c: 490: ;
  9975                           ;main.c: 491: TMR2IF=0;
  9976  000F84  98B0               	bcf	4016,4,c	;volatile
  9977                           
  9978                           ;main.c: 492: tim_cnt.cnt++;
  9979  000F86  4A1D               	infsnz	_tim_cnt,f,c
  9980  000F88  2A1E               	incf	_tim_cnt+1,f,c
  9981                           
  9982                           ;main.c: 494: {
  9983                           ;main.c: 495: tim_flag.timflag=1;
  9984  000F8A  501D               	movf	_tim_cnt,w,c
  9985  000F8C  181F               	xorwf	_tim_cnt+2,w,c
  9986  000F8E  E104               	bnz	i2l5392
  9987  000F90  501E               	movf	_tim_cnt+1,w,c
  9988  000F92  1820               	xorwf	_tim_cnt+3,w,c
  9989  000F94  E101               	bnz	i2l5392
  9990                           
  9991                           ;main.c: 496: TMR2ON=0;
  9992  000F96  94C1               	bcf	4033,2,c	;volatile
  9993  000F98                     i2l5392:
  9994                           
  9995                           ;main.c: 497: }
  9996                           ;main.c: 498: }
  9997                           ;main.c: 515: if(PAIF ||PCIF || PBIF)
  9998  000F98  AAAD               	btfss	4013,5,c	;volatile
  9999  000F9A  BEAD               	btfsc	4013,7,c	;volatile
 10000  000F9C  D002               	goto	i2l5396
 10001  000F9E  ACAD               	btfss	4013,6,c	;volatile
 10002  000FA0  D00A               	goto	i2l5397
 10003  000FA2                     i2l5396:
 10004                           
 10005                           ;main.c: 516: {
 10006                           ;main.c: 517: PAIF=0;
 10007  000FA2  9AAD               	bcf	4013,5,c	;volatile
 10008                           
 10009                           ;main.c: 518: PCIF=0;
 10010  000FA4  9EAD               	bcf	4013,7,c	;volatile
 10011                           
 10012                           ;main.c: 519: PBIF=0;
 10013  000FA6  9CAD               	bcf	4013,6,c	;volatile
 10014                           
 10015                           ;main.c: 521: PA4MSK=0;
 10016  000FA8  988F               	bcf	3983,4,c	;volatile
 10017                           
 10018                           ;main.c: 522: PA5MSK=0;
 10019  000FAA  9A8F               	bcf	3983,5,c	;volatile
 10020                           
 10021                           ;main.c: 523: PB1MSK=0;
 10022  000FAC  9290               	bcf	3984,1,c	;volatile
 10023                           
 10024                           ;main.c: 524: PC6MSK=0;
 10025  000FAE  9C91               	bcf	3985,6,c	;volatile
 10026                           
 10027                           ;main.c: 525: PAIE=0;
 10028  000FB0  9AAC               	bcf	4012,5,c	;volatile
 10029                           
 10030                           ;main.c: 526: PBIE=0;
 10031  000FB2  9CAC               	bcf	4012,6,c	;volatile
 10032                           
 10033                           ;main.c: 527: PCIE=0;
 10034  000FB4  9EAC               	bcf	4012,7,c	;volatile
 10035  000FB6                     i2l5397:
 10036  000FB6  927D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10037  000FB8  0011               	retfie		f
 10038  000FBA                     __end_of_ISR_h:
 10039                           	opt stack 0
 10040                           tblptru	equ	0xFF8
 10041                           tblptrh	equ	0xFF7
 10042                           tblptrl	equ	0xFF6
 10043                           tablat	equ	0xFF5
 10044                           prodl	equ	0xFF3
 10045                           intcon	equ	0xFF2
 10046                           intcon2	equ	0xFF1
 10047                           intcon3	equ	0xFF0
 10048                           postinc0	equ	0xFEE
 10049                           wreg	equ	0xFE8
 10050                           postdec1	equ	0xFE5
 10051                           fsr1l	equ	0xFE1
 10052                           bsr	equ	0xFE0
 10053                           indf2	equ	0xFDF
 10054                           postinc2	equ	0xFDE
 10055                           postdec2	equ	0xFDD
 10056                           fsr2h	equ	0xFDA
 10057                           fsr2l	equ	0xFD9
 10058                           status	equ	0xFD8
 10059                           tblptru	equ	0xFF8
 10060                           tblptrh	equ	0xFF7
 10061                           tblptrl	equ	0xFF6
 10062                           tablat	equ	0xFF5
 10063                           prodl	equ	0xFF3
 10064                           intcon	equ	0xFF2
 10065                           intcon2	equ	0xFF1
 10066                           intcon3	equ	0xFF0
 10067                           postinc0	equ	0xFEE
 10068                           wreg	equ	0xFE8
 10069                           postdec1	equ	0xFE5
 10070                           fsr1l	equ	0xFE1
 10071                           bsr	equ	0xFE0
 10072                           indf2	equ	0xFDF
 10073                           postinc2	equ	0xFDE
 10074                           postdec2	equ	0xFDD
 10075                           fsr2h	equ	0xFDA
 10076                           fsr2l	equ	0xFD9
 10077                           status	equ	0xFD8
 10078                           
 10079                           	psect	rparam
 10080  0000                     tblptru	equ	0xFF8
 10081                           tblptrh	equ	0xFF7
 10082                           tblptrl	equ	0xFF6
 10083                           tablat	equ	0xFF5
 10084                           prodl	equ	0xFF3
 10085                           intcon	equ	0xFF2
 10086                           intcon2	equ	0xFF1
 10087                           intcon3	equ	0xFF0
 10088                           postinc0	equ	0xFEE
 10089                           wreg	equ	0xFE8
 10090                           postdec1	equ	0xFE5
 10091                           fsr1l	equ	0xFE1
 10092                           bsr	equ	0xFE0
 10093                           indf2	equ	0xFDF
 10094                           postinc2	equ	0xFDE
 10095                           postdec2	equ	0xFDD
 10096                           fsr2h	equ	0xFDA
 10097                           fsr2l	equ	0xFD9
 10098                           status	equ	0xFD8
 10099                           
 10100                           	psect	temp
 10101  00007D                     btemp:
 10102                           	opt stack 0
 10103  00007D                     	ds	1
 10104  0000                     int$flags	set	btemp
 10105                           tblptru	equ	0xFF8
 10106                           tblptrh	equ	0xFF7
 10107                           tblptrl	equ	0xFF6
 10108                           tablat	equ	0xFF5
 10109                           prodl	equ	0xFF3
 10110                           intcon	equ	0xFF2
 10111                           intcon2	equ	0xFF1
 10112                           intcon3	equ	0xFF0
 10113                           postinc0	equ	0xFEE
 10114                           wreg	equ	0xFE8
 10115                           postdec1	equ	0xFE5
 10116                           fsr1l	equ	0xFE1
 10117                           bsr	equ	0xFE0
 10118                           indf2	equ	0xFDF
 10119                           postinc2	equ	0xFDE
 10120                           postdec2	equ	0xFDD
 10121                           fsr2h	equ	0xFDA
 10122                           fsr2l	equ	0xFD9
 10123                           status	equ	0xFD8
 10124                           tblptru	equ	0xFF8
 10125                           tblptrh	equ	0xFF7
 10126                           tblptrl	equ	0xFF6
 10127                           tablat	equ	0xFF5
 10128                           prodl	equ	0xFF3
 10129                           intcon	equ	0xFF2
 10130                           intcon2	equ	0xFF1
 10131                           intcon3	equ	0xFF0
 10132                           postinc0	equ	0xFEE
 10133                           wreg	equ	0xFE8
 10134                           postdec1	equ	0xFE5
 10135                           fsr1l	equ	0xFE1
 10136                           bsr	equ	0xFE0
 10137                           indf2	equ	0xFDF
 10138                           postinc2	equ	0xFDE
 10139                           postdec2	equ	0xFDD
 10140                           fsr2h	equ	0xFDA
 10141                           fsr2l	equ	0xFD9
 10142                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    10
    Data        31
    BSS         137
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     43     124
    BANK0           128      2      89

Pointer List with Targets:

    cb_task@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    bat_task@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    ui_begin@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    ui_timout@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    ui_ts_off@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    ui_ts_on@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    ui_kl@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    ui_smoend@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    ui_dl_getup@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    ui_smoing@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    ui_chrgfull@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    ui_chrgfree@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    ui_chrg@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    ui_cb@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    find_task@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    sleep_task@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    si_mic_task@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    key_task@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 

    chrg_task@task_	PTR struct task size(1) Largest target is 72
		 -> task_list(BANK0[72]), 


Critical Paths under _main in COMRAM

    _main->_find_task
    _find_task->_si_mic_task
    _ui_ts_on->_add_task_id
    _ui_ts_off->_add_task_id
    _ui_timout->_new_nixie
    _ui_smoing->_new_nixie
    _ui_smoend->_new_nixie
    _ui_kl->_new_nixie
    _ui_dl_getup->_add_task_id
    _ui_chrgfull->_new_nixie
    _ui_chrgfree->_new_nixie
    _ui_chrg->_new_nixie
    _ui_cb->_add_task_id
    ___lbmod->___lbdiv
    _ui_begin->_new_nixie
    _si_mic_task->_get_bat
    _key_task->_add_task_id
    _chrg_task->_get_bat
    _cb_task->_get_load
    _get_load->___lldiv
    _bat_task->_get_bat
    _get_bat->___lldiv
    ___lldiv->___lmul

Critical Paths under _ISR_l in COMRAM

    None.

Critical Paths under _ISR_h in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR_l in BANK0

    None.

Critical Paths under _ISR_h in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0  115674
                                             41 COMRAM     2     2      0
                                              0 BANK0      2     2      0
                            ___lldiv
                             ___lmul
                        _add_task_id
                           _bat_task
                            _cb_task
                          _chrg_task
                          _cmp0_init
                          _find_task
                            _get_bat
                          _gpio_init
                           _key_task
                        _si_mic_task
                         _sleep_task
                          _task_init
                        _timer0_init
                        _timer1_init
                        _timer2_init
 ---------------------------------------------------------------------------------
 (1) _task_init                                            1     1      0     130
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _find_task                                            1     0      1   72787
                                             40 COMRAM     1     0      1
                           _bat_task
                            _cb_task
                          _chrg_task
                           _key_task
                        _si_mic_task
                         _sleep_task
                           _ui_begin
                              _ui_cb
                            _ui_chrg
                        _ui_chrgfree
                        _ui_chrgfull
                        _ui_dl_getup
                              _ui_kl
                          _ui_smoend
                          _ui_smoing
                          _ui_timout
                          _ui_ts_off
                           _ui_ts_on
 ---------------------------------------------------------------------------------
 (2) _ui_ts_on                                             2     1      1    7920
                                             14 COMRAM     2     1      1
                            ___lbdiv
                        _add_task_id
                                _ldz
                          _new_nixie
 ---------------------------------------------------------------------------------
 (2) _ui_ts_off                                            2     1      1    7796
                                             14 COMRAM     2     1      1
                            ___lbdiv
                        _add_task_id
                                _ldz
                          _new_nixie
 ---------------------------------------------------------------------------------
 (2) _ui_timout                                            1     0      1    1422
                                             12 COMRAM     1     0      1
                            ___lbdiv
                                _ldz
                          _new_nixie
 ---------------------------------------------------------------------------------
 (2) _ui_smoing                                            2     1      1     659
                                             12 COMRAM     2     1      1
                                _ldz
                          _new_nixie
 ---------------------------------------------------------------------------------
 (2) _ui_smoend                                            2     1      1    1608
                                             12 COMRAM     2     1      1
                            ___lbdiv
                                _ldz
                          _new_nixie
 ---------------------------------------------------------------------------------
 (2) _ui_kl                                                2     1      1     442
                                             12 COMRAM     2     1      1
                                _ldz
                          _new_nixie
 ---------------------------------------------------------------------------------
 (2) _ui_dl_getup                                          2     1      1    7765
                                             14 COMRAM     2     1      1
                            ___lbdiv
                        _add_task_id
                                _ldz
                          _new_nixie
 ---------------------------------------------------------------------------------
 (2) _ui_chrgfull                                          2     1      1     442
                                             12 COMRAM     2     1      1
                                _ldz
                          _new_nixie
 ---------------------------------------------------------------------------------
 (2) _ui_chrgfree                                          1     0      1     411
                                             12 COMRAM     1     0      1
                                _ldz
                          _new_nixie
 ---------------------------------------------------------------------------------
 (2) _ui_chrg                                              1     0      1    1453
                                             12 COMRAM     1     0      1
                            ___lbdiv
                                _ldz
                          _new_nixie
 ---------------------------------------------------------------------------------
 (2) _ui_cb                                                2     1      1    8198
                                             14 COMRAM     2     1      1
                            ___lbdiv
                            ___lbmod
                        _add_task_id
                                _ldz
                          _new_nixie
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     309
                                              5 COMRAM     4     3      1
                            ___lbdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1    1011
                                              1 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _ui_begin                                             2     1      1     442
                                             12 COMRAM     2     1      1
                          _cmp0_init
                          _gpio_init
                                _ldz
                          _new_nixie
                         _sleep_mode
                        _timer0_init
                        _timer1_init
                        _timer2_init
 ---------------------------------------------------------------------------------
 (3) _new_nixie                                           11    11      0     148
                                              1 COMRAM    11    11      0
 ---------------------------------------------------------------------------------
 (3) _ldz                                                  1     1      0     155
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _sleep_task                                           3     2      1     278
                                              1 COMRAM     3     2      1
                          _cmp0_init
                          _gpio_init
                         _sleep_mode
                        _timer0_init
                        _timer1_init
                        _timer2_init
 ---------------------------------------------------------------------------------
 (1) _timer2_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _sleep_mode                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _gpio_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _cmp0_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _si_mic_task                                          6     5      1    9546
                                             34 COMRAM     6     5      1
                        _add_task_id
                            _get_bat
                           _get_load
 ---------------------------------------------------------------------------------
 (1) _key_task                                             2     1      1    6497
                                             14 COMRAM     2     1      1
                        _add_task_id
 ---------------------------------------------------------------------------------
 (2) _chrg_task                                            2     1      1    7601
                                             34 COMRAM     2     1      1
                        _add_task_id
                            _get_bat
 ---------------------------------------------------------------------------------
 (2) _cb_task                                              5     4      1    8346
                                             32 COMRAM     5     4      1
                        _add_task_id
                           _get_load
 ---------------------------------------------------------------------------------
 (2) _get_load                                             6     6      0    1939
                                             26 COMRAM     6     6      0
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     866
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _add_task_id                                         13     7      6    6219
                                              1 COMRAM    13     7      6
 ---------------------------------------------------------------------------------
 (2) _bat_task                                             5     4      1    1295
                                             34 COMRAM     5     4      1
                            _get_bat
 ---------------------------------------------------------------------------------
 (2) _get_bat                                              8     6      2    1042
                                             26 COMRAM     8     6      2
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     971
                                             13 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR_l                                                1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR_h                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lldiv
     ___lmul (ARG)
   ___lmul
   _add_task_id
   _bat_task
     _get_bat
       ___lldiv
         ___lmul (ARG)
   _cb_task
     _add_task_id
     _get_load
       ___lldiv
         ___lmul (ARG)
       ___lmul
   _chrg_task
     _add_task_id
     _get_bat
       ___lldiv
         ___lmul (ARG)
   _cmp0_init
   _find_task
     _bat_task
       _get_bat
         ___lldiv
           ___lmul (ARG)
     _cb_task
       _add_task_id
       _get_load
         ___lldiv
           ___lmul (ARG)
         ___lmul
     _chrg_task
       _add_task_id
       _get_bat
         ___lldiv
           ___lmul (ARG)
     _key_task
       _add_task_id
     _si_mic_task
       _add_task_id
       _get_bat
         ___lldiv
           ___lmul (ARG)
       _get_load
         ___lldiv
           ___lmul (ARG)
         ___lmul
     _sleep_task
       _cmp0_init
       _gpio_init
       _sleep_mode
       _timer0_init
       _timer1_init
       _timer2_init
     _ui_begin
       _cmp0_init
       _gpio_init
       _ldz
       _new_nixie
       _sleep_mode
       _timer0_init
       _timer1_init
       _timer2_init
     _ui_cb
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
       _add_task_id
       _ldz
       _new_nixie
     _ui_chrg
       ___lbdiv
       _ldz
       _new_nixie
     _ui_chrgfree
       _ldz
       _new_nixie
     _ui_chrgfull
       _ldz
       _new_nixie
     _ui_dl_getup
       ___lbdiv
       _add_task_id
       _ldz
       _new_nixie
     _ui_kl
       _ldz
       _new_nixie
     _ui_smoend
       ___lbdiv
       _ldz
       _new_nixie
     _ui_smoing
       _ldz
       _new_nixie
     _ui_timout
       ___lbdiv
       _ldz
       _new_nixie
     _ui_ts_off
       ___lbdiv
       _add_task_id
       _ldz
       _new_nixie
     _ui_ts_on
       ___lbdiv
       _add_task_id
       _ldz
       _new_nixie
   _get_bat
     ___lldiv
       ___lmul (ARG)
   _gpio_init
   _key_task
     _add_task_id
   _si_mic_task
     _add_task_id
     _get_bat
       ___lldiv
         ___lmul (ARG)
     _get_load
       ___lldiv
         ___lmul (ARG)
       ___lmul
   _sleep_task
     _cmp0_init
     _gpio_init
     _sleep_mode
     _timer0_init
     _timer1_init
     _timer2_init
   _task_init
   _timer0_init
   _timer1_init
   _timer2_init

 _ISR_l (ROOT)

 _ISR_h (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              FF      0       0       6        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80      2      59       4       69.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     2B      7C       1       98.4%
EEDATA               1      0       0       0        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D5       5        0.0%
DATA                 0      0      D5       7        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed May 28 17:10:37 2025

                       PL2 14DC                         PL4 14E6                         PL6 0E2E  
                       PL8 1242                         _GO 007D09                         _ui 000D  
                       _yd 0038                         _pw 007C                         _ts 0037  
                       bsr 000FE0                         _zz 007A                        PL10 1572  
                      PL20 1346                        PL12 1584                        PL30 09D6  
                      PL22 0E38                        PL14 099E                        PL40 1B74  
                      PL32 185A                        PL24 1110                        PL16 09AA  
                      PL50 09E6                        PL42 09DC                        PL34 16C2  
                      PL26 09BE                        PL18 1DB6                        PL60 0A04  
                      PL52 09F0                        PL44 0C40                        PL36 19E4  
                      PL28 09D0                        PL70 0C50                        PL62 16D2  
                      PL54 09F8                        PL46 162A                        PL38 1254  
                      PL80 1634                        PL72 0A26                        PL64 0A10  
                      PL56 1BD8                        PL48 1350                        PL90 0A62  
                      PL82 0A44                        PL74 0A30                        PL66 0A18  
                      PL58 1DDA                        PL92 1B84                        PL84 1596  
                      PL76 0A3A                        PL68 0A1E                        PL94 1B8C  
                      PL86 0A4E                        PL78 1BE4                        PL96 186E  
                      PL88 0A58                        _PA0 007C00                        _bat 0070  
                      _ldz 1E4E                        _pwm 00CE                        _zz_ 0080  
                      wreg 000FE8                config_word1 0000                config_word2 0002  
     __size_of_add_task_id 0084                       l1002 193A                       l2012 09B2  
                     l2022 15B6                       l2023 15B4                       l3040 1000  
                     l3050 106A                       l3043 101A                       l3045 10C6  
                     l3039 0FE6                       l5203 03A6                       l4076 1132  
                     l5220 042C                       l5204 039A                       l5221 0434  
                     l4078 1154                       l5222 043C                       l5223 0444  
                     l5312 0700                       l5224 044C                       l5313 0708  
                     l5305 06C6                       l5233 048C                       l5225 0454  
                     l4098 1226                       l5330 078A                       l5314 0710  
                     l5306 06CE                       l5250 0514                       l5234 0494  
                     l5226 045C                       l5323 0752                       l5307 06D6  
                     l5251 051C                       l5235 049C                       l5227 0464  
                     l5340 07D6                       l5324 075A                       l5260 0562  
                     l5252 0524                       l5236 04A4                       l5341 07DE  
                     l5325 0762                       l5261 056A                       l5253 052C  
                     l5237 04AC                       l5165 0182                       l5350 0824  
                     l5342 07E6                       l5326 076A                       l5262 0572  
                     l5254 0534                       l5238 04B4                       l5351 082C  
                     l5335 07AE                       l5327 0772                       l5263 057A  
                     l5255 053C                       l5239 04BC                       l5352 0834  
                     l5336 07B6                       l5328 077A                       l5280 0602  
                     l5248 0504                       l5353 083C                       l5337 07BE  
                     l5329 0782                       l5281 060A                       l5249 050C  
                     l5354 0844                       l5338 07C6                       l5290 0650  
                     l5282 0612                       l5347 080C                       l5339 07CE  
                     l5291 0658                       l5283 061A                       l5348 0814  
                     l5292 0660                       l5284 0622                       l5268 05A6  
                     l5357 08B2                       l5349 081C                       l5293 0668  
                     l5285 062A                       l5269 05AE                       l5294 0670  
                     l5278 05F2                       l5295 0678                       l5279 05FA  
                     l5296 0680                       ?_ldz 003C                       _ADIE 007D4A  
                     _ADIF 007D52                       l8462 0C84                       l8472 0D4C  
                     l8474 0D48                       u8220 165E                       u8225 1654  
                     u8315 0AB8                       u8316 0ABA                       u8325 0AC2  
                     u8414 0B30                       u8326 0AC4                       u8415 0B2C  
                     u8345 0ADE                       u8370 0B04                       u8346 0AE0  
                     u8515 0C02                       u8371 0AFE                       u8516 0C04  
                     u8460 0B80                       u8461 0B7A                       u8365 0AF4  
                     u8285 0A92                       u8454 0B62                       u8366 0AF6  
                     u8286 0A94                       u8535 0C1E                       u8455 0B5C  
                     u8295 0A9C                       u8536 0C20                       u8480 0BDC  
                     u8296 0A9E                       u8555 0C3C                       u8556 0C3E  
                     u8388 0B06                       u8478 0B82                       u8498 0BDE  
                     _cb_o 0039                       _main 010C                       _full 0035  
                     _pw_t 006C               get_load@temp 0058                       fsr2h 000FDA  
                     indf2 000FDF                       fsr1l 000FE1                       fsr2l 000FD9  
                     btemp 007D                       ldz@a 003D                       _zz_p 003A  
                     prodl 000FF3                       start 0032         add_task_id@task_id 0042  
             ___param_bank 000000         add_task_id@suc_max 0041                      ??_ldz 003D  
                    l12600 0AEA                      l12601 0AEC                      l12620 0BB8  
                    l12612 0B94                      l12604 0B42                      l13093 1A52  
                    l12621 0BBA                      l12613 0B96                      l12622 0BBC  
                    l12614 0B98                      l12606 0B70                      l12615 0B9A  
                    l12607 0B6C                      l12619 0BB6                      l12646 12BC  
                    l12591 0A88                      l12593 0A8A                      l12594 0AAE  
                    l12755 1CA0                      l12595 0AB0                      l18003 10A8  
                    l18101 11CA                      l18007 10B2                      l18105 11D4  
                    l18019 10D2                      l18115 11F0                      l18107 11DE  
                    l18211 0D40                      l18133 123C                      l19101 04C0  
                    l18039 1108                      l18119 11FA                      l18047 1134  
                    l18303 1AC4                      l19103 04C6                      l18073 1172  
                    l18065 115E                      l19201 05B4                      l19121 04E6  
                    l19113 04DC                      l18075 1176                      l18147 0C72  
                    l18331 12C0                      l19211 05C6                      l18093 11BA  
                    l18069 1162                      l18253 0DCA                      l18229 0D6A  
                    l18341 12E4                      l18325 1290                      l18333 12C6  
                    l19301 06A6                      l18247 0DB6                      l18239 0D90  
                    l18159 0CA2                      l18167 0CB8                      l19071 046E  
                    l19047 0420                      l19039 040C                      l17561 1A12  
                    l18249 0DC0                      l18273 0E18                      l18193 0D10  
                    l18361 132A                      l19153 0542                      l19129 04F8  
                    l19081 0480                      l17571 1A44                      l17563 1A16  
                    l18259 0DE0                      l18179 0CE2                      l17803 0B72  
                    l18419 1D10                      l18523 1B48                      l18451 173E  
                    l18443 16FE                      l19403 07A2                      l19331 06F4  
                    l19323 06E0                      l19251 0630                      l19227 05E6  
                    l19219 05D4                      l19163 0556                      l17549 1CB4  
                    l17821 0BF2                      l17813 0BC0                      l18349 12FC  
                    l18621 151A                      l19309 06BA                      l19261 0644  
                    l19069 0468                      l17559 1A06                      l17911 1958  
                    l17903 1942                      l17831 0C12                      l17823 0BF6  
                    l17815 0BD2                      l18359 1318                      l18383 1C7E  
                    l18375 1C68                      l18527 1B4C                      l18447 1718  
                    l18623 152C                      l17809 0B9E                      l18393 1DA2  
                    l18481 199C                      l18721 17B4                      l18457 174A  
                    l19361 0732                      l19353 0728                      l19345 0716  
                    l17915 1964                      l17907 194C                      l17851 1D68  
                    l18491 19C4                      l18483 19AE                      l18459 174E  
                    l18635 1552                      l18627 153E                      l18571 146A  
                    l19507 0998                      l19427 07EC                      l19371 0746  
                    l19283 0686                      l19179 0584                      l18811 018A  
                    l17837 0C2A                      l17829 0C0E                      l18549 1B5A  
                    l18725 17C2                      l18717 1790                      l18581 1496  
                    l19437 0800                      l19293 069C                      l19189 059A  
                    l17919 1970                      l17839 0C30                      l17863 1D82  
                    l17855 1D6E                      l18575 1476                      l19463 084A  
                    l19471 08B4                      l18903 02CA                      l18823 01B2  
                    l18815 0196                      l17793 0B20                      l17777 0ACE  
                    l17857 1D72                      l18729 17D6                      l18649 1D38  
                    l18585 14A2                      l18569 145A                      l18761 137A  
                    l18753 135A                      l18745 1DC2                      l19465 08A8  
                    l18841 01E4                      l17779 0AD2                      l18683 1822  
                    l17867 1D8A                      l17883 1E04                      l17875 1DEE  
                    l18595 14C0                      l18771 13A2                      l18763 1382  
                    l18755 1362                      l19483 090A                      l19395 0790  
                    l18827 01C0                      l18819 01A4                      l17981 1052  
                    l17797 0B44                      l18781 13CA                      l18773 13AA  
                    l18765 138A                      l18757 136A                      l19485 0912  
                    l18829 01C8                      l18679 180E                      l18783 13D2  
                    l18775 13B2                      l18767 1392                      l18759 1372  
                    l18791 13EA                      l18951 034C                      l18935 0320  
                    l18919 02F4                      l18871 0272                      l18855 0246  
                    l18785 13DA                      l18777 13BA                      l18769 139A  
                    l19497 092A                      l18787 13E2                      l18779 13C2  
                    l17989 1074                      l18967 0376                      l18887 029E  
                    l18997 03AC                      ?_main 003C            __end_of___lbdiv 1D8E  
          __end_of___lbmod 1E0C            __end_of___lldiv 1A64                      u11907 1A9A  
                    u11860 0926                      u11917 1AB4                      u11927 187A  
                    u11887 1836                      u11897 184C                      _PINA4 007C34  
                    _PINA5 007C35            __end_of_cb_task 162A                      _ISR_h 0008  
                    _ISR_l 0018        ___lmul@multiplicand 0041            __end_of_get_bat 1C4A  
                    _key_o 0077                      _ui_cb 125E                      _ui_id 007B  
                    _ui_ld 0067                      _ui_kl 1B34            __end_of_ui_chrg 1C98  
                    tablat 000FF5                      status 000FD8            ___lbdiv@divisor 003D  
          ___lbdiv@counter 003F             find_task@task_ 0064            __initialization 1ACE  
             __end_of_main 099E                     ??_main 0065              __activetblptr 000002  
                   ?_ISR_h 003C                     ?_ISR_l 003C               ?_si_mic_task 005E  
         ui_chrgfree@task_ 0048                     _ADCON0 000FA1                     _ADCON1 000FA0  
                   _ADRESH 000FA3                     _ADRESL 000FA2                     ?_ui_cb 004A  
                   ?_ui_kl 0048                     i1l5402 0026                     i1l5403 002A  
                   i2l5380 0EF6                     i2l5372 0E86                     i2l5382 0F12  
                   i2l5374 0EA2                     i2l5391 0F7E                     i2l5392 0F98  
                   i2l5384 0F2E                     i2l5376 0EBE                     i2l5386 0F4A  
                   i2l5378 0EDA                     i2l5396 0FA2                     i2l5397 0FB6  
             ?_ui_dl_getup 004A           __end_of_bat_task 1976               ?_ui_chrgfree 0048  
             ?_ui_chrgfull 0048           __end_of_get_load 18F8                     ___lmul 1C98  
         ui_chrgfull@task_ 0048                  ??___lbdiv 003E                  ??___lbmod 0042  
                ??___lldiv 0051               ?_timer0_init 003C                     _chrg_o 0036  
             ?_timer1_init 003C               ?_timer2_init 003C                  ??_cb_task 005D  
         __end_of_key_task 1242                     clear_0 1B14                     clear_1 1B20  
            bat_task@task_ 005E                     _tim_ui 0021                     _ts_cnt 0031  
                   _smoing 0026                     _timout 0027                     main@b_ 00D7  
                ??_get_bat 0058           __end_of_ui_begin 185A           __end_of_nixienum 010B  
             __pdataCOMRAM 0067           __end_of_ui_ts_on 14DC               __mediumconst 0000  
                ??_ui_chrg 0049                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8                  PS1101@PA0 007C00                  PS1101@GIE 007F97  
                PS1101@PB0 007C08                  PS1101@PC0 007C10                  PS1101@PB2 007C0A  
                PS1101@PC1 007C11                  PS1101@PB3 007C0B                  PS1101@PC2 007C12  
                PS1101@PB4 007C0C                  PS1101@PC3 007C13                  PS1101@PB5 007C0D  
                PS1101@PC4 007C14                  PS1101@PC5 007C15                  PS1101@PR0 000FD6  
                PS1101@PR2 000FC8                  PS1101@PR3 000FB9                  PS1101@PME 000FBD  
         ___lbdiv@dividend 003E            ___lbmod@divisor 0041                 __accesstop 0080  
  __end_of__initialization 1B26            ___lbmod@counter 0043              ___rparam_used 000001  
            __end_of_ISR_h 0FBA              __end_of_ISR_l 0032             __pcstackCOMRAM 003C  
       __size_of_cmp0_init 0018               __pidataBANK0 1EBE              __end_of_ui_cb 1346  
            __end_of_ui_kl 1B74                 __end_ofPL2 14E6                 __end_ofPL4 14FA  
               __end_ofPL6 0E38                 __end_ofPL8 1254           ___lbdiv@quotient 0040  
       __size_of_chrg_task 0156                    ??_ISR_h 003C                    ??_ISR_l 003C  
       __size_of_find_task 00E2            sleep_task@task_ 003D                    ??_ui_cb 004B  
                  ??_ui_kl 0049                 __pbssBANK0 0080         __size_of_gpio_init 0026  
       __size_of_new_nixie 01D6                    ?___lmul 003D             ___lmul@product 0045  
       __size_of_task_init 001A              ??_add_task_id 0043         __size_of_ui_smoend 0086  
       __size_of_ui_smoing 0092         __size_of_ui_timout 0036         __size_of_ui_ts_off 0078  
                  i2l17431 0E5E                    i2l17505 0F4E                    i2l17433 0E60  
                  i2l17525 0F6E                  ?_bat_task 005E          __end_of_cmp0_init 1E7E  
                ?_get_load 003C       __size_of_si_mic_task 01D4            PS1101@HBPWMOE00 007DE8  
          PS1101@HBPWMOE01 007DE9            PS1101@HBPWMOE10 007DEA            PS1101@HBPWMOE11 007DEB  
          PS1101@HBPWMOE20 007DEC            PS1101@HBPWMOE21 007DED                  ?_key_task 004A  
        __end_of_chrg_task 1110       __size_of_ui_dl_getup 006E                    __Hparam 0000  
                ?_ui_begin 0048       __size_of_ui_chrgfree 0028       __size_of_ui_chrgfull 0040  
                  __Lparam 0000          __end_of_find_task 143A                  ?_ui_ts_on 004A  
                  ___lbdiv 1D5A            __size_of___lmul 004C  add_task_id@interval_ticks 0048  
                  ___lbmod 1DE6                    ___lldiv 19EE                    _adc_cnt 002C  
             __psmallconst 0100                    _cb_task 159E                    __pcinit 1ACE  
                  __ramtop 0100       __size_of_timer0_init 0014                    _chrging 0079  
     __size_of_timer1_init 001C                    __ptext0 010C                    __ptext1 1DC0  
                  __ptext2 1358                    __ptext3 143A                    __ptext4 14FA  
                  __ptext5 1D24                    __ptext6 16DA                    __ptext7 176C  
                  __ptext8 1B34                    __ptext9 1976       __size_of_timer2_init 0016  
                  _get_bat 1BEE          __end_of_gpio_init 1E32                    _kl_init 0025  
                  _key_cnt 0033               __size_of_ldz 0018                 ??_bat_task 005F  
                  _ui_chrg 1C4A                    _ui_buff 0001                    _tim_cnt 001D  
                  _pw_mode 0030                    _pwm_bat 0073                    _pwm_cnt 002A  
        __end_of_new_nixie 0C40                 ??_get_load 0056             __pintcode_body 0E44  
      __end_of_add_task_id 16C2       end_of_initialization 1B26          __end_of_task_init 1DDA  
            __Lmediumconst 0000                 ??_key_task 004B                    int_func 0E44  
        __end_of_ui_smoend 17F2          __end_of_ui_smoing 176C          __end_of_ui_timout 1D5A  
        __end_of_ui_ts_off 1572            ___lldiv@divisor 004D            ___lldiv@counter 0055  
               ??_ui_begin 0049               cb_task@task_ 005C                 ??_ui_ts_on 004B  
                  postdec1 000FE5                    postdec2 000FDD                 _sleep_mode 1B92  
               _sleep_task 1A64                    postinc0 000FEE                    postinc2 000FDE  
               PS1101@ADIE 007D4A                 PS1101@ADIF 007D52                 PS1101@ADIP 007D5A  
               PS1101@ADON 007D08                 PS1101@PAIE 007D65                 PS1101@PAIF 007D6D  
               PS1101@PBIE 007D66                 PS1101@PBIF 007D6E                 PS1101@PCIE 007D67  
               PS1101@PCIF 007D6F                 PS1101@PAOD 000F92                 PS1101@PAPD 000F94  
               PS1101@PEIE 007F96                 PS1101@PR1H 000FCF                 PS1101@PR1L 000FCE  
               PS1101@PCON 000FF1                 PS1101@PAPU 000F83                 PS1101@PBPU 000F84  
               PS1101@PCPU 000F85                 PS1101@SMCR 000FD4                 PS1101@POLS 000FBE  
               PS1101@TMR0 000FD5                 PS1101@TMR2 000FCA                 PS1101@TMR3 000FBA  
                _USART_BUF 0029           ___lbmod@dividend 0042                 get_bat@ttt 005A  
      chrg_task@cheg_num_d 0023                ___lbmod@rem 0044             __end_of___lmul 1CE4  
            __pidataCOMRAM 1E7E              ui_begin@task_ 0048             chrg_task@task_ 005E  
              _add_task_id 163E                __end_ofPL10 1584                __end_ofPL20 1350  
              __end_ofPL12 1596                __end_ofPL30 09DC                __end_ofPL22 0E44  
              __end_ofPL14 09AA                __end_ofPL40 1B84                __end_ofPL32 186E  
              __end_ofPL24 111C                __end_ofPL16 09BE                __end_ofPL50 09F0  
              __end_ofPL42 09E6                __end_ofPL34 16D2                __end_ofPL26 09D0  
              __end_ofPL18 1DC0                __end_ofPL60 0A10                __end_ofPL52 09F8  
              __end_ofPL44 0C50                __end_ofPL36 19EE                __end_ofPL28 09D6  
              __end_ofPL70 0C5A                __end_ofPL62 16DA                __end_ofPL54 0A04  
              __end_ofPL46 1634                __end_ofPL38 125E                __end_ofPL80 163E  
              __end_ofPL72 0A30                __end_ofPL64 0A18                __end_ofPL56 1BE4  
              __end_ofPL48 1358                __end_ofPL90 0A6A                __end_ofPL82 0A4E  
              __end_ofPL74 0A3A                __end_ofPL66 0A1E                __end_ofPL58 1DE6  
              __end_ofPL92 1B8C                __end_ofPL84 159E                __end_ofPL76 0A44  
              __end_ofPL68 0A26                __end_ofPL94 1B92                __end_ofPL86 0A58  
              __end_ofPL78 1BEE                __end_ofPL96 1876                __end_ofPL88 0A62  
      start_initialization 1ACE                __end_of_ldz 1E66                   ??___lmul 0045  
              ?_sleep_mode 003C                ?_sleep_task 003D                __pdataBANK0 00CE  
                 PS1101@GO 007D09                __pbssCOMRAM 0001               _key_cnt_flag 0032  
            __pcstackBANK0 00D7                  _adc_begin 002B          __size_of_bat_task 007E  
        __size_of_get_load 0082                  _cmp0_init 1E66          __size_of_key_task 0126  
                __pintcode 0008                  _chrg_task 0FBA          __size_of_ui_begin 0068  
                 ?___lbdiv 003D                   ?___lbmod 0041                   ?___lldiv 0049  
               ui_cb@task_ 004A                   ?_cb_task 005C             PS1101@CMP0CON0 000FA8  
           PS1101@CMP0CON1 000FA7          __size_of_ui_ts_on 00A2                __pintcodelo 0018  
                _find_task 1358                   ?_get_bat 0056                __smallconst 0100  
           __size_of_ISR_h 0FB2             __size_of_ISR_l 001A              ??_si_mic_task 005F  
                 ?_ui_chrg 0048                  _gpio_init 1E0C                  bat_task@b 0061  
               ui_kl@task_ 0048             __size_of_ui_cb 00E8        __size_of_sleep_mode 0046  
           __size_of_ui_kl 0040                 task_init@i 003D        __size_of_sleep_task 006A  
            ??_ui_dl_getup 004B                  _new_nixie 0A6A                 ?_cmp0_init 003C  
            ??_ui_chrgfree 0049              ??_ui_chrgfull 0049                  _task_init 1DC0  
                _task_list 0086                cb_task@zz_t 005F                 ?_chrg_task 005E  
                _ui_smoend 176C              ??_timer0_init 003D                  _ui_smoing 16DA  
                _ui_timout 1D24                  _ui_ts_off 14FA              ??_timer1_init 003D  
            ??_timer2_init 003D                 ?_find_task 0064              add_task_id@id 0047  
               ?_gpio_init 003C          ___lmul@multiplier 003D                  copy_data0 1AE2  
                copy_data1 1B02                 ?_new_nixie 003C        __end_of_si_mic_task 0E2E  
                 __Hrparam 0000                 ?_task_init 003C                   __Lrparam 0000  
      __end_of_ui_dl_getup 19E4        __end_of_ui_chrgfree 1DB6               ui_chrg@task_ 0048  
             _si_mic_state 0028        __end_of_ui_chrgfull 1D24                 ?_ui_smoend 0048  
               ?_ui_smoing 0048                 ?_ui_timout 0048                 ?_ui_ts_off 004A  
         __size_of___lbdiv 0034           __size_of___lbmod 0026           __size_of___lldiv 0076  
         __size_of_cb_task 008C                   _adc_flag 002D           __size_of_get_bat 005C  
      __end_of_timer0_init 1EBE        __end_of_timer1_init 1E4E               ?_add_task_id 003D  
      __end_of_timer2_init 1EAA                   _cfg_flag 0075                   _bat_task 18F8  
         _si_mic_task$4421 0060                   _chrg_cnt 0034                   _chrg_num 0078  
                 __ptext10 1CE4                   __ptext11 1D8E                   __ptext20 1E94  
                 __ptext12 1C4A                   __ptext21 1E32                   __ptext13 125E  
         __size_of_ui_chrg 004E                   __ptext30 1876                   __ptext22 1EAA  
                 __ptext14 1DE6                   __ptext31 1C98                   __ptext23 1B92  
                 __ptext15 1D5A                   __ptext32 163E                   __ptext24 1E0C  
                 __ptext16 17F2                   __ptext33 18F8                   __ptext25 1E66  
                 __ptext17 0A6A                   __ptext34 1BEE                   __ptext26 0C5A  
                 __ptext18 1E4E                   __ptext35 19EE                   __ptext27 111C  
                 __ptext19 1A64                   __ptext28 0FBA                   __ptext29 159E  
            PS1101@CMP0OUT 007D46                   _get_load 1876                ??_cmp0_init 003D  
                 _key_task 111C              __size_of_main 0892                   _ui_begin 17F2  
         si_mic_task@task_ 005E                   _nixienum 0101                   _ui_ts_on 143A  
             ??_sleep_mode 003D               ??_sleep_task 003E                ??_chrg_task 005F  
                 int$flags 007D              key_task@task_ 004A                   _pwm_flag 002E  
           ui_smoend@task_ 0048                ??_find_task 0065                   _zz_begin 003B  
           ui_smoing@task_ 0048             ui_timout@task_ 0048                ??_gpio_init 003D  
              _si_mic_flag 0018                _si_mic_task 0C5A             ui_ts_off@task_ 004A  
                 intlevel1 0000                   intlevel2 0000                _lowbat_init 002F  
       __end_of_sleep_mode 1BD8         __end_of_sleep_task 1ACE                ??_new_nixie 003D  
             PS1101@ADCON0 000FA1               PS1101@ADCON1 000FA0               PS1101@DACCON 000FA4  
             PS1101@ADRESH 000FA3               PS1101@ADRESL 000FA2                _ui_dl_getup 1976  
         ___lldiv@dividend 0049             _new_nixie$6626 0040             _new_nixie$6627 0042  
           _new_nixie$6628 0044             _new_nixie$6629 0046               PS1101@CMP0IE 007D4B  
             PS1101@CMP0IF 007D53               PS1101@CMP0EN 007D47               PS1101@CMP1EN 007D37  
             PS1101@T1CON0 000FCD               PS1101@T1CON1 000FCC                _ui_chrgfree 1D8E  
             PS1101@T2CON0 000FC1               PS1101@T2CON1 000FC0               PS1101@PB1MSK 007C81  
             PS1101@T3CON0 000FB8               PS1101@PA4MSK 007C7C               PS1101@PA5MSK 007C7D  
              _ui_chrgfull 1CE4               PS1101@PC6MSK 007C8E               PS1101@DUTY20 000FC6  
             PS1101@DUTY22 000FC4               PS1101@DUTY24 000FC2               PS1101@FVRCON 000FD3  
             PS1101@OSCCON 000FF0               PS1101@TMR0IE 007D78               PS1101@TMR0IF 007D80  
             PS1101@TMR1IE 007D79               PS1101@TMR1IF 007D81               PS1101@TMR2IE 007D7C  
             PS1101@TMR2IF 007D84               PS1101@TMR3IE 007D4D               PS1101@TMR3IF 007D55  
             PS1101@TMR2IP 007D8C               PS1101@TMR1ON 007E68               PS1101@TMR2ON 007E0A  
             PS1101@TMR3ON 007DC2                ??_task_init 003D               PS1101@TRISC0 007C58  
             PS1101@TRISB2 007C52               PS1101@TRISC1 007C59               PS1101@TRISB3 007C53  
             PS1101@TRISC2 007C5A               PS1101@TRISB4 007C54               PS1101@TRISC3 007C5B  
             PS1101@TRISB5 007C55               PS1101@TRISC4 007C5C               PS1101@TRISC5 007C5D  
              _pw_add_flag 0076                ??_ui_smoend 0049                ??_ui_smoing 0049  
              ??_ui_timout 0049                ??_ui_ts_off 004B                _timer0_init 1EAA  
              _timer1_init 1E32                _timer2_init 1E94              ui_ts_on@task_ 004A  
              PS1101@DACEN 007D26           ___lldiv@quotient 0051                PS1101@PA0OD 007C90  
              PS1101@T0CON 000FD7                PS1101@IOCUR 000FB6                PS1101@FVREN 007E98  
              PS1101@PINA1 007C31                PS1101@PINB1 007C39                PS1101@PINA4 007C34  
              PS1101@PINA5 007C35                PS1101@PINC6 007C46                PS1101@TMR1H 000FD1  
              PS1101@TMR1L 000FD0                PS1101@PORTA 000F80                PS1101@PORTB 000F81  
              PS1101@PORTC 000F82                PS1101@TRISA 000F89                PS1101@TRISB 000F8A  
              PS1101@TRISC 000F8B     add_task_id@interval_ms 003D           ui_dl_getup@task_ 004A  
