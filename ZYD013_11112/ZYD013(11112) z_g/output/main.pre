
# 1 ".\src\main.c"

# 121 ".\src\peripheral.h"
void cmp0_init(void);
void gpio_init(void);
void timer1_init(void);
void timer0_init(void);
unsigned int adc_demo(unsigned char chl);

void uart_init(void);
void uart_txc(unsigned char c);
void uart_txnum(unsigned long p,unsigned char len);

void uart_txln(const char * p);
void timer2_init(void);


# 19 ".\src\PS1101.h"
#pragma intrinsic(_delay)
extern __nonreentrant void _delay(unsigned long);

# 42
static volatile unsigned char TOSU @0xfff;
static volatile unsigned char TOSH @0xffe;
static volatile unsigned char TOSL @0xffd;
static volatile unsigned char STKPTR @0xffc;
static volatile unsigned char PCLATU @0xffb;
static volatile unsigned char PLCATH @0xffa;
static volatile unsigned char PCL @0xff9;
static volatile unsigned char TBLPTRU @0xff8;
static volatile unsigned char TBLPTRH @0xff7;
static volatile unsigned char TBLPTRL @0xff6;
static volatile unsigned char TABLAT @0xff5;
static volatile unsigned char PRODH @0xff4;
static volatile unsigned char PRODL @0xff3;
static volatile unsigned char INTCON @0xff2;

static volatile bit GIE @((unsigned)&INTCON*8)+7;
static volatile bit GIEH @((unsigned)&INTCON*8)+7;
static volatile bit GIEL @((unsigned)&INTCON*8)+6;
static volatile bit PEIE @((unsigned)&INTCON*8)+6;


static volatile unsigned char PCON @0xff1;

static volatile bit IPEN @((unsigned)&PCON*8)+7;
static volatile bit PLL @((unsigned)&PCON*8)+6;
static volatile bit PREDIV2 @((unsigned)&PCON*8)+3;
static volatile bit PREDIV1 @((unsigned)&PCON*8)+2;
static volatile bit PREDIV0 @((unsigned)&PCON*8)+1;
static volatile bit WDTEN @((unsigned)&PCON*8)+0;


static volatile unsigned char OSCCON @0xff0;

static volatile bit ICE_TRMEN @((unsigned)&OSCCON*8)+7;
static volatile bit FINTOSC2 @((unsigned)&OSCCON*8)+6;
static volatile bit FINTOSC1 @((unsigned)&OSCCON*8)+5;
static volatile bit FINTOSC0 @((unsigned)&OSCCON*8)+4;
static volatile bit SIGS @((unsigned)&OSCCON*8)+3;
static volatile bit CKOE @((unsigned)&OSCCON*8)+2;
static volatile bit OSCF @((unsigned)&OSCCON*8)+1;
static volatile bit OSCM @((unsigned)&OSCCON*8)+0;


static volatile unsigned char INDF @0xfef;
static volatile unsigned char POSTINC0 @0xfee;
static volatile unsigned char POSTDEC0 @0xfed;
static volatile unsigned char PREINC0 @0xfec;
static volatile unsigned char PLUSW0 @0xfeb;
static volatile unsigned char FSR0H @0xfea;
static volatile unsigned char FSR0L @0xfe9;
static volatile unsigned char WREG @0xfe8;
static volatile unsigned char INDF1 @0xfe7;
static volatile unsigned char POSTINC1 @0xfe6;
static volatile unsigned char POSTDEC1 @0xfe5;
static volatile unsigned char PREINC1 @0xfe4;
static volatile unsigned char PLUSW1 @0xfe3;
static volatile unsigned char FSR1H @0xfe2;
static volatile unsigned char FSR1L @0xfe1;
static volatile unsigned char BSR @0xfe0;
static volatile unsigned char INDF2 @0xfdf;
static volatile unsigned char POSTINC2 @0xfde;
static volatile unsigned char POSTDEC2 @0xfdd;
static volatile unsigned char PREINC2 @0xfdc;
static volatile unsigned char PLUSW2 @0xfdb;
static volatile unsigned char FSR2H @0xfda;
static volatile unsigned char FSR2L @0xfd9;
static volatile unsigned char STATUS @0xfd8;

static volatile bit N @((unsigned)&STATUS*8)+4;
static volatile bit OV @((unsigned)&STATUS*8)+3;
static volatile bit Z @((unsigned)&STATUS*8)+2;
static volatile bit DC @((unsigned)&STATUS*8)+1;
static volatile bit C @((unsigned)&STATUS*8)+0;


static volatile unsigned char T0CON @0xfd7;

static volatile bit T0OUT @((unsigned)&T0CON*8)+7;
static volatile bit T0CS1 @((unsigned)&T0CON*8)+6;
static volatile bit T0CS0 @((unsigned)&T0CON*8)+5;
static volatile bit T0SE @((unsigned)&T0CON*8)+4;
static volatile bit PSA @((unsigned)&T0CON*8)+3;
static volatile bit PS2 @((unsigned)&T0CON*8)+2;
static volatile bit PS1 @((unsigned)&T0CON*8)+1;
static volatile bit PS0 @((unsigned)&T0CON*8)+0;

static volatile unsigned char PR0 @0xfd6;
static volatile unsigned char TMR0 @0xfd5;
static volatile unsigned char SMCR @0xfd4;

static volatile bit SM2 @((unsigned)&SMCR*8)+3;
static volatile bit SM1 @((unsigned)&SMCR*8)+2;
static volatile bit SM0 @((unsigned)&SMCR*8)+1;
static volatile bit SE @((unsigned)&SMCR*8)+0;


static volatile unsigned char FVRCON @0xfd3;

static volatile bit FVR_SEL2 @((unsigned)&FVRCON*8)+5;
static volatile bit FVR_SEL1 @((unsigned)&FVRCON*8)+4;
static volatile bit FVR_SEL0 @((unsigned)&FVRCON*8)+3;
static volatile bit FVROUTEN @((unsigned)&FVRCON*8)+3;
static volatile bit FVRPGA1 @((unsigned)&FVRCON*8)+2;
static volatile bit FVRPGA0 @((unsigned)&FVRCON*8)+1;
static volatile bit FVREN @((unsigned)&FVRCON*8)+0;


static volatile unsigned char RCON @0xfd2;

static volatile bit IRFEN @((unsigned)&RCON*8)+7;
static volatile bit STVREN @((unsigned)&RCON*8)+6;
static volatile bit RSTF1 @((unsigned)&RCON*8)+5;
static volatile bit RSTF0 @((unsigned)&RCON*8)+4;
static volatile bit TO @((unsigned)&RCON*8)+3;
static volatile bit PD @((unsigned)&RCON*8)+2;
static volatile bit POR @((unsigned)&RCON*8)+1;
static volatile bit BOR @((unsigned)&RCON*8)+0;


static volatile unsigned char TMR1H @0xfd1;
static volatile unsigned char TMR1L @0xfd0;
static volatile unsigned int TMR1 @0xfd0;

static volatile unsigned char PR1H @0xfcf;
static volatile unsigned char PR1L @0xfce;
static volatile unsigned int PR1 @0xfce;

static volatile unsigned char T1CON0 @0xfcd;

static volatile bit T1CK1 @((unsigned)&T1CON0*8)+7;
static volatile bit T1CK0 @((unsigned)&T1CON0*8)+6;
static volatile bit T1ADCEN @((unsigned)&T1CON0*8)+5;
static volatile bit T1CKPS2 @((unsigned)&T1CON0*8)+4;
static volatile bit T1CKPS1 @((unsigned)&T1CON0*8)+3;
static volatile bit T1CKPS0 @((unsigned)&T1CON0*8)+2;
static volatile bit T1SYNC @((unsigned)&T1CON0*8)+1;
static volatile bit TMR1ON @((unsigned)&T1CON0*8)+0;


static volatile unsigned char T1CON1 @0xfcc;

static volatile bit T1CAP_EDGE @((unsigned)&T1CON1*8)+6;
static volatile bit T1CH3 @((unsigned)&T1CON1*8)+5;
static volatile bit T1CH2 @((unsigned)&T1CON1*8)+4;
static volatile bit T1CH1 @((unsigned)&T1CON1*8)+3;
static volatile bit T1CH0 @((unsigned)&T1CON1*8)+2;
static volatile bit T1M1 @((unsigned)&T1CON1*8)+1;
static volatile bit T1M0 @((unsigned)&T1CON1*8)+0;


static volatile unsigned char TMR2 @0xfca;
static volatile unsigned char PR2 @0xfc8;
static volatile unsigned char DUTY20 @0xfc6;
static volatile unsigned char DUTY22 @0xfc4;
static volatile unsigned char DUTY24 @0xfc2;

static volatile unsigned char T2CON0 @0xfc1;

static volatile bit T2OUTPS4 @((unsigned)&T2CON0*8)+7;
static volatile bit T2OUTPS3 @((unsigned)&T2CON0*8)+6;
static volatile bit T2OUTPS2 @((unsigned)&T2CON0*8)+5;
static volatile bit T2OUTPS1 @((unsigned)&T2CON0*8)+4;
static volatile bit T2OUTPS0 @((unsigned)&T2CON0*8)+3;
static volatile bit TMR2ON @((unsigned)&T2CON0*8)+2;
static volatile bit T2CKPS1 @((unsigned)&T2CON0*8)+1;
static volatile bit T2CKPS0 @((unsigned)&T2CON0*8)+0;


static volatile unsigned char T2CON1 @0xfc0;

static volatile bit INT2EDGE @((unsigned)&T2CON1*8)+7;
static volatile bit INT1EDGE @((unsigned)&T2CON1*8)+6;
static volatile bit INT0EDGE @((unsigned)&T2CON1*8)+5;
static volatile bit CMP1POSE @((unsigned)&T2CON1*8)+4;
static volatile bit CMP0POSE @((unsigned)&T2CON1*8)+3;
static volatile bit CMPCLK_CS @((unsigned)&T2CON1*8)+2;
static volatile bit T2M1 @((unsigned)&T2CON1*8)+1;
static volatile bit T2M0 @((unsigned)&T2CON1*8)+0;


static volatile unsigned char DTC @0xfbf;

static volatile bit DTCKS1 @((unsigned)&DTC*8)+7;
static volatile bit DTCKS0 @((unsigned)&DTC*8)+6;
static volatile bit DTD5 @((unsigned)&DTC*8)+5;
static volatile bit DTD4 @((unsigned)&DTC*8)+4;
static volatile bit DTD3 @((unsigned)&DTC*8)+3;
static volatile bit DTD2 @((unsigned)&DTC*8)+2;
static volatile bit DTD1 @((unsigned)&DTC*8)+1;
static volatile bit DTD0 @((unsigned)&DTC*8)+0;


static volatile unsigned char POLS @0xfbe;

static volatile bit PWM_MUX1 @((unsigned)&POLS*8)+7;
static volatile bit PWM_MUX0 @((unsigned)&POLS*8)+6;
static volatile bit HBPOLS21 @((unsigned)&POLS*8)+5;
static volatile bit HBPOLS20 @((unsigned)&POLS*8)+4;
static volatile bit HBPOLS11 @((unsigned)&POLS*8)+3;
static volatile bit HBPOLS10 @((unsigned)&POLS*8)+2;
static volatile bit HBPOLS01 @((unsigned)&POLS*8)+1;
static volatile bit HBPOLS00 @((unsigned)&POLS*8)+0;


static volatile unsigned char PME @0xfbd;

static volatile bit UART_MUX @((unsigned)&PME*8)+7;
static volatile bit DTEN @((unsigned)&PME*8)+6;
static volatile bit HBPWMOE21 @((unsigned)&PME*8)+5;
static volatile bit HBPWMOE20 @((unsigned)&PME*8)+4;
static volatile bit HBPWMOE11 @((unsigned)&PME*8)+3;
static volatile bit HBPWMOE10 @((unsigned)&PME*8)+2;
static volatile bit HBPWMOE01 @((unsigned)&PME*8)+1;
static volatile bit HBPWMOE00 @((unsigned)&PME*8)+0;


static volatile unsigned char HBCON @0xfbc;

static volatile bit CMP1FLT @((unsigned)&HBCON*8)+7;
static volatile bit CMP0FLT @((unsigned)&HBCON*8)+6;
static volatile bit ASTART @((unsigned)&HBCON*8)+5;
static volatile bit ACLOSE @((unsigned)&HBCON*8)+4;
static volatile bit PWMADEN @((unsigned)&HBCON*8)+3;
static volatile bit PWMADPOS1 @((unsigned)&HBCON*8)+2;
static volatile bit PWMADPOS0 @((unsigned)&HBCON*8)+1;



static volatile unsigned char PWM2ADDLY @0xfbb;

static volatile bit PWM2ADDLY7 @((unsigned)&PWM2ADDLY*8)+7;
static volatile bit PWM2ADDLY6 @((unsigned)&PWM2ADDLY*8)+6;
static volatile bit PWM2ADDLY5 @((unsigned)&PWM2ADDLY*8)+5;
static volatile bit PWM2ADDLY4 @((unsigned)&PWM2ADDLY*8)+4;
static volatile bit PWM2ADDLY3 @((unsigned)&PWM2ADDLY*8)+3;
static volatile bit PWM2ADDLY2 @((unsigned)&PWM2ADDLY*8)+2;
static volatile bit PWM2ADDLY1 @((unsigned)&PWM2ADDLY*8)+1;
static volatile bit PWM2ADDLY0 @((unsigned)&PWM2ADDLY*8)+0;


static volatile unsigned char TMR3 @0xfba;
static volatile unsigned char PR3 @0xfb9;
static volatile unsigned char T3CON0 @0xfb8;

static volatile bit T3OUTPS4 @((unsigned)&T3CON0*8)+7;
static volatile bit T3OUTPS3 @((unsigned)&T3CON0*8)+6;
static volatile bit T3OUTPS2 @((unsigned)&T3CON0*8)+5;
static volatile bit T3OUTPS1 @((unsigned)&T3CON0*8)+4;
static volatile bit T3OUTPS0 @((unsigned)&T3CON0*8)+3;
static volatile bit TMR3ON @((unsigned)&T3CON0*8)+2;
static volatile bit T3CKPS1 @((unsigned)&T3CON0*8)+1;
static volatile bit T3CKPS0 @((unsigned)&T3CON0*8)+0;

static volatile unsigned char T3CON1 @0xfb7;

static volatile bit TMR3GE @((unsigned)&T3CON1*8)+7;
static volatile bit T3GPOL @((unsigned)&T3CON1*8)+6;
static volatile bit T3GTM @((unsigned)&T3CON1*8)+5;
static volatile bit T3GVAL @((unsigned)&T3CON1*8)+2;
static volatile bit T3GCK1 @((unsigned)&T3CON1*8)+1;
static volatile bit T3GCK0 @((unsigned)&T3CON1*8)+0;


static volatile unsigned char IOCUR @0xfB6;
static volatile unsigned char UARTCON @0xfB5;

static volatile bit SPEN @((unsigned)&UARTCON *8)+7;
static volatile bit MODE9 @((unsigned)&UARTCON *8)+6;
static volatile bit HALF_DUPLEX @((unsigned)&UARTCON *8)+5;
static volatile bit TX_EN @((unsigned)&UARTCON *8)+4;
static volatile bit BRGM @((unsigned)&UARTCON *8)+3;
static volatile bit BRGH @((unsigned)&UARTCON *8)+2;
static volatile bit TX9_RX9 @((unsigned)&UARTCON *8)+1;
static volatile bit BUSY @((unsigned)&UARTCON *8)+0;


static volatile unsigned char SPBRG @0xfb4;
static volatile unsigned char RCREG @0xfb3;
static volatile unsigned char TXREG @0xfb2;



static volatile unsigned char IPR1 @0xfb1;

static volatile bit PWM24IP @((unsigned)&IPR1*8)+7;
static volatile bit PWM22IP @((unsigned)&IPR1*8)+6;
static volatile bit PWM20IP @((unsigned)&IPR1*8)+5;
static volatile bit TMR2IP @((unsigned)&IPR1*8)+4;
static volatile bit T1PRIP @((unsigned)&IPR1*8)+3;
static volatile bit T1PDIP @((unsigned)&IPR1*8)+2;
static volatile bit TMR1IP @((unsigned)&IPR1*8)+1;
static volatile bit TMR0IP @((unsigned)&IPR1*8)+0;


static volatile unsigned char PIR1 @0xfb0;

static volatile bit PWM24IF @((unsigned)&PIR1*8)+7;
static volatile bit PWM22IF @((unsigned)&PIR1*8)+6;
static volatile bit PWM20IF @((unsigned)&PIR1*8)+5;
static volatile bit TMR2IF @((unsigned)&PIR1*8)+4;
static volatile bit T1PRIF @((unsigned)&PIR1*8)+3;
static volatile bit T1PDIF @((unsigned)&PIR1*8)+2;
static volatile bit TMR1IF @((unsigned)&PIR1*8)+1;
static volatile bit TMR0IF @((unsigned)&PIR1*8)+0;


static volatile unsigned char PIE1 @0xfaf;

static volatile bit PWM24IE @((unsigned)&PIE1*8)+7;
static volatile bit PWM22IE @((unsigned)&PIE1*8)+6;
static volatile bit PWM20IE @((unsigned)&PIE1*8)+5;
static volatile bit TMR2IE @((unsigned)&PIE1*8)+4;
static volatile bit T1PRIE @((unsigned)&PIE1*8)+3;
static volatile bit T1PDIE @((unsigned)&PIE1*8)+2;
static volatile bit TMR1IE @((unsigned)&PIE1*8)+1;
static volatile bit TMR0IE @((unsigned)&PIE1*8)+0;


static volatile unsigned char IPR2 @0xfae;

static volatile bit PCIP @((unsigned)&IPR2*8)+7;
static volatile bit PBIP @((unsigned)&IPR2*8)+6;
static volatile bit PAIP @((unsigned)&IPR2*8)+5;
static volatile bit INT2IP @((unsigned)&IPR2*8)+4;
static volatile bit INT1IP @((unsigned)&IPR2*8)+3;
static volatile bit INT0IP @((unsigned)&IPR2*8)+2;
static volatile bit TXIP @((unsigned)&IPR2*8)+1;
static volatile bit RCIP @((unsigned)&IPR2*8)+0;


static volatile unsigned char PIR2 @0xfad;

static volatile bit PCIF @((unsigned)&PIR2*8)+7;
static volatile bit PBIF @((unsigned)&PIR2*8)+6;
static volatile bit PAIF @((unsigned)&PIR2*8)+5;
static volatile bit INT2IF @((unsigned)&PIR2*8)+4;
static volatile bit INT1IF @((unsigned)&PIR2*8)+3;
static volatile bit INT0IF @((unsigned)&PIR2*8)+2;
static volatile bit TXIF @((unsigned)&PIR2*8)+1;
static volatile bit RCIF @((unsigned)&PIR2*8)+0;


static volatile unsigned char PIE2 @0xfac;

static volatile bit PCIE @((unsigned)&PIE2*8)+7;
static volatile bit PBIE @((unsigned)&PIE2*8)+6;
static volatile bit PAIE @((unsigned)&PIE2*8)+5;
static volatile bit INT2IE @((unsigned)&PIE2*8)+4;
static volatile bit INT1IE @((unsigned)&PIE2*8)+3;
static volatile bit INT0IE @((unsigned)&PIE2*8)+2;
static volatile bit TXIE @((unsigned)&PIE2*8)+1;
static volatile bit RCIE @((unsigned)&PIE2*8)+0;


static volatile unsigned char IPR3 @0xfab;

static volatile bit TMR3GIP @((unsigned)&IPR3*8)+6;
static volatile bit TMR3IP @((unsigned)&IPR3*8)+5;
static volatile bit CMP1IP @((unsigned)&IPR3*8)+4;
static volatile bit CMP0IP @((unsigned)&IPR3*8)+3;
static volatile bit ADIP @((unsigned)&IPR3*8)+2;
static volatile bit PDTXIP @((unsigned)&IPR3*8)+1;
static volatile bit PDRCIP @((unsigned)&IPR3*8)+0;


static volatile unsigned char PIR3 @0xfaa;

static volatile bit TMR3GIF @((unsigned)&PIR3*8)+6;
static volatile bit TMR3IF @((unsigned)&PIR3*8)+5;
static volatile bit CMP1IF @((unsigned)&PIR3*8)+4;
static volatile bit CMP0IF @((unsigned)&PIR3*8)+3;
static volatile bit ADIF @((unsigned)&PIR3*8)+2;
static volatile bit PDTXIF @((unsigned)&PIR3*8)+1;
static volatile bit PDRCIF @((unsigned)&PIR3*8)+0;


static volatile unsigned char PIE3 @0xfa9;

static volatile bit TMR3GIE @((unsigned)&PIE3*8)+6;
static volatile bit TMR3IE @((unsigned)&PIE3*8)+5;
static volatile bit CMP1IE @((unsigned)&PIE3*8)+4;
static volatile bit CMP0IE @((unsigned)&PIE3*8)+3;
static volatile bit ADIE @((unsigned)&PIE3*8)+2;
static volatile bit PDTXIE @((unsigned)&PIE3*8)+1;
static volatile bit PDRCIE @((unsigned)&PIE3*8)+0;

static volatile unsigned char CMP0CON0 @0xfa8;

static volatile bit CMP0EN @((unsigned)&CMP0CON0*8)+7;
static volatile bit CMP0OUT @((unsigned)&CMP0CON0*8)+6;
static volatile bit CMP0PCH2 @((unsigned)&CMP0CON0*8)+5;
static volatile bit CMP0PCH1 @((unsigned)&CMP0CON0*8)+4;
static volatile bit CMP0PCH0 @((unsigned)&CMP0CON0*8)+3;
static volatile bit CMP0NCH2 @((unsigned)&CMP0CON0*8)+2;
static volatile bit CMP0NCH1 @((unsigned)&CMP0CON0*8)+1;
static volatile bit CMP0NCH0 @((unsigned)&CMP0CON0*8)+0;


static volatile unsigned char CMP0CON1 @0xfa7;

static volatile bit CMP0FILTER3 @((unsigned)&CMP0CON1*8)+7;
static volatile bit CMP0FILTER2 @((unsigned)&CMP0CON1*8)+6;
static volatile bit CMP0FILTER1 @((unsigned)&CMP0CON1*8)+5;
static volatile bit CMP0FILTER0 @((unsigned)&CMP0CON1*8)+4;
static volatile bit CMP0INT1 @((unsigned)&CMP0CON1*8)+3;
static volatile bit CMP0INT0 @((unsigned)&CMP0CON1*8)+2;
static volatile bit CMP0OUTEN @((unsigned)&CMP0CON1*8)+1;
static volatile bit CMP0HYSEN @((unsigned)&CMP0CON1*8)+0;


static volatile unsigned char CMP1CON0 @0xfa6;

static volatile bit CMP1EN @((unsigned)&CMP1CON0*8)+7;
static volatile bit CMP1OUT @((unsigned)&CMP1CON0*8)+6;
static volatile bit CMP1PCH2 @((unsigned)&CMP1CON0*8)+5;
static volatile bit CMP1PCH1 @((unsigned)&CMP1CON0*8)+4;
static volatile bit CMP1PCH0 @((unsigned)&CMP1CON0*8)+3;
static volatile bit CMP1NCH2 @((unsigned)&CMP1CON0*8)+2;
static volatile bit CMP1NCH1 @((unsigned)&CMP1CON0*8)+1;
static volatile bit CMP1NCH0 @((unsigned)&CMP1CON0*8)+0;


static volatile unsigned char CMP1CON1 @0xfa5;

static volatile bit CMP1FILTER3 @((unsigned)&CMP1CON1*8)+7;
static volatile bit CMP1FILTER2 @((unsigned)&CMP1CON1*8)+6;
static volatile bit CMP1FILTER1 @((unsigned)&CMP1CON1*8)+5;
static volatile bit CMP1FILTER0 @((unsigned)&CMP1CON1*8)+4;
static volatile bit CMP1INT1 @((unsigned)&CMP1CON1*8)+3;
static volatile bit CMP1INT0 @((unsigned)&CMP1CON1*8)+2;
static volatile bit CMP1OUTEN @((unsigned)&CMP1CON1*8)+1;
static volatile bit CMP1HYSEN @((unsigned)&CMP1CON1*8)+0;


static volatile unsigned char DACCON @0xfa4;

static volatile bit DAC_SEL @((unsigned)&DACCON*8)+7;
static volatile bit DACEN @((unsigned)&DACCON*8)+6;
static volatile bit DACS5 @((unsigned)&DACCON*8)+5;
static volatile bit DACS4 @((unsigned)&DACCON*8)+4;
static volatile bit DAC3 @((unsigned)&DACCON*8)+3;
static volatile bit DAC2 @((unsigned)&DACCON*8)+2;
static volatile bit DAC1 @((unsigned)&DACCON*8)+1;
static volatile bit DAC0 @((unsigned)&DACCON*8)+0;

static volatile unsigned char ADRESH @0xfa3;
static volatile unsigned char ADRESL @0xfa2;
static volatile unsigned char ADCON0 @0xfa1;

static volatile bit ADFM @((unsigned)&ADCON0*8)+7;
static volatile bit CHS3 @((unsigned)&ADCON0*8)+5;
static volatile bit CHS2 @((unsigned)&ADCON0*8)+4;
static volatile bit CHS1 @((unsigned)&ADCON0*8)+3;
static volatile bit CHS0 @((unsigned)&ADCON0*8)+2;
static volatile bit GO @((unsigned)&ADCON0*8)+1;
static volatile bit DONE @((unsigned)&ADCON0*8)+1;
static volatile bit ADON @((unsigned)&ADCON0*8)+0;


static volatile unsigned char ADCON1 @0xfa0;

static volatile bit ADVREF0 @((unsigned)&ADCON1*8)+6;
static volatile bit ACQT2 @((unsigned)&ADCON1*8)+5;
static volatile bit ACQT1 @((unsigned)&ADCON1*8)+4;
static volatile bit ACQT0 @((unsigned)&ADCON1*8)+3;
static volatile bit ADCS1 @((unsigned)&ADCON1*8)+1;
static volatile bit ADCS0 @((unsigned)&ADCON1*8)+0;


static volatile unsigned char BMCST @0xf95;

static volatile bit PA1RSEL @((unsigned)&BMCST*8)+7;
static volatile bit PA0RSEL @((unsigned)&BMCST*8)+6;



static volatile unsigned char PAPD @0xf94;

static volatile bit PC6PD @((unsigned)&PAPD*8)+6;
static volatile bit PA5PD @((unsigned)&PAPD*8)+5;
static volatile bit PA4PD @((unsigned)&PAPD*8)+4;
static volatile bit PA3PD @((unsigned)&PAPD*8)+3;
static volatile bit PA2PD @((unsigned)&PAPD*8)+2;
static volatile bit PA1PD @((unsigned)&PAPD*8)+1;
static volatile bit PA0PD @((unsigned)&PAPD*8)+0;


static volatile unsigned char PASV @0xf93;

static volatile bit PC1SMT @((unsigned)&PASV*8)+6;
static volatile bit PA5SMT @((unsigned)&PASV*8)+5;
static volatile bit PA4SMT @((unsigned)&PASV*8)+4;
static volatile bit PA3SMT @((unsigned)&PASV*8)+3;
static volatile bit PA2SMT @((unsigned)&PASV*8)+2;
static volatile bit PA1SMT @((unsigned)&PASV*8)+1;
static volatile bit PA0SMT @((unsigned)&PASV*8)+0;


static volatile unsigned char PAOD @0xf92;

static volatile bit PA5OD @((unsigned)&PAOD*8)+5;
static volatile bit PA4OD @((unsigned)&PAOD*8)+4;
static volatile bit PA2OD @((unsigned)&PAOD*8)+2;
static volatile bit PA1OD @((unsigned)&PAOD*8)+1;
static volatile bit PA0OD @((unsigned)&PAOD*8)+0;



static volatile unsigned char PCINTMASK @0xf91;

static volatile bit PC6MSK @((unsigned)&PCINTMASK*8)+6;
static volatile bit PC5MSK @((unsigned)&PCINTMASK*8)+5;
static volatile bit PC4MSK @((unsigned)&PCINTMASK*8)+4;
static volatile bit PC3MSK @((unsigned)&PCINTMASK*8)+3;
static volatile bit PC2MSK @((unsigned)&PCINTMASK*8)+2;
static volatile bit PC1MSK @((unsigned)&PCINTMASK*8)+1;
static volatile bit PC0MSK @((unsigned)&PCINTMASK*8)+0;


static volatile unsigned char PBINTMASK @0xf90;

static volatile bit PB5MSK @((unsigned)&PBINTMASK*8)+5;
static volatile bit PB4MSK @((unsigned)&PBINTMASK*8)+4;
static volatile bit PB3MSK @((unsigned)&PBINTMASK*8)+3;
static volatile bit PB2MSK @((unsigned)&PBINTMASK*8)+2;
static volatile bit PB1MSK @((unsigned)&PBINTMASK*8)+1;
static volatile bit PB0MSK @((unsigned)&PBINTMASK*8)+0;


static volatile unsigned char PAINTMASK @0xf8f;

static volatile bit PA5MSK @((unsigned)&PAINTMASK*8)+5;
static volatile bit PA4MSK @((unsigned)&PAINTMASK*8)+4;
static volatile bit PA3MSK @((unsigned)&PAINTMASK*8)+3;
static volatile bit PA2MSK @((unsigned)&PAINTMASK*8)+2;
static volatile bit PA1MSK @((unsigned)&PAINTMASK*8)+1;
static volatile bit PA0MSK @((unsigned)&PAINTMASK*8)+0;

static volatile unsigned char TRISC @0xf8b;

static volatile bit TRISC6 @((unsigned)&TRISC*8)+6;
static volatile bit TRISC5 @((unsigned)&TRISC*8)+5;
static volatile bit TRISC4 @((unsigned)&TRISC*8)+4;
static volatile bit TRISC3 @((unsigned)&TRISC*8)+3;
static volatile bit TRISC2 @((unsigned)&TRISC*8)+2;
static volatile bit TRISC1 @((unsigned)&TRISC*8)+1;
static volatile bit TRISC0 @((unsigned)&TRISC*8)+0;


static volatile unsigned char TRISB @0xf8a;

static volatile bit TRISB5 @((unsigned)&TRISB*8)+5;
static volatile bit TRISB4 @((unsigned)&TRISB*8)+4;
static volatile bit TRISB3 @((unsigned)&TRISB*8)+3;
static volatile bit TRISB2 @((unsigned)&TRISB*8)+2;
static volatile bit TRISB1 @((unsigned)&TRISB*8)+1;
static volatile bit TRISB0 @((unsigned)&TRISB*8)+0;


static volatile unsigned char TRISA @0xf89;

static volatile bit TRISA5 @((unsigned)&TRISA*8)+5;
static volatile bit TRISA4 @((unsigned)&TRISA*8)+4;
static volatile bit TRISA3 @((unsigned)&TRISA*8)+3;
static volatile bit TRISA2 @((unsigned)&TRISA*8)+2;
static volatile bit TRISA1 @((unsigned)&TRISA*8)+1;
static volatile bit TRISA0 @((unsigned)&TRISA*8)+0;

static volatile unsigned char PINC @0xf88;

static volatile bit PINC6 @ ((unsigned)&PINC*8)+6;
static volatile bit PINC5 @ ((unsigned)&PINC*8)+5;
static volatile bit PINC4 @ ((unsigned)&PINC*8)+4;
static volatile bit PINC3 @ ((unsigned)&PINC*8)+3;
static volatile bit PINC2 @ ((unsigned)&PINC*8)+2;
static volatile bit PINC1 @ ((unsigned)&PINC*8)+1;
static volatile bit PINC0 @ ((unsigned)&PINC*8)+0;

static volatile unsigned char PINB @0xf87;

static volatile bit PINB5 @ ((unsigned)&PINB*8)+5;
static volatile bit PINB4 @ ((unsigned)&PINB*8)+4;
static volatile bit PINB3 @ ((unsigned)&PINB*8)+3;
static volatile bit PINB2 @ ((unsigned)&PINB*8)+2;
static volatile bit PINB1 @ ((unsigned)&PINB*8)+1;
static volatile bit PINB0 @ ((unsigned)&PINB*8)+0;

static volatile unsigned char PINA @0xf86;

static volatile bit PINA5 @ ((unsigned)&PINA*8)+5;
static volatile bit PINA4 @ ((unsigned)&PINA*8)+4;
static volatile bit PINA3 @ ((unsigned)&PINA*8)+3;
static volatile bit PINA2 @ ((unsigned)&PINA*8)+2;
static volatile bit PINA1 @ ((unsigned)&PINA*8)+1;
static volatile bit PINA0 @ ((unsigned)&PINA*8)+0;

static volatile unsigned char PCPU @0xf85;

static volatile bit PC6PU @((unsigned)&PCPU*8)+6;
static volatile bit PC5PU @((unsigned)&PCPU*8)+5;
static volatile bit PC4PU @((unsigned)&PCPU*8)+4;
static volatile bit PC3PU @((unsigned)&PCPU*8)+3;
static volatile bit PC2PU @((unsigned)&PCPU*8)+2;
static volatile bit PC1PU @((unsigned)&PCPU*8)+1;
static volatile bit PC0PU @((unsigned)&PCPU*8)+0;


static volatile unsigned char PBPU @0xf84;

static volatile bit PB5PU @((unsigned)&PBPU*8)+5;
static volatile bit PB4PU @((unsigned)&PBPU*8)+4;
static volatile bit PB3PU @((unsigned)&PBPU*8)+3;
static volatile bit PB2PU @((unsigned)&PBPU*8)+2;
static volatile bit PB1PU @((unsigned)&PBPU*8)+1;
static volatile bit PB0PU @((unsigned)&PBPU*8)+0;


static volatile unsigned char PAPU @0xf83;

static volatile bit PA5PU @((unsigned)&PAPU*8)+5;
static volatile bit PA4PU @((unsigned)&PAPU*8)+4;
static volatile bit PA2PU @((unsigned)&PAPU*8)+2;
static volatile bit PA1PU @((unsigned)&PAPU*8)+1;
static volatile bit PA0PU @((unsigned)&PAPU*8)+0;

static volatile unsigned char PORTC @0xf82;

static volatile bit PC6 @((unsigned)&PORTC*8)+6;
static volatile bit PC5 @((unsigned)&PORTC*8)+5;
static volatile bit PC4 @((unsigned)&PORTC*8)+4;
static volatile bit PC3 @((unsigned)&PORTC*8)+3;
static volatile bit PC2 @((unsigned)&PORTC*8)+2;
static volatile bit PC1 @((unsigned)&PORTC*8)+1;
static volatile bit PC0 @((unsigned)&PORTC*8)+0;


static volatile unsigned char PORTB @0xf81;

static volatile bit PB5 @((unsigned)&PORTB*8)+5;
static volatile bit PB4 @((unsigned)&PORTB*8)+4;
static volatile bit PB3 @((unsigned)&PORTB*8)+3;
static volatile bit PB2 @((unsigned)&PORTB*8)+2;
static volatile bit PB1 @((unsigned)&PORTB*8)+1;
static volatile bit PB0 @((unsigned)&PORTB*8)+0;

static volatile unsigned char PORTA @0xf80;

static volatile bit PA5 @((unsigned)&PORTA*8)+5;
static volatile bit PA4 @((unsigned)&PORTA*8)+4;
static volatile bit PA3 @((unsigned)&PORTA*8)+3;
static volatile bit PA2 @((unsigned)&PORTA*8)+2;
static volatile bit PA1 @((unsigned)&PORTA*8)+1;
static volatile bit PA0 @((unsigned)&PORTA*8)+0;

# 10 ".\src\task.h"
typedef struct task{
unsigned char id;
unsigned int interval;
unsigned int counter;
unsigned char active;
unsigned char ready;
unsigned char maxSuc;
unsigned char sucCnt;
} task;

void task_init(void) ;

signed char add_task(unsigned char id, unsigned long interval_ms,unsigned char suc_max);



void find_task(task* task_);

signed char add_task_id(unsigned char id, unsigned long interval_ms,unsigned char suc_max,signed char task_id);

# 38
extern task task_list[8];

# 5 ".\src\cb.h"
extern unsigned char zz;

unsigned char get_load(void);
void cb_task(task* task_);

# 14
extern unsigned char cb_o;

extern unsigned char yd;

# 10 ".\src\chrg.h"
void chrg_task(task* task_);


extern unsigned char chrg_num;

# 23 ".\src\ui.h"
typedef union ui_buff_{

struct {
unsigned char buf;
};

struct {
unsigned a : 1;
unsigned b : 1;
unsigned c : 1;
unsigned d : 1;
unsigned e : 1;
unsigned f : 1;
unsigned g : 1;
unsigned h : 1;
};

struct {
unsigned j0 : 1;
unsigned j1 : 1;
unsigned j2 : 1;
unsigned j3 : 1;
unsigned j4 : 1;
unsigned j5 : 1;
unsigned j6 : 1;
unsigned j7 : 1;
};

struct {
unsigned j8 : 1;
unsigned j9 : 1;
};

}ui_buff_;
typedef struct ui_
{
unsigned char w ;
unsigned char u ;
unsigned char q ;
unsigned char num1 ;
unsigned char num2 ;
unsigned char ou_d ;
unsigned char wa ;
unsigned char ts ;
unsigned char yd ;
unsigned char dian ;
unsigned char cnt ;
} ui_;


typedef struct ui__
{
unsigned char w1 ;
unsigned char w2 ;
unsigned char cnt ;
unsigned char n ;
unsigned char ts ;
} ui__;

typedef struct tim_ui_
{
unsigned char cnt ;
unsigned char ok ;
} tim_ui_;

# 152
void ui_cb(task* task_);

void ui_chrg(task* task_);

void ui_chrgfree(task* task_);

void ui_chrgfull(task* task_);

void ui_smoing(task* task_);



void ui_kl(task* task_);

void ui_ts_on(task* task_);

void ui_ts_off(task* task_);

void ui_timout(task* task_);

void ui_begin(task* task_);

void new_nixie(void) ;

void ldz(unsigned char a);


void ui_dl_getup(task* task_);

void ui_smoend(task* task_);

# 192
extern ui__ ui_ld;
extern volatile tim_ui_ tim_ui;
extern volatile unsigned char nixie_z[9][2];
extern volatile ui_ ui;
extern signed char ui_id;
extern volatile union ui_buff_ ui_buff[12];

# 6 ".\src\pwm.h"
typedef struct pwm_
{
unsigned char duty;
unsigned char duty_t;
unsigned char adc_ok;
unsigned char load_flag;
unsigned char dl_t;
unsigned int bat_t;
unsigned int load_t;

# 23
} pwm_;
extern pwm_ pwm;

# 4 ".\src\si_mic.h"
typedef struct si_mic_state_
{
unsigned char o;


} si_mic_state_;

typedef struct si_mic_flag_
{
unsigned char dl;
unsigned char kl;
unsigned char dl_zt;
unsigned char kl_zt;
unsigned char smo_init;
} si_mic_flag_;

typedef struct si_mic_cnt_
{



} si_mic_cnt_;
extern unsigned char pw;
extern si_mic_flag_ si_mic_flag;
extern signed char si_mic_task_id;
extern unsigned long pw_t;
extern unsigned char lowbat_init;

void si_mic_task(task* task_);
extern unsigned char cb_ui_flag;

# 8 ".\src\sleep.h"
void sleep_task(task* task_);

void sleep_mode(void);

# 4 ".\src\tim.h"
typedef struct tim_state_
{




} tim_state_;

typedef struct tim_flag_
{
unsigned char timflag;

} tim_flag_;

typedef struct tim_cnt_
{
unsigned int cnt;
unsigned int timercnt;


} tim_cnt_;

extern tim_cnt_ tim_cnt;
extern tim_flag_ tim_flag;

signed char tim_cnt_fuc(unsigned int ms,unsigned char lab);

# 7 ".\src\bat.h"
typedef struct _bat
{
unsigned char dian;
unsigned int bat;
} _bat;
extern _bat bat;

# 20
void bat_task(task* task_);

unsigned int get_bat(void);

# 11 ".\src\key.h"
void key_task(task* task_);

extern unsigned char ts;

# 34 ".\src\main.c"
asm("\tpsect config,class=CONFIG"); asm("global config_word" "1"); asm("\torg (""1""-1)*2"); asm("config_word" "1"":"); asm("\tdw ""0xFFFF & 0xFFFF & 0xFFFF & 0xFFFF & 0xFFFC");

asm("\tpsect config,class=CONFIG"); asm("global config_word" "2"); asm("\torg (""2""-1)*2"); asm("config_word" "2"":"); asm("\tdw ""0XFF7F & 0XFFBF & 0xFFEF & 0xFFF7 & 0xFFFF");



unsigned char pwm_flag=0;
unsigned char adc_flag=0;
unsigned char adc_cnt=0;
unsigned char adc_begin=0;
unsigned char cfg_flag=1;

# 13 "c:\Users\Administrator\.vscode\extensions\ad.adide-1.1.7\resource\Microchip\xc8\v1.41\include\stdint.h"
typedef signed char int8_t;

# 20
typedef signed int int16_t;

# 28
typedef signed short long int int24_t;

# 36
typedef signed long int int32_t;

# 56
typedef unsigned short long int uint24_t;

# 71
typedef signed char int_least8_t;

# 78
typedef signed int int_least16_t;

# 90
typedef signed short long int int_least24_t;

# 98
typedef signed long int int_least32_t;

# 105
typedef unsigned char uint_least8_t;

# 111
typedef unsigned int uint_least16_t;

# 121
typedef unsigned short long int uint_least24_t;

# 128
typedef unsigned long int uint_least32_t;

# 137
typedef signed char int_fast8_t;

# 144
typedef signed int int_fast16_t;

# 156
typedef signed short long int int_fast24_t;

# 164
typedef signed long int int_fast32_t;

# 171
typedef unsigned char uint_fast8_t;

# 177
typedef unsigned int uint_fast16_t;

# 187
typedef unsigned short long int uint_fast24_t;

# 194
typedef unsigned long int uint_fast32_t;

# 200
typedef int32_t intmax_t;




typedef unsigned long uintmax_t;




typedef int16_t intptr_t;




typedef unsigned int uintptr_t;

# 69 ".\src\main.c"
unsigned char pwm_cnt=0;
unsigned int pwm_bat=300;
void main(void)
{
gpio_init();
timer0_init();

timer1_init();
cmp0_init();
timer2_init();
task_init();

# 85
cb_o=PINB1;

# 159
ui_id=6;
add_task_id(9,40,0,0);

add_task_id(14,1000,0,1);
unsigned int b_=get_bat();

if((bat.bat>b_)||((bat.bat+50)<=b_))
{
bat.bat=b_;
}
if( bat.bat<=317)
{
bat.dian=0;

chrg_num=0;


}
else if ( bat.bat<=345)
{
bat.dian=1;

chrg_num=15;

}
else if ( bat.bat<=370)
{
bat.dian=2;

chrg_num=40;

}
else if ( bat.bat<=390)
{
bat.dian=3;

chrg_num=65;

}
else
{
bat.dian=4;

chrg_num=85;

}

# 213
if((get_bat()<=330)&&PINA4)
{
bat.bat=315;
bat.dian=0;
pwm.duty=0;
lowbat_init=0;
}

# 223
add_task_id(13,40,0,2);
add_task_id(12,100,0,3);
add_task_id(11,70,0,4);
add_task_id(15,200,0,5);


add_task_id(16,300,3,ui_id);


pwm.load_t=300;
yd=PINB1;

# 266
while(1)
{
if(task_list[0].active && task_list[0].ready) { GIE=0;PEIE=0; task_list[0].ready = 0; GIE=1;PEIE=1; si_mic_task(&task_list[0]); if(task_list[0].maxSuc) { task_list[0].sucCnt++; if(task_list[0].sucCnt==task_list[0].maxSuc) { task_list[0].active=0; } } } else if(task_list[1].active && task_list[1].ready) { GIE=0;PEIE=0; task_list[1].ready = 0; GIE=1;PEIE=1; bat_task(&task_list[1]); if(task_list[1].maxSuc) { task_list[1].sucCnt++; if(task_list[1].sucCnt==task_list[1].maxSuc) { task_list[1].active=0; } } } else if(task_list[2].active && task_list[2].ready) { GIE=0;PEIE=0; task_list[2].ready = 0; GIE=1;PEIE=1; key_task(&task_list[2]); if(task_list[2].maxSuc) { task_list[2].sucCnt++; if(task_list[2].sucCnt==task_list[2].maxSuc) { task_list[2].active=0; } } } else if(task_list[3].active && task_list[3].ready) { GIE=0;PEIE=0; task_list[3].ready = 0; GIE=1;PEIE=1; chrg_task(&task_list[3]); if(task_list[3].maxSuc) { task_list[3].sucCnt++; if(task_list[3].sucCnt==task_list[3].maxSuc) { task_list[3].active=0; } } } if(task_list[4].active && task_list[4].ready) { GIE=0;PEIE=0; task_list[4].ready = 0; GIE=1;PEIE=1; cb_task(&task_list[4]); if(task_list[4].maxSuc) { task_list[4].sucCnt++; if(task_list[4].sucCnt==task_list[4].maxSuc) { task_list[4].active=0; } } } else if(task_list[5].active && task_list[5].ready) { GIE=0;PEIE=0; task_list[5].ready = 0; GIE=1;PEIE=1; sleep_task(&task_list[5]); if(task_list[5].maxSuc) { task_list[5].sucCnt++; if(task_list[5].sucCnt==task_list[5].maxSuc) { task_list[5].active=0; } } } else if(task_list[6].active && task_list[6].ready) { GIE=0;PEIE=0; task_list[6].ready = 0; GIE=1;PEIE=1; find_task(&task_list[6]); if(task_list[6].maxSuc) { task_list[6].sucCnt++; if(task_list[6].sucCnt==task_list[6].maxSuc) { task_list[6].active=0; } } };
if(pwm_flag)
{
pwm_flag=0;
if(pwm.duty) { if(pwm.duty<100) { PR3=pwm.duty_t; TMR3=0; T3CON0=0x9b;TMR3IF=0;TMR3IE=1;PEIE=1;GIE=1;TMR3ON=1; PA0=0; CMP0IF=0;CMP0IE=1; } else { PA0=0; CMP0IF=0;CMP0IE=1; } adc_flag=1; } else { PA0=1; CMP0IE=0;CMP0IF=0; };
}
if(tim_ui.ok)
{
TRISC0=1; TRISC1=1; TRISC2=1; TRISC3=1; TRISC4=1; TRISC5=1; TRISB5=1; TRISB4=1; TRISB3=1; TRISB2=1; PME=0; T2CON0=4; T2CON1=2;
if(adc_begin)
{


adc_begin=0;




ADCON1=0x60;

ADCON0=0x39; ADIF=0; ADIE=0; GO=1; while(GO==1);

# 293
ADIF=0;
pwm.bat_t=((ADRESH&0x0f)<<8)|ADRESL;




ADCON1=0x60;

ADCON0=0x15;
ADIF=0;
ADIE=0;
GO=1;
while(GO==1);
ADIF=0;
pwm.load_t=((ADRESH&0x0f)<<8)|ADRESL;
pwm.adc_ok=1;
if( pwm.load_t>=4094)
{
si_mic_flag.kl=1;
pwm.duty=0;
CMP0IE=0;CMP0IF=0;

}

}

# 322
switch (tim_ui.cnt) { case 0: if(ui_ld.n>0){ if(ui_ld.n<10){HBPWMOE00=1;POLS=0xff;DUTY20=ui_ld.n<<3;}; PC0=0;TRISC0=0; if(ui_buff[0].a ){PC1=1;TRISC1=0;}; if(ui_buff[0].b ){PC2=1;TRISC2=0;}; if(ui_buff[0].c ){PC3=1;TRISC3=0;}; if(ui_buff[0].d ){PC4=1;TRISC4=0;}; if(ui_buff[0].e ){PC5=1;TRISC5=0;}; if(ui_buff[0].f ){PB5=1;TRISB5=0;}; if(ui_buff[0].g ){PB4=1;TRISB4=0;}; if(ui_buff[0].h ){PB3=1;TRISB3=0;}; if(ui_buff[10].j0 ){PB2=1;TRISB2=0;};} break; case 1: if(ui_ld.n>0){ if(ui_ld.n<10){HBPWMOE01=1;POLS=0xc0;DUTY20=ui_ld.n<<3;}; PC1=0;TRISC1=0; if(ui_buff[1].a ){PC0=1;TRISC0=0;}; if(ui_buff[1].b ){PC2=1;TRISC2=0;}; if(ui_buff[1].c ){PC3=1;TRISC3=0;}; if(ui_buff[1].d ){PC4=1;TRISC4=0;}; if(ui_buff[1].e ){PC5=1;TRISC5=0;}; if(ui_buff[1].f ){PB5=1;TRISB5=0;}; if(ui_buff[1].g ){PB4=1;TRISB4=0;}; if(ui_buff[1].h ){PB3=1;TRISB3=0;};\} break; case 2: if(ui_ld.ts>0){ if(ui_ld.ts<10){HBPWMOE01=1;POLS=0xc0;DUTY20=ui_ld.ts<<3;}; PC1=0;TRISC1=0; if(ui_buff[10].j1 ){PB2=1;TRISB2=0;};} break; case 3: if(ui_ld.w1>0){ if(ui_ld.w1<10){HBPWMOE10=1;POLS=0xff;DUTY22=ui_ld.w1<<3;}; PC2=0;TRISC2=0; if(ui_buff[2].a ){PC0=1;TRISC0=0;}; if(ui_buff[2].b ){PC1=1;TRISC1=0;}; if(ui_buff[2].c ){PC3=1;TRISC3=0;}; if(ui_buff[2].d ){PC4=1;TRISC4=0;}; if(ui_buff[2].e ){PC5=1;TRISC5=0;}; if(ui_buff[2].f ){PB5=1;TRISB5=0;}; if(ui_buff[2].g ){PB4=1;TRISB4=0;}; if(ui_buff[2].h ){PB3=1;TRISB3=0;}; if(ui_buff[10].j2 ){PB2=1;TRISB2=0;};} break; case 4: if(ui_ld.w1>0){ if(ui_ld.w1<10){HBPWMOE11=1;POLS=0xc0;DUTY22=ui_ld.w1<<3;}; PC3=0;TRISC3=0; if(ui_buff[3].a ){PC0=1;TRISC0=0;}; if(ui_buff[3].b ){PC1=1;TRISC1=0;}; if(ui_buff[3].c ){PC2=1;TRISC2=0;}; if(ui_buff[3].d ){PC4=1;TRISC4=0;}; if(ui_buff[3].e ){PC5=1;TRISC5=0;};} break; case 5: if(ui_ld.w2>0){ if(ui_ld.w2<10){HBPWMOE11=1;POLS=0xc0;DUTY22=ui_ld.w2<<3;}; PC3=0;TRISC3=0; if(ui_buff[3].g ){PB4=1;TRISB4=0;}; if(ui_buff[3].h ){PB3=1;TRISB3=0;}; if(ui_buff[10].j3 ){PB2=1;TRISB2=0;};} break; case 6: if(ui_ld.n>0){ if(ui_ld.n<10){HBPWMOE11=1;POLS=0xc0;DUTY22=ui_ld.n<<3;}; PC3=0;TRISC3=0; if(ui_buff[3].f ){PB5=1;TRISB5=0;};} break; case 7: if(ui_ld.w2>0){ if(ui_ld.w2<10){HBPWMOE20=1;POLS=0xff;DUTY24=ui_ld.w2<<3;}; PC4=0;TRISC4=0; if(ui_buff[4].a ){PC0=1;TRISC0=0;}; if(ui_buff[4].b ){PC1=1;TRISC1=0;}; if(ui_buff[4].c ){PC2=1;TRISC2=0;}; if(ui_buff[4].d ){PC3=1;TRISC3=0;}; if(ui_buff[4].e ){PC5=1;TRISC5=0;}; if(ui_buff[4].f ){PB5=1;TRISB5=0;}; if(ui_buff[4].g ){PB4=1;TRISB4=0;}; if(ui_buff[4].h ){PB3=1;TRISB3=0;}; if(ui_buff[10].j4 ){PB2=1;TRISB2=0;};} break; case 8: if(ui_ld.w2>0){ if(ui_ld.w2<10){HBPWMOE21=1;POLS=0xc0;DUTY24=ui_ld.w2<<3;}; PC5=0;TRISC5=0; if(ui_buff[5].a ){PC0=1;TRISC0=0;}; if(ui_buff[5].b ){PC1=1;TRISC1=0;}; if(ui_buff[5].c ){PC2=1;TRISC2=0;}; if(ui_buff[5].d ){PC3=1;TRISC3=0;}; if(ui_buff[5].e ){PC4=1;TRISC4=0;}; if(ui_buff[5].f ){PB5=1;TRISB5=0;}; if(ui_buff[5].g ){PB4=1;TRISB4=0;}; if(ui_buff[5].h ){PB3=1;TRISB3=0;};} break; case 9: if(ui_ld.cnt>0){ if(ui_ld.cnt<10){HBPWMOE21=1;POLS=0xc0;DUTY24=ui_ld.cnt<<3;}; PC5=0;TRISC5=0; if(ui_buff[10].j5 ){PB2=1;TRISB2=0;};} break; case 10: if(ui_ld.cnt>0){ if(ui_ld.cnt<10){HBPWMOE11=1;POLS=0x00;DUTY22=ui_ld.cnt<<3;}; PB5=0;TRISB5=0; if(ui_buff[6].a ){PC0=1;TRISC0=0;}; if(ui_buff[6].b ){PC1=1;TRISC1=0;}; if(ui_buff[6].c ){PC2=1;TRISC2=0;}; if(ui_buff[6].d ){PC3=1;TRISC3=0;};} break; case 11: if(ui_ld.n>0){ if(ui_ld.n<10){HBPWMOE11=1;POLS=0x00;DUTY22=ui_ld.n<<3;}; PB5=0;TRISB5=0; if(ui_buff[6].e ){PC4=1;TRISC4=0;}; if(ui_buff[6].f ){PC5=1;TRISC5=0;}; if(ui_buff[6].g ){PB4=1;TRISB4=0;}; if(ui_buff[6].h ){PB3=1;TRISB3=0;};} break; case 12: if(ui_ld.w1>0){ if(ui_ld.w1<10){HBPWMOE11=1;POLS=0x00;DUTY22=ui_ld.w1<<3;}; PB5=0;TRISB5=0; if(ui_buff[10].j6 ){PB2=1;TRISB2=0;};} break; case 13: if(ui_ld.w2>0){ if(ui_ld.w2<10){HBPWMOE20=1;POLS=0x3f;DUTY24=ui_ld.w2<<3;}; PB4=0;TRISB4=0; if(ui_buff[7].a ){PC0=1;TRISC0=0;}; if(ui_buff[7].b ){PC1=1;TRISC1=0;}; if(ui_buff[7].c ){PC2=1;TRISC2=0;}; if(ui_buff[7].d ){PC3=1;TRISC3=0;}; if(ui_buff[7].e ){PC4=1;TRISC4=0;}; if(ui_buff[7].f ){PC5=1;TRISC5=0;}; if(ui_buff[7].g ){PB5=1;TRISB5=0;}; if(ui_buff[7].h ){PB3=1;TRISB3=0;}; if(ui_buff[10].j7 ){PB2=1;TRISB2=0;};} break; case 14: if(ui_ld.w2>0){ if(ui_ld.w2<10){HBPWMOE21=1;POLS=0x00;DUTY24=ui_ld.w2<<3;}; PB3=0;TRISB3=0; if(ui_buff[8].a ){PC0=1;TRISC0=0;}; if(ui_buff[8].b ){PC1=1;TRISC1=0;}; if(ui_buff[8].c ){PC2=1;TRISC2=0;}; if(ui_buff[8].d ){PC3=1;TRISC3=0;}; if(ui_buff[8].e ){PC4=1;TRISC4=0;}; if(ui_buff[8].f ){PC5=1;TRISC5=0;}; if(ui_buff[8].g ){PB5=1;TRISB5=0;}; if(ui_buff[8].h ){PB4=1;TRISB4=0;}; if(ui_buff[11].j8 ){PB2=1;TRISB2=0;};} break; case 15: if(ui_ld.w1>0){ if(ui_ld.w1<10){HBPWMOE20=1;POLS=0x7f;DUTY24=ui_ld.w1<<3;}; PB2=0;TRISB2=0; if(ui_buff[9].a ){PC0=1;TRISC0=0;}; if(ui_buff[9].b ){PC1=1;TRISC1=0;}; if(ui_buff[9].c ){PC2=1;TRISC2=0;}; if(ui_buff[9].d ){PC3=1;TRISC3=0;}; if(ui_buff[9].e ){PC4=1;TRISC4=0;}; if(ui_buff[9].f ){PC5=1;TRISC5=0;}; if(ui_buff[9].g ){PB5=1;TRISB5=0;}; if(ui_buff[9].h ){PB4=1;TRISB4=0;}; if(ui_buff[11].j9 ){PB3=1;TRISB3=0;};} break; default: break; } tim_ui.cnt++; if(tim_ui.cnt>=16) { tim_ui.cnt=0; };

tim_ui.ok=0;
}
if(pwm.adc_ok)
{
pwm_cnt++;
if(pwm_cnt==2)
{
if(pwm.load_t>2500)
{
pwm_bat=120*(unsigned long)pwm.load_t/pwm.bat_t;

pwm_bat-=13;
}
else{
pwm_bat=310;
}
if(pwm_bat<=200&&pwm_bat>=180)
{
bat.bat=310;
bat.dian=0;
pwm.duty=0;
lowbat_init=0;

# 351
}
}
if(pwm_cnt>=5)
{

pw_t=300000ul*pw/((unsigned long)pwm_bat*pwm_bat);
cfg_flag=1;
pwm_cnt=0;
pwm.adc_ok=0;

}



pwm.adc_ok=0;

# 372
}

# 378
}

}


void interrupt ISR_h (void)
{

if(CMP0IF)
{


if(CMP0OUT&&CMP0IE)
{

PA0OD=0;

PA0=1;
si_mic_flag.dl=1;
pwm.duty=0;


PA0OD=1;

# 413
}

# 451
CMP0IF=0;
}

if(TMR1IE && TMR1IF)
{
TMR1IF=0;
if(task_list[0].active) { task_list[0].counter--; if(task_list[0].counter == 0) { task_list[0].ready = 1; task_list[0].counter = task_list[0].interval; } } if(task_list[1].active) { task_list[1].counter--; if(task_list[1].counter == 0) { task_list[1].ready = 1; task_list[1].counter = task_list[1].interval; } } if(task_list[2].active) { task_list[2].counter--; if(task_list[2].counter == 0) { task_list[2].ready = 1; task_list[2].counter = task_list[2].interval; } } if(task_list[3].active) { task_list[3].counter--; if(task_list[3].counter == 0) { task_list[3].ready = 1; task_list[3].counter = task_list[3].interval; } } if(task_list[4].active) { task_list[4].counter--; if(task_list[4].counter == 0) { task_list[4].ready = 1; task_list[4].counter = task_list[4].interval; } } if(task_list[5].active) { task_list[5].counter--; if(task_list[5].counter == 0) { task_list[5].ready = 1; task_list[5].counter = task_list[5].interval; } } if(task_list[6].active) { task_list[6].counter--; if(task_list[6].counter == 0) { task_list[6].ready = 1; task_list[6].counter = task_list[6].interval; } } if(task_list[7].active) { task_list[7].counter--; if(task_list[7].counter == 0) { task_list[7].ready = 1; task_list[7].counter = task_list[7].interval; } };
pwm_flag=1;

}
if(TMR0IE && TMR0IF)
{
TMR0IF=0;
tim_ui.ok=1;
if(adc_flag==1)
{
adc_cnt++;
if(adc_cnt>=5)
{
adc_begin=1;
adc_cnt=0;
adc_flag=0;
}
}


}
if(TMR3IF && TMR3IE)
{


TMR3IF=0;
CMP0IE=0;CMP0IF=0;
PA0=1;
TMR3ON=0;
}

if(TMR3IE && TMR2IF)
{
;
TMR2IF=0;
tim_cnt.cnt++;
if(tim_cnt.timercnt==tim_cnt.cnt)
{
tim_flag.timflag=1;
TMR2ON=0;
}
}

# 515
if(PAIF ||PCIF || PBIF)
{
PAIF=0;
PCIF=0;
PBIF=0;

PA4MSK=0;
PA5MSK=0;
PB1MSK=0;
PC6MSK=0;
PAIE=0;
PBIE=0;
PCIE=0;
}
}



void interrupt low_priority ISR_l (void)
{

if(TMR2IF||ADIF)
{
TMR2IF=0;
ADIF=0;
}
}

