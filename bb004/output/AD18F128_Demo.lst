

Microchip Technology PIC18 PRO Macro Assembler V1.41 build -162212810 
                                                                                               Wed May 07 11:28:08 2025

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	18XAD18F128
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	config,global,class=CONFIG,delta=1
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    76                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    77                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    78                           	psect	pa_nodes0,global,class=CODE,delta=1
    79  0000                     
    80                           ; Version 1.41
    81                           ; Generated 25/01/2017 GMT
    82                           ; 
    83                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    84                           ; All rights reserved.
    85                           ; 
    86                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    87                           ; 
    88                           ; Redistribution and use in source and binary forms, with or without modification, are
    89                           ; permitted provided that the following conditions are met:
    90                           ; 
    91                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    92                           ;        conditions and the following disclaimer.
    93                           ; 
    94                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    95                           ;        of conditions and the following disclaimer in the documentation and/or other
    96                           ;        materials provided with the distribution.
    97                           ; 
    98                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    99                           ;        software without specific prior written permission.
   100                           ; 
   101                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   102                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   103                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   104                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   105                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   106                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   107                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   108                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   109                           ; 
   110                           ; 
   111                           ; Code-generator required, PIC18F2510 Definitions
   112                           ; 
   113                           ; SFR Addresses
   114  0000                     tblptrh	equ	0xFF7
   115                           tblptrl	equ	0xFF6
   116                           tablat	equ	0xFF5
   117                           prodh	equ	0xFF4
   118                           prodl	equ	0xFF3
   119                           intcon	equ	0xFF2
   120                           wreg	equ	0xFE8
   121                           indf2	equ	0xFDF
   122                           postinc2	equ	0xFDE
   123                           postdec2	equ	0xFDD
   124                           fsr2h	equ	0xFDA
   125                           fsr2l	equ	0xFD9
   126                           status	equ	0xFD8
   127                           
   128                           	psect	config
   129  300000                     	org	0	;# 
   130  300000                     config_word1:
   131                           	opt stack 0
   132                           
   133                           ;# 
   134  300000  FFF2               	dw	65522	;# 
   135  300002                     	org	2	;# 
   136  300002                     config_word2:
   137                           	opt stack 0
   138                           
   139                           ;# 
   140  300002  0001               	dw	1	;# 
   141  300004                     	org	4	;# 
   142  300004                     config_word3:
   143                           	opt stack 0
   144                           
   145                           ;# 
   146  300004  FF00               	dw	65280	;# 
   147  300006                     	org	6	;# 
   148  300006                     config_word4:
   149                           	opt stack 0
   150                           
   151                           ;# 
   152  300006  FFC1               	dw	65473	;# 
   153                           tblptrh	equ	0xFF7
   154                           tblptrl	equ	0xFF6
   155                           tablat	equ	0xFF5
   156                           prodh	equ	0xFF4
   157                           prodl	equ	0xFF3
   158                           intcon	equ	0xFF2
   159                           wreg	equ	0xFE8
   160                           indf2	equ	0xFDF
   161                           postinc2	equ	0xFDE
   162                           postdec2	equ	0xFDD
   163                           fsr2h	equ	0xFDA
   164                           fsr2l	equ	0xFD9
   165                           status	equ	0xFD8
   166                           
   167                           	psect	idataCOMRAM
   168  002602                     __pidataCOMRAM:
   169                           	opt stack 0
   170                           
   171                           ;initializer for _bat
   172  002602  019A               	dw	410
   173                           
   174                           ;initializer for _breath_init
   175  002604  01                 	db	1
   176                           
   177                           ;initializer for timer0_cnt@init_flag
   178  002605  01                 	db	1
   179                           
   180                           ;initializer for _smo_det2_o
   181  002606  01                 	db	1
   182                           
   183                           ;initializer for _smo_det1_o
   184  002607  01                 	db	1
   185                           
   186                           ;initializer for _t
   187  002608  14                 	db	20
   188                           
   189                           ;initializer for _state_chrg
   190  002609  03                 	db	3
   191                           
   192                           ;initializer for _state_smo_det
   193  00260A  02                 	db	2
   194                           
   195                           ;initializer for _state_key
   196  00260B  02                 	db	2
   197                           
   198                           ;initializer for _breath_state
   199  00260C  03                 	db	3
   200                           
   201                           ;initializer for _col_init
   202  00260D  01                 	db	1
   203                           
   204                           ;initializer for _dian
   205  00260E  01                 	db	1
   206                           
   207                           ;initializer for _you
   208  00260F  06                 	db	6
   209                           tblptrh	equ	0xFF7
   210                           tblptrl	equ	0xFF6
   211                           tablat	equ	0xFF5
   212                           prodh	equ	0xFF4
   213                           prodl	equ	0xFF3
   214                           intcon	equ	0xFF2
   215                           wreg	equ	0xFE8
   216                           indf2	equ	0xFDF
   217                           postinc2	equ	0xFDE
   218                           postdec2	equ	0xFDD
   219                           fsr2h	equ	0xFDA
   220                           fsr2l	equ	0xFD9
   221                           status	equ	0xFD8
   222                           
   223                           	psect	idataBANK0
   224  002610                     __pidataBANK0:
   225                           	opt stack 0
   226                           
   227                           ;initializer for _temp3
   228  002610  0F3C               	dw	3900
   229  002612  0000               	dw	0
   230                           
   231                           ;initializer for _temp2
   232  002614  0F3C               	dw	3900
   233  002616  0000               	dw	0
   234                           
   235                           ;initializer for _temp1
   236  002618  0514               	dw	1300
   237  00261A  0000               	dw	0
   238                           tblptrh	equ	0xFF7
   239                           tblptrl	equ	0xFF6
   240                           tablat	equ	0xFF5
   241                           prodh	equ	0xFF4
   242                           prodl	equ	0xFF3
   243                           intcon	equ	0xFF2
   244                           wreg	equ	0xFE8
   245                           indf2	equ	0xFDF
   246                           postinc2	equ	0xFDE
   247                           postdec2	equ	0xFDD
   248                           fsr2h	equ	0xFDA
   249                           fsr2l	equ	0xFD9
   250                           status	equ	0xFD8
   251                           
   252                           	psect	smallconst
   253  000200                     __psmallconst:
   254                           	opt stack 0
   255  000200  00                 	db	0
   256  000201                     _arr_cnt:
   257                           	opt stack 0
   258  000201  28                 	db	40
   259  000202  28                 	db	40
   260  000203  28                 	db	40
   261  000204  28                 	db	40
   262  000205  00                 	db	0
   263  000206  07                 	db	7
   264  000207  08                 	db	8
   265  000208  0C                 	db	12
   266  000209  10                 	db	16
   267  00020A  11                 	db	17
   268  00020B  16                 	db	22
   269  00020C  1A                 	db	26
   270  00020D  1C                 	db	28
   271  00020E  28                 	db	40
   272  00020F  28                 	db	40
   273  000210  28                 	db	40
   274  000211  28                 	db	40
   275  000212  28                 	db	40
   276  000213  28                 	db	40
   277  000214  28                 	db	40
   278  000215  01                 	db	1
   279  000216  07                 	db	7
   280  000217  0A                 	db	10
   281  000218  0C                 	db	12
   282  000219  28                 	db	40
   283  00021A  13                 	db	19
   284  00021B  17                 	db	23
   285  00021C  1A                 	db	26
   286  00021D  1D                 	db	29
   287  00021E  28                 	db	40
   288  00021F  28                 	db	40
   289  000220  28                 	db	40
   290  000221  28                 	db	40
   291  000222  28                 	db	40
   292  000223  28                 	db	40
   293  000224  28                 	db	40
   294  000225  00                 	db	0
   295  000226  07                 	db	7
   296  000227  0B                 	db	11
   297  000228  0E                 	db	14
   298  000229  28                 	db	40
   299  00022A  14                 	db	20
   300  00022B  17                 	db	23
   301  00022C  19                 	db	25
   302  00022D  1B                 	db	27
   303  00022E  28                 	db	40
   304  00022F  28                 	db	40
   305  000230  28                 	db	40
   306  000231  28                 	db	40
   307  000232  28                 	db	40
   308  000233  28                 	db	40
   309  000234  28                 	db	40
   310  000235  01                 	db	1
   311  000236  07                 	db	7
   312  000237  0A                 	db	10
   313  000238  0F                 	db	15
   314  000239  28                 	db	40
   315  00023A  15                 	db	21
   316  00023B  17                 	db	23
   317  00023C  19                 	db	25
   318  00023D  1B                 	db	27
   319  00023E  28                 	db	40
   320  00023F  28                 	db	40
   321  000240  28                 	db	40
   322  000241  28                 	db	40
   323  000242  28                 	db	40
   324  000243  28                 	db	40
   325  000244  28                 	db	40
   326  000245  00                 	db	0
   327  000246  07                 	db	7
   328  000247  0A                 	db	10
   329  000248  28                 	db	40
   330  000249  11                 	db	17
   331  00024A  14                 	db	20
   332  00024B  18                 	db	24
   333  00024C  1B                 	db	27
   334  00024D  1C                 	db	28
   335  00024E  28                 	db	40
   336  00024F  28                 	db	40
   337  000250  28                 	db	40
   338  000251  28                 	db	40
   339  000252  28                 	db	40
   340  000253  28                 	db	40
   341  000254  28                 	db	40
   342  000255  00                 	db	0
   343  000256  08                 	db	8
   344  000257  0A                 	db	10
   345  000258  28                 	db	40
   346  000259  12                 	db	18
   347  00025A  13                 	db	19
   348  00025B  18                 	db	24
   349  00025C  1B                 	db	27
   350  00025D  1D                 	db	29
   351  00025E  28                 	db	40
   352  00025F  28                 	db	40
   353  000260  28                 	db	40
   354  000261  28                 	db	40
   355  000262  28                 	db	40
   356  000263  28                 	db	40
   357  000264  28                 	db	40
   358  000265  01                 	db	1
   359  000266  09                 	db	9
   360  000267  0C                 	db	12
   361  000268  0E                 	db	14
   362  000269  28                 	db	40
   363  00026A  14                 	db	20
   364  00026B  18                 	db	24
   365  00026C  1C                 	db	28
   366  00026D  1E                 	db	30
   367  00026E  28                 	db	40
   368  00026F  28                 	db	40
   369  000270  28                 	db	40
   370  000271  28                 	db	40
   371  000272  28                 	db	40
   372  000273  28                 	db	40
   373  000274  28                 	db	40
   374  000275  00                 	db	0
   375  000276  09                 	db	9
   376  000277  0D                 	db	13
   377  000278  0F                 	db	15
   378  000279  28                 	db	40
   379  00027A  16                 	db	22
   380  00027B  19                 	db	25
   381  00027C  1E                 	db	30
   382  00027D  1E                 	db	30
   383  00027E  28                 	db	40
   384  00027F  28                 	db	40
   385  000280  28                 	db	40
   386  000281                     __end_of_arr_cnt:
   387                           	opt stack 0
   388  000281                     _arr_q:
   389                           	opt stack 0
   390  000281  02                 	db	2
   391  000282  12                 	db	18
   392  000283  22                 	db	34
   393  000284  32                 	db	50
   394  000285  42                 	db	66
   395  000286  52                 	db	82
   396  000287  62                 	db	98
   397  000288  72                 	db	114
   398  000289  03                 	db	3
   399  00028A  13                 	db	19
   400  00028B  23                 	db	35
   401  00028C  33                 	db	51
   402  00028D  43                 	db	67
   403  00028E  53                 	db	83
   404  00028F  63                 	db	99
   405  000290  73                 	db	115
   406  000291  0D                 	db	13
   407  000292  1D                 	db	29
   408  000293  2D                 	db	45
   409  000294  3D                 	db	61
   410  000295  4D                 	db	77
   411  000296  5D                 	db	93
   412  000297  7D                 	db	125
   413  000298  6D                 	db	109
   414  000299                     __end_of_arr_q:
   415                           	opt stack 0
   416  000299                     _p:
   417                           	opt stack 0
   418  000299  3380               	dw	13184
   419  00029B  006A               	dw	106
   420  00029D  C100               	dw	49408
   421  00029F  00C5               	dw	197
   422  0002A1                     __end_of_p:
   423                           	opt stack 0
   424  0002A1  00                 	db	0	; dummy byte at the end
   425  0000                     tblptrh	equ	0xFF7
   426                           tblptrl	equ	0xFF6
   427                           tablat	equ	0xFF5
   428                           prodh	equ	0xFF4
   429                           prodl	equ	0xFF3
   430                           intcon	equ	0xFF2
   431                           wreg	equ	0xFE8
   432                           indf2	equ	0xFDF
   433                           postinc2	equ	0xFDE
   434                           postdec2	equ	0xFDD
   435                           fsr2h	equ	0xFDA
   436                           fsr2l	equ	0xFD9
   437                           status	equ	0xFD8
   438                           
   439                           ; #config settings
   440                           
   441                           	psect	cinit
   442  001F5C                     __pcinit:
   443                           	opt stack 0
   444  001F5C                     start_initialization:
   445                           	opt stack 0
   446  001F5C                     __initialization:
   447                           	opt stack 0
   448                           
   449                           ; Initialize objects allocated to BANK0 (12 bytes)
   450                           ; load TBLPTR registers with __pidataBANK0
   451  001F5C  0E10               	movlw	low __pidataBANK0
   452  001F5E  6EF6               	movwf	tblptrl,c
   453  001F60  0E26               	movlw	high __pidataBANK0
   454  001F62  6EF7               	movwf	tblptrh,c
   455  001F64  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   456  001F66  6EF8               	movwf	tblptru,c
   457  001F68  EE00  F0D6         	lfsr	0,__pdataBANK0
   458  001F6C  EE10 F00C          	lfsr	1,12
   459  001F70                     copy_data0:
   460  001F70  0009               	tblrd		*+
   461  001F72  CFF5 FFEE          	movff	tablat,postinc0
   462  001F76  50E5               	movf	postdec1,w,c
   463  001F78  50E1               	movf	fsr1l,w,c
   464  001F7A  E1FA               	bnz	copy_data0
   465                           
   466                           ; Initialize objects allocated to COMRAM (14 bytes)
   467                           ; load TBLPTR registers with __pidataCOMRAM
   468  001F7C  0E02               	movlw	low __pidataCOMRAM
   469  001F7E  6EF6               	movwf	tblptrl,c
   470  001F80  0E26               	movlw	high __pidataCOMRAM
   471  001F82  6EF7               	movwf	tblptrh,c
   472  001F84  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   473  001F86  6EF8               	movwf	tblptru,c
   474  001F88  EE00  F070         	lfsr	0,__pdataCOMRAM
   475  001F8C  EE10 F00E          	lfsr	1,14
   476  001F90                     copy_data1:
   477  001F90  0009               	tblrd		*+
   478  001F92  CFF5 FFEE          	movff	tablat,postinc0
   479  001F96  50E5               	movf	postdec1,w,c
   480  001F98  50E1               	movf	fsr1l,w,c
   481  001F9A  E1FA               	bnz	copy_data1
   482                           
   483                           ; Clear objects allocated to BANK1 (128 bytes)
   484  001F9C  EE01  F000         	lfsr	0,__pbssBANK1
   485  001FA0  0E80               	movlw	128
   486  001FA2                     clear_0:
   487  001FA2  6AEE               	clrf	postinc0,c
   488  001FA4  06E8               	decf	wreg,f,c
   489  001FA6  E1FD               	bnz	clear_0
   490                           
   491                           ; Clear objects allocated to BANK0 (86 bytes)
   492  001FA8  EE00  F080         	lfsr	0,__pbssBANK0
   493  001FAC  0E56               	movlw	86
   494  001FAE                     clear_1:
   495  001FAE  6AEE               	clrf	postinc0,c
   496  001FB0  06E8               	decf	wreg,f,c
   497  001FB2  E1FD               	bnz	clear_1
   498                           
   499                           ; Clear objects allocated to COMRAM (43 bytes)
   500  001FB4  EE00  F045         	lfsr	0,__pbssCOMRAM
   501  001FB8  0E2B               	movlw	43
   502  001FBA                     clear_2:
   503  001FBA  6AEE               	clrf	postinc0,c
   504  001FBC  06E8               	decf	wreg,f,c
   505  001FBE  E1FD               	bnz	clear_2
   506  001FC0                     end_of_initialization:
   507                           	opt stack 0
   508  001FC0                     __end_of__initialization:
   509                           	opt stack 0
   510  001FC0  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   511  001FC2  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   512  001FC4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   513  001FC6  6EF8               	movwf	tblptru,c
   514  001FC8  0100               	movlb	0
   515  001FCA  EF15  F005         	goto	_main	;jump to C main() function
   516                           tblptru	equ	0xFF8
   517                           tblptrh	equ	0xFF7
   518                           tblptrl	equ	0xFF6
   519                           tablat	equ	0xFF5
   520                           prodh	equ	0xFF4
   521                           prodl	equ	0xFF3
   522                           intcon	equ	0xFF2
   523                           postinc0	equ	0xFEE
   524                           wreg	equ	0xFE8
   525                           postdec1	equ	0xFE5
   526                           fsr1l	equ	0xFE1
   527                           indf2	equ	0xFDF
   528                           postinc2	equ	0xFDE
   529                           postdec2	equ	0xFDD
   530                           fsr2h	equ	0xFDA
   531                           fsr2l	equ	0xFD9
   532                           status	equ	0xFD8
   533                           
   534                           	psect	bssCOMRAM
   535  000045                     __pbssCOMRAM:
   536                           	opt stack 0
   537  000045                     _p1:
   538                           	opt stack 0
   539  000045                     	ds	2
   540  000047                     _p0:
   541                           	opt stack 0
   542  000047                     	ds	2
   543  000049                     _t_pwm_:
   544                           	opt stack 0
   545  000049                     	ds	2
   546  00004B                     _t_pwm:
   547                           	opt stack 0
   548  00004B                     	ds	2
   549  00004D                     _cnt0:
   550                           	opt stack 0
   551  00004D                     	ds	2
   552  00004F                     _bat_o:
   553                           	opt stack 0
   554  00004F                     	ds	2
   555  000051                     _cb_flag:
   556                           	opt stack 0
   557  000051                     	ds	1
   558  000052                     _state_pwm_cnt:
   559                           	opt stack 0
   560  000052                     	ds	1
   561  000053                     _state_pwm:
   562                           	opt stack 0
   563  000053                     	ds	1
   564  000054                     _sim_mic_o:
   565                           	opt stack 0
   566  000054                     	ds	1
   567  000055                     _smo_timerout:
   568                           	opt stack 0
   569  000055                     	ds	1
   570  000056                     timer0_cnt@ls_lab:
   571                           	opt stack 0
   572  000056                     	ds	1
   573  000057                     _adc_ok:
   574                           	opt stack 0
   575  000057                     	ds	1
   576  000058                     _tim0flag:
   577                           	opt stack 0
   578  000058                     	ds	1
   579  000059                     _dl_init:
   580                           	opt stack 0
   581  000059                     	ds	1
   582  00005A                     _key_timer_id:
   583                           	opt stack 0
   584  00005A                     	ds	1
   585  00005B                     _key_timer_flag:
   586                           	opt stack 0
   587  00005B                     	ds	1
   588  00005C                     _key_o:
   589                           	opt stack 0
   590  00005C                     	ds	1
   591  00005D                     _cr_flag:
   592                           	opt stack 0
   593  00005D                     	ds	1
   594  00005E                     _task_1_7_init:
   595                           	opt stack 0
   596  00005E                     	ds	1
   597  00005F                     _cd_fz:
   598                           	opt stack 0
   599  00005F                     	ds	1
   600  000060                     _usb_det_o:
   601                           	opt stack 0
   602  000060                     	ds	1
   603  000061                     _low_bat_flag:
   604                           	opt stack 0
   605  000061                     	ds	1
   606  000062                     _dl1_flag:
   607                           	opt stack 0
   608  000062                     	ds	1
   609  000063                     _dl0_flag:
   610                           	opt stack 0
   611  000063                     	ds	1
   612  000064                     new_col@mode_sub_2:
   613                           	opt stack 0
   614  000064                     	ds	1
   615  000065                     _state_q:
   616                           	opt stack 0
   617  000065                     	ds	1
   618  000066                     _t1:
   619                           	opt stack 0
   620  000066                     	ds	1
   621  000067                     _aip33626_task_id:
   622                           	opt stack 0
   623  000067                     	ds	1
   624  000068                     _col_cnt:
   625                           	opt stack 0
   626  000068                     	ds	1
   627  000069                     _mode:
   628                           	opt stack 0
   629  000069                     	ds	1
   630  00006A                     _mode_dian:
   631                           	opt stack 0
   632  00006A                     	ds	1
   633  00006B                     _mode_you:
   634                           	opt stack 0
   635  00006B                     	ds	1
   636  00006C                     _task_1_7_flag:
   637                           	opt stack 0
   638  00006C                     	ds	1
   639  00006D                     _mode_sub:
   640                           	opt stack 0
   641  00006D                     	ds	1
   642  00006E                     _duty1:
   643                           	opt stack 0
   644  00006E                     	ds	1
   645  00006F                     _duty0:
   646                           	opt stack 0
   647  00006F                     	ds	1
   648                           tblptru	equ	0xFF8
   649                           tblptrh	equ	0xFF7
   650                           tblptrl	equ	0xFF6
   651                           tablat	equ	0xFF5
   652                           prodh	equ	0xFF4
   653                           prodl	equ	0xFF3
   654                           intcon	equ	0xFF2
   655                           postinc0	equ	0xFEE
   656                           wreg	equ	0xFE8
   657                           postdec1	equ	0xFE5
   658                           fsr1l	equ	0xFE1
   659                           indf2	equ	0xFDF
   660                           postinc2	equ	0xFDE
   661                           postdec2	equ	0xFDD
   662                           fsr2h	equ	0xFDA
   663                           fsr2l	equ	0xFD9
   664                           status	equ	0xFD8
   665                           
   666                           	psect	dataCOMRAM
   667  000070                     __pdataCOMRAM:
   668                           	opt stack 0
   669  000070                     _bat:
   670                           	opt stack 0
   671  000070                     	ds	2
   672  000072                     _breath_init:
   673                           	opt stack 0
   674  000072                     	ds	1
   675  000073                     timer0_cnt@init_flag:
   676                           	opt stack 0
   677  000073                     	ds	1
   678  000074                     _smo_det2_o:
   679                           	opt stack 0
   680  000074                     	ds	1
   681  000075                     _smo_det1_o:
   682                           	opt stack 0
   683  000075                     	ds	1
   684  000076                     _t:
   685                           	opt stack 0
   686  000076                     	ds	1
   687  000077                     _state_chrg:
   688                           	opt stack 0
   689  000077                     	ds	1
   690  000078                     _state_smo_det:
   691                           	opt stack 0
   692  000078                     	ds	1
   693  000079                     _state_key:
   694                           	opt stack 0
   695  000079                     	ds	1
   696  00007A                     _breath_state:
   697                           	opt stack 0
   698  00007A                     	ds	1
   699  00007B                     _col_init:
   700                           	opt stack 0
   701  00007B                     	ds	1
   702  00007C                     _dian:
   703                           	opt stack 0
   704  00007C                     	ds	1
   705  00007D                     _you:
   706                           	opt stack 0
   707  00007D                     	ds	1
   708                           tblptru	equ	0xFF8
   709                           tblptrh	equ	0xFF7
   710                           tblptrl	equ	0xFF6
   711                           tablat	equ	0xFF5
   712                           prodh	equ	0xFF4
   713                           prodl	equ	0xFF3
   714                           intcon	equ	0xFF2
   715                           postinc0	equ	0xFEE
   716                           wreg	equ	0xFE8
   717                           postdec1	equ	0xFE5
   718                           fsr1l	equ	0xFE1
   719                           indf2	equ	0xFDF
   720                           postinc2	equ	0xFDE
   721                           postdec2	equ	0xFDD
   722                           fsr2h	equ	0xFDA
   723                           fsr2l	equ	0xFD9
   724                           status	equ	0xFD8
   725                           
   726                           	psect	bssBANK0
   727  000080                     __pbssBANK0:
   728                           	opt stack 0
   729  000080                     _you_cnt:
   730                           	opt stack 0
   731  000080                     	ds	4
   732  000084                     _timer0cnt:
   733                           	opt stack 0
   734  000084                     	ds	2
   735  000086                     _task_list:
   736                           	opt stack 0
   737  000086                     	ds	80
   738                           tblptru	equ	0xFF8
   739                           tblptrh	equ	0xFF7
   740                           tblptrl	equ	0xFF6
   741                           tablat	equ	0xFF5
   742                           prodh	equ	0xFF4
   743                           prodl	equ	0xFF3
   744                           intcon	equ	0xFF2
   745                           postinc0	equ	0xFEE
   746                           wreg	equ	0xFE8
   747                           postdec1	equ	0xFE5
   748                           fsr1l	equ	0xFE1
   749                           indf2	equ	0xFDF
   750                           postinc2	equ	0xFDE
   751                           postdec2	equ	0xFDD
   752                           fsr2h	equ	0xFDA
   753                           fsr2l	equ	0xFD9
   754                           status	equ	0xFD8
   755                           
   756                           	psect	dataBANK0
   757  0000D6                     __pdataBANK0:
   758                           	opt stack 0
   759  0000D6                     _temp3:
   760                           	opt stack 0
   761  0000D6                     	ds	4
   762  0000DA                     _temp2:
   763                           	opt stack 0
   764  0000DA                     	ds	4
   765  0000DE                     _temp1:
   766                           	opt stack 0
   767  0000DE                     	ds	4
   768                           tblptru	equ	0xFF8
   769                           tblptrh	equ	0xFF7
   770                           tblptrl	equ	0xFF6
   771                           tablat	equ	0xFF5
   772                           prodh	equ	0xFF4
   773                           prodl	equ	0xFF3
   774                           intcon	equ	0xFF2
   775                           postinc0	equ	0xFEE
   776                           wreg	equ	0xFE8
   777                           postdec1	equ	0xFE5
   778                           fsr1l	equ	0xFE1
   779                           indf2	equ	0xFDF
   780                           postinc2	equ	0xFDE
   781                           postdec2	equ	0xFDD
   782                           fsr2h	equ	0xFDA
   783                           fsr2l	equ	0xFD9
   784                           status	equ	0xFD8
   785                           
   786                           	psect	bssBANK1
   787  000100                     __pbssBANK1:
   788                           	opt stack 0
   789  000100                     _arr_col:
   790                           	opt stack 0
   791  000100                     	ds	128
   792                           tblptru	equ	0xFF8
   793                           tblptrh	equ	0xFF7
   794                           tblptrl	equ	0xFF6
   795                           tablat	equ	0xFF5
   796                           prodh	equ	0xFF4
   797                           prodl	equ	0xFF3
   798                           intcon	equ	0xFF2
   799                           postinc0	equ	0xFEE
   800                           wreg	equ	0xFE8
   801                           postdec1	equ	0xFE5
   802                           fsr1l	equ	0xFE1
   803                           indf2	equ	0xFDF
   804                           postinc2	equ	0xFDE
   805                           postdec2	equ	0xFDD
   806                           fsr2h	equ	0xFDA
   807                           fsr2l	equ	0xFD9
   808                           status	equ	0xFD8
   809                           
   810                           	psect	cstackCOMRAM
   811  000001                     __pcstackCOMRAM:
   812                           	opt stack 0
   813  000001                     ??_ISR_l:
   814  000001                     
   815                           ; 1 bytes @ 0x0
   816  000001                     	ds	1
   817  000002                     ??_myi2c_sendbyte:
   818  000002                     ?___awdiv:
   819                           	opt stack 0
   820  000002                     ?___ftpack:
   821                           	opt stack 0
   822  000002                     ?___lmul:
   823                           	opt stack 0
   824  000002                     ?___lldiv:
   825                           	opt stack 0
   826  000002                     arr_col_init@num:
   827                           	opt stack 0
   828  000002                     new_col@dian:
   829                           	opt stack 0
   830  000002                     key_timer_task@task_:
   831                           	opt stack 0
   832  000002                     FVR_Offset@OFFSET:
   833                           	opt stack 0
   834  000002                     CMP0_offset@OFFSET:
   835                           	opt stack 0
   836  000002                     CMP1_offset@OFFSET:
   837                           	opt stack 0
   838  000002                     task_init@i:
   839                           	opt stack 0
   840  000002                     add_task@id2:
   841                           	opt stack 0
   842  000002                     add_task_id@id2:
   843                           	opt stack 0
   844  000002                     timer0_cnt@ms:
   845                           	opt stack 0
   846  000002                     ___awdiv@dividend:
   847                           	opt stack 0
   848  000002                     ___ftpack@arg:
   849                           	opt stack 0
   850  000002                     ___lmul@multiplier:
   851                           	opt stack 0
   852  000002                     ___lldiv@dividend:
   853                           	opt stack 0
   854                           
   855                           ; 4 bytes @ 0x1
   856  000002                     	ds	1
   857  000003                     arr_col_init@i:
   858                           	opt stack 0
   859  000003                     new_col@mode_you:
   860                           	opt stack 0
   861  000003                     FVR_Offset@tmp:
   862                           	opt stack 0
   863  000003                     CMP0_offset@tmp:
   864                           	opt stack 0
   865  000003                     CMP1_offset@tmp:
   866                           	opt stack 0
   867  000003                     add_task@interval_ms:
   868                           	opt stack 0
   869  000003                     add_task_id@interval_ms:
   870                           	opt stack 0
   871                           
   872                           ; 4 bytes @ 0x2
   873  000003                     	ds	1
   874  000004                     new_col@mode_dian:
   875                           	opt stack 0
   876  000004                     timer0_cnt@lab:
   877                           	opt stack 0
   878  000004                     ___awdiv@divisor:
   879                           	opt stack 0
   880                           
   881                           ; 2 bytes @ 0x3
   882  000004                     	ds	1
   883  000005                     ??_timer0_cnt:
   884  000005                     new_col@mode:
   885                           	opt stack 0
   886  000005                     myi2c_sendbyte@by:
   887                           	opt stack 0
   888  000005                     ___ftpack@exp:
   889                           	opt stack 0
   890                           
   891                           ; 1 bytes @ 0x4
   892  000005                     	ds	1
   893  000006                     new_col@mode_sub:
   894                           	opt stack 0
   895  000006                     myi2c_sendbyte@i:
   896                           	opt stack 0
   897  000006                     ___awdiv@counter:
   898                           	opt stack 0
   899  000006                     ___ftpack@sign:
   900                           	opt stack 0
   901  000006                     ___lmul@multiplicand:
   902                           	opt stack 0
   903  000006                     ___lldiv@divisor:
   904                           	opt stack 0
   905                           
   906                           ; 4 bytes @ 0x5
   907  000006                     	ds	1
   908  000007                     ??___ftpack:
   909  000007                     ??_new_col:
   910  000007                     aip33626_sendcmd@cmd:
   911                           	opt stack 0
   912  000007                     add_task@suc_max:
   913                           	opt stack 0
   914  000007                     add_task_id@suc_max:
   915                           	opt stack 0
   916  000007                     ___awdiv@sign:
   917                           	opt stack 0
   918                           
   919                           ; 1 bytes @ 0x6
   920  000007                     	ds	1
   921  000008                     ??_add_task:
   922  000008                     aip33626_sursor@site:
   923                           	opt stack 0
   924  000008                     add_task_id@task_id:
   925                           	opt stack 0
   926  000008                     ___awdiv@quotient:
   927                           	opt stack 0
   928                           
   929                           ; 2 bytes @ 0x7
   930  000008                     	ds	1
   931  000009                     ??_add_task_id:
   932  000009                     aip33626_allDisplay_@num:
   933                           	opt stack 0
   934  000009                     aip33626_allDisplay@num:
   935                           	opt stack 0
   936                           
   937                           ; 2 bytes @ 0x8
   938  000009                     	ds	1
   939  00000A                     ??_FVR_CAL:
   940  00000A                     ??_CMP0_cal:
   941  00000A                     ??_CMP1_cal:
   942  00000A                     ?___lbtoft:
   943                           	opt stack 0
   944  00000A                     ?___lltoft:
   945                           	opt stack 0
   946  00000A                     aip33626_allDisplay_@i:
   947                           	opt stack 0
   948  00000A                     ___lmul@product:
   949                           	opt stack 0
   950  00000A                     ___lldiv@quotient:
   951                           	opt stack 0
   952  00000A                     ___lltoft@c:
   953                           	opt stack 0
   954                           
   955                           ; 4 bytes @ 0x9
   956  00000A                     	ds	1
   957  00000B                     aip33626_allDisplay@i:
   958                           	opt stack 0
   959  00000B                     aip33626_sys_begin@task_:
   960                           	opt stack 0
   961  00000B                     aip33626_flash@task_:
   962                           	opt stack 0
   963                           
   964                           ; 1 bytes @ 0xA
   965  00000B                     	ds	1
   966  00000C                     aip33626_smo_reset@task_:
   967                           	opt stack 0
   968  00000C                     aip33626_batFull@task_:
   969                           	opt stack 0
   970  00000C                     FVR_CAL@VOOS1:
   971                           	opt stack 0
   972  00000C                     CMP0_cal@VOOS1:
   973                           	opt stack 0
   974  00000C                     CMP1_cal@VOOS1:
   975                           	opt stack 0
   976  00000C                     add_task@id1:
   977                           	opt stack 0
   978                           
   979                           ; 1 bytes @ 0xB
   980  00000C                     	ds	1
   981  00000D                     FVR_CAL@start:
   982                           	opt stack 0
   983  00000D                     CMP0_cal@start:
   984                           	opt stack 0
   985  00000D                     CMP1_cal@start:
   986                           	opt stack 0
   987  00000D                     add_task_id@id1:
   988                           	opt stack 0
   989  00000D                     ___lbtoft@c:
   990                           	opt stack 0
   991  00000D                     _new_col$1181:
   992                           	opt stack 0
   993  00000D                     add_task@interval_ticks:
   994                           	opt stack 0
   995                           
   996                           ; 2 bytes @ 0xC
   997  00000D                     	ds	1
   998  00000E                     ??___lltoft:
   999  00000E                     ?___ftmul:
  1000                           	opt stack 0
  1001  00000E                     aip33626_freeChrg@task_:
  1002                           	opt stack 0
  1003  00000E                     FVR_CAL@i:
  1004                           	opt stack 0
  1005  00000E                     CMP0_cal@i:
  1006                           	opt stack 0
  1007  00000E                     CMP1_cal@i:
  1008                           	opt stack 0
  1009  00000E                     ___lldiv@counter:
  1010                           	opt stack 0
  1011  00000E                     add_task_id@interval_ticks:
  1012                           	opt stack 0
  1013  00000E                     ___ftmul@f1:
  1014                           	opt stack 0
  1015                           
  1016                           ; 3 bytes @ 0xD
  1017  00000E                     	ds	1
  1018  00000F                     ?_adc_bat:
  1019                           	opt stack 0
  1020  00000F                     new_col@t2:
  1021                           	opt stack 0
  1022  00000F                     sleep_task@task_:
  1023                           	opt stack 0
  1024  00000F                     add_task@i:
  1025                           	opt stack 0
  1026                           
  1027                           ; 2 bytes @ 0xE
  1028  00000F                     	ds	1
  1029  000010                     new_col@you:
  1030                           	opt stack 0
  1031  000010                     key_task@task_:
  1032                           	opt stack 0
  1033  000010                     smo_det_task@task_:
  1034                           	opt stack 0
  1035                           
  1036                           ; 1 bytes @ 0xF
  1037  000010                     	ds	1
  1038  000011                     ??_adc_bat:
  1039  000011                     new_col@t:
  1040                           	opt stack 0
  1041  000011                     ___ftmul@f2:
  1042                           	opt stack 0
  1043                           
  1044                           ; 3 bytes @ 0x10
  1045  000011                     	ds	1
  1046  000012                     new_col@i:
  1047                           	opt stack 0
  1048  000012                     ___lltoft@exp:
  1049                           	opt stack 0
  1050                           
  1051                           ; 1 bytes @ 0x11
  1052  000012                     	ds	1
  1053  000013                     aip33626_breath@task_:
  1054                           	opt stack 0
  1055  000013                     aip33626_breath_stop@task_:
  1056                           	opt stack 0
  1057  000013                     adc_bat@t:
  1058                           	opt stack 0
  1059                           
  1060                           ; 2 bytes @ 0x12
  1061  000013                     	ds	1
  1062  000014                     ??___ftmul:
  1063  000014                     ??_aip33626_breath:
  1064  000014                     
  1065                           ; 1 bytes @ 0x13
  1066  000014                     	ds	1
  1067  000015                     adc_bat@t_:
  1068                           	opt stack 0
  1069                           
  1070                           ; 4 bytes @ 0x14
  1071  000015                     	ds	2
  1072  000017                     ___ftmul@exp:
  1073                           	opt stack 0
  1074                           
  1075                           ; 1 bytes @ 0x16
  1076  000017                     	ds	1
  1077  000018                     ___ftmul@f3_as_product:
  1078                           	opt stack 0
  1079                           
  1080                           ; 3 bytes @ 0x17
  1081  000018                     	ds	1
  1082  000019                     bat_task@task_:
  1083                           	opt stack 0
  1084  000019                     chrg_task@task_:
  1085                           	opt stack 0
  1086                           
  1087                           ; 1 bytes @ 0x18
  1088  000019                     	ds	1
  1089  00001A                     
  1090                           ; 1 bytes @ 0x19
  1091  00001A                     	ds	1
  1092  00001B                     ___ftmul@cntr:
  1093                           	opt stack 0
  1094                           
  1095                           ; 1 bytes @ 0x1A
  1096  00001B                     	ds	1
  1097  00001C                     ___ftmul@sign:
  1098                           	opt stack 0
  1099                           
  1100                           ; 1 bytes @ 0x1B
  1101  00001C                     	ds	1
  1102  00001D                     ?___ftadd:
  1103                           	opt stack 0
  1104  00001D                     ___ftadd@f1:
  1105                           	opt stack 0
  1106                           
  1107                           ; 3 bytes @ 0x1C
  1108  00001D                     	ds	3
  1109  000020                     ___ftadd@f2:
  1110                           	opt stack 0
  1111                           
  1112                           ; 3 bytes @ 0x1F
  1113  000020                     	ds	3
  1114  000023                     ??___ftadd:
  1115                           
  1116                           ; 1 bytes @ 0x22
  1117  000023                     	ds	3
  1118  000026                     ___ftadd@sign:
  1119                           	opt stack 0
  1120                           
  1121                           ; 1 bytes @ 0x25
  1122  000026                     	ds	1
  1123  000027                     ___ftadd@exp2:
  1124                           	opt stack 0
  1125                           
  1126                           ; 1 bytes @ 0x26
  1127  000027                     	ds	1
  1128  000028                     ___ftadd@exp1:
  1129                           	opt stack 0
  1130                           
  1131                           ; 1 bytes @ 0x27
  1132  000028                     	ds	1
  1133  000029                     ?___fttol:
  1134                           	opt stack 0
  1135  000029                     ___fttol@f1:
  1136                           	opt stack 0
  1137                           
  1138                           ; 3 bytes @ 0x28
  1139  000029                     	ds	4
  1140  00002D                     ??___fttol:
  1141                           
  1142                           ; 1 bytes @ 0x2C
  1143  00002D                     	ds	5
  1144  000032                     ___fttol@sign1:
  1145                           	opt stack 0
  1146                           
  1147                           ; 1 bytes @ 0x31
  1148  000032                     	ds	1
  1149  000033                     ___fttol@lval:
  1150                           	opt stack 0
  1151                           
  1152                           ; 4 bytes @ 0x32
  1153  000033                     	ds	4
  1154  000037                     ___fttol@exp1:
  1155                           	opt stack 0
  1156                           
  1157                           ; 1 bytes @ 0x36
  1158  000037                     	ds	1
  1159  000038                     si_mic_task@task_:
  1160                           	opt stack 0
  1161                           
  1162                           ; 1 bytes @ 0x37
  1163  000038                     	ds	1
  1164  000039                     
  1165                           ; 1 bytes @ 0x38
  1166  000039                     	ds	1
  1167  00003A                     si_mic_task@temp:
  1168                           	opt stack 0
  1169                           
  1170                           ; 2 bytes @ 0x39
  1171  00003A                     	ds	2
  1172  00003C                     si_mic_task@tt:
  1173                           	opt stack 0
  1174                           
  1175                           ; 4 bytes @ 0x3B
  1176  00003C                     	ds	4
  1177  000040                     find_task@id2:
  1178                           	opt stack 0
  1179                           
  1180                           ; 1 bytes @ 0x3F
  1181  000040                     	ds	1
  1182  000041                     find_task@task_:
  1183                           	opt stack 0
  1184                           
  1185                           ; 1 bytes @ 0x40
  1186  000041                     	ds	1
  1187  000042                     find_task@id1:
  1188                           	opt stack 0
  1189                           
  1190                           ; 1 bytes @ 0x41
  1191  000042                     	ds	1
  1192  000043                     ??_main:
  1193                           
  1194                           ; 1 bytes @ 0x42
  1195  000043                     	ds	2
  1196                           tblptru	equ	0xFF8
  1197                           tblptrh	equ	0xFF7
  1198                           tblptrl	equ	0xFF6
  1199                           tablat	equ	0xFF5
  1200                           prodh	equ	0xFF4
  1201                           prodl	equ	0xFF3
  1202                           intcon	equ	0xFF2
  1203                           postinc0	equ	0xFEE
  1204                           wreg	equ	0xFE8
  1205                           postdec1	equ	0xFE5
  1206                           fsr1l	equ	0xFE1
  1207                           indf2	equ	0xFDF
  1208                           postinc2	equ	0xFDE
  1209                           postdec2	equ	0xFDD
  1210                           fsr2h	equ	0xFDA
  1211                           fsr2l	equ	0xFD9
  1212                           status	equ	0xFD8
  1213                           
  1214 ;;
  1215 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1216 ;;
  1217 ;; *************** function _main *****************
  1218 ;; Defined at:
  1219 ;;		line 68 in file ".\src\main.c"
  1220 ;; Parameters:    Size  Location     Type
  1221 ;;		None
  1222 ;; Auto vars:     Size  Location     Type
  1223 ;;		None
  1224 ;; Return value:  Size  Location     Type
  1225 ;;                  1    wreg      void 
  1226 ;; Registers used:
  1227 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1228 ;; Tracked objects:
  1229 ;;		On entry : 0/0
  1230 ;;		On exit  : 3F/0
  1231 ;;		Unchanged: 0/0
  1232 ;; Data sizes:     COMRAM   BANK0   BANK1
  1233 ;;      Params:         0       0       0
  1234 ;;      Locals:         0       0       0
  1235 ;;      Temps:          2       0       0
  1236 ;;      Totals:         2       0       0
  1237 ;;Total ram usage:        2 bytes
  1238 ;; Hardware stack levels required when called:   10
  1239 ;; This function calls:
  1240 ;;		_GPIO_Init
  1241 ;;		_add_task
  1242 ;;		_add_task_id
  1243 ;;		_aip33626_init
  1244 ;;		_cmp_init
  1245 ;;		_dac_init
  1246 ;;		_find_task
  1247 ;;		_fvr_init
  1248 ;;		_task_init
  1249 ;;		_timer1_init
  1250 ;; This function is called by:
  1251 ;;		Startup code after reset
  1252 ;; This function uses a non-reentrant model
  1253 ;;
  1254                           
  1255                           	psect	text0
  1256  000A2A                     __ptext0:
  1257                           	opt stack 0
  1258  000A2A                     _main:
  1259                           	opt stack 0
  1260                           
  1261                           ;main.c: 71: GPIO_Init();
  1262                           
  1263                           ;incstack = 0
  1264 ;; hardware stack exceeded
  1265  000A2A  EC26  F011         	call	_GPIO_Init	;wreg free
  1266                           
  1267                           ; BSR set to: 15
  1268                           ;main.c: 72: fvr_init();
  1269  000A2E  EC3F  F012         	call	_fvr_init	;wreg free
  1270                           
  1271                           ;main.c: 73: dac_init();
  1272  000A32  EC71  F012         	call	_dac_init	;wreg free
  1273                           
  1274                           ;main.c: 74: cmp_init();
  1275  000A36  ECD8  F010         	call	_cmp_init	;wreg free
  1276                           
  1277                           ;main.c: 75: task_init();
  1278  000A3A  EC2E  F012         	call	_task_init	;wreg free
  1279                           
  1280                           ;main.c: 76: timer1_init();
  1281  000A3E  EC9E  F012         	call	_timer1_init	;wreg free
  1282                           
  1283                           ; BSR set to: 15
  1284                           ;main.c: 79: aip33626_init();
  1285  000A42  ECF8  F012         	call	_aip33626_init	;wreg free
  1286                           
  1287                           ;main.c: 83: PB0AEN=0; PB1AEN=0; PB0PU=0; PB1PU=0; smo_det1_o=PINB0; smo_det2_o=PINB1; P
      +                          B0AEN=1; PB1AEN=1;
  1288  000A46  010F               	movlb	15	; () banked
  1289  000A48  9153               	bcf	83,0,b	;volatile
  1290                           
  1291                           ; BSR set to: 15
  1292  000A4A  9353               	bcf	83,1,b	;volatile
  1293                           
  1294                           ; BSR set to: 15
  1295  000A4C  9085               	bcf	3973,0,c	;volatile
  1296                           
  1297                           ; BSR set to: 15
  1298  000A4E  9285               	bcf	3973,1,c	;volatile
  1299                           
  1300                           ; BSR set to: 15
  1301  000A50  0E00               	movlw	0
  1302  000A52  B089               	btfsc	3977,0,c	;volatile
  1303  000A54  0E01               	movlw	1
  1304  000A56  6E75               	movwf	_smo_det1_o,c
  1305                           
  1306                           ; BSR set to: 15
  1307  000A58  0E00               	movlw	0
  1308  000A5A  B289               	btfsc	3977,1,c	;volatile
  1309  000A5C  0E01               	movlw	1
  1310  000A5E  6E74               	movwf	_smo_det2_o,c
  1311                           
  1312                           ; BSR set to: 15
  1313  000A60  8153               	bsf	83,0,b	;volatile
  1314                           
  1315                           ; BSR set to: 15
  1316  000A62  8353               	bsf	83,1,b	;volatile
  1317                           
  1318                           ; BSR set to: 15
  1319                           ;main.c: 86: aip33626_task_id=add_task_id(1,1,
  1320                           ;main.c: 87: 5000,3,0);
  1321  000A64  0E01               	movlw	1
  1322  000A66  6E02               	movwf	add_task_id@id2,c
  1323  000A68  0E88               	movlw	136
  1324  000A6A  6E03               	movwf	add_task_id@interval_ms,c
  1325  000A6C  0E13               	movlw	19
  1326  000A6E  6E04               	movwf	add_task_id@interval_ms+1,c
  1327  000A70  6A05               	clrf	add_task_id@interval_ms+2,c
  1328  000A72  6A06               	clrf	add_task_id@interval_ms+3,c
  1329  000A74  0E03               	movlw	3
  1330  000A76  6E07               	movwf	add_task_id@suc_max,c
  1331  000A78  6A08               	clrf	add_task_id@task_id,c
  1332  000A7A  0E01               	movlw	1
  1333  000A7C  ECD1  F00C         	call	_add_task_id
  1334  000A80  6E67               	movwf	_aip33626_task_id,c
  1335                           
  1336                           ;main.c: 88: si_mic_task_id=add_task_id(2,1,
  1337                           ;main.c: 89: 40,0,1);
  1338  000A82  0E01               	movlw	1
  1339  000A84  6E02               	movwf	add_task_id@id2,c
  1340  000A86  0E28               	movlw	40
  1341  000A88  6E03               	movwf	add_task_id@interval_ms,c
  1342  000A8A  6A04               	clrf	add_task_id@interval_ms+1,c
  1343  000A8C  6A05               	clrf	add_task_id@interval_ms+2,c
  1344  000A8E  6A06               	clrf	add_task_id@interval_ms+3,c
  1345  000A90  6A07               	clrf	add_task_id@suc_max,c
  1346  000A92  0E01               	movlw	1
  1347  000A94  6E08               	movwf	add_task_id@task_id,c
  1348  000A96  0E02               	movlw	2
  1349  000A98  ECD1  F00C         	call	_add_task_id
  1350                           
  1351                           ;main.c: 90: key_task_id=add_task(4,1,
  1352                           ;main.c: 91: 16,0);
  1353  000A9C  0E01               	movlw	1
  1354  000A9E  6E02               	movwf	add_task@id2,c
  1355  000AA0  0E10               	movlw	16
  1356  000AA2  6E03               	movwf	add_task@interval_ms,c
  1357  000AA4  6A04               	clrf	add_task@interval_ms+1,c
  1358  000AA6  6A05               	clrf	add_task@interval_ms+2,c
  1359  000AA8  6A06               	clrf	add_task@interval_ms+3,c
  1360  000AAA  6A07               	clrf	add_task@suc_max,c
  1361  000AAC  0E04               	movlw	4
  1362  000AAE  EC65  F009         	call	_add_task
  1363                           
  1364                           ;main.c: 92: key_timer_id=add_task(4,2,
  1365                           ;main.c: 93: 40,0);
  1366  000AB2  0E02               	movlw	2
  1367  000AB4  6E02               	movwf	add_task@id2,c
  1368  000AB6  0E28               	movlw	40
  1369  000AB8  6E03               	movwf	add_task@interval_ms,c
  1370  000ABA  6A04               	clrf	add_task@interval_ms+1,c
  1371  000ABC  6A05               	clrf	add_task@interval_ms+2,c
  1372  000ABE  6A06               	clrf	add_task@interval_ms+3,c
  1373  000AC0  6A07               	clrf	add_task@suc_max,c
  1374  000AC2  0E04               	movlw	4
  1375  000AC4  EC65  F009         	call	_add_task
  1376  000AC8  6E5A               	movwf	_key_timer_id,c
  1377                           
  1378                           ;main.c: 94: smo_det_task_id=add_task(3,1,
  1379                           ;main.c: 95: 16,0);
  1380  000ACA  0E01               	movlw	1
  1381  000ACC  6E02               	movwf	add_task@id2,c
  1382  000ACE  0E10               	movlw	16
  1383  000AD0  6E03               	movwf	add_task@interval_ms,c
  1384  000AD2  6A04               	clrf	add_task@interval_ms+1,c
  1385  000AD4  6A05               	clrf	add_task@interval_ms+2,c
  1386  000AD6  6A06               	clrf	add_task@interval_ms+3,c
  1387  000AD8  6A07               	clrf	add_task@suc_max,c
  1388  000ADA  0E03               	movlw	3
  1389  000ADC  EC65  F009         	call	_add_task
  1390                           
  1391                           ;main.c: 96: chrg_task_id=add_task(6,1,
  1392                           ;main.c: 97: 250,0);
  1393  000AE0  0E01               	movlw	1
  1394  000AE2  6E02               	movwf	add_task@id2,c
  1395  000AE4  0EFA               	movlw	250
  1396  000AE6  6E03               	movwf	add_task@interval_ms,c
  1397  000AE8  6A04               	clrf	add_task@interval_ms+1,c
  1398  000AEA  6A05               	clrf	add_task@interval_ms+2,c
  1399  000AEC  6A06               	clrf	add_task@interval_ms+3,c
  1400  000AEE  6A07               	clrf	add_task@suc_max,c
  1401  000AF0  0E06               	movlw	6
  1402  000AF2  EC65  F009         	call	_add_task
  1403                           
  1404                           ;main.c: 100: bat_task_id=add_task(5,1,
  1405                           ;main.c: 101: 3000,0);
  1406  000AF6  0E01               	movlw	1
  1407  000AF8  6E02               	movwf	add_task@id2,c
  1408  000AFA  0EB8               	movlw	184
  1409  000AFC  6E03               	movwf	add_task@interval_ms,c
  1410  000AFE  0E0B               	movlw	11
  1411  000B00  6E04               	movwf	add_task@interval_ms+1,c
  1412  000B02  6A05               	clrf	add_task@interval_ms+2,c
  1413  000B04  6A06               	clrf	add_task@interval_ms+3,c
  1414  000B06  6A07               	clrf	add_task@suc_max,c
  1415  000B08  0E05               	movlw	5
  1416  000B0A  EC65  F009         	call	_add_task
  1417                           
  1418                           ;main.c: 102: sleep_task_id=add_task(7,1,
  1419                           ;main.c: 103: 250,0);
  1420  000B0E  0E01               	movlw	1
  1421  000B10  6E02               	movwf	add_task@id2,c
  1422  000B12  0EFA               	movlw	250
  1423  000B14  6E03               	movwf	add_task@interval_ms,c
  1424  000B16  6A04               	clrf	add_task@interval_ms+1,c
  1425  000B18  6A05               	clrf	add_task@interval_ms+2,c
  1426  000B1A  6A06               	clrf	add_task@interval_ms+3,c
  1427  000B1C  6A07               	clrf	add_task@suc_max,c
  1428  000B1E  0E07               	movlw	7
  1429  000B20  EC65  F009         	call	_add_task
  1430  000B24                     l34225:
  1431                           
  1432                           ;main.c: 106: {
  1433                           ;main.c: 107: if(task_list[0].active && task_list[0].ready) { TMR1IE=0; task_list[0].rea
      +                          dy = 0; TMR1IE=1; find_task(task_list[0].id1,task_list[0].id2,&task_list[0]); if(task_li
      +                          st[0].maxSuc!=0) { task_list[0].sucCnt++; if(task_list[0].sucCnt==task_list[0].maxSuc) {
  1434  000B24  0100               	movlb	0	; () banked
  1435  000B26  518C               	movf	(_task_list+6)& (0+255),w,b
  1436  000B28  E014               	bz	l34241
  1437                           
  1438                           ; BSR set to: 0
  1439  000B2A  518D               	movf	(_task_list+7)& (0+255),w,b
  1440  000B2C  E012               	bz	l34241
  1441                           
  1442                           ; BSR set to: 0
  1443  000B2E  92A1               	bcf	4001,1,c	;volatile
  1444  000B30  6B8D               	clrf	(_task_list+7)& (0+255),b
  1445  000B32  82A1               	bsf	4001,1,c	;volatile
  1446                           
  1447                           ; BSR set to: 0
  1448  000B34  C08B  F040         	movff	_task_list+5,find_task@id2
  1449  000B38  0E86               	movlw	low _task_list
  1450  000B3A  6E41               	movwf	find_task@task_,c
  1451  000B3C  518A               	movf	(_task_list+4)& (0+255),w,b
  1452  000B3E  EC70  F00C         	call	_find_task
  1453  000B42  0100               	movlb	0	; () banked
  1454  000B44  518E               	movf	(_task_list+8)& (0+255),w,b
  1455  000B46  E005               	bz	l34241
  1456                           
  1457                           ; BSR set to: 0
  1458  000B48  2B8F               	incf	(_task_list+9)& (0+255),f,b
  1459                           
  1460                           ; BSR set to: 0
  1461  000B4A  518E               	movf	(_task_list+8)& (0+255),w,b
  1462  000B4C  198F               	xorwf	(_task_list+9)& (0+255),w,b
  1463  000B4E  E101               	bnz	l34241
  1464                           
  1465                           ; BSR set to: 0
  1466  000B50  6B8C               	clrf	(_task_list+6)& (0+255),b
  1467  000B52                     l34241:
  1468                           
  1469                           ; BSR set to: 0
  1470  000B52  5196               	movf	(_task_list+16)& (0+255),w,b
  1471  000B54  E014               	bz	l34257
  1472                           
  1473                           ; BSR set to: 0
  1474  000B56  5197               	movf	(_task_list+17)& (0+255),w,b
  1475  000B58  E012               	bz	l34257
  1476                           
  1477                           ; BSR set to: 0
  1478  000B5A  92A1               	bcf	4001,1,c	;volatile
  1479  000B5C  6B97               	clrf	(_task_list+17)& (0+255),b
  1480  000B5E  82A1               	bsf	4001,1,c	;volatile
  1481                           
  1482                           ; BSR set to: 0
  1483  000B60  C095  F040         	movff	_task_list+15,find_task@id2
  1484  000B64  0E90               	movlw	low (_task_list+10)
  1485  000B66  6E41               	movwf	find_task@task_,c
  1486  000B68  5194               	movf	(_task_list+14)& (0+255),w,b
  1487  000B6A  EC70  F00C         	call	_find_task
  1488  000B6E  0100               	movlb	0	; () banked
  1489  000B70  5198               	movf	(_task_list+18)& (0+255),w,b
  1490  000B72  E005               	bz	l34257
  1491                           
  1492                           ; BSR set to: 0
  1493  000B74  2B99               	incf	(_task_list+19)& (0+255),f,b
  1494                           
  1495                           ; BSR set to: 0
  1496  000B76  5198               	movf	(_task_list+18)& (0+255),w,b
  1497  000B78  1999               	xorwf	(_task_list+19)& (0+255),w,b
  1498  000B7A  E101               	bnz	l34257
  1499                           
  1500                           ; BSR set to: 0
  1501  000B7C  6B96               	clrf	(_task_list+16)& (0+255),b
  1502  000B7E                     l34257:
  1503                           
  1504                           ; BSR set to: 0
  1505  000B7E  51A0               	movf	(_task_list+26)& (0+255),w,b
  1506  000B80  E014               	bz	l34273
  1507                           
  1508                           ; BSR set to: 0
  1509  000B82  51A1               	movf	(_task_list+27)& (0+255),w,b
  1510  000B84  E012               	bz	l34273
  1511                           
  1512                           ; BSR set to: 0
  1513  000B86  92A1               	bcf	4001,1,c	;volatile
  1514  000B88  6BA1               	clrf	(_task_list+27)& (0+255),b
  1515  000B8A  82A1               	bsf	4001,1,c	;volatile
  1516                           
  1517                           ; BSR set to: 0
  1518  000B8C  C09F  F040         	movff	_task_list+25,find_task@id2
  1519  000B90  0E9A               	movlw	low (_task_list+20)
  1520  000B92  6E41               	movwf	find_task@task_,c
  1521  000B94  519E               	movf	(_task_list+24)& (0+255),w,b
  1522  000B96  EC70  F00C         	call	_find_task
  1523  000B9A  0100               	movlb	0	; () banked
  1524  000B9C  51A2               	movf	(_task_list+28)& (0+255),w,b
  1525  000B9E  E005               	bz	l34273
  1526                           
  1527                           ; BSR set to: 0
  1528  000BA0  2BA3               	incf	(_task_list+29)& (0+255),f,b
  1529                           
  1530                           ; BSR set to: 0
  1531  000BA2  51A2               	movf	(_task_list+28)& (0+255),w,b
  1532  000BA4  19A3               	xorwf	(_task_list+29)& (0+255),w,b
  1533  000BA6  E101               	bnz	l34273
  1534                           
  1535                           ; BSR set to: 0
  1536  000BA8  6BA0               	clrf	(_task_list+26)& (0+255),b
  1537  000BAA                     l34273:
  1538                           
  1539                           ; BSR set to: 0
  1540  000BAA  51AA               	movf	(_task_list+36)& (0+255),w,b
  1541  000BAC  E014               	bz	l34289
  1542                           
  1543                           ; BSR set to: 0
  1544  000BAE  51AB               	movf	(_task_list+37)& (0+255),w,b
  1545  000BB0  E012               	bz	l34289
  1546                           
  1547                           ; BSR set to: 0
  1548  000BB2  92A1               	bcf	4001,1,c	;volatile
  1549  000BB4  6BAB               	clrf	(_task_list+37)& (0+255),b
  1550  000BB6  82A1               	bsf	4001,1,c	;volatile
  1551                           
  1552                           ; BSR set to: 0
  1553  000BB8  C0A9  F040         	movff	_task_list+35,find_task@id2
  1554  000BBC  0EA4               	movlw	low (_task_list+30)
  1555  000BBE  6E41               	movwf	find_task@task_,c
  1556  000BC0  51A8               	movf	(_task_list+34)& (0+255),w,b
  1557  000BC2  EC70  F00C         	call	_find_task
  1558  000BC6  0100               	movlb	0	; () banked
  1559  000BC8  51AC               	movf	(_task_list+38)& (0+255),w,b
  1560  000BCA  E005               	bz	l34289
  1561                           
  1562                           ; BSR set to: 0
  1563  000BCC  2BAD               	incf	(_task_list+39)& (0+255),f,b
  1564                           
  1565                           ; BSR set to: 0
  1566  000BCE  51AC               	movf	(_task_list+38)& (0+255),w,b
  1567  000BD0  19AD               	xorwf	(_task_list+39)& (0+255),w,b
  1568  000BD2  E101               	bnz	l34289
  1569                           
  1570                           ; BSR set to: 0
  1571  000BD4  6BAA               	clrf	(_task_list+36)& (0+255),b
  1572  000BD6                     l34289:
  1573                           
  1574                           ; BSR set to: 0
  1575  000BD6  51B4               	movf	(_task_list+46)& (0+255),w,b
  1576  000BD8  E014               	bz	l34305
  1577                           
  1578                           ; BSR set to: 0
  1579  000BDA  51B5               	movf	(_task_list+47)& (0+255),w,b
  1580  000BDC  E012               	bz	l34305
  1581                           
  1582                           ; BSR set to: 0
  1583  000BDE  92A1               	bcf	4001,1,c	;volatile
  1584  000BE0  6BB5               	clrf	(_task_list+47)& (0+255),b
  1585  000BE2  82A1               	bsf	4001,1,c	;volatile
  1586                           
  1587                           ; BSR set to: 0
  1588  000BE4  C0B3  F040         	movff	_task_list+45,find_task@id2
  1589  000BE8  0EAE               	movlw	low (_task_list+40)
  1590  000BEA  6E41               	movwf	find_task@task_,c
  1591  000BEC  51B2               	movf	(_task_list+44)& (0+255),w,b
  1592  000BEE  EC70  F00C         	call	_find_task
  1593  000BF2  0100               	movlb	0	; () banked
  1594  000BF4  51B6               	movf	(_task_list+48)& (0+255),w,b
  1595  000BF6  E005               	bz	l34305
  1596                           
  1597                           ; BSR set to: 0
  1598  000BF8  2BB7               	incf	(_task_list+49)& (0+255),f,b
  1599                           
  1600                           ; BSR set to: 0
  1601  000BFA  51B6               	movf	(_task_list+48)& (0+255),w,b
  1602  000BFC  19B7               	xorwf	(_task_list+49)& (0+255),w,b
  1603  000BFE  E101               	bnz	l34305
  1604                           
  1605                           ; BSR set to: 0
  1606  000C00  6BB4               	clrf	(_task_list+46)& (0+255),b
  1607  000C02                     l34305:
  1608                           
  1609                           ; BSR set to: 0
  1610  000C02  51BE               	movf	(_task_list+56)& (0+255),w,b
  1611  000C04  E014               	bz	l34321
  1612                           
  1613                           ; BSR set to: 0
  1614  000C06  51BF               	movf	(_task_list+57)& (0+255),w,b
  1615  000C08  E012               	bz	l34321
  1616                           
  1617                           ; BSR set to: 0
  1618  000C0A  92A1               	bcf	4001,1,c	;volatile
  1619  000C0C  6BBF               	clrf	(_task_list+57)& (0+255),b
  1620  000C0E  82A1               	bsf	4001,1,c	;volatile
  1621                           
  1622                           ; BSR set to: 0
  1623  000C10  C0BD  F040         	movff	_task_list+55,find_task@id2
  1624  000C14  0EB8               	movlw	low (_task_list+50)
  1625  000C16  6E41               	movwf	find_task@task_,c
  1626  000C18  51BC               	movf	(_task_list+54)& (0+255),w,b
  1627  000C1A  EC70  F00C         	call	_find_task
  1628  000C1E  0100               	movlb	0	; () banked
  1629  000C20  51C0               	movf	(_task_list+58)& (0+255),w,b
  1630  000C22  E005               	bz	l34321
  1631                           
  1632                           ; BSR set to: 0
  1633  000C24  2BC1               	incf	(_task_list+59)& (0+255),f,b
  1634                           
  1635                           ; BSR set to: 0
  1636  000C26  51C0               	movf	(_task_list+58)& (0+255),w,b
  1637  000C28  19C1               	xorwf	(_task_list+59)& (0+255),w,b
  1638  000C2A  E101               	bnz	l34321
  1639                           
  1640                           ; BSR set to: 0
  1641  000C2C  6BBE               	clrf	(_task_list+56)& (0+255),b
  1642  000C2E                     l34321:
  1643                           
  1644                           ; BSR set to: 0
  1645  000C2E  51C8               	movf	(_task_list+66)& (0+255),w,b
  1646  000C30  E014               	bz	l34337
  1647                           
  1648                           ; BSR set to: 0
  1649  000C32  51C9               	movf	(_task_list+67)& (0+255),w,b
  1650  000C34  E012               	bz	l34337
  1651                           
  1652                           ; BSR set to: 0
  1653  000C36  92A1               	bcf	4001,1,c	;volatile
  1654  000C38  6BC9               	clrf	(_task_list+67)& (0+255),b
  1655  000C3A  82A1               	bsf	4001,1,c	;volatile
  1656                           
  1657                           ; BSR set to: 0
  1658  000C3C  C0C7  F040         	movff	_task_list+65,find_task@id2
  1659  000C40  0EC2               	movlw	low (_task_list+60)
  1660  000C42  6E41               	movwf	find_task@task_,c
  1661  000C44  51C6               	movf	(_task_list+64)& (0+255),w,b
  1662  000C46  EC70  F00C         	call	_find_task
  1663  000C4A  0100               	movlb	0	; () banked
  1664  000C4C  51CA               	movf	(_task_list+68)& (0+255),w,b
  1665  000C4E  E005               	bz	l34337
  1666                           
  1667                           ; BSR set to: 0
  1668  000C50  2BCB               	incf	(_task_list+69)& (0+255),f,b
  1669                           
  1670                           ; BSR set to: 0
  1671  000C52  51CA               	movf	(_task_list+68)& (0+255),w,b
  1672  000C54  19CB               	xorwf	(_task_list+69)& (0+255),w,b
  1673  000C56  E101               	bnz	l34337
  1674                           
  1675                           ; BSR set to: 0
  1676  000C58  6BC8               	clrf	(_task_list+66)& (0+255),b
  1677  000C5A                     l34337:
  1678                           
  1679                           ; BSR set to: 0
  1680  000C5A  51D2               	movf	(_task_list+76)& (0+255),w,b
  1681  000C5C  E014               	bz	l34353
  1682                           
  1683                           ; BSR set to: 0
  1684  000C5E  51D3               	movf	(_task_list+77)& (0+255),w,b
  1685  000C60  E012               	bz	l34353
  1686                           
  1687                           ; BSR set to: 0
  1688  000C62  92A1               	bcf	4001,1,c	;volatile
  1689  000C64  6BD3               	clrf	(_task_list+77)& (0+255),b
  1690  000C66  82A1               	bsf	4001,1,c	;volatile
  1691                           
  1692                           ; BSR set to: 0
  1693  000C68  C0D1  F040         	movff	_task_list+75,find_task@id2
  1694  000C6C  0ECC               	movlw	low (_task_list+70)
  1695  000C6E  6E41               	movwf	find_task@task_,c
  1696  000C70  51D0               	movf	(_task_list+74)& (0+255),w,b
  1697  000C72  EC70  F00C         	call	_find_task
  1698  000C76  0100               	movlb	0	; () banked
  1699  000C78  51D4               	movf	(_task_list+78)& (0+255),w,b
  1700  000C7A  E005               	bz	l34353
  1701                           
  1702                           ; BSR set to: 0
  1703  000C7C  2BD5               	incf	(_task_list+79)& (0+255),f,b
  1704                           
  1705                           ; BSR set to: 0
  1706  000C7E  51D4               	movf	(_task_list+78)& (0+255),w,b
  1707  000C80  19D5               	xorwf	(_task_list+79)& (0+255),w,b
  1708  000C82  E101               	bnz	l34353
  1709                           
  1710                           ; BSR set to: 0
  1711  000C84  6BD2               	clrf	(_task_list+76)& (0+255),b
  1712  000C86                     l34353:
  1713                           
  1714                           ; BSR set to: 0
  1715                           ;main.c: 115: if(adc_ok)
  1716  000C86  5057               	movf	_adc_ok,w,c
  1717  000C88  E101 D74C          	bz	l34225
  1718                           
  1719                           ; BSR set to: 0
  1720                           ;main.c: 116: {
  1721                           ;main.c: 117: adc_ok=0;
  1722  000C8C  6A57               	clrf	_adc_ok,c
  1723                           
  1724                           ; BSR set to: 0
  1725                           ;main.c: 118: temp1=((ADRESH&0x0f)<<8)|ADRESL;
  1726  000C8E  50A8               	movf	4008,w,c	;volatile
  1727  000C90  0B0F               	andlw	15
  1728  000C92  6E44               	movwf	(??_main+1)& (0+255),c
  1729  000C94  6A43               	clrf	??_main& (0+255),c
  1730  000C96  50A7               	movf	4007,w,c	;volatile
  1731  000C98  1243               	iorwf	??_main,f,c
  1732  000C9A  0E00               	movlw	0
  1733  000C9C  C043  F0DE         	movff	??_main,_temp1
  1734  000CA0  C044  F0DF         	movff	??_main+1,_temp1+1
  1735  000CA4  BFDF               	btfsc	(_temp1+1)& (0+255),7,b
  1736  000CA6  0EFF               	movlw	-1
  1737  000CA8  6FE0               	movwf	(_temp1+2)& (0+255),b
  1738  000CAA  6FE1               	movwf	(_temp1+3)& (0+255),b
  1739                           
  1740                           ;main.c: 119: temp2=((ADRESH1&0x0f)<<8)|ADRESL1;
  1741  000CAC  010F               	movlb	15	; () banked
  1742  000CAE  5117               	movf	23,w,b	;volatile
  1743  000CB0  0B0F               	andlw	15
  1744  000CB2  6E44               	movwf	(??_main+1)& (0+255),c
  1745  000CB4  6A43               	clrf	??_main& (0+255),c
  1746  000CB6  5116               	movf	22,w,b	;volatile
  1747  000CB8  1243               	iorwf	??_main,f,c
  1748  000CBA  0E00               	movlw	0
  1749  000CBC  C043  F0DA         	movff	??_main,_temp2
  1750  000CC0  C044  F0DB         	movff	??_main+1,_temp2+1
  1751  000CC4  0100               	movlb	0	; () banked
  1752  000CC6  BFDB               	btfsc	(_temp2+1)& (0+255),7,b
  1753  000CC8  0EFF               	movlw	-1
  1754  000CCA  6FDC               	movwf	(_temp2+2)& (0+255),b
  1755  000CCC  6FDD               	movwf	(_temp2+3)& (0+255),b
  1756                           
  1757                           ;main.c: 120: temp3=((ADRESH2&0x0f)<<8)|ADRESL2;
  1758  000CCE  010F               	movlb	15	; () banked
  1759  000CD0  5115               	movf	21,w,b	;volatile
  1760  000CD2  0B0F               	andlw	15
  1761  000CD4  6E44               	movwf	(??_main+1)& (0+255),c
  1762  000CD6  6A43               	clrf	??_main& (0+255),c
  1763  000CD8  5114               	movf	20,w,b	;volatile
  1764  000CDA  1243               	iorwf	??_main,f,c
  1765  000CDC  0E00               	movlw	0
  1766  000CDE  C043  F0D6         	movff	??_main,_temp3
  1767  000CE2  C044  F0D7         	movff	??_main+1,_temp3+1
  1768  000CE6  0100               	movlb	0	; () banked
  1769  000CE8  BFD7               	btfsc	(_temp3+1)& (0+255),7,b
  1770  000CEA  0EFF               	movlw	-1
  1771  000CEC  6FD8               	movwf	(_temp3+2)& (0+255),b
  1772  000CEE  6FD9               	movwf	(_temp3+3)& (0+255),b
  1773                           
  1774                           ;main.c: 121: if((temp2<3950 )||(temp3<3950 ))
  1775  000CF0  51DD               	movf	(_temp2+3)& (0+255),w,b
  1776  000CF2  11DC               	iorwf	(_temp2+2)& (0+255),w,b
  1777  000CF4  E105               	bnz	u6880
  1778  000CF6  0E6E               	movlw	110
  1779  000CF8  5DDA               	subwf	_temp2& (0+255),w,b
  1780  000CFA  0E0F               	movlw	15
  1781  000CFC  59DB               	subwfb	(_temp2+1)& (0+255),w,b
  1782  000CFE  E309               	bnc	l34361
  1783  000D00                     u6880:
  1784                           
  1785                           ; BSR set to: 0
  1786  000D00  51D9               	movf	(_temp3+3)& (0+255),w,b
  1787  000D02  11D8               	iorwf	(_temp3+2)& (0+255),w,b
  1788  000D04  E105               	bnz	u6891
  1789  000D06  0E6E               	movlw	110
  1790  000D08  5DD6               	subwf	_temp3& (0+255),w,b
  1791  000D0A  0E0F               	movlw	15
  1792  000D0C  59D7               	subwfb	(_temp3+1)& (0+255),w,b
  1793  000D0E  B0D8               	btfsc	status,0,c
  1794  000D10                     u6891:
  1795  000D10  D709               	goto	l34225
  1796  000D12                     l34361:
  1797                           
  1798                           ; BSR set to: 0
  1799                           ;main.c: 122: {
  1800                           ;main.c: 123: dl0_flag=1;
  1801  000D12  0E01               	movlw	1
  1802  000D14  6E63               	movwf	_dl0_flag,c
  1803                           
  1804                           ; BSR set to: 0
  1805                           ;main.c: 124: duty0=0;
  1806  000D16  6A6F               	clrf	_duty0,c
  1807                           
  1808                           ; BSR set to: 0
  1809                           ;main.c: 125: duty1=0;
  1810  000D18  6A6E               	clrf	_duty1,c
  1811                           
  1812                           ;main.c: 126: dl_init=1;
  1813  000D1A  0E01               	movlw	1
  1814  000D1C  6E59               	movwf	_dl_init,c
  1815  000D1E  D702               	goto	l34225
  1816  000D20                     __end_of_main:
  1817                           	opt stack 0
  1818                           tblptru	equ	0xFF8
  1819                           tblptrh	equ	0xFF7
  1820                           tblptrl	equ	0xFF6
  1821                           tablat	equ	0xFF5
  1822                           prodh	equ	0xFF4
  1823                           prodl	equ	0xFF3
  1824                           intcon	equ	0xFF2
  1825                           postinc0	equ	0xFEE
  1826                           wreg	equ	0xFE8
  1827                           postdec1	equ	0xFE5
  1828                           fsr1l	equ	0xFE1
  1829                           indf2	equ	0xFDF
  1830                           postinc2	equ	0xFDE
  1831                           postdec2	equ	0xFDD
  1832                           fsr2h	equ	0xFDA
  1833                           fsr2l	equ	0xFD9
  1834                           status	equ	0xFD8
  1835                           
  1836 ;; *************** function _task_init *****************
  1837 ;; Defined at:
  1838 ;;		line 7 in file ".\src\task.c"
  1839 ;; Parameters:    Size  Location     Type
  1840 ;;		None
  1841 ;; Auto vars:     Size  Location     Type
  1842 ;;  i               1    1[COMRAM] unsigned char 
  1843 ;; Return value:  Size  Location     Type
  1844 ;;                  1    wreg      void 
  1845 ;; Registers used:
  1846 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1847 ;; Tracked objects:
  1848 ;;		On entry : 0/F
  1849 ;;		On exit  : 0/0
  1850 ;;		Unchanged: 0/0
  1851 ;; Data sizes:     COMRAM   BANK0   BANK1
  1852 ;;      Params:         0       0       0
  1853 ;;      Locals:         1       0       0
  1854 ;;      Temps:          0       0       0
  1855 ;;      Totals:         1       0       0
  1856 ;;Total ram usage:        1 bytes
  1857 ;; Hardware stack levels used:    1
  1858 ;; Hardware stack levels required when called:    3
  1859 ;; This function calls:
  1860 ;;		Nothing
  1861 ;; This function is called by:
  1862 ;;		_main
  1863 ;; This function uses a non-reentrant model
  1864 ;;
  1865                           
  1866                           	psect	text1
  1867  00245C                     __ptext1:
  1868                           	opt stack 0
  1869  00245C                     _task_init:
  1870                           	opt stack 4
  1871                           
  1872                           ;task.c: 8: for(unsigned char i=0; i<8; i++) {
  1873                           
  1874                           ; BSR set to: 0
  1875                           ;incstack = 0
  1876  00245C  6A02               	clrf	task_init@i,c
  1877  00245E                     l33985:
  1878                           
  1879                           ;task.c: 9: task_list[i].active = 0;
  1880  00245E  5002               	movf	task_init@i,w,c
  1881  002460  0D0A               	mullw	10
  1882  002462  50F3               	movf	prodl,w,c
  1883  002464  0F8C               	addlw	low (_task_list+6)
  1884  002466  6ED9               	movwf	fsr2l,c
  1885  002468  6ADA               	clrf	fsr2h,c
  1886  00246A  6ADF               	clrf	indf2,c
  1887                           
  1888                           ;task.c: 10: task_list[i].ready = 0;
  1889  00246C  5002               	movf	task_init@i,w,c
  1890  00246E  ECBE  F009         	call	PL44	;call to abstracted procedure
  1891  002472  6ADF               	clrf	indf2,c
  1892  002474  2A02               	incf	task_init@i,f,c
  1893  002476  0E07               	movlw	7
  1894  002478  6402               	cpfsgt	task_init@i,c
  1895  00247A  D7F1               	goto	l33985
  1896  00247C  0C07               	retlw	7
  1897  00247E                     __end_of_task_init:
  1898                           	opt stack 0
  1899                           tblptru	equ	0xFF8
  1900                           tblptrh	equ	0xFF7
  1901                           tblptrl	equ	0xFF6
  1902                           tablat	equ	0xFF5
  1903                           prodh	equ	0xFF4
  1904                           prodl	equ	0xFF3
  1905                           intcon	equ	0xFF2
  1906                           postinc0	equ	0xFEE
  1907                           wreg	equ	0xFE8
  1908                           postdec1	equ	0xFE5
  1909                           fsr1l	equ	0xFE1
  1910                           indf2	equ	0xFDF
  1911                           postinc2	equ	0xFDE
  1912                           postdec2	equ	0xFDD
  1913                           fsr2h	equ	0xFDA
  1914                           fsr2l	equ	0xFD9
  1915                           status	equ	0xFD8
  1916                           
  1917 ;; *************** function _find_task *****************
  1918 ;; Defined at:
  1919 ;;		line 92 in file ".\src\task.c"
  1920 ;; Parameters:    Size  Location     Type
  1921 ;;  id1             1    wreg     unsigned char 
  1922 ;;  id2             1   63[COMRAM] unsigned char 
  1923 ;;  task_           1   64[COMRAM] PTR struct task
  1924 ;;		 -> task_list(80), 
  1925 ;; Auto vars:     Size  Location     Type
  1926 ;;  id1             1   65[COMRAM] unsigned char 
  1927 ;; Return value:  Size  Location     Type
  1928 ;;                  1    wreg      void 
  1929 ;; Registers used:
  1930 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1931 ;; Tracked objects:
  1932 ;;		On entry : 3F/0
  1933 ;;		On exit  : 0/0
  1934 ;;		Unchanged: 0/0
  1935 ;; Data sizes:     COMRAM   BANK0   BANK1
  1936 ;;      Params:         2       0       0
  1937 ;;      Locals:         1       0       0
  1938 ;;      Temps:          0       0       0
  1939 ;;      Totals:         3       0       0
  1940 ;;Total ram usage:        3 bytes
  1941 ;; Hardware stack levels used:    1
  1942 ;; Hardware stack levels required when called:    9
  1943 ;; This function calls:
  1944 ;;		_aip33626_batFull
  1945 ;;		_aip33626_breath
  1946 ;;		_aip33626_breath_stop
  1947 ;;		_aip33626_flash
  1948 ;;		_aip33626_freeChrg
  1949 ;;		_aip33626_smo_reset
  1950 ;;		_aip33626_sys_begin
  1951 ;;		_bat_task
  1952 ;;		_chrg_task
  1953 ;;		_key_task
  1954 ;;		_key_timer_task
  1955 ;;		_si_mic_task
  1956 ;;		_sleep_task
  1957 ;;		_smo_det_task
  1958 ;; This function is called by:
  1959 ;;		_main
  1960 ;; This function uses a non-reentrant model
  1961 ;;
  1962                           
  1963                           	psect	text2
  1964  0018E0                     __ptext2:
  1965                           	opt stack 0
  1966  0018E0                     _find_task:
  1967                           	opt stack 0
  1968                           
  1969                           ;incstack = 0
  1970 ;; hardware stack exceeded
  1971                           ;find_task@id1 stored from wreg
  1972  0018E0  6E42               	movwf	find_task@id1,c
  1973                           
  1974                           ;task.c: 94: if(id1==1)
  1975  0018E2  0442               	decf	find_task@id1,w,c
  1976  0018E4  E01D               	bz	l34045
  1977  0018E6  D030               	goto	l34047
  1978  0018E8                     l34029:
  1979                           
  1980                           ;task.c: 99: aip33626_sys_begin(task_);
  1981  0018E8  C041  F00B         	movff	find_task@task_,aip33626_sys_begin@task_
  1982  0018EC  EFAC  F012         	goto	_aip33626_sys_begin	;wreg free
  1983  0018F0                     l34031:
  1984                           
  1985                           ;task.c: 102: aip33626_flash(task_);
  1986  0018F0  C041  F00B         	movff	find_task@task_,aip33626_flash@task_
  1987  0018F4  EFBA  F012         	goto	_aip33626_flash	;wreg free
  1988  0018F8                     l34033:
  1989                           
  1990                           ;task.c: 105: aip33626_breath(task_);
  1991  0018F8  C041  F013         	movff	find_task@task_,aip33626_breath@task_
  1992  0018FC  EFF9  F00E         	goto	_aip33626_breath	;wreg free
  1993  001900                     l34035:
  1994                           
  1995                           ;task.c: 108: aip33626_breath_stop(task_);
  1996  001900  C041  F013         	movff	find_task@task_,aip33626_breath_stop@task_
  1997  001904  EFB9  F011         	goto	_aip33626_breath_stop	;wreg free
  1998  001908                     l34037:
  1999                           
  2000                           ;task.c: 113: aip33626_smo_reset(task_);
  2001  001908  C041  F00C         	movff	find_task@task_,aip33626_smo_reset@task_
  2002  00190C  EF8A  F00D         	goto	_aip33626_smo_reset	;wreg free
  2003  001910                     l34039:
  2004                           
  2005                           ;task.c: 116: aip33626_batFull(task_);
  2006  001910  C041  F00C         	movff	find_task@task_,aip33626_batFull@task_
  2007  001914  EFE7  F00F         	goto	_aip33626_batFull	;wreg free
  2008  001918                     l34041:
  2009                           
  2010                           ;task.c: 119: aip33626_freeChrg(task_);
  2011  001918  C041  F00E         	movff	find_task@task_,aip33626_freeChrg@task_
  2012  00191C  EFAC  F010         	goto	_aip33626_freeChrg	;wreg free
  2013  001920                     l34045:
  2014  001920  5040               	movf	find_task@id2,w,c
  2015                           
  2016                           ; Switch size 1, requested type "space"
  2017                           ; Number of cases is 8, Range of values is 1 to 8
  2018                           ; switch strategies available:
  2019                           ; Name         Instructions Cycles
  2020                           ; simple_byte           25    13 (average)
  2021                           ;	Chosen strategy is simple_byte
  2022  001922  0A01               	xorlw	1	; case 1
  2023  001924  E0E1               	bz	l34029
  2024  001926  0A03               	xorlw	3	; case 2
  2025  001928  E0E3               	bz	l34031
  2026  00192A  0A01               	xorlw	1	; case 3
  2027  00192C  E0E5               	bz	l34033
  2028  00192E  0A07               	xorlw	7	; case 4
  2029  001930  E0E7               	bz	l34035
  2030  001932  0A01               	xorlw	1	; case 5
  2031  001934  B4D8               	btfsc	status,2,c
  2032  001936  0012               	return	
  2033  001938  0A03               	xorlw	3	; case 6
  2034  00193A  E0E6               	bz	l34037
  2035  00193C  0A01               	xorlw	1	; case 7
  2036  00193E  E0E8               	bz	l34039
  2037  001940  0A0F               	xorlw	15	; case 8
  2038  001942  A4D8               	btfss	status,2,c
  2039  001944  0012               	return	
  2040  001946  D7E8               	goto	l34041
  2041  001948                     l34047:
  2042                           
  2043                           ;task.c: 128: else if(id1==2)
  2044  001948  0E02               	movlw	2
  2045  00194A  1842               	xorwf	find_task@id1,w,c
  2046  00194C  E104               	bnz	l34051
  2047                           
  2048                           ;task.c: 129: {
  2049                           ;task.c: 130: si_mic_task(task_);
  2050  00194E  C041  F038         	movff	find_task@task_,si_mic_task@task_
  2051  001952  EF51  F001         	goto	_si_mic_task	;wreg free
  2052  001956                     l34051:
  2053                           
  2054                           ;task.c: 132: else if(id1==3)
  2055  001956  0E03               	movlw	3
  2056  001958  1842               	xorwf	find_task@id1,w,c
  2057  00195A  E104               	bnz	l34055
  2058                           
  2059                           ;task.c: 133: {
  2060                           ;task.c: 134: smo_det_task(task_);
  2061  00195C  C041  F010         	movff	find_task@task_,smo_det_task@task_
  2062  001960  EFC3  F00A         	goto	_smo_det_task	;wreg free
  2063  001964                     l34055:
  2064                           
  2065                           ;task.c: 136: else if(id1==4)
  2066  001964  0E04               	movlw	4
  2067  001966  1842               	xorwf	find_task@id1,w,c
  2068  001968  E10A               	bnz	l34063
  2069                           
  2070                           ;task.c: 137: {
  2071                           ;task.c: 138: if(id2==1)
  2072  00196A  0440               	decf	find_task@id2,w,c
  2073  00196C  E104               	bnz	l34061
  2074                           
  2075                           ;task.c: 139: {
  2076                           ;task.c: 140: key_task(task_);
  2077  00196E  C041  F010         	movff	find_task@task_,key_task@task_
  2078  001972  EFE6  F008         	goto	_key_task	;wreg free
  2079  001976                     l34061:
  2080                           
  2081                           ;task.c: 142: else
  2082                           ;task.c: 143: {
  2083                           ;task.c: 144: key_timer_task(task_);
  2084  001976  C041  F002         	movff	find_task@task_,key_timer_task@task_
  2085  00197A  EF09  F012         	goto	_key_timer_task	;wreg free
  2086  00197E                     l34063:
  2087                           
  2088                           ;task.c: 147: else if(id1==5)
  2089  00197E  0E05               	movlw	5
  2090  001980  1842               	xorwf	find_task@id1,w,c
  2091  001982  E104               	bnz	l34067
  2092                           
  2093                           ;task.c: 148: {
  2094                           ;task.c: 149: bat_task(task_);
  2095  001984  C041  F019         	movff	find_task@task_,bat_task@task_
  2096  001988  EFDE  F00D         	goto	_bat_task	;wreg free
  2097  00198C                     l34067:
  2098                           
  2099                           ;task.c: 151: else if(id1==6)
  2100  00198C  0E06               	movlw	6
  2101  00198E  1842               	xorwf	find_task@id1,w,c
  2102  001990  E104               	bnz	l34071
  2103                           
  2104                           ;task.c: 152: {
  2105                           ;task.c: 153: chrg_task(task_);
  2106  001992  C041  F019         	movff	find_task@task_,chrg_task@task_
  2107  001996  EF91  F007         	goto	_chrg_task	;wreg free
  2108  00199A                     l34071:
  2109                           
  2110                           ;task.c: 155: else
  2111                           ;task.c: 156: {
  2112                           ;task.c: 158: sleep_task(task_);
  2113  00199A  C041  F00F         	movff	find_task@task_,sleep_task@task_
  2114  00199E  EF1C  F010         	goto	_sleep_task	;wreg free
  2115  0019A2                     __end_of_find_task:
  2116                           	opt stack 0
  2117                           tblptru	equ	0xFF8
  2118                           tblptrh	equ	0xFF7
  2119                           tblptrl	equ	0xFF6
  2120                           tablat	equ	0xFF5
  2121                           prodh	equ	0xFF4
  2122                           prodl	equ	0xFF3
  2123                           intcon	equ	0xFF2
  2124                           postinc0	equ	0xFEE
  2125                           wreg	equ	0xFE8
  2126                           postdec1	equ	0xFE5
  2127                           fsr1l	equ	0xFE1
  2128                           indf2	equ	0xFDF
  2129                           postinc2	equ	0xFDE
  2130                           postdec2	equ	0xFDD
  2131                           fsr2h	equ	0xFDA
  2132                           fsr2l	equ	0xFD9
  2133                           status	equ	0xFD8
  2134                           
  2135 ;; *************** function _smo_det_task *****************
  2136 ;; Defined at:
  2137 ;;		line 11 in file ".\src\smo_det.c"
  2138 ;; Parameters:    Size  Location     Type
  2139 ;;  task_           1   15[COMRAM] PTR struct task
  2140 ;;		 -> task_list(80), 
  2141 ;; Auto vars:     Size  Location     Type
  2142 ;;		None
  2143 ;; Return value:  Size  Location     Type
  2144 ;;                  1    wreg      void 
  2145 ;; Registers used:
  2146 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2147 ;; Tracked objects:
  2148 ;;		On entry : 0/0
  2149 ;;		On exit  : 0/0
  2150 ;;		Unchanged: 0/0
  2151 ;; Data sizes:     COMRAM   BANK0   BANK1
  2152 ;;      Params:         1       0       0
  2153 ;;      Locals:         0       0       0
  2154 ;;      Temps:          0       0       0
  2155 ;;      Totals:         1       0       0
  2156 ;;Total ram usage:        1 bytes
  2157 ;; Hardware stack levels used:    1
  2158 ;; Hardware stack levels required when called:    4
  2159 ;; This function calls:
  2160 ;;		_add_task_id
  2161 ;; This function is called by:
  2162 ;;		_find_task
  2163 ;; This function uses a non-reentrant model
  2164 ;;
  2165                           
  2166                           	psect	text3
  2167  001586                     __ptext3:
  2168                           	opt stack 0
  2169  001586                     _smo_det_task:
  2170                           	opt stack 2
  2171                           
  2172                           ;smo_det.c: 13: if(!PINC3&&PD0&&PB3&&dl0_flag==0&&dl1_flag==0)
  2173                           
  2174                           ;incstack = 0
  2175  001586  A68A               	btfss	3978,3,c	;volatile
  2176  001588  A083               	btfss	3971,0,c	;volatile
  2177  00158A  D02B               	goto	l24755
  2178  00158C  A681               	btfss	3969,3,c	;volatile
  2179  00158E  D029               	goto	l24755
  2180  001590  5063               	movf	_dl0_flag,w,c
  2181  001592  E127               	bnz	l24755
  2182  001594  5062               	movf	_dl1_flag,w,c
  2183  001596  E125               	bnz	l24755
  2184                           
  2185                           ;smo_det.c: 14: {
  2186                           ;smo_det.c: 15: PB0AEN=0;
  2187                           
  2188                           ;smo_det.c: 16: PB1AEN=0;
  2189                           
  2190                           ;smo_det.c: 18: PB0PU=0;
  2191                           
  2192                           ;smo_det.c: 19: PB1PU=0;
  2193  001598  D85E               	call	PL64	;call to abstracted procedure
  2194                           
  2195                           ; BSR set to: 15
  2196                           ;smo_det.c: 21: if(smo_det1_o!=PINB0)
  2197  00159A  0E00               	movlw	0
  2198  00159C  B089               	btfsc	3977,0,c	;volatile
  2199  00159E  0E01               	movlw	1
  2200  0015A0  1875               	xorwf	_smo_det1_o,w,c
  2201  0015A2  E002               	bz	l24756
  2202                           
  2203                           ; BSR set to: 15
  2204                           ;smo_det.c: 22: {
  2205                           ;smo_det.c: 24: cb_flag=1;
  2206  0015A4  0E01               	movlw	1
  2207  0015A6  6E51               	movwf	_cb_flag,c
  2208  0015A8                     l24756:
  2209                           
  2210                           ; BSR set to: 15
  2211                           ;smo_det.c: 26: }
  2212                           ;smo_det.c: 27: if(smo_det2_o!=PINB1)
  2213  0015A8  0E00               	movlw	0
  2214  0015AA  B289               	btfsc	3977,1,c	;volatile
  2215  0015AC  0E01               	movlw	1
  2216  0015AE  1874               	xorwf	_smo_det2_o,w,c
  2217  0015B0  E002               	bz	l33933
  2218                           
  2219                           ; BSR set to: 15
  2220                           ;smo_det.c: 28: {
  2221                           ;smo_det.c: 29: cb_flag=1;
  2222  0015B2  0E01               	movlw	1
  2223  0015B4  6E51               	movwf	_cb_flag,c
  2224  0015B6                     l33933:
  2225                           
  2226                           ; BSR set to: 15
  2227                           ;smo_det.c: 30: }
  2228                           ;smo_det.c: 31: if(smo_det1_o==1&&PINB0==0)
  2229  0015B6  0475               	decf	_smo_det1_o,w,c
  2230  0015B8  E104               	bnz	l33939
  2231                           
  2232                           ; BSR set to: 15
  2233  0015BA  B089               	btfsc	3977,0,c	;volatile
  2234  0015BC  D002               	goto	l33939
  2235                           
  2236                           ; BSR set to: 15
  2237                           ;smo_det.c: 32: {
  2238                           ;smo_det.c: 34: cr_flag=1;
  2239  0015BE  0E01               	movlw	1
  2240  0015C0  6E5D               	movwf	_cr_flag,c
  2241  0015C2                     l33939:
  2242                           
  2243                           ; BSR set to: 15
  2244                           ;smo_det.c: 36: }
  2245                           ;smo_det.c: 37: if(smo_det2_o==1&&PINB1==0)
  2246  0015C2  0474               	decf	_smo_det2_o,w,c
  2247  0015C4  E104               	bnz	l24759
  2248                           
  2249                           ; BSR set to: 15
  2250  0015C6  B289               	btfsc	3977,1,c	;volatile
  2251  0015C8  D002               	goto	l24759
  2252                           
  2253                           ; BSR set to: 15
  2254                           ;smo_det.c: 38: {
  2255                           ;smo_det.c: 40: cr_flag=1;
  2256  0015CA  0E01               	movlw	1
  2257  0015CC  6E5D               	movwf	_cr_flag,c
  2258  0015CE                     l24759:
  2259                           
  2260                           ; BSR set to: 15
  2261                           ;smo_det.c: 42: }
  2262                           ;smo_det.c: 44: smo_det1_o=PINB0;
  2263  0015CE  0E00               	movlw	0
  2264  0015D0  B089               	btfsc	3977,0,c	;volatile
  2265  0015D2  0E01               	movlw	1
  2266  0015D4  6E75               	movwf	_smo_det1_o,c
  2267                           
  2268                           ;smo_det.c: 45: smo_det2_o=PINB1;
  2269  0015D6  0E00               	movlw	0
  2270  0015D8  B289               	btfsc	3977,1,c	;volatile
  2271  0015DA  0E01               	movlw	1
  2272  0015DC  6E74               	movwf	_smo_det2_o,c
  2273                           
  2274                           ; BSR set to: 15
  2275                           ;smo_det.c: 46: PB0AEN=1;
  2276  0015DE  8153               	bsf	83,0,b	;volatile
  2277                           
  2278                           ; BSR set to: 15
  2279                           ;smo_det.c: 47: PB1AEN=1;
  2280  0015E0  8353               	bsf	83,1,b	;volatile
  2281  0015E2                     l24755:
  2282                           
  2283                           ;smo_det.c: 48: }
  2284                           ;smo_det.c: 52: if(cb_flag)
  2285  0015E2  5051               	movf	_cb_flag,w,c
  2286  0015E4  E033               	bz	l33977
  2287                           
  2288                           ;smo_det.c: 53: {
  2289                           ;smo_det.c: 54: cb_flag=0;
  2290  0015E6  6A51               	clrf	_cb_flag,c
  2291                           
  2292                           ;smo_det.c: 55: mode_sub=0;
  2293  0015E8  6A6D               	clrf	_mode_sub,c
  2294                           
  2295                           ;smo_det.c: 56: task_list[aip33626_task_id].active=0;
  2296  0015EA  EC16  F003         	call	PL10	;call to abstracted procedure
  2297                           
  2298                           ;smo_det.c: 57: add_task_id(1,3,
  2299                           ;smo_det.c: 58: 50,40,aip33626_task_id);
  2300  0015EE  0E03               	movlw	3
  2301  0015F0  ECF1  F002         	call	PL2	;call to abstracted procedure
  2302  0015F4  ECD1  F00C         	call	_add_task_id
  2303                           
  2304                           ;smo_det.c: 59: state_smo_det=0;
  2305  0015F8  6A78               	clrf	_state_smo_det,c
  2306                           
  2307                           ;smo_det.c: 60: breath_state=3;
  2308  0015FA  0E03               	movlw	3
  2309  0015FC  6E7A               	movwf	_breath_state,c
  2310                           
  2311                           ;smo_det.c: 61: state_key=2;
  2312  0015FE  0E02               	movlw	2
  2313  001600  6E79               	movwf	_state_key,c
  2314                           
  2315                           ;smo_det.c: 62: state_chrg=3;
  2316  001602  0E03               	movlw	3
  2317  001604  6E77               	movwf	_state_chrg,c
  2318  001606  D022               	goto	l33977
  2319  001608                     l33963:
  2320                           
  2321                           ;smo_det.c: 69: if(task_list[aip33626_task_id].active==0)
  2322  001608  5067               	movf	_aip33626_task_id,w,c
  2323  00160A  EC1E  F003         	call	PL12	;call to abstracted procedure
  2324  00160E  A4D8               	btfss	status,2,c
  2325  001610  0012               	return	
  2326                           
  2327                           ;smo_det.c: 70: {
  2328                           ;smo_det.c: 71: mode_sub=2;
  2329  001612  0E02               	movlw	2
  2330  001614  6E6D               	movwf	_mode_sub,c
  2331                           
  2332                           ;smo_det.c: 72: state_smo_det=1;
  2333  001616  0E01               	movlw	1
  2334  001618  6E78               	movwf	_state_smo_det,c
  2335                           
  2336                           ;smo_det.c: 73: add_task_id(1,4,
  2337                           ;smo_det.c: 74: 250,21,aip33626_task_id);
  2338  00161A  EC2A  F003         	call	PL18	;call to abstracted procedure
  2339  00161E  EC11  F003         	call	PL8	;call to abstracted procedure
  2340  001622  0E15               	movlw	21
  2341  001624  D00E               	goto	L1
  2342  001626                     l33969:
  2343                           
  2344                           ;smo_det.c: 79: if(task_list[aip33626_task_id].active==0)
  2345  001626  5067               	movf	_aip33626_task_id,w,c
  2346  001628  EC1E  F003         	call	PL12	;call to abstracted procedure
  2347  00162C  A4D8               	btfss	status,2,c
  2348  00162E  0012               	return	
  2349                           
  2350                           ;smo_det.c: 80: {
  2351                           ;smo_det.c: 81: mode_sub=1;
  2352  001630  0E01               	movlw	1
  2353  001632  6E6D               	movwf	_mode_sub,c
  2354                           
  2355                           ;smo_det.c: 82: state_smo_det=3;
  2356  001634  0E03               	movlw	3
  2357  001636  6E78               	movwf	_state_smo_det,c
  2358                           
  2359                           ;smo_det.c: 83: add_task_id(1,3,
  2360                           ;smo_det.c: 84: 50,40,aip33626_task_id);
  2361  001638  6E02               	movwf	add_task_id@id2,c
  2362  00163A  0E32               	movlw	50
  2363  00163C  EC11  F003         	call	PL8	;call to abstracted procedure
  2364  001640  0E28               	movlw	40
  2365  001642                     L1:
  2366  001642  6E07               	movwf	add_task_id@suc_max,c
  2367  001644  EC3C  F008         	call	PL30	;call to abstracted procedure
  2368  001648  EFD1  F00C         	goto	_add_task_id
  2369  00164C                     l33977:
  2370  00164C  5078               	movf	_state_smo_det,w,c
  2371                           
  2372                           ; Switch size 1, requested type "space"
  2373                           ; Number of cases is 2, Range of values is 0 to 1
  2374                           ; switch strategies available:
  2375                           ; Name         Instructions Cycles
  2376                           ; simple_byte            7     4 (average)
  2377                           ;	Chosen strategy is simple_byte
  2378  00164E  E0DC               	bz	l33963
  2379  001650  0A01               	xorlw	1	; case 1
  2380  001652  E0E9               	bz	l33969
  2381  001654  0012               	return		;funcret
  2382  001656                     __end_of_smo_det_task:
  2383                           	opt stack 0
  2384  001656                     PL64:
  2385                           	opt stack 1
  2386  001656  010F               	movlb	15	; () banked
  2387  001658  9153               	bcf	83,0,b	;volatile
  2388  00165A  9353               	bcf	83,1,b	;volatile
  2389  00165C  9085               	bcf	3973,0,c	;volatile
  2390  00165E  9285               	bcf	3973,1,c	;volatile
  2391  001660  0012               	return	
  2392  001662                     __end_ofPL64:
  2393                           	opt stack 0
  2394                           tblptru	equ	0xFF8
  2395                           tblptrh	equ	0xFF7
  2396                           tblptrl	equ	0xFF6
  2397                           tablat	equ	0xFF5
  2398                           prodh	equ	0xFF4
  2399                           prodl	equ	0xFF3
  2400                           intcon	equ	0xFF2
  2401                           postinc0	equ	0xFEE
  2402                           wreg	equ	0xFE8
  2403                           postdec1	equ	0xFE5
  2404                           fsr1l	equ	0xFE1
  2405                           indf2	equ	0xFDF
  2406                           postinc2	equ	0xFDE
  2407                           postdec2	equ	0xFDD
  2408                           fsr2h	equ	0xFDA
  2409                           fsr2l	equ	0xFD9
  2410                           status	equ	0xFD8
  2411                           
  2412 ;; *************** function _sleep_task *****************
  2413 ;; Defined at:
  2414 ;;		line 119 in file ".\src\sleep.c"
  2415 ;; Parameters:    Size  Location     Type
  2416 ;;  task_           1   14[COMRAM] PTR struct task
  2417 ;;		 -> task_list(80), 
  2418 ;; Auto vars:     Size  Location     Type
  2419 ;;		None
  2420 ;; Return value:  Size  Location     Type
  2421 ;;                  1    wreg      void 
  2422 ;; Registers used:
  2423 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2424 ;; Tracked objects:
  2425 ;;		On entry : 0/0
  2426 ;;		On exit  : 0/0
  2427 ;;		Unchanged: 0/0
  2428 ;; Data sizes:     COMRAM   BANK0   BANK1
  2429 ;;      Params:         1       0       0
  2430 ;;      Locals:         0       0       0
  2431 ;;      Temps:          1       0       0
  2432 ;;      Totals:         2       0       0
  2433 ;;Total ram usage:        2 bytes
  2434 ;; Hardware stack levels used:    1
  2435 ;; Hardware stack levels required when called:    6
  2436 ;; This function calls:
  2437 ;;		_GPIO_Init
  2438 ;;		_aip33626_init
  2439 ;;		_cmp_init
  2440 ;;		_dac_init
  2441 ;;		_fvr_init
  2442 ;;		_sleep_mode
  2443 ;;		_timer1_init
  2444 ;; This function is called by:
  2445 ;;		_find_task
  2446 ;; This function uses a non-reentrant model
  2447 ;;
  2448                           
  2449                           	psect	text4
  2450  002038                     __ptext4:
  2451                           	opt stack 0
  2452  002038                     _sleep_task:
  2453                           	opt stack 0
  2454                           
  2455                           ;sleep.c: 128: if(task_list[aip33626_task_id].active==0&&task_1_7_flag==0)
  2456                           
  2457                           ;incstack = 0
  2458  002038  5067               	movf	_aip33626_task_id,w,c
  2459  00203A  0D0A               	mullw	10
  2460  00203C  50F3               	movf	prodl,w,c
  2461  00203E  0F8C               	addlw	low (_task_list+6)
  2462  002040  6ED9               	movwf	fsr2l,c
  2463  002042  6ADA               	clrf	fsr2h,c
  2464  002044  50DF               	movf	indf2,w,c
  2465  002046  E124               	bnz	l33913
  2466  002048  506C               	movf	_task_1_7_flag,w,c
  2467  00204A  E122               	bnz	l33913
  2468                           
  2469                           ;sleep.c: 129: {
  2470                           ;sleep.c: 130: task_->sucCnt++;
  2471  00204C  500F               	movf	sleep_task@task_,w,c
  2472  00204E  6ED9               	movwf	fsr2l,c
  2473  002050  6ADA               	clrf	fsr2h,c
  2474  002052  0E09               	movlw	9
  2475  002054  26D9               	addwf	fsr2l,f,c
  2476  002056  2ADF               	incf	indf2,f,c
  2477                           
  2478                           ;sleep.c: 131: if(task_->sucCnt>=20)
  2479  002058  500F               	movf	sleep_task@task_,w,c
  2480  00205A  6ED9               	movwf	fsr2l,c
  2481  00205C  6ADA               	clrf	fsr2h,c
  2482  00205E  0E09               	movlw	9
  2483  002060  26D9               	addwf	fsr2l,f,c
  2484  002062  0E13               	movlw	19
  2485  002064  64DF               	cpfsgt	indf2,c
  2486  002066  0C13               	retlw	19
  2487                           
  2488                           ;sleep.c: 132: {
  2489                           ;sleep.c: 133: task_->sucCnt=0;
  2490  002068  500F               	movf	sleep_task@task_,w,c
  2491  00206A  6ED9               	movwf	fsr2l,c
  2492  00206C  6ADA               	clrf	fsr2h,c
  2493  00206E  0E09               	movlw	9
  2494  002070  26D9               	addwf	fsr2l,f,c
  2495  002072  6ADF               	clrf	indf2,c
  2496                           
  2497                           ;sleep.c: 139: sleep_mode();
  2498  002074  EC31  F00E         	call	_sleep_mode	;wreg free
  2499                           
  2500                           ;sleep.c: 141: GPIO_Init();
  2501  002078  EC26  F011         	call	_GPIO_Init	;wreg free
  2502                           
  2503                           ; BSR set to: 15
  2504                           ;sleep.c: 142: fvr_init();
  2505  00207C  EC3F  F012         	call	_fvr_init	;wreg free
  2506                           
  2507                           ;sleep.c: 143: dac_init();
  2508  002080  EC71  F012         	call	_dac_init	;wreg free
  2509                           
  2510                           ;sleep.c: 144: cmp_init();
  2511  002084  ECD8  F010         	call	_cmp_init	;wreg free
  2512                           
  2513                           ;sleep.c: 145: timer1_init();
  2514  002088  EC9E  F012         	call	_timer1_init	;wreg free
  2515                           
  2516                           ; BSR set to: 15
  2517                           ;sleep.c: 146: aip33626_init();
  2518  00208C  EFF8  F012         	goto	_aip33626_init	;wreg free
  2519  002090                     l33913:
  2520                           
  2521                           ;sleep.c: 153: else
  2522                           ;sleep.c: 154: {
  2523                           ;sleep.c: 155: task_->sucCnt=0;
  2524  002090  500F               	movf	sleep_task@task_,w,c
  2525  002092  6ED9               	movwf	fsr2l,c
  2526  002094  6ADA               	clrf	fsr2h,c
  2527  002096  0E09               	movlw	9
  2528  002098  26D9               	addwf	fsr2l,f,c
  2529  00209A  6ADF               	clrf	indf2,c
  2530  00209C  0C00               	retlw	0	;funcret
  2531  00209E                     __end_of_sleep_task:
  2532                           	opt stack 0
  2533                           tblptru	equ	0xFF8
  2534                           tblptrh	equ	0xFF7
  2535                           tblptrl	equ	0xFF6
  2536                           tablat	equ	0xFF5
  2537                           prodh	equ	0xFF4
  2538                           prodl	equ	0xFF3
  2539                           intcon	equ	0xFF2
  2540                           postinc0	equ	0xFEE
  2541                           wreg	equ	0xFE8
  2542                           postdec1	equ	0xFE5
  2543                           fsr1l	equ	0xFE1
  2544                           indf2	equ	0xFDF
  2545                           postinc2	equ	0xFDE
  2546                           postdec2	equ	0xFDD
  2547                           fsr2h	equ	0xFDA
  2548                           fsr2l	equ	0xFD9
  2549                           status	equ	0xFD8
  2550                           
  2551 ;; *************** function _timer1_init *****************
  2552 ;; Defined at:
  2553 ;;		line 82 in file ".\src\periph.c"
  2554 ;; Parameters:    Size  Location     Type
  2555 ;;		None
  2556 ;; Auto vars:     Size  Location     Type
  2557 ;;		None
  2558 ;; Return value:  Size  Location     Type
  2559 ;;                  1    wreg      void 
  2560 ;; Registers used:
  2561 ;;		wreg, status,2
  2562 ;; Tracked objects:
  2563 ;;		On entry : 0/F
  2564 ;;		On exit  : 3F/F
  2565 ;;		Unchanged: 0/0
  2566 ;; Data sizes:     COMRAM   BANK0   BANK1
  2567 ;;      Params:         0       0       0
  2568 ;;      Locals:         0       0       0
  2569 ;;      Temps:          0       0       0
  2570 ;;      Totals:         0       0       0
  2571 ;;Total ram usage:        0 bytes
  2572 ;; Hardware stack levels used:    1
  2573 ;; Hardware stack levels required when called:    3
  2574 ;; This function calls:
  2575 ;;		Nothing
  2576 ;; This function is called by:
  2577 ;;		_main
  2578 ;;		_sleep_task
  2579 ;; This function uses a non-reentrant model
  2580 ;;
  2581                           
  2582                           	psect	text5
  2583  00253C                     __ptext5:
  2584                           	opt stack 0
  2585  00253C                     _timer1_init:
  2586                           	opt stack 4
  2587                           
  2588                           ;periph.c: 84: T1CLKEN = 1;
  2589                           
  2590                           ;incstack = 0
  2591  00253C  010F               	movlb	15	; () banked
  2592  00253E  8362               	bsf	98,1,b	;volatile
  2593                           
  2594                           ;periph.c: 86: T1CLKEN = 1;
  2595  002540  8362               	bsf	98,1,b	;volatile
  2596                           
  2597                           ; BSR set to: 15
  2598                           ;periph.c: 87: TMR1H=0xe0;
  2599  002542  0EE0               	movlw	224
  2600  002544  6ED1               	movwf	4049,c	;volatile
  2601                           
  2602                           ;periph.c: 88: TMR1L=0xc0;
  2603  002546  0EC0               	movlw	192
  2604  002548  6ED0               	movwf	4048,c	;volatile
  2605                           
  2606                           ;periph.c: 90: T1CON0=0x30;
  2607  00254A  0E30               	movlw	48
  2608  00254C  6ECF               	movwf	4047,c	;volatile
  2609                           
  2610                           ; BSR set to: 15
  2611                           ;periph.c: 92: TMR1IF=0;
  2612  00254E  92A2               	bcf	4002,1,c	;volatile
  2613                           
  2614                           ; BSR set to: 15
  2615                           ;periph.c: 93: TMR1IE=1;
  2616  002550  82A1               	bsf	4001,1,c	;volatile
  2617                           
  2618                           ; BSR set to: 15
  2619                           ;periph.c: 95: GIE=1;
  2620  002552  8EF2               	bsf	intcon,7,c	;volatile
  2621                           
  2622                           ; BSR set to: 15
  2623                           ;periph.c: 96: TMR1ON=1;
  2624  002554  80CF               	bsf	4047,0,c	;volatile
  2625                           
  2626                           ; BSR set to: 15
  2627  002556  0C30               	retlw	48	;funcret
  2628  002558                     __end_of_timer1_init:
  2629                           	opt stack 0
  2630                           tblptru	equ	0xFF8
  2631                           tblptrh	equ	0xFF7
  2632                           tblptrl	equ	0xFF6
  2633                           tablat	equ	0xFF5
  2634                           prodh	equ	0xFF4
  2635                           prodl	equ	0xFF3
  2636                           intcon	equ	0xFF2
  2637                           postinc0	equ	0xFEE
  2638                           wreg	equ	0xFE8
  2639                           postdec1	equ	0xFE5
  2640                           fsr1l	equ	0xFE1
  2641                           indf2	equ	0xFDF
  2642                           postinc2	equ	0xFDE
  2643                           postdec2	equ	0xFDD
  2644                           fsr2h	equ	0xFDA
  2645                           fsr2l	equ	0xFD9
  2646                           status	equ	0xFD8
  2647                           
  2648 ;; *************** function _sleep_mode *****************
  2649 ;; Defined at:
  2650 ;;		line 5 in file ".\src\sleep.c"
  2651 ;; Parameters:    Size  Location     Type
  2652 ;;		None
  2653 ;; Auto vars:     Size  Location     Type
  2654 ;;		None
  2655 ;; Return value:  Size  Location     Type
  2656 ;;                  1    wreg      void 
  2657 ;; Registers used:
  2658 ;;		wreg, status,2
  2659 ;; Tracked objects:
  2660 ;;		On entry : 0/0
  2661 ;;		On exit  : 0/0
  2662 ;;		Unchanged: 0/0
  2663 ;; Data sizes:     COMRAM   BANK0   BANK1
  2664 ;;      Params:         0       0       0
  2665 ;;      Locals:         0       0       0
  2666 ;;      Temps:          0       0       0
  2667 ;;      Totals:         0       0       0
  2668 ;;Total ram usage:        0 bytes
  2669 ;; Hardware stack levels used:    1
  2670 ;; Hardware stack levels required when called:    3
  2671 ;; This function calls:
  2672 ;;		Nothing
  2673 ;; This function is called by:
  2674 ;;		_sleep_task
  2675 ;; This function uses a non-reentrant model
  2676 ;;
  2677                           
  2678                           	psect	text6
  2679  001C62                     __ptext6:
  2680                           	opt stack 0
  2681  001C62                     _sleep_mode:
  2682                           	opt stack 2
  2683                           
  2684                           ;sleep.c: 8: PORTA = 0X00;
  2685                           
  2686                           ; BSR set to: 15
  2687                           ;incstack = 0
  2688  001C62  6A80               	clrf	3968,c	;volatile
  2689                           
  2690                           ;sleep.c: 9: PORTB = 0X08;
  2691  001C64  0E08               	movlw	8
  2692  001C66  6E81               	movwf	3969,c	;volatile
  2693                           
  2694                           ;sleep.c: 10: PORTC = 0X01;
  2695  001C68  0E01               	movlw	1
  2696  001C6A  6E82               	movwf	3970,c	;volatile
  2697                           
  2698                           ;sleep.c: 11: PORTD = 0X01;
  2699  001C6C  6E83               	movwf	3971,c	;volatile
  2700                           
  2701                           ;sleep.c: 12: SMTA = 0xEF;
  2702  001C6E  0EEF               	movlw	239
  2703  001C70  6E98               	movwf	3992,c	;volatile
  2704                           
  2705                           ;sleep.c: 19: PAPU = 0XfF;
  2706  001C72  6884               	setf	3972,c	;volatile
  2707                           
  2708                           ;sleep.c: 20: PBPU = 0XFf;
  2709  001C74  6885               	setf	3973,c	;volatile
  2710                           
  2711                           ;sleep.c: 21: PCPU = 0XFf;
  2712  001C76  6886               	setf	3974,c	;volatile
  2713                           
  2714                           ;sleep.c: 22: PDPU = 0XFb;
  2715  001C78  0EFB               	movlw	251
  2716  001C7A  6E87               	movwf	3975,c	;volatile
  2717                           
  2718                           ;sleep.c: 24: PAPD = 0XdF;
  2719  001C7C  0EDF               	movlw	223
  2720  001C7E  6E8C               	movwf	3980,c	;volatile
  2721                           
  2722                           ;sleep.c: 25: PBPD = 0XFF;
  2723                           
  2724                           ;sleep.c: 26: PCPD = 0XF7;
  2725                           
  2726                           ;sleep.c: 27: PDPD = 0XFF;
  2727  001C80  D831               	call	PL82	;call to abstracted procedure
  2728                           
  2729                           ;sleep.c: 29: PAOD = 0X00;
  2730  001C82  6A94               	clrf	3988,c	;volatile
  2731                           
  2732                           ;sleep.c: 30: PBOD = 0X00;
  2733  001C84  6A95               	clrf	3989,c	;volatile
  2734                           
  2735                           ;sleep.c: 31: PCOD = 0X00;
  2736  001C86  6A96               	clrf	3990,c	;volatile
  2737                           
  2738                           ;sleep.c: 32: PDOD = 0X00;
  2739  001C88  6A97               	clrf	3991,c	;volatile
  2740                           
  2741                           ;sleep.c: 34: ANASEL0 = 0X00;
  2742  001C8A  010F               	movlb	15	; () banked
  2743  001C8C  6B54               	clrf	84,b	;volatile
  2744                           
  2745                           ; BSR set to: 15
  2746                           ;sleep.c: 35: ANASEL1 = 0X00;
  2747  001C8E  6B53               	clrf	83,b	;volatile
  2748                           
  2749                           ; BSR set to: 15
  2750                           ;sleep.c: 36: ANASEL2 = 0X00;
  2751  001C90  6B52               	clrf	82,b	;volatile
  2752                           
  2753                           ; BSR set to: 15
  2754                           ;sleep.c: 37: ANASEL3 = 0X00;
  2755  001C92  6B0D               	clrf	13,b	;volatile
  2756                           
  2757                           ; BSR set to: 15
  2758                           ;sleep.c: 39: TMR1ON=0;
  2759  001C94  90CF               	bcf	4047,0,c	;volatile
  2760                           
  2761                           ; BSR set to: 15
  2762                           ;sleep.c: 40: T1CLKEN=0;
  2763  001C96  9362               	bcf	98,1,b	;volatile
  2764                           
  2765                           ; BSR set to: 15
  2766                           ;sleep.c: 42: SPEN=0;
  2767  001C98  9F4D               	bcf	77,7,b	;volatile
  2768                           
  2769                           ; BSR set to: 15
  2770                           ;sleep.c: 43: UARTCLKEN=0;
  2771  001C9A  9D63               	bcf	99,6,b	;volatile
  2772                           
  2773                           ; BSR set to: 15
  2774                           ;sleep.c: 45: FVREN=0;
  2775  001C9C  9B72               	bcf	114,5,b	;volatile
  2776                           
  2777                           ; BSR set to: 15
  2778                           ;sleep.c: 46: DAC0EN=0;
  2779  001C9E  9D74               	bcf	116,6,b	;volatile
  2780                           
  2781                           ; BSR set to: 15
  2782                           ;sleep.c: 47: DAC1EN=0;
  2783  001CA0  9D73               	bcf	115,6,b	;volatile
  2784                           
  2785                           ; BSR set to: 15
  2786                           ;sleep.c: 48: CMP0EN=0;
  2787  001CA2  9F78               	bcf	120,7,b	;volatile
  2788                           
  2789                           ; BSR set to: 15
  2790                           ;sleep.c: 49: CMP1EN=0;
  2791  001CA4  9F77               	bcf	119,7,b	;volatile
  2792                           
  2793                           ; BSR set to: 15
  2794                           ;sleep.c: 51: ADON=0;
  2795  001CA6  90A6               	bcf	4006,0,c	;volatile
  2796                           
  2797                           ; BSR set to: 15
  2798                           ;sleep.c: 52: ADCCLKEN=0;
  2799  001CA8  9B62               	bcf	98,5,b	;volatile
  2800                           
  2801                           ;sleep.c: 58: TRISA = 0X10;
  2802  001CAA  0E10               	movlw	16
  2803                           
  2804                           ;sleep.c: 59: TRISB = 0X03;
  2805                           
  2806                           ;sleep.c: 60: TRISC = 0X08;
  2807                           
  2808                           ;sleep.c: 61: TRISD = 0X04;
  2809  001CAC  D813               	call	PL54	;call to abstracted procedure
  2810                           
  2811                           ; BSR set to: 15
  2812                           ;sleep.c: 63: PA4MSK=1;
  2813  001CAE  8960               	bsf	96,4,b	;volatile
  2814                           
  2815                           ; BSR set to: 15
  2816                           ;sleep.c: 64: PB0MSK=1;
  2817  001CB0  815F               	bsf	95,0,b	;volatile
  2818                           
  2819                           ; BSR set to: 15
  2820                           ;sleep.c: 65: PB1MSK=1;
  2821  001CB2  835F               	bsf	95,1,b	;volatile
  2822                           
  2823                           ; BSR set to: 15
  2824                           ;sleep.c: 66: PC3MSK=1;
  2825  001CB4  875E               	bsf	94,3,b	;volatile
  2826                           
  2827                           ; BSR set to: 15
  2828                           ;sleep.c: 67: PD2MSK=1;
  2829  001CB6  855D               	bsf	93,2,b	;volatile
  2830                           
  2831                           ; BSR set to: 15
  2832                           ;sleep.c: 69: PAIF=0;
  2833  001CB8  9A9F               	bcf	3999,5,c	;volatile
  2834                           
  2835                           ; BSR set to: 15
  2836                           ;sleep.c: 70: PBIF=0;
  2837  001CBA  9C9F               	bcf	3999,6,c	;volatile
  2838                           
  2839                           ; BSR set to: 15
  2840                           ;sleep.c: 71: PCIF=0;
  2841  001CBC  9E9F               	bcf	3999,7,c	;volatile
  2842                           
  2843                           ; BSR set to: 15
  2844                           ;sleep.c: 72: PDIF=0;
  2845  001CBE  9EA2               	bcf	4002,7,c	;volatile
  2846                           
  2847                           ; BSR set to: 15
  2848                           ;sleep.c: 80: PAIE=1;
  2849                           
  2850                           ; BSR set to: 15
  2851                           ;sleep.c: 78: PIND2;
  2852                           
  2853                           ; BSR set to: 15
  2854                           ;sleep.c: 77: PINC3;
  2855                           
  2856                           ; BSR set to: 15
  2857                           ;sleep.c: 76: PINB1;
  2858                           
  2859                           ; BSR set to: 15
  2860                           ;sleep.c: 75: PINB0;
  2861                           
  2862                           ; BSR set to: 15
  2863                           ;sleep.c: 74: PINA4;
  2864  001CC0  8A9E               	bsf	3998,5,c	;volatile
  2865                           
  2866                           ; BSR set to: 15
  2867                           ;sleep.c: 81: PBIE=1;
  2868  001CC2  8C9E               	bsf	3998,6,c	;volatile
  2869                           
  2870                           ; BSR set to: 15
  2871                           ;sleep.c: 82: PCIE=1;
  2872  001CC4  8E9E               	bsf	3998,7,c	;volatile
  2873                           
  2874                           ; BSR set to: 15
  2875                           ;sleep.c: 83: PDIE=1;
  2876  001CC6  8EA1               	bsf	4001,7,c	;volatile
  2877                           
  2878                           ; BSR set to: 15
  2879                           ;sleep.c: 109: GIE=1;
  2880  001CC8  8EF2               	bsf	intcon,7,c	;volatile
  2881                           
  2882                           ;sleep.c: 111: SMCR = 0X07; asm(" sleep");asm(" nop");
  2883  001CCA  0E07               	movlw	7
  2884  001CCC  6F65               	movwf	101,b	;volatile
  2885  001CCE  0003               	sleep		;# 
  2886  001CD0  F000               	nop		;# 
  2887  001CD2  0C07               	retlw	7	;funcret
  2888  001CD4                     __end_of_sleep_mode:
  2889                           	opt stack 0
  2890  001CD4                     PL54:
  2891                           	opt stack 2
  2892  001CD4  6E90               	movwf	3984,c	;volatile
  2893  001CD6  0E03               	movlw	3
  2894  001CD8  6E91               	movwf	3985,c	;volatile
  2895  001CDA  0E08               	movlw	8
  2896  001CDC  6E92               	movwf	3986,c	;volatile
  2897  001CDE  0E04               	movlw	4
  2898  001CE0  6E93               	movwf	3987,c	;volatile
  2899  001CE2  0C04               	retlw	4
  2900  001CE4                     __end_ofPL54:
  2901                           	opt stack 0
  2902  001CE4                     PL82:
  2903                           	opt stack 2
  2904  001CE4  688D               	setf	3981,c	;volatile
  2905  001CE6  0EF7               	movlw	247
  2906  001CE8  6E8E               	movwf	3982,c	;volatile
  2907  001CEA  688F               	setf	3983,c	;volatile
  2908  001CEC  0012               	return	
  2909  001CEE                     __end_ofPL82:
  2910                           	opt stack 0
  2911                           tblptru	equ	0xFF8
  2912                           tblptrh	equ	0xFF7
  2913                           tblptrl	equ	0xFF6
  2914                           tablat	equ	0xFF5
  2915                           prodh	equ	0xFF4
  2916                           prodl	equ	0xFF3
  2917                           intcon	equ	0xFF2
  2918                           postinc0	equ	0xFEE
  2919                           wreg	equ	0xFE8
  2920                           postdec1	equ	0xFE5
  2921                           fsr1l	equ	0xFE1
  2922                           indf2	equ	0xFDF
  2923                           postinc2	equ	0xFDE
  2924                           postdec2	equ	0xFDD
  2925                           fsr2h	equ	0xFDA
  2926                           fsr2l	equ	0xFD9
  2927                           status	equ	0xFD8
  2928                           
  2929 ;; *************** function _fvr_init *****************
  2930 ;; Defined at:
  2931 ;;		line 289 in file ".\src\periph.c"
  2932 ;; Parameters:    Size  Location     Type
  2933 ;;		None
  2934 ;; Auto vars:     Size  Location     Type
  2935 ;;		None
  2936 ;; Return value:  Size  Location     Type
  2937 ;;                  1    wreg      void 
  2938 ;; Registers used:
  2939 ;;		wreg, status,2, status,0, cstack
  2940 ;; Tracked objects:
  2941 ;;		On entry : 3F/F
  2942 ;;		On exit  : 0/0
  2943 ;;		Unchanged: 0/0
  2944 ;; Data sizes:     COMRAM   BANK0   BANK1
  2945 ;;      Params:         0       0       0
  2946 ;;      Locals:         0       0       0
  2947 ;;      Temps:          0       0       0
  2948 ;;      Totals:         0       0       0
  2949 ;;Total ram usage:        0 bytes
  2950 ;; Hardware stack levels used:    1
  2951 ;; Hardware stack levels required when called:    5
  2952 ;; This function calls:
  2953 ;;		_FVR_CAL
  2954 ;; This function is called by:
  2955 ;;		_main
  2956 ;;		_sleep_task
  2957 ;; This function uses a non-reentrant model
  2958 ;;
  2959                           
  2960                           	psect	text7
  2961  00247E                     __ptext7:
  2962                           	opt stack 0
  2963  00247E                     _fvr_init:
  2964                           	opt stack 2
  2965                           
  2966                           ; BSR set to: 15
  2967                           ;periph.c: 293: FVRCON = 0xa0;
  2968                           
  2969                           ;incstack = 0
  2970  00247E  0EA0               	movlw	160
  2971  002480  6F72               	movwf	114,b	;volatile
  2972                           
  2973                           ; BSR set to: 15
  2974                           ;periph.c: 294: FVRPGA = 0;
  2975  002482  9D72               	bcf	114,6,b	;volatile
  2976                           
  2977                           ; BSR set to: 15
  2978                           ;periph.c: 295: FVRPGA1 = 0;
  2979  002484  9D30               	bcf	48,6,b	;volatile
  2980                           
  2981                           ; BSR set to: 15
  2982                           ;periph.c: 296: FVR_CAL();
  2983  002486  ECDF  F009         	call	_FVR_CAL	;wreg free
  2984                           
  2985                           ; BSR set to: 15
  2986                           ;periph.c: 297: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2987  00248A  0E85               	movlw	133
  2988  00248C                     u7317:
  2989  00248C  2EE8               	decfsz	wreg,f,c
  2990  00248E  D7FE               	bra	u7317
  2991  002490  F000               	nop	
  2992                           
  2993                           ;periph.c: 298: FVREN=1;
  2994  002492  010F               	movlb	15	; () banked
  2995  002494  8B72               	bsf	114,5,b	;volatile
  2996                           
  2997                           ; BSR set to: 15
  2998                           ;periph.c: 299: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2999  002496  0E85               	movlw	133
  3000  002498                     u7327:
  3001  002498  2EE8               	decfsz	wreg,f,c
  3002  00249A  D7FE               	bra	u7327
  3003  00249C  F000               	nop	
  3004  00249E  0012               	return		;funcret
  3005  0024A0                     __end_of_fvr_init:
  3006                           	opt stack 0
  3007                           tblptru	equ	0xFF8
  3008                           tblptrh	equ	0xFF7
  3009                           tblptrl	equ	0xFF6
  3010                           tablat	equ	0xFF5
  3011                           prodh	equ	0xFF4
  3012                           prodl	equ	0xFF3
  3013                           intcon	equ	0xFF2
  3014                           postinc0	equ	0xFEE
  3015                           wreg	equ	0xFE8
  3016                           postdec1	equ	0xFE5
  3017                           fsr1l	equ	0xFE1
  3018                           indf2	equ	0xFDF
  3019                           postinc2	equ	0xFDE
  3020                           postdec2	equ	0xFDD
  3021                           fsr2h	equ	0xFDA
  3022                           fsr2l	equ	0xFD9
  3023                           status	equ	0xFD8
  3024                           
  3025 ;; *************** function _FVR_CAL *****************
  3026 ;; Defined at:
  3027 ;;		line 228 in file ".\src\periph.c"
  3028 ;; Parameters:    Size  Location     Type
  3029 ;;		None
  3030 ;; Auto vars:     Size  Location     Type
  3031 ;;  i               1   13[COMRAM] unsigned char 
  3032 ;;  start           1   12[COMRAM] unsigned char 
  3033 ;;  VOOS1           1   11[COMRAM] unsigned char 
  3034 ;; Return value:  Size  Location     Type
  3035 ;;                  1    wreg      void 
  3036 ;; Registers used:
  3037 ;;		wreg, status,2, status,0, cstack
  3038 ;; Tracked objects:
  3039 ;;		On entry : 3F/F
  3040 ;;		On exit  : 3F/F
  3041 ;;		Unchanged: 0/0
  3042 ;; Data sizes:     COMRAM   BANK0   BANK1
  3043 ;;      Params:         0       0       0
  3044 ;;      Locals:         3       0       0
  3045 ;;      Temps:          2       0       0
  3046 ;;      Totals:         5       0       0
  3047 ;;Total ram usage:        5 bytes
  3048 ;; Hardware stack levels used:    1
  3049 ;; Hardware stack levels required when called:    4
  3050 ;; This function calls:
  3051 ;;		_FVR_Offset
  3052 ;;		___awdiv
  3053 ;; This function is called by:
  3054 ;;		_fvr_init
  3055 ;; This function uses a non-reentrant model
  3056 ;;
  3057                           
  3058                           	psect	text8
  3059  0013BE                     __ptext8:
  3060                           	opt stack 0
  3061  0013BE                     _FVR_CAL:
  3062                           	opt stack 2
  3063                           
  3064                           ; BSR set to: 15
  3065                           ;periph.c: 230: unsigned char VOOS1 = 0,start = 0;
  3066                           
  3067                           ;incstack = 0
  3068  0013BE  6A0C               	clrf	FVR_CAL@VOOS1,c
  3069                           
  3070                           ;periph.c: 231: unsigned char i = 0;
  3071  0013C0  6A0E               	clrf	FVR_CAL@i,c
  3072                           
  3073                           ;periph.c: 233: FVR_OFFSET_EN=1;
  3074  0013C2  8B30               	bsf	48,5,b	;volatile
  3075                           
  3076                           ; BSR set to: 15
  3077                           ;periph.c: 235: FVR_Offset(0);
  3078  0013C4  0E00               	movlw	0
  3079  0013C6  ECDD  F012         	call	_FVR_Offset
  3080                           
  3081                           ; BSR set to: 15
  3082                           ;periph.c: 236: _delay((unsigned long)((500)*(16000000/4000000.0)));
  3083  0013CA  0E03               	movlw	3
  3084  0013CC  6E0A               	movwf	??_FVR_CAL& (0+255),c
  3085  0013CE  0E98               	movlw	152
  3086  0013D0                     u7337:
  3087  0013D0  2EE8               	decfsz	wreg,f,c
  3088  0013D2  D7FE               	bra	u7337
  3089  0013D4  2E0A               	decfsz	??_FVR_CAL& (0+255),f,c
  3090  0013D6  D7FC               	bra	u7337
  3091                           
  3092                           ;periph.c: 237: start =FVR_A2D_OUT;
  3093  0013D8  D85A               	call	PL42	;call to abstracted procedure
  3094                           
  3095                           ; BSR set to: 15
  3096                           ;periph.c: 239: if(start == 1)
  3097  0013DA  040D               	decf	FVR_CAL@start,w,c
  3098  0013DC  E102               	bnz	l32331
  3099                           
  3100                           ; BSR set to: 15
  3101                           ;periph.c: 240: {
  3102                           ;periph.c: 241: FVRCON1 &= 0XEF;
  3103  0013DE  9930               	bcf	48,4,b	;volatile
  3104                           
  3105                           ;periph.c: 242: }
  3106  0013E0  D001               	goto	l32333
  3107  0013E2                     l32331:
  3108                           
  3109                           ; BSR set to: 15
  3110                           ;periph.c: 243: else
  3111                           ;periph.c: 244: {
  3112                           ;periph.c: 245: FVRCON1 |= 0X10;
  3113  0013E2  8930               	bsf	48,4,b	;volatile
  3114  0013E4                     l32333:
  3115                           
  3116                           ; BSR set to: 15
  3117                           ;periph.c: 246: }
  3118                           ;periph.c: 248: FVR_Offset(0);
  3119  0013E4  0E00               	movlw	0
  3120  0013E6  ECDD  F012         	call	_FVR_Offset
  3121                           
  3122                           ; BSR set to: 15
  3123                           ;periph.c: 249: _delay((unsigned long)((500)*(16000000/4000000.0)));
  3124  0013EA  0E03               	movlw	3
  3125  0013EC  6E0A               	movwf	??_FVR_CAL& (0+255),c
  3126  0013EE  0E98               	movlw	152
  3127  0013F0                     u7347:
  3128  0013F0  2EE8               	decfsz	wreg,f,c
  3129  0013F2  D7FE               	bra	u7347
  3130  0013F4  2E0A               	decfsz	??_FVR_CAL& (0+255),f,c
  3131  0013F6  D7FC               	bra	u7347
  3132                           
  3133                           ;periph.c: 250: start =FVR_A2D_OUT;
  3134  0013F8  D84A               	call	PL42	;call to abstracted procedure
  3135                           
  3136                           ; BSR set to: 15
  3137                           ;periph.c: 252: for(i=0;i<=15;i++)
  3138  0013FA  6A0E               	clrf	FVR_CAL@i,c
  3139  0013FC                     l32345:
  3140                           
  3141                           ; BSR set to: 15
  3142                           ;periph.c: 253: {
  3143                           ;periph.c: 254: FVR_Offset(i);
  3144  0013FC  500E               	movf	FVR_CAL@i,w,c
  3145  0013FE  ECDD  F012         	call	_FVR_Offset
  3146                           
  3147                           ; BSR set to: 15
  3148                           ;periph.c: 255: _delay((unsigned long)((500)*(16000000/4000000.0)));
  3149  001402  0E03               	movlw	3
  3150  001404  6E0A               	movwf	??_FVR_CAL& (0+255),c
  3151  001406  0E98               	movlw	152
  3152  001408                     u7357:
  3153  001408  2EE8               	decfsz	wreg,f,c
  3154  00140A  D7FE               	bra	u7357
  3155  00140C  2E0A               	decfsz	??_FVR_CAL& (0+255),f,c
  3156  00140E  D7FC               	bra	u7357
  3157                           
  3158                           ;periph.c: 256: if(FVR_A2D_OUT != start)
  3159  001410  D844               	call	PL62	;call to abstracted procedure
  3160  001412  E003               	bz	l32353
  3161                           
  3162                           ; BSR set to: 15
  3163                           ;periph.c: 257: {
  3164                           ;periph.c: 258: VOOS1 = i;
  3165  001414  C00E  F00C         	movff	FVR_CAL@i,FVR_CAL@VOOS1
  3166                           
  3167                           ;periph.c: 259: break;
  3168  001418  D004               	goto	l32357
  3169  00141A                     l32353:
  3170                           
  3171                           ; BSR set to: 15
  3172  00141A  2A0E               	incf	FVR_CAL@i,f,c
  3173                           
  3174                           ; BSR set to: 15
  3175  00141C  0E0F               	movlw	15
  3176  00141E  640E               	cpfsgt	FVR_CAL@i,c
  3177  001420  D7ED               	goto	l32345
  3178  001422                     l32357:
  3179                           
  3180                           ; BSR set to: 15
  3181                           ;periph.c: 260: }
  3182                           ;periph.c: 261: }
  3183                           ;periph.c: 263: FVR_Offset(15);
  3184  001422  0E0F               	movlw	15
  3185  001424  ECDD  F012         	call	_FVR_Offset
  3186                           
  3187                           ; BSR set to: 15
  3188                           ;periph.c: 264: _delay((unsigned long)((500)*(16000000/4000000.0)));
  3189  001428  0E03               	movlw	3
  3190  00142A  6E0A               	movwf	??_FVR_CAL& (0+255),c
  3191  00142C  0E98               	movlw	152
  3192  00142E                     u7367:
  3193  00142E  2EE8               	decfsz	wreg,f,c
  3194  001430  D7FE               	bra	u7367
  3195  001432  2E0A               	decfsz	??_FVR_CAL& (0+255),f,c
  3196  001434  D7FC               	bra	u7367
  3197                           
  3198                           ;periph.c: 265: start = FVR_A2D_OUT;
  3199  001436  D82B               	call	PL42	;call to abstracted procedure
  3200                           
  3201                           ; BSR set to: 15
  3202                           ;periph.c: 266: for(i=16;i>0;i--)
  3203  001438  0E10               	movlw	16
  3204  00143A  6E0E               	movwf	FVR_CAL@i,c
  3205  00143C                     l32369:
  3206                           
  3207                           ; BSR set to: 15
  3208                           ;periph.c: 267: {
  3209                           ;periph.c: 268: FVR_Offset(i-1);
  3210  00143C  040E               	decf	FVR_CAL@i,w,c
  3211  00143E  ECDD  F012         	call	_FVR_Offset
  3212                           
  3213                           ; BSR set to: 15
  3214                           ;periph.c: 269: _delay((unsigned long)((500)*(16000000/4000000.0)));
  3215  001442  0E03               	movlw	3
  3216  001444  6E0A               	movwf	??_FVR_CAL& (0+255),c
  3217  001446  0E98               	movlw	152
  3218  001448                     u7377:
  3219  001448  2EE8               	decfsz	wreg,f,c
  3220  00144A  D7FE               	bra	u7377
  3221  00144C  2E0A               	decfsz	??_FVR_CAL& (0+255),f,c
  3222  00144E  D7FC               	bra	u7377
  3223                           
  3224                           ;periph.c: 270: if(FVR_A2D_OUT != start)
  3225  001450  D824               	call	PL62	;call to abstracted procedure
  3226  001452  E015               	bz	l32377
  3227                           
  3228                           ; BSR set to: 15
  3229                           ;periph.c: 271: {
  3230                           ;periph.c: 272: VOOS1 =(VOOS1+ i-1)/2;
  3231  001454  500E               	movf	FVR_CAL@i,w,c
  3232  001456  C00C  F00A         	movff	FVR_CAL@VOOS1,??_FVR_CAL
  3233  00145A  6A0B               	clrf	(??_FVR_CAL+1)& (0+255),c
  3234  00145C  260A               	addwf	??_FVR_CAL,f,c
  3235  00145E  0E00               	movlw	0
  3236  001460  220B               	addwfc	??_FVR_CAL+1,f,c
  3237  001462  0EFF               	movlw	255
  3238  001464  240A               	addwf	??_FVR_CAL,w,c
  3239  001466  6E02               	movwf	___awdiv@dividend,c
  3240  001468  0EFF               	movlw	255
  3241  00146A  200B               	addwfc	??_FVR_CAL+1,w,c
  3242  00146C  6E03               	movwf	___awdiv@dividend+1,c
  3243  00146E  6A05               	clrf	___awdiv@divisor+1,c
  3244  001470  0E02               	movlw	2
  3245  001472  6E04               	movwf	___awdiv@divisor,c
  3246  001474  EC37  F00F         	call	___awdiv	;wreg free
  3247  001478  5002               	movf	?___awdiv,w,c
  3248  00147A  6E0C               	movwf	FVR_CAL@VOOS1,c
  3249                           
  3250                           ;periph.c: 273: break;
  3251  00147C  D003               	goto	l32381
  3252  00147E                     l32377:
  3253                           
  3254                           ; BSR set to: 15
  3255  00147E  060E               	decf	FVR_CAL@i,f,c
  3256                           
  3257                           ; BSR set to: 15
  3258  001480  500E               	movf	FVR_CAL@i,w,c
  3259  001482  E1DC               	bnz	l32369
  3260  001484                     l32381:
  3261                           
  3262                           ; BSR set to: 15
  3263                           ;periph.c: 274: }
  3264                           ;periph.c: 275: }
  3265                           ;periph.c: 279: FVR_Offset(VOOS1);
  3266  001484  500C               	movf	FVR_CAL@VOOS1,w,c
  3267  001486  ECDD  F012         	call	_FVR_Offset
  3268                           
  3269                           ; BSR set to: 15
  3270                           ;periph.c: 280: FVR_OFFSET_EN=0;
  3271  00148A  9B30               	bcf	48,5,b	;volatile
  3272                           
  3273                           ; BSR set to: 15
  3274  00148C  0012               	return		;funcret
  3275  00148E                     __end_of_FVR_CAL:
  3276                           	opt stack 0
  3277  00148E                     PL42:
  3278                           	opt stack 2
  3279  00148E  0E00               	movlw	0
  3280  001490  010F               	movlb	15	; () banked
  3281  001492  BF30               	btfsc	48,7,b	;volatile
  3282  001494  0E01               	movlw	1
  3283  001496  6E0D               	movwf	FVR_CAL@start,c
  3284  001498  0012               	return	
  3285  00149A                     __end_ofPL42:
  3286                           	opt stack 0
  3287  00149A                     PL62:
  3288                           	opt stack 2
  3289  00149A  0E00               	movlw	0
  3290  00149C  010F               	movlb	15	; () banked
  3291  00149E  BF30               	btfsc	48,7,b	;volatile
  3292  0014A0  0E01               	movlw	1
  3293  0014A2  180D               	xorwf	FVR_CAL@start,w,c
  3294  0014A4  0012               	return	
  3295  0014A6                     __end_ofPL62:
  3296                           	opt stack 0
  3297                           tblptru	equ	0xFF8
  3298                           tblptrh	equ	0xFF7
  3299                           tblptrl	equ	0xFF6
  3300                           tablat	equ	0xFF5
  3301                           prodh	equ	0xFF4
  3302                           prodl	equ	0xFF3
  3303                           intcon	equ	0xFF2
  3304                           postinc0	equ	0xFEE
  3305                           wreg	equ	0xFE8
  3306                           postdec1	equ	0xFE5
  3307                           fsr1l	equ	0xFE1
  3308                           indf2	equ	0xFDF
  3309                           postinc2	equ	0xFDE
  3310                           postdec2	equ	0xFDD
  3311                           fsr2h	equ	0xFDA
  3312                           fsr2l	equ	0xFD9
  3313                           status	equ	0xFD8
  3314                           
  3315 ;; *************** function _FVR_Offset *****************
  3316 ;; Defined at:
  3317 ;;		line 214 in file ".\src\periph.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;  OFFSET          1    wreg     unsigned char 
  3320 ;; Auto vars:     Size  Location     Type
  3321 ;;  OFFSET          1    1[COMRAM] unsigned char 
  3322 ;;  tmp             1    2[COMRAM] unsigned char 
  3323 ;; Return value:  Size  Location     Type
  3324 ;;                  1    wreg      void 
  3325 ;; Registers used:
  3326 ;;		wreg, status,2, status,0
  3327 ;; Tracked objects:
  3328 ;;		On entry : 3F/F
  3329 ;;		On exit  : 3F/F
  3330 ;;		Unchanged: 0/0
  3331 ;; Data sizes:     COMRAM   BANK0   BANK1
  3332 ;;      Params:         0       0       0
  3333 ;;      Locals:         2       0       0
  3334 ;;      Temps:          0       0       0
  3335 ;;      Totals:         2       0       0
  3336 ;;Total ram usage:        2 bytes
  3337 ;; Hardware stack levels used:    1
  3338 ;; Hardware stack levels required when called:    3
  3339 ;; This function calls:
  3340 ;;		Nothing
  3341 ;; This function is called by:
  3342 ;;		_FVR_CAL
  3343 ;; This function uses a non-reentrant model
  3344 ;;
  3345                           
  3346                           	psect	text9
  3347  0025BA                     __ptext9:
  3348                           	opt stack 0
  3349  0025BA                     _FVR_Offset:
  3350                           	opt stack 2
  3351                           
  3352                           ; BSR set to: 15
  3353                           ;incstack = 0
  3354                           ;FVR_Offset@OFFSET stored from wreg
  3355  0025BA  6E02               	movwf	FVR_Offset@OFFSET,c
  3356                           
  3357                           ;periph.c: 217: tmp=FVRCON1&0XF0;
  3358  0025BC  010F               	movlb	15	; () banked
  3359  0025BE  5130               	movf	48,w,b	;volatile
  3360  0025C0  0BF0               	andlw	240
  3361  0025C2  6E03               	movwf	FVR_Offset@tmp,c
  3362                           
  3363                           ;periph.c: 218: FVRCON1= tmp|OFFSET;
  3364  0025C4  5003               	movf	FVR_Offset@tmp,w,c
  3365  0025C6  1002               	iorwf	FVR_Offset@OFFSET,w,c
  3366  0025C8  6F30               	movwf	48,b	;volatile
  3367                           
  3368                           ; BSR set to: 15
  3369  0025CA  0012               	return		;funcret
  3370  0025CC                     __end_of_FVR_Offset:
  3371                           	opt stack 0
  3372                           tblptru	equ	0xFF8
  3373                           tblptrh	equ	0xFF7
  3374                           tblptrl	equ	0xFF6
  3375                           tablat	equ	0xFF5
  3376                           prodh	equ	0xFF4
  3377                           prodl	equ	0xFF3
  3378                           intcon	equ	0xFF2
  3379                           postinc0	equ	0xFEE
  3380                           wreg	equ	0xFE8
  3381                           postdec1	equ	0xFE5
  3382                           fsr1l	equ	0xFE1
  3383                           indf2	equ	0xFDF
  3384                           postinc2	equ	0xFDE
  3385                           postdec2	equ	0xFDD
  3386                           fsr2h	equ	0xFDA
  3387                           fsr2l	equ	0xFD9
  3388                           status	equ	0xFD8
  3389                           
  3390 ;; *************** function _dac_init *****************
  3391 ;; Defined at:
  3392 ;;		line 329 in file ".\src\periph.c"
  3393 ;; Parameters:    Size  Location     Type
  3394 ;;		None
  3395 ;; Auto vars:     Size  Location     Type
  3396 ;;		None
  3397 ;; Return value:  Size  Location     Type
  3398 ;;                  1    wreg      void 
  3399 ;; Registers used:
  3400 ;;		wreg, status,2
  3401 ;; Tracked objects:
  3402 ;;		On entry : 0/F
  3403 ;;		On exit  : 0/0
  3404 ;;		Unchanged: 0/0
  3405 ;; Data sizes:     COMRAM   BANK0   BANK1
  3406 ;;      Params:         0       0       0
  3407 ;;      Locals:         0       0       0
  3408 ;;      Temps:          0       0       0
  3409 ;;      Totals:         0       0       0
  3410 ;;Total ram usage:        0 bytes
  3411 ;; Hardware stack levels used:    1
  3412 ;; Hardware stack levels required when called:    3
  3413 ;; This function calls:
  3414 ;;		Nothing
  3415 ;; This function is called by:
  3416 ;;		_main
  3417 ;;		_sleep_task
  3418 ;; This function uses a non-reentrant model
  3419 ;;
  3420                           
  3421                           	psect	text10
  3422  0024E2                     __ptext10:
  3423                           	opt stack 0
  3424  0024E2                     _dac_init:
  3425                           	opt stack 2
  3426                           
  3427                           ;periph.c: 332: DAC0VREF1=0;
  3428                           
  3429                           ; BSR set to: 15
  3430                           ;incstack = 0
  3431  0024E2  010F               	movlb	15	; () banked
  3432  0024E4  9375               	bcf	117,1,b	;volatile
  3433                           
  3434                           ;periph.c: 333: DAC0VREF0=0;
  3435  0024E6  9175               	bcf	117,0,b	;volatile
  3436                           
  3437                           ; BSR set to: 15
  3438                           ;periph.c: 335: DAC0CON=0x37;
  3439  0024E8  0E37               	movlw	55
  3440  0024EA  6F74               	movwf	116,b	;volatile
  3441                           
  3442                           ; BSR set to: 15
  3443                           ;periph.c: 336: DAC0EN=1;
  3444  0024EC  8D74               	bsf	116,6,b	;volatile
  3445                           
  3446                           ; BSR set to: 15
  3447                           ;periph.c: 339: DAC1VREF1=0;
  3448  0024EE  9775               	bcf	117,3,b	;volatile
  3449                           
  3450                           ; BSR set to: 15
  3451                           ;periph.c: 340: DAC1VREF0=0;
  3452  0024F0  9575               	bcf	117,2,b	;volatile
  3453                           
  3454                           ;periph.c: 342: DAC1CON=0x37;
  3455  0024F2  6F73               	movwf	115,b	;volatile
  3456                           
  3457                           ; BSR set to: 15
  3458                           ;periph.c: 343: DAC1EN=1;
  3459  0024F4  8D73               	bsf	115,6,b	;volatile
  3460                           
  3461                           ; BSR set to: 15
  3462                           ;periph.c: 344: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3463  0024F6  0E85               	movlw	133
  3464  0024F8                     u7387:
  3465  0024F8  2EE8               	decfsz	wreg,f,c
  3466  0024FA  D7FE               	bra	u7387
  3467  0024FC  F000               	nop	
  3468  0024FE  0012               	return		;funcret
  3469  002500                     __end_of_dac_init:
  3470                           	opt stack 0
  3471                           tblptru	equ	0xFF8
  3472                           tblptrh	equ	0xFF7
  3473                           tblptrl	equ	0xFF6
  3474                           tablat	equ	0xFF5
  3475                           prodh	equ	0xFF4
  3476                           prodl	equ	0xFF3
  3477                           intcon	equ	0xFF2
  3478                           postinc0	equ	0xFEE
  3479                           wreg	equ	0xFE8
  3480                           postdec1	equ	0xFE5
  3481                           fsr1l	equ	0xFE1
  3482                           indf2	equ	0xFDF
  3483                           postinc2	equ	0xFDE
  3484                           postdec2	equ	0xFDD
  3485                           fsr2h	equ	0xFDA
  3486                           fsr2l	equ	0xFD9
  3487                           status	equ	0xFD8
  3488                           
  3489 ;; *************** function _cmp_init *****************
  3490 ;; Defined at:
  3491 ;;		line 502 in file ".\src\periph.c"
  3492 ;; Parameters:    Size  Location     Type
  3493 ;;		None
  3494 ;; Auto vars:     Size  Location     Type
  3495 ;;		None
  3496 ;; Return value:  Size  Location     Type
  3497 ;;                  1    wreg      void 
  3498 ;; Registers used:
  3499 ;;		wreg, status,2, status,0, cstack
  3500 ;; Tracked objects:
  3501 ;;		On entry : 0/F
  3502 ;;		On exit  : 0/0
  3503 ;;		Unchanged: 0/0
  3504 ;; Data sizes:     COMRAM   BANK0   BANK1
  3505 ;;      Params:         0       0       0
  3506 ;;      Locals:         0       0       0
  3507 ;;      Temps:          0       0       0
  3508 ;;      Totals:         0       0       0
  3509 ;;Total ram usage:        0 bytes
  3510 ;; Hardware stack levels used:    1
  3511 ;; Hardware stack levels required when called:    5
  3512 ;; This function calls:
  3513 ;;		_CMP0_cal
  3514 ;;		_CMP1_cal
  3515 ;; This function is called by:
  3516 ;;		_main
  3517 ;;		_sleep_task
  3518 ;; This function uses a non-reentrant model
  3519 ;;
  3520                           
  3521                           	psect	text11
  3522  0021B0                     __ptext11:
  3523                           	opt stack 0
  3524  0021B0                     _cmp_init:
  3525                           	opt stack 0
  3526                           
  3527                           ;periph.c: 504: CMPCLKEN = 1;
  3528                           
  3529                           ;incstack = 0
  3530  0021B0  010F               	movlb	15	; () banked
  3531  0021B2  8F62               	bsf	98,7,b	;volatile
  3532                           
  3533                           ;periph.c: 507: CMP0PCH2=0;
  3534  0021B4  9978               	bcf	120,4,b	;volatile
  3535                           
  3536                           ;periph.c: 508: CMP0PCH1=1;
  3537  0021B6  8778               	bsf	120,3,b	;volatile
  3538                           
  3539                           ;periph.c: 509: CMP0PCH0=1;
  3540  0021B8  8578               	bsf	120,2,b	;volatile
  3541                           
  3542                           ;periph.c: 510: CMP0NCH1=0;
  3543  0021BA  9378               	bcf	120,1,b	;volatile
  3544                           
  3545                           ;periph.c: 511: CMP0NCH0=1;
  3546  0021BC  8178               	bsf	120,0,b	;volatile
  3547                           
  3548                           ;periph.c: 512: CMP0POS=1;
  3549  0021BE  8B78               	bsf	120,5,b	;volatile
  3550                           
  3551                           ;periph.c: 514: CMP1PCH2=1;
  3552  0021C0  8977               	bsf	119,4,b	;volatile
  3553                           
  3554                           ;periph.c: 515: CMP1PCH1=1;
  3555  0021C2  8777               	bsf	119,3,b	;volatile
  3556                           
  3557                           ;periph.c: 516: CMP1PCH0=0;
  3558  0021C4  9577               	bcf	119,2,b	;volatile
  3559                           
  3560                           ;periph.c: 517: CMP1NCH0=1;
  3561  0021C6  8177               	bsf	119,0,b	;volatile
  3562                           
  3563                           ;periph.c: 518: CMP1NCH1=1;
  3564  0021C8  8377               	bsf	119,1,b	;volatile
  3565                           
  3566                           ;periph.c: 519: CMP1POS=0;
  3567  0021CA  9B77               	bcf	119,5,b	;volatile
  3568                           
  3569                           ;periph.c: 521: CMPFILTER3=0;
  3570  0021CC  9F76               	bcf	118,7,b	;volatile
  3571                           
  3572                           ;periph.c: 522: CMPFILTER2=0;
  3573  0021CE  9D76               	bcf	118,6,b	;volatile
  3574                           
  3575                           ;periph.c: 523: CMPFILTER1=0;
  3576  0021D0  9B76               	bcf	118,5,b	;volatile
  3577                           
  3578                           ;periph.c: 524: CMPFILTER0=0;
  3579  0021D2  9976               	bcf	118,4,b	;volatile
  3580                           
  3581                           ;periph.c: 526: CMP0EN=1;
  3582  0021D4  8F78               	bsf	120,7,b	;volatile
  3583                           
  3584                           ;periph.c: 527: CMP1EN=1;
  3585  0021D6  8F77               	bsf	119,7,b	;volatile
  3586                           
  3587                           ; BSR set to: 15
  3588                           ;periph.c: 529: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3589  0021D8  0E85               	movlw	133
  3590  0021DA                     u7397:
  3591  0021DA  2EE8               	decfsz	wreg,f,c
  3592  0021DC  D7FE               	bra	u7397
  3593  0021DE  F000               	nop	
  3594                           
  3595                           ;periph.c: 530: CMP0IF=0;
  3596  0021E0  909F               	bcf	3999,0,c	;volatile
  3597                           
  3598                           ;periph.c: 531: CMP0IE=0;
  3599  0021E2  909E               	bcf	3998,0,c	;volatile
  3600                           
  3601                           ;periph.c: 532: CMP1IF=0;
  3602  0021E4  929F               	bcf	3999,1,c	;volatile
  3603                           
  3604                           ;periph.c: 533: CMP1IE=0;
  3605  0021E6  929E               	bcf	3998,1,c	;volatile
  3606                           
  3607                           ;periph.c: 535: CMP0_cal();
  3608  0021E8  EC31  F00B         	call	_CMP0_cal	;wreg free
  3609                           
  3610                           ; BSR set to: 15
  3611                           ;periph.c: 536: CMP1_cal();
  3612  0021EC  EC9F  F00B         	call	_CMP1_cal	;wreg free
  3613                           
  3614                           ; BSR set to: 15
  3615                           ;periph.c: 538: CMPCON=0x00;
  3616  0021F0  6B76               	clrf	118,b	;volatile
  3617                           
  3618                           ; BSR set to: 15
  3619                           ;periph.c: 539: CMPCON1=0xff;
  3620  0021F2  697D               	setf	125,b	;volatile
  3621                           
  3622                           ;periph.c: 540: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3623  0021F4  0E85               	movlw	133
  3624  0021F6                     u7407:
  3625  0021F6  2EE8               	decfsz	wreg,f,c
  3626  0021F8  D7FE               	bra	u7407
  3627  0021FA  F000               	nop	
  3628  0021FC  0012               	return		;funcret
  3629  0021FE                     __end_of_cmp_init:
  3630                           	opt stack 0
  3631                           tblptru	equ	0xFF8
  3632                           tblptrh	equ	0xFF7
  3633                           tblptrl	equ	0xFF6
  3634                           tablat	equ	0xFF5
  3635                           prodh	equ	0xFF4
  3636                           prodl	equ	0xFF3
  3637                           intcon	equ	0xFF2
  3638                           postinc0	equ	0xFEE
  3639                           wreg	equ	0xFE8
  3640                           postdec1	equ	0xFE5
  3641                           fsr1l	equ	0xFE1
  3642                           indf2	equ	0xFDF
  3643                           postinc2	equ	0xFDE
  3644                           postdec2	equ	0xFDD
  3645                           fsr2h	equ	0xFDA
  3646                           fsr2l	equ	0xFD9
  3647                           status	equ	0xFD8
  3648                           
  3649 ;; *************** function _CMP1_cal *****************
  3650 ;; Defined at:
  3651 ;;		line 443 in file ".\src\periph.c"
  3652 ;; Parameters:    Size  Location     Type
  3653 ;;		None
  3654 ;; Auto vars:     Size  Location     Type
  3655 ;;  i               1   13[COMRAM] unsigned char 
  3656 ;;  start           1   12[COMRAM] unsigned char 
  3657 ;;  VOOS1           1   11[COMRAM] unsigned char 
  3658 ;; Return value:  Size  Location     Type
  3659 ;;                  1    wreg      void 
  3660 ;; Registers used:
  3661 ;;		wreg, status,2, status,0, cstack
  3662 ;; Tracked objects:
  3663 ;;		On entry : 3F/F
  3664 ;;		On exit  : 3F/F
  3665 ;;		Unchanged: 0/0
  3666 ;; Data sizes:     COMRAM   BANK0   BANK1
  3667 ;;      Params:         0       0       0
  3668 ;;      Locals:         3       0       0
  3669 ;;      Temps:          2       0       0
  3670 ;;      Totals:         5       0       0
  3671 ;;Total ram usage:        5 bytes
  3672 ;; Hardware stack levels used:    1
  3673 ;; Hardware stack levels required when called:    4
  3674 ;; This function calls:
  3675 ;;		_CMP1_offset
  3676 ;;		___awdiv
  3677 ;; This function is called by:
  3678 ;;		_cmp_init
  3679 ;; This function uses a non-reentrant model
  3680 ;;
  3681                           
  3682                           	psect	text12
  3683  00173E                     __ptext12:
  3684                           	opt stack 0
  3685  00173E                     _CMP1_cal:
  3686                           	opt stack 0
  3687                           
  3688                           ; BSR set to: 15
  3689                           ;periph.c: 445: unsigned char VOOS1 = 0,start = 0;
  3690                           
  3691                           ;incstack = 0
  3692  00173E  6A0C               	clrf	CMP1_cal@VOOS1,c
  3693                           
  3694                           ;periph.c: 446: unsigned char i = 0;
  3695  001740  6A0E               	clrf	CMP1_cal@i,c
  3696                           
  3697                           ; BSR set to: 15
  3698                           ;periph.c: 448: CMP1CON2|=0x10;
  3699  001742  8932               	bsf	50,4,b	;volatile
  3700                           
  3701                           ; BSR set to: 15
  3702                           ;periph.c: 450: CMP1_offset(0);
  3703  001744  0E00               	movlw	0
  3704  001746  ECE6  F012         	call	_CMP1_offset
  3705                           
  3706                           ; BSR set to: 15
  3707                           ;periph.c: 451: _delay((unsigned long)((500)*(16000000/4000000.0)));
  3708  00174A  0E03               	movlw	3
  3709  00174C  6E0A               	movwf	??_CMP1_cal& (0+255),c
  3710  00174E  0E98               	movlw	152
  3711  001750                     u7417:
  3712  001750  2EE8               	decfsz	wreg,f,c
  3713  001752  D7FE               	bra	u7417
  3714  001754  2E0A               	decfsz	??_CMP1_cal& (0+255),f,c
  3715  001756  D7FC               	bra	u7417
  3716                           
  3717                           ;periph.c: 452: start =CMP1OUT;
  3718  001758  0E00               	movlw	0
  3719  00175A  010F               	movlb	15	; () banked
  3720  00175C  BD77               	btfsc	119,6,b	;volatile
  3721  00175E  0E01               	movlw	1
  3722  001760  6E0D               	movwf	CMP1_cal@start,c
  3723                           
  3724                           ; BSR set to: 15
  3725                           ;periph.c: 454: if(start == 1)
  3726  001762  040D               	decf	CMP1_cal@start,w,c
  3727  001764  E102               	bnz	l32461
  3728                           
  3729                           ; BSR set to: 15
  3730                           ;periph.c: 455: {
  3731                           ;periph.c: 456: CMP1CON2 &= 0XF7;
  3732  001766  9732               	bcf	50,3,b	;volatile
  3733                           
  3734                           ;periph.c: 457: }
  3735  001768  D001               	goto	l32463
  3736  00176A                     l32461:
  3737                           
  3738                           ; BSR set to: 15
  3739                           ;periph.c: 458: else
  3740                           ;periph.c: 459: {
  3741                           ;periph.c: 460: CMP1CON2 |= 0X08;
  3742  00176A  8732               	bsf	50,3,b	;volatile
  3743  00176C                     l32463:
  3744                           
  3745                           ; BSR set to: 15
  3746                           ;periph.c: 461: }
  3747                           ;periph.c: 463: for(i=0;i<=7;i++)
  3748  00176C  6A0E               	clrf	CMP1_cal@i,c
  3749  00176E                     l32469:
  3750                           
  3751                           ; BSR set to: 15
  3752                           ;periph.c: 464: {
  3753                           ;periph.c: 465: CMP1_offset(i);
  3754  00176E  500E               	movf	CMP1_cal@i,w,c
  3755  001770  ECE6  F012         	call	_CMP1_offset
  3756                           
  3757                           ; BSR set to: 15
  3758                           ;periph.c: 466: _delay((unsigned long)((500)*(16000000/4000000.0)));
  3759  001774  0E03               	movlw	3
  3760  001776  6E0A               	movwf	??_CMP1_cal& (0+255),c
  3761  001778  0E98               	movlw	152
  3762  00177A                     u7427:
  3763  00177A  2EE8               	decfsz	wreg,f,c
  3764  00177C  D7FE               	bra	u7427
  3765  00177E  2E0A               	decfsz	??_CMP1_cal& (0+255),f,c
  3766  001780  D7FC               	bra	u7427
  3767                           
  3768                           ;periph.c: 468: if(CMP1OUT != start)
  3769  001782  0E00               	movlw	0
  3770  001784  010F               	movlb	15	; () banked
  3771  001786  BD77               	btfsc	119,6,b	;volatile
  3772  001788  0E01               	movlw	1
  3773  00178A  180D               	xorwf	CMP1_cal@start,w,c
  3774  00178C  E003               	bz	l32477
  3775                           
  3776                           ; BSR set to: 15
  3777                           ;periph.c: 469: {
  3778                           ;periph.c: 471: VOOS1 = i;
  3779  00178E  C00E  F00C         	movff	CMP1_cal@i,CMP1_cal@VOOS1
  3780                           
  3781                           ;periph.c: 472: break;
  3782  001792  D004               	goto	l32481
  3783  001794                     l32477:
  3784                           
  3785                           ; BSR set to: 15
  3786  001794  2A0E               	incf	CMP1_cal@i,f,c
  3787                           
  3788                           ; BSR set to: 15
  3789  001796  0E07               	movlw	7
  3790  001798  640E               	cpfsgt	CMP1_cal@i,c
  3791  00179A  D7E9               	goto	l32469
  3792  00179C                     l32481:
  3793                           
  3794                           ; BSR set to: 15
  3795                           ;periph.c: 473: }
  3796                           ;periph.c: 474: }
  3797                           ;periph.c: 476: CMP1_offset(7);
  3798  00179C  0E07               	movlw	7
  3799  00179E  ECE6  F012         	call	_CMP1_offset
  3800                           
  3801                           ; BSR set to: 15
  3802                           ;periph.c: 477: _delay((unsigned long)((500)*(16000000/4000000.0)));
  3803  0017A2  0E03               	movlw	3
  3804  0017A4  6E0A               	movwf	??_CMP1_cal& (0+255),c
  3805  0017A6  0E98               	movlw	152
  3806  0017A8                     u7437:
  3807  0017A8  2EE8               	decfsz	wreg,f,c
  3808  0017AA  D7FE               	bra	u7437
  3809  0017AC  2E0A               	decfsz	??_CMP1_cal& (0+255),f,c
  3810  0017AE  D7FC               	bra	u7437
  3811                           
  3812                           ;periph.c: 478: start = CMP1OUT;
  3813  0017B0  0E00               	movlw	0
  3814  0017B2  010F               	movlb	15	; () banked
  3815  0017B4  BD77               	btfsc	119,6,b	;volatile
  3816  0017B6  0E01               	movlw	1
  3817  0017B8  6E0D               	movwf	CMP1_cal@start,c
  3818                           
  3819                           ; BSR set to: 15
  3820                           ;periph.c: 479: for(i=8;i>0;i--)
  3821  0017BA  0E08               	movlw	8
  3822  0017BC  6E0E               	movwf	CMP1_cal@i,c
  3823  0017BE                     l32493:
  3824                           
  3825                           ; BSR set to: 15
  3826                           ;periph.c: 480: {
  3827                           ;periph.c: 481: CMP1_offset(i-1);
  3828  0017BE  040E               	decf	CMP1_cal@i,w,c
  3829  0017C0  ECE6  F012         	call	_CMP1_offset
  3830                           
  3831                           ; BSR set to: 15
  3832                           ;periph.c: 482: _delay((unsigned long)((500)*(16000000/4000000.0)));
  3833  0017C4  0E03               	movlw	3
  3834  0017C6  6E0A               	movwf	??_CMP1_cal& (0+255),c
  3835  0017C8  0E98               	movlw	152
  3836  0017CA                     u7447:
  3837  0017CA  2EE8               	decfsz	wreg,f,c
  3838  0017CC  D7FE               	bra	u7447
  3839  0017CE  2E0A               	decfsz	??_CMP1_cal& (0+255),f,c
  3840  0017D0  D7FC               	bra	u7447
  3841                           
  3842                           ;periph.c: 484: if(CMP1OUT != start)
  3843  0017D2  0E00               	movlw	0
  3844  0017D4  010F               	movlb	15	; () banked
  3845  0017D6  BD77               	btfsc	119,6,b	;volatile
  3846  0017D8  0E01               	movlw	1
  3847  0017DA  180D               	xorwf	CMP1_cal@start,w,c
  3848  0017DC  E015               	bz	l32501
  3849                           
  3850                           ; BSR set to: 15
  3851                           ;periph.c: 485: {
  3852                           ;periph.c: 487: VOOS1 =(VOOS1+ i-1)/2;
  3853  0017DE  500E               	movf	CMP1_cal@i,w,c
  3854  0017E0  C00C  F00A         	movff	CMP1_cal@VOOS1,??_CMP1_cal
  3855  0017E4  6A0B               	clrf	(??_CMP1_cal+1)& (0+255),c
  3856  0017E6  260A               	addwf	??_CMP1_cal,f,c
  3857  0017E8  0E00               	movlw	0
  3858  0017EA  220B               	addwfc	??_CMP1_cal+1,f,c
  3859  0017EC  0EFF               	movlw	255
  3860  0017EE  240A               	addwf	??_CMP1_cal,w,c
  3861  0017F0  6E02               	movwf	___awdiv@dividend,c
  3862  0017F2  0EFF               	movlw	255
  3863  0017F4  200B               	addwfc	??_CMP1_cal+1,w,c
  3864  0017F6  6E03               	movwf	___awdiv@dividend+1,c
  3865  0017F8  6A05               	clrf	___awdiv@divisor+1,c
  3866  0017FA  0E02               	movlw	2
  3867  0017FC  6E04               	movwf	___awdiv@divisor,c
  3868  0017FE  EC37  F00F         	call	___awdiv	;wreg free
  3869  001802  5002               	movf	?___awdiv,w,c
  3870  001804  6E0C               	movwf	CMP1_cal@VOOS1,c
  3871                           
  3872                           ;periph.c: 488: break;
  3873  001806  D003               	goto	l32505
  3874  001808                     l32501:
  3875                           
  3876                           ; BSR set to: 15
  3877  001808  060E               	decf	CMP1_cal@i,f,c
  3878                           
  3879                           ; BSR set to: 15
  3880  00180A  500E               	movf	CMP1_cal@i,w,c
  3881  00180C  E1D8               	bnz	l32493
  3882  00180E                     l32505:
  3883                           
  3884                           ; BSR set to: 15
  3885                           ;periph.c: 489: }
  3886                           ;periph.c: 490: }
  3887                           ;periph.c: 494: CMP1_offset(VOOS1);
  3888  00180E  500C               	movf	CMP1_cal@VOOS1,w,c
  3889  001810  ECE6  F012         	call	_CMP1_offset
  3890                           
  3891                           ; BSR set to: 15
  3892                           ;periph.c: 495: CMP1CON2&=0XEF;
  3893  001814  9932               	bcf	50,4,b	;volatile
  3894                           
  3895                           ; BSR set to: 15
  3896  001816  0012               	return		;funcret
  3897  001818                     __end_of_CMP1_cal:
  3898                           	opt stack 0
  3899                           tblptru	equ	0xFF8
  3900                           tblptrh	equ	0xFF7
  3901                           tblptrl	equ	0xFF6
  3902                           tablat	equ	0xFF5
  3903                           prodh	equ	0xFF4
  3904                           prodl	equ	0xFF3
  3905                           intcon	equ	0xFF2
  3906                           postinc0	equ	0xFEE
  3907                           wreg	equ	0xFE8
  3908                           postdec1	equ	0xFE5
  3909                           fsr1l	equ	0xFE1
  3910                           indf2	equ	0xFDF
  3911                           postinc2	equ	0xFDE
  3912                           postdec2	equ	0xFDD
  3913                           fsr2h	equ	0xFDA
  3914                           fsr2l	equ	0xFD9
  3915                           status	equ	0xFD8
  3916                           
  3917 ;; *************** function _CMP1_offset *****************
  3918 ;; Defined at:
  3919 ;;		line 430 in file ".\src\periph.c"
  3920 ;; Parameters:    Size  Location     Type
  3921 ;;  OFFSET          1    wreg     unsigned char 
  3922 ;; Auto vars:     Size  Location     Type
  3923 ;;  OFFSET          1    1[COMRAM] unsigned char 
  3924 ;;  tmp             1    2[COMRAM] unsigned char 
  3925 ;; Return value:  Size  Location     Type
  3926 ;;                  1    wreg      void 
  3927 ;; Registers used:
  3928 ;;		wreg, status,2, status,0
  3929 ;; Tracked objects:
  3930 ;;		On entry : 3F/F
  3931 ;;		On exit  : 3F/F
  3932 ;;		Unchanged: 0/0
  3933 ;; Data sizes:     COMRAM   BANK0   BANK1
  3934 ;;      Params:         0       0       0
  3935 ;;      Locals:         2       0       0
  3936 ;;      Temps:          0       0       0
  3937 ;;      Totals:         2       0       0
  3938 ;;Total ram usage:        2 bytes
  3939 ;; Hardware stack levels used:    1
  3940 ;; Hardware stack levels required when called:    3
  3941 ;; This function calls:
  3942 ;;		Nothing
  3943 ;; This function is called by:
  3944 ;;		_CMP1_cal
  3945 ;; This function uses a non-reentrant model
  3946 ;;
  3947                           
  3948                           	psect	text13
  3949  0025CC                     __ptext13:
  3950                           	opt stack 0
  3951  0025CC                     _CMP1_offset:
  3952                           	opt stack 0
  3953                           
  3954                           ; BSR set to: 15
  3955                           ;incstack = 0
  3956                           ;CMP1_offset@OFFSET stored from wreg
  3957  0025CC  6E02               	movwf	CMP1_offset@OFFSET,c
  3958                           
  3959                           ;periph.c: 433: tmp=CMP1CON2&0XF8;
  3960  0025CE  010F               	movlb	15	; () banked
  3961  0025D0  5132               	movf	50,w,b	;volatile
  3962  0025D2  0BF8               	andlw	248
  3963  0025D4  6E03               	movwf	CMP1_offset@tmp,c
  3964                           
  3965                           ;periph.c: 434: CMP1CON2= tmp|OFFSET;
  3966  0025D6  5003               	movf	CMP1_offset@tmp,w,c
  3967  0025D8  1002               	iorwf	CMP1_offset@OFFSET,w,c
  3968  0025DA  6F32               	movwf	50,b	;volatile
  3969                           
  3970                           ; BSR set to: 15
  3971  0025DC  0012               	return		;funcret
  3972  0025DE                     __end_of_CMP1_offset:
  3973                           	opt stack 0
  3974                           tblptru	equ	0xFF8
  3975                           tblptrh	equ	0xFF7
  3976                           tblptrl	equ	0xFF6
  3977                           tablat	equ	0xFF5
  3978                           prodh	equ	0xFF4
  3979                           prodl	equ	0xFF3
  3980                           intcon	equ	0xFF2
  3981                           postinc0	equ	0xFEE
  3982                           wreg	equ	0xFE8
  3983                           postdec1	equ	0xFE5
  3984                           fsr1l	equ	0xFE1
  3985                           indf2	equ	0xFDF
  3986                           postinc2	equ	0xFDE
  3987                           postdec2	equ	0xFDD
  3988                           fsr2h	equ	0xFDA
  3989                           fsr2l	equ	0xFD9
  3990                           status	equ	0xFD8
  3991                           
  3992 ;; *************** function _CMP0_cal *****************
  3993 ;; Defined at:
  3994 ;;		line 367 in file ".\src\periph.c"
  3995 ;; Parameters:    Size  Location     Type
  3996 ;;		None
  3997 ;; Auto vars:     Size  Location     Type
  3998 ;;  i               1   13[COMRAM] unsigned char 
  3999 ;;  start           1   12[COMRAM] unsigned char 
  4000 ;;  VOOS1           1   11[COMRAM] unsigned char 
  4001 ;; Return value:  Size  Location     Type
  4002 ;;                  1    wreg      void 
  4003 ;; Registers used:
  4004 ;;		wreg, status,2, status,0, cstack
  4005 ;; Tracked objects:
  4006 ;;		On entry : 0/F
  4007 ;;		On exit  : 3F/F
  4008 ;;		Unchanged: 0/0
  4009 ;; Data sizes:     COMRAM   BANK0   BANK1
  4010 ;;      Params:         0       0       0
  4011 ;;      Locals:         3       0       0
  4012 ;;      Temps:          2       0       0
  4013 ;;      Totals:         5       0       0
  4014 ;;Total ram usage:        5 bytes
  4015 ;; Hardware stack levels used:    1
  4016 ;; Hardware stack levels required when called:    4
  4017 ;; This function calls:
  4018 ;;		_CMP0_offset
  4019 ;;		___awdiv
  4020 ;; This function is called by:
  4021 ;;		_cmp_init
  4022 ;; This function uses a non-reentrant model
  4023 ;;
  4024                           
  4025                           	psect	text14
  4026  001662                     __ptext14:
  4027                           	opt stack 0
  4028  001662                     _CMP0_cal:
  4029                           	opt stack 0
  4030                           
  4031                           ;periph.c: 369: unsigned char VOOS1 = 0,start = 0;
  4032                           
  4033                           ; BSR set to: 15
  4034                           ;incstack = 0
  4035  001662  6A0C               	clrf	CMP0_cal@VOOS1,c
  4036                           
  4037                           ;periph.c: 370: unsigned char i = 0;
  4038  001664  6A0E               	clrf	CMP0_cal@i,c
  4039                           
  4040                           ;periph.c: 372: CMP0CON2|=0x10;
  4041  001666  010F               	movlb	15	; () banked
  4042  001668  8933               	bsf	51,4,b	;volatile
  4043                           
  4044                           ; BSR set to: 15
  4045                           ;periph.c: 374: CMP0_offset(0);
  4046  00166A  0E00               	movlw	0
  4047  00166C  ECEF  F012         	call	_CMP0_offset
  4048                           
  4049                           ; BSR set to: 15
  4050                           ;periph.c: 375: _delay((unsigned long)((500)*(16000000/4000000.0)));
  4051  001670  0E03               	movlw	3
  4052  001672  6E0A               	movwf	??_CMP0_cal& (0+255),c
  4053  001674  0E98               	movlw	152
  4054  001676                     u7457:
  4055  001676  2EE8               	decfsz	wreg,f,c
  4056  001678  D7FE               	bra	u7457
  4057  00167A  2E0A               	decfsz	??_CMP0_cal& (0+255),f,c
  4058  00167C  D7FC               	bra	u7457
  4059                           
  4060                           ;periph.c: 376: start =CMP0OUT;
  4061  00167E  0E00               	movlw	0
  4062  001680  010F               	movlb	15	; () banked
  4063  001682  BD78               	btfsc	120,6,b	;volatile
  4064  001684  0E01               	movlw	1
  4065  001686  6E0D               	movwf	CMP0_cal@start,c
  4066                           
  4067                           ; BSR set to: 15
  4068                           ;periph.c: 378: if(start == 1)
  4069  001688  040D               	decf	CMP0_cal@start,w,c
  4070  00168A  E102               	bnz	l32399
  4071                           
  4072                           ; BSR set to: 15
  4073                           ;periph.c: 379: {
  4074                           ;periph.c: 380: CMP0CON2 &= 0XF7;
  4075  00168C  9733               	bcf	51,3,b	;volatile
  4076                           
  4077                           ;periph.c: 381: }
  4078  00168E  D001               	goto	l32401
  4079  001690                     l32399:
  4080                           
  4081                           ; BSR set to: 15
  4082                           ;periph.c: 382: else
  4083                           ;periph.c: 383: {
  4084                           ;periph.c: 384: CMP0CON2 |= 0X08;
  4085  001690  8733               	bsf	51,3,b	;volatile
  4086  001692                     l32401:
  4087                           
  4088                           ; BSR set to: 15
  4089                           ;periph.c: 385: }
  4090                           ;periph.c: 387: for(i=0;i<=7;i++)
  4091  001692  6A0E               	clrf	CMP0_cal@i,c
  4092  001694                     l32407:
  4093                           
  4094                           ; BSR set to: 15
  4095                           ;periph.c: 388: {
  4096                           ;periph.c: 389: CMP0_offset(i);
  4097  001694  500E               	movf	CMP0_cal@i,w,c
  4098  001696  ECEF  F012         	call	_CMP0_offset
  4099                           
  4100                           ; BSR set to: 15
  4101                           ;periph.c: 390: _delay((unsigned long)((500)*(16000000/4000000.0)));
  4102  00169A  0E03               	movlw	3
  4103  00169C  6E0A               	movwf	??_CMP0_cal& (0+255),c
  4104  00169E  0E98               	movlw	152
  4105  0016A0                     u7467:
  4106  0016A0  2EE8               	decfsz	wreg,f,c
  4107  0016A2  D7FE               	bra	u7467
  4108  0016A4  2E0A               	decfsz	??_CMP0_cal& (0+255),f,c
  4109  0016A6  D7FC               	bra	u7467
  4110                           
  4111                           ;periph.c: 392: if(CMP0OUT != start)
  4112  0016A8  0E00               	movlw	0
  4113  0016AA  010F               	movlb	15	; () banked
  4114  0016AC  BD78               	btfsc	120,6,b	;volatile
  4115  0016AE  0E01               	movlw	1
  4116  0016B0  180D               	xorwf	CMP0_cal@start,w,c
  4117  0016B2  E003               	bz	l32415
  4118                           
  4119                           ; BSR set to: 15
  4120                           ;periph.c: 393: {
  4121                           ;periph.c: 395: VOOS1 = i;
  4122  0016B4  C00E  F00C         	movff	CMP0_cal@i,CMP0_cal@VOOS1
  4123                           
  4124                           ;periph.c: 396: break;
  4125  0016B8  D004               	goto	l32419
  4126  0016BA                     l32415:
  4127                           
  4128                           ; BSR set to: 15
  4129  0016BA  2A0E               	incf	CMP0_cal@i,f,c
  4130                           
  4131                           ; BSR set to: 15
  4132  0016BC  0E07               	movlw	7
  4133  0016BE  640E               	cpfsgt	CMP0_cal@i,c
  4134  0016C0  D7E9               	goto	l32407
  4135  0016C2                     l32419:
  4136                           
  4137                           ; BSR set to: 15
  4138                           ;periph.c: 397: }
  4139                           ;periph.c: 398: }
  4140                           ;periph.c: 400: CMP0_offset(7);
  4141  0016C2  0E07               	movlw	7
  4142  0016C4  ECEF  F012         	call	_CMP0_offset
  4143                           
  4144                           ; BSR set to: 15
  4145                           ;periph.c: 401: _delay((unsigned long)((500)*(16000000/4000000.0)));
  4146  0016C8  0E03               	movlw	3
  4147  0016CA  6E0A               	movwf	??_CMP0_cal& (0+255),c
  4148  0016CC  0E98               	movlw	152
  4149  0016CE                     u7477:
  4150  0016CE  2EE8               	decfsz	wreg,f,c
  4151  0016D0  D7FE               	bra	u7477
  4152  0016D2  2E0A               	decfsz	??_CMP0_cal& (0+255),f,c
  4153  0016D4  D7FC               	bra	u7477
  4154                           
  4155                           ;periph.c: 402: start = CMP0OUT;
  4156  0016D6  0E00               	movlw	0
  4157  0016D8  010F               	movlb	15	; () banked
  4158  0016DA  BD78               	btfsc	120,6,b	;volatile
  4159  0016DC  0E01               	movlw	1
  4160  0016DE  6E0D               	movwf	CMP0_cal@start,c
  4161                           
  4162                           ; BSR set to: 15
  4163                           ;periph.c: 403: for(i=8;i>0;i--)
  4164  0016E0  0E08               	movlw	8
  4165  0016E2  6E0E               	movwf	CMP0_cal@i,c
  4166  0016E4                     l32431:
  4167                           
  4168                           ; BSR set to: 15
  4169                           ;periph.c: 404: {
  4170                           ;periph.c: 405: CMP0_offset(i-1);
  4171  0016E4  040E               	decf	CMP0_cal@i,w,c
  4172  0016E6  ECEF  F012         	call	_CMP0_offset
  4173                           
  4174                           ; BSR set to: 15
  4175                           ;periph.c: 406: _delay((unsigned long)((500)*(16000000/4000000.0)));
  4176  0016EA  0E03               	movlw	3
  4177  0016EC  6E0A               	movwf	??_CMP0_cal& (0+255),c
  4178  0016EE  0E98               	movlw	152
  4179  0016F0                     u7487:
  4180  0016F0  2EE8               	decfsz	wreg,f,c
  4181  0016F2  D7FE               	bra	u7487
  4182  0016F4  2E0A               	decfsz	??_CMP0_cal& (0+255),f,c
  4183  0016F6  D7FC               	bra	u7487
  4184                           
  4185                           ;periph.c: 408: if(CMP0OUT != start)
  4186  0016F8  0E00               	movlw	0
  4187  0016FA  010F               	movlb	15	; () banked
  4188  0016FC  BD78               	btfsc	120,6,b	;volatile
  4189  0016FE  0E01               	movlw	1
  4190  001700  180D               	xorwf	CMP0_cal@start,w,c
  4191  001702  E015               	bz	l32439
  4192                           
  4193                           ; BSR set to: 15
  4194                           ;periph.c: 409: {
  4195                           ;periph.c: 411: VOOS1 =(VOOS1+ i-1)/2;
  4196  001704  500E               	movf	CMP0_cal@i,w,c
  4197  001706  C00C  F00A         	movff	CMP0_cal@VOOS1,??_CMP0_cal
  4198  00170A  6A0B               	clrf	(??_CMP0_cal+1)& (0+255),c
  4199  00170C  260A               	addwf	??_CMP0_cal,f,c
  4200  00170E  0E00               	movlw	0
  4201  001710  220B               	addwfc	??_CMP0_cal+1,f,c
  4202  001712  0EFF               	movlw	255
  4203  001714  240A               	addwf	??_CMP0_cal,w,c
  4204  001716  6E02               	movwf	___awdiv@dividend,c
  4205  001718  0EFF               	movlw	255
  4206  00171A  200B               	addwfc	??_CMP0_cal+1,w,c
  4207  00171C  6E03               	movwf	___awdiv@dividend+1,c
  4208  00171E  6A05               	clrf	___awdiv@divisor+1,c
  4209  001720  0E02               	movlw	2
  4210  001722  6E04               	movwf	___awdiv@divisor,c
  4211  001724  EC37  F00F         	call	___awdiv	;wreg free
  4212  001728  5002               	movf	?___awdiv,w,c
  4213  00172A  6E0C               	movwf	CMP0_cal@VOOS1,c
  4214                           
  4215                           ;periph.c: 412: break;
  4216  00172C  D003               	goto	l32443
  4217  00172E                     l32439:
  4218                           
  4219                           ; BSR set to: 15
  4220  00172E  060E               	decf	CMP0_cal@i,f,c
  4221                           
  4222                           ; BSR set to: 15
  4223  001730  500E               	movf	CMP0_cal@i,w,c
  4224  001732  E1D8               	bnz	l32431
  4225  001734                     l32443:
  4226                           
  4227                           ; BSR set to: 15
  4228                           ;periph.c: 413: }
  4229                           ;periph.c: 414: }
  4230                           ;periph.c: 418: CMP0_offset(VOOS1);
  4231  001734  500C               	movf	CMP0_cal@VOOS1,w,c
  4232  001736  ECEF  F012         	call	_CMP0_offset
  4233                           
  4234                           ; BSR set to: 15
  4235                           ;periph.c: 419: CMP0CON2&=0XEF;
  4236  00173A  9933               	bcf	51,4,b	;volatile
  4237                           
  4238                           ; BSR set to: 15
  4239  00173C  0012               	return		;funcret
  4240  00173E                     __end_of_CMP0_cal:
  4241                           	opt stack 0
  4242                           tblptru	equ	0xFF8
  4243                           tblptrh	equ	0xFF7
  4244                           tblptrl	equ	0xFF6
  4245                           tablat	equ	0xFF5
  4246                           prodh	equ	0xFF4
  4247                           prodl	equ	0xFF3
  4248                           intcon	equ	0xFF2
  4249                           postinc0	equ	0xFEE
  4250                           wreg	equ	0xFE8
  4251                           postdec1	equ	0xFE5
  4252                           fsr1l	equ	0xFE1
  4253                           indf2	equ	0xFDF
  4254                           postinc2	equ	0xFDE
  4255                           postdec2	equ	0xFDD
  4256                           fsr2h	equ	0xFDA
  4257                           fsr2l	equ	0xFD9
  4258                           status	equ	0xFD8
  4259                           
  4260 ;; *************** function ___awdiv *****************
  4261 ;; Defined at:
  4262 ;;		line 8 in file "c:\Users\Administrator\.vscode\extensions\ad.adide-1.1.4\resource\Microchip\xc8\v1.41\sources\common
      +\awdiv.c"
  4263 ;; Parameters:    Size  Location     Type
  4264 ;;  dividend        2    1[COMRAM] int 
  4265 ;;  divisor         2    3[COMRAM] int 
  4266 ;; Auto vars:     Size  Location     Type
  4267 ;;  quotient        2    7[COMRAM] int 
  4268 ;;  sign            1    6[COMRAM] unsigned char 
  4269 ;;  counter         1    5[COMRAM] unsigned char 
  4270 ;; Return value:  Size  Location     Type
  4271 ;;                  2    1[COMRAM] int 
  4272 ;; Registers used:
  4273 ;;		wreg, status,2, status,0
  4274 ;; Tracked objects:
  4275 ;;		On entry : 3F/F
  4276 ;;		On exit  : 3F/F
  4277 ;;		Unchanged: 3E/0
  4278 ;; Data sizes:     COMRAM   BANK0   BANK1
  4279 ;;      Params:         4       0       0
  4280 ;;      Locals:         4       0       0
  4281 ;;      Temps:          0       0       0
  4282 ;;      Totals:         8       0       0
  4283 ;;Total ram usage:        8 bytes
  4284 ;; Hardware stack levels used:    1
  4285 ;; Hardware stack levels required when called:    3
  4286 ;; This function calls:
  4287 ;;		Nothing
  4288 ;; This function is called by:
  4289 ;;		_FVR_CAL
  4290 ;;		_CMP0_cal
  4291 ;;		_CMP1_cal
  4292 ;; This function uses a non-reentrant model
  4293 ;;
  4294                           
  4295                           	psect	text15
  4296  001E6E                     __ptext15:
  4297                           	opt stack 0
  4298  001E6E                     ___awdiv:
  4299                           	opt stack 2
  4300                           
  4301                           ; BSR set to: 15
  4302                           
  4303                           ; BSR set to: 15
  4304                           ;incstack = 0
  4305  001E6E  6A07               	clrf	___awdiv@sign,c
  4306                           
  4307                           ; BSR set to: 15
  4308  001E70  AE05               	btfss	___awdiv@divisor+1,7,c
  4309  001E72  D006               	goto	l32241
  4310                           
  4311                           ; BSR set to: 15
  4312  001E74  6C04               	negf	___awdiv@divisor,c
  4313  001E76  1E05               	comf	___awdiv@divisor+1,f,c
  4314  001E78  B0D8               	btfsc	status,0,c
  4315  001E7A  2A05               	incf	___awdiv@divisor+1,f,c
  4316                           
  4317                           ; BSR set to: 15
  4318  001E7C  0E01               	movlw	1
  4319  001E7E  6E07               	movwf	___awdiv@sign,c
  4320  001E80                     l32241:
  4321                           
  4322                           ; BSR set to: 15
  4323  001E80  AE03               	btfss	___awdiv@dividend+1,7,c
  4324  001E82  D006               	goto	l32247
  4325                           
  4326                           ; BSR set to: 15
  4327  001E84  6C02               	negf	___awdiv@dividend,c
  4328  001E86  1E03               	comf	___awdiv@dividend+1,f,c
  4329  001E88  B0D8               	btfsc	status,0,c
  4330  001E8A  2A03               	incf	___awdiv@dividend+1,f,c
  4331                           
  4332                           ; BSR set to: 15
  4333  001E8C  0E01               	movlw	1
  4334  001E8E  1A07               	xorwf	___awdiv@sign,f,c
  4335  001E90                     l32247:
  4336                           
  4337                           ; BSR set to: 15
  4338  001E90  6A08               	clrf	___awdiv@quotient,c
  4339  001E92  6A09               	clrf	___awdiv@quotient+1,c
  4340                           
  4341                           ; BSR set to: 15
  4342  001E94  5004               	movf	___awdiv@divisor,w,c
  4343  001E96  1005               	iorwf	___awdiv@divisor+1,w,c
  4344  001E98  E01B               	bz	l32269
  4345                           
  4346                           ; BSR set to: 15
  4347  001E9A  0E01               	movlw	1
  4348  001E9C  6E06               	movwf	___awdiv@counter,c
  4349  001E9E  D004               	goto	l32255
  4350  001EA0                     l32253:
  4351                           
  4352                           ; BSR set to: 15
  4353  001EA0  90D8               	bcf	status,0,c
  4354  001EA2  3604               	rlcf	___awdiv@divisor,f,c
  4355  001EA4  3605               	rlcf	___awdiv@divisor+1,f,c
  4356  001EA6  2A06               	incf	___awdiv@counter,f,c
  4357  001EA8                     l32255:
  4358                           
  4359                           ; BSR set to: 15
  4360  001EA8  AE05               	btfss	___awdiv@divisor+1,7,c
  4361  001EAA  D7FA               	goto	l32253
  4362  001EAC                     l32257:
  4363                           
  4364                           ; BSR set to: 15
  4365  001EAC  90D8               	bcf	status,0,c
  4366  001EAE  3608               	rlcf	___awdiv@quotient,f,c
  4367  001EB0  3609               	rlcf	___awdiv@quotient+1,f,c
  4368                           
  4369                           ; BSR set to: 15
  4370  001EB2  5004               	movf	___awdiv@divisor,w,c
  4371  001EB4  5C02               	subwf	___awdiv@dividend,w,c
  4372  001EB6  5005               	movf	___awdiv@divisor+1,w,c
  4373  001EB8  5803               	subwfb	___awdiv@dividend+1,w,c
  4374  001EBA  E305               	bnc	l32265
  4375                           
  4376                           ; BSR set to: 15
  4377  001EBC  5004               	movf	___awdiv@divisor,w,c
  4378  001EBE  5E02               	subwf	___awdiv@dividend,f,c
  4379  001EC0  5005               	movf	___awdiv@divisor+1,w,c
  4380  001EC2  5A03               	subwfb	___awdiv@dividend+1,f,c
  4381                           
  4382                           ; BSR set to: 15
  4383  001EC4  8008               	bsf	___awdiv@quotient,0,c
  4384  001EC6                     l32265:
  4385                           
  4386                           ; BSR set to: 15
  4387  001EC6  90D8               	bcf	status,0,c
  4388  001EC8  3205               	rrcf	___awdiv@divisor+1,f,c
  4389  001ECA  3204               	rrcf	___awdiv@divisor,f,c
  4390                           
  4391                           ; BSR set to: 15
  4392  001ECC  2E06               	decfsz	___awdiv@counter,f,c
  4393  001ECE  D7EE               	goto	l32257
  4394  001ED0                     l32269:
  4395                           
  4396                           ; BSR set to: 15
  4397  001ED0  5007               	movf	___awdiv@sign,w,c
  4398  001ED2  E004               	bz	l32273
  4399                           
  4400                           ; BSR set to: 15
  4401  001ED4  6C08               	negf	___awdiv@quotient,c
  4402  001ED6  1E09               	comf	___awdiv@quotient+1,f,c
  4403  001ED8  B0D8               	btfsc	status,0,c
  4404  001EDA  2A09               	incf	___awdiv@quotient+1,f,c
  4405  001EDC                     l32273:
  4406                           
  4407                           ; BSR set to: 15
  4408  001EDC  C008  F002         	movff	___awdiv@quotient,?___awdiv
  4409  001EE0  C009  F003         	movff	___awdiv@quotient+1,?___awdiv+1
  4410                           
  4411                           ; BSR set to: 15
  4412  001EE4  0012               	return		;funcret
  4413  001EE6                     __end_of___awdiv:
  4414                           	opt stack 0
  4415                           tblptru	equ	0xFF8
  4416                           tblptrh	equ	0xFF7
  4417                           tblptrl	equ	0xFF6
  4418                           tablat	equ	0xFF5
  4419                           prodh	equ	0xFF4
  4420                           prodl	equ	0xFF3
  4421                           intcon	equ	0xFF2
  4422                           postinc0	equ	0xFEE
  4423                           wreg	equ	0xFE8
  4424                           postdec1	equ	0xFE5
  4425                           fsr1l	equ	0xFE1
  4426                           indf2	equ	0xFDF
  4427                           postinc2	equ	0xFDE
  4428                           postdec2	equ	0xFDD
  4429                           fsr2h	equ	0xFDA
  4430                           fsr2l	equ	0xFD9
  4431                           status	equ	0xFD8
  4432                           
  4433 ;; *************** function _CMP0_offset *****************
  4434 ;; Defined at:
  4435 ;;		line 355 in file ".\src\periph.c"
  4436 ;; Parameters:    Size  Location     Type
  4437 ;;  OFFSET          1    wreg     unsigned char 
  4438 ;; Auto vars:     Size  Location     Type
  4439 ;;  OFFSET          1    1[COMRAM] unsigned char 
  4440 ;;  tmp             1    2[COMRAM] unsigned char 
  4441 ;; Return value:  Size  Location     Type
  4442 ;;                  1    wreg      void 
  4443 ;; Registers used:
  4444 ;;		wreg, status,2, status,0
  4445 ;; Tracked objects:
  4446 ;;		On entry : 0/F
  4447 ;;		On exit  : 3F/F
  4448 ;;		Unchanged: 0/0
  4449 ;; Data sizes:     COMRAM   BANK0   BANK1
  4450 ;;      Params:         0       0       0
  4451 ;;      Locals:         2       0       0
  4452 ;;      Temps:          0       0       0
  4453 ;;      Totals:         2       0       0
  4454 ;;Total ram usage:        2 bytes
  4455 ;; Hardware stack levels used:    1
  4456 ;; Hardware stack levels required when called:    3
  4457 ;; This function calls:
  4458 ;;		Nothing
  4459 ;; This function is called by:
  4460 ;;		_CMP0_cal
  4461 ;; This function uses a non-reentrant model
  4462 ;;
  4463                           
  4464                           	psect	text16
  4465  0025DE                     __ptext16:
  4466                           	opt stack 0
  4467  0025DE                     _CMP0_offset:
  4468                           	opt stack 0
  4469                           
  4470                           ; BSR set to: 15
  4471                           ;incstack = 0
  4472                           ;CMP0_offset@OFFSET stored from wreg
  4473  0025DE  6E02               	movwf	CMP0_offset@OFFSET,c
  4474                           
  4475                           ;periph.c: 358: tmp=CMP0CON2&0XF8;
  4476  0025E0  010F               	movlb	15	; () banked
  4477  0025E2  5133               	movf	51,w,b	;volatile
  4478  0025E4  0BF8               	andlw	248
  4479  0025E6  6E03               	movwf	CMP0_offset@tmp,c
  4480                           
  4481                           ;periph.c: 359: CMP0CON2= tmp|OFFSET;
  4482  0025E8  5003               	movf	CMP0_offset@tmp,w,c
  4483  0025EA  1002               	iorwf	CMP0_offset@OFFSET,w,c
  4484  0025EC  6F33               	movwf	51,b	;volatile
  4485                           
  4486                           ; BSR set to: 15
  4487  0025EE  0012               	return		;funcret
  4488  0025F0                     __end_of_CMP0_offset:
  4489                           	opt stack 0
  4490                           tblptru	equ	0xFF8
  4491                           tblptrh	equ	0xFF7
  4492                           tblptrl	equ	0xFF6
  4493                           tablat	equ	0xFF5
  4494                           prodh	equ	0xFF4
  4495                           prodl	equ	0xFF3
  4496                           intcon	equ	0xFF2
  4497                           postinc0	equ	0xFEE
  4498                           wreg	equ	0xFE8
  4499                           postdec1	equ	0xFE5
  4500                           fsr1l	equ	0xFE1
  4501                           indf2	equ	0xFDF
  4502                           postinc2	equ	0xFDE
  4503                           postdec2	equ	0xFDD
  4504                           fsr2h	equ	0xFDA
  4505                           fsr2l	equ	0xFD9
  4506                           status	equ	0xFD8
  4507                           
  4508 ;; *************** function _aip33626_init *****************
  4509 ;; Defined at:
  4510 ;;		line 32 in file ".\src\aip33626.c"
  4511 ;; Parameters:    Size  Location     Type
  4512 ;;		None
  4513 ;; Auto vars:     Size  Location     Type
  4514 ;;		None
  4515 ;; Return value:  Size  Location     Type
  4516 ;;                  1    wreg      void 
  4517 ;; Registers used:
  4518 ;;		wreg, status,2, status,0, cstack
  4519 ;; Tracked objects:
  4520 ;;		On entry : 3F/F
  4521 ;;		On exit  : 0/0
  4522 ;;		Unchanged: 0/0
  4523 ;; Data sizes:     COMRAM   BANK0   BANK1
  4524 ;;      Params:         0       0       0
  4525 ;;      Locals:         0       0       0
  4526 ;;      Temps:          0       0       0
  4527 ;;      Totals:         0       0       0
  4528 ;;Total ram usage:        0 bytes
  4529 ;; Hardware stack levels used:    1
  4530 ;; Hardware stack levels required when called:    5
  4531 ;; This function calls:
  4532 ;;		_aip33626_sendcmd
  4533 ;;		_myi2c_init
  4534 ;; This function is called by:
  4535 ;;		_main
  4536 ;;		_sleep_task
  4537 ;; This function uses a non-reentrant model
  4538 ;;
  4539                           
  4540                           	psect	text17
  4541  0025F0                     __ptext17:
  4542                           	opt stack 0
  4543  0025F0                     _aip33626_init:
  4544                           	opt stack 0
  4545                           
  4546                           ; BSR set to: 15
  4547                           ;aip33626.c: 35: myi2c_init();
  4548                           
  4549                           ; BSR set to: 15
  4550                           ;incstack = 0
  4551  0025F0  ECC7  F012         	call	_myi2c_init	;wreg free
  4552                           
  4553                           ;aip33626.c: 36: PC0=0;
  4554  0025F4  9082               	bcf	3970,0,c	;volatile
  4555                           
  4556                           ;aip33626.c: 37: aip33626_sendcmd(0x64);
  4557  0025F6  0E64               	movlw	100
  4558  0025F8  EC8F  F012         	call	_aip33626_sendcmd
  4559                           
  4560                           ;aip33626.c: 38: aip33626_sendcmd(0x86);
  4561  0025FC  0E86               	movlw	134
  4562  0025FE  EF8F  F012         	goto	_aip33626_sendcmd
  4563  002602                     __end_of_aip33626_init:
  4564                           	opt stack 0
  4565                           tblptru	equ	0xFF8
  4566                           tblptrh	equ	0xFF7
  4567                           tblptrl	equ	0xFF6
  4568                           tablat	equ	0xFF5
  4569                           prodh	equ	0xFF4
  4570                           prodl	equ	0xFF3
  4571                           intcon	equ	0xFF2
  4572                           postinc0	equ	0xFEE
  4573                           wreg	equ	0xFE8
  4574                           postdec1	equ	0xFE5
  4575                           fsr1l	equ	0xFE1
  4576                           indf2	equ	0xFDF
  4577                           postinc2	equ	0xFDE
  4578                           postdec2	equ	0xFDD
  4579                           fsr2h	equ	0xFDA
  4580                           fsr2l	equ	0xFD9
  4581                           status	equ	0xFD8
  4582                           
  4583 ;; *************** function _myi2c_init *****************
  4584 ;; Defined at:
  4585 ;;		line 28 in file ".\src\myi2c.c"
  4586 ;; Parameters:    Size  Location     Type
  4587 ;;		None
  4588 ;; Auto vars:     Size  Location     Type
  4589 ;;		None
  4590 ;; Return value:  Size  Location     Type
  4591 ;;                  1    wreg      void 
  4592 ;; Registers used:
  4593 ;;		None
  4594 ;; Tracked objects:
  4595 ;;		On entry : 3F/F
  4596 ;;		On exit  : 0/0
  4597 ;;		Unchanged: 0/0
  4598 ;; Data sizes:     COMRAM   BANK0   BANK1
  4599 ;;      Params:         0       0       0
  4600 ;;      Locals:         0       0       0
  4601 ;;      Temps:          0       0       0
  4602 ;;      Totals:         0       0       0
  4603 ;;Total ram usage:        0 bytes
  4604 ;; Hardware stack levels used:    1
  4605 ;; Hardware stack levels required when called:    3
  4606 ;; This function calls:
  4607 ;;		Nothing
  4608 ;; This function is called by:
  4609 ;;		_aip33626_init
  4610 ;; This function uses a non-reentrant model
  4611 ;;
  4612                           
  4613                           	psect	text18
  4614  00258E                     __ptext18:
  4615                           	opt stack 0
  4616  00258E                     _myi2c_init:
  4617                           	opt stack 1
  4618                           
  4619                           ; BSR set to: 15
  4620                           ;myi2c.c: 30: PC2=1;
  4621                           
  4622                           ;incstack = 0
  4623  00258E  8482               	bsf	3970,2,c	;volatile
  4624                           
  4625                           ;myi2c.c: 31: _delay((unsigned long)((2)*(16000000/4000000.0)));
  4626  002590  D000               	nop2		;2 cycle nop
  4627  002592  D000               	nop2		;2 cycle nop
  4628  002594  D000               	nop2		;2 cycle nop
  4629  002596  D000               	nop2		;2 cycle nop
  4630                           
  4631                           ;myi2c.c: 32: PC1=1;
  4632  002598  8282               	bsf	3970,1,c	;volatile
  4633                           
  4634                           ;myi2c.c: 33: _delay((unsigned long)((2)*(16000000/4000000.0)));
  4635  00259A  D000               	nop2		;2 cycle nop
  4636  00259C  D000               	nop2		;2 cycle nop
  4637  00259E  D000               	nop2		;2 cycle nop
  4638  0025A0  D000               	nop2		;2 cycle nop
  4639  0025A2  0012               	return		;funcret
  4640  0025A4                     __end_of_myi2c_init:
  4641                           	opt stack 0
  4642                           tblptru	equ	0xFF8
  4643                           tblptrh	equ	0xFF7
  4644                           tblptrl	equ	0xFF6
  4645                           tablat	equ	0xFF5
  4646                           prodh	equ	0xFF4
  4647                           prodl	equ	0xFF3
  4648                           intcon	equ	0xFF2
  4649                           postinc0	equ	0xFEE
  4650                           wreg	equ	0xFE8
  4651                           postdec1	equ	0xFE5
  4652                           fsr1l	equ	0xFE1
  4653                           indf2	equ	0xFDF
  4654                           postinc2	equ	0xFDE
  4655                           postdec2	equ	0xFDD
  4656                           fsr2h	equ	0xFDA
  4657                           fsr2l	equ	0xFD9
  4658                           status	equ	0xFD8
  4659                           
  4660 ;; *************** function _GPIO_Init *****************
  4661 ;; Defined at:
  4662 ;;		line 41 in file ".\src\periph.c"
  4663 ;; Parameters:    Size  Location     Type
  4664 ;;		None
  4665 ;; Auto vars:     Size  Location     Type
  4666 ;;		None
  4667 ;; Return value:  Size  Location     Type
  4668 ;;                  1    wreg      void 
  4669 ;; Registers used:
  4670 ;;		wreg, status,2
  4671 ;; Tracked objects:
  4672 ;;		On entry : 0/0
  4673 ;;		On exit  : 3F/F
  4674 ;;		Unchanged: 0/0
  4675 ;; Data sizes:     COMRAM   BANK0   BANK1
  4676 ;;      Params:         0       0       0
  4677 ;;      Locals:         0       0       0
  4678 ;;      Temps:          0       0       0
  4679 ;;      Totals:         0       0       0
  4680 ;;Total ram usage:        0 bytes
  4681 ;; Hardware stack levels used:    1
  4682 ;; Hardware stack levels required when called:    3
  4683 ;; This function calls:
  4684 ;;		Nothing
  4685 ;; This function is called by:
  4686 ;;		_main
  4687 ;;		_sleep_task
  4688 ;; This function uses a non-reentrant model
  4689 ;;
  4690                           
  4691                           	psect	text19
  4692  00224C                     __ptext19:
  4693                           	opt stack 0
  4694  00224C                     _GPIO_Init:
  4695                           	opt stack 2
  4696                           
  4697                           ;periph.c: 44: OSCCON=0x70;
  4698                           
  4699                           ;incstack = 0
  4700  00224C  0E70               	movlw	112
  4701  00224E  010F               	movlb	15	; () banked
  4702  002250  6F64               	movwf	100,b	;volatile
  4703                           
  4704                           ;periph.c: 45: CLKCFG1=0x0f;
  4705  002252  0E0F               	movlw	15
  4706  002254  6F63               	movwf	99,b	;volatile
  4707                           
  4708                           ; BSR set to: 15
  4709                           ;periph.c: 47: PORTA = 0X00;
  4710  002256  6A80               	clrf	3968,c	;volatile
  4711                           
  4712                           ;periph.c: 48: PORTB = 0X08;
  4713  002258  0E08               	movlw	8
  4714  00225A  6E81               	movwf	3969,c	;volatile
  4715                           
  4716                           ;periph.c: 49: PORTC = 0X07;
  4717  00225C  0E07               	movlw	7
  4718  00225E  6E82               	movwf	3970,c	;volatile
  4719                           
  4720                           ;periph.c: 50: PORTD = 0X01;
  4721  002260  0E01               	movlw	1
  4722  002262  6E83               	movwf	3971,c	;volatile
  4723                           
  4724                           ;periph.c: 51: SMTA = 0xEF;
  4725  002264  0EEF               	movlw	239
  4726  002266  6E98               	movwf	3992,c	;volatile
  4727                           
  4728                           ;periph.c: 53: TRISA = 0X30;
  4729  002268  0E30               	movlw	48
  4730                           
  4731                           ;periph.c: 54: TRISB = 0X03;
  4732                           
  4733                           ;periph.c: 55: TRISC = 0X08;
  4734                           
  4735                           ;periph.c: 56: TRISD = 0X04;
  4736  00226A  EC6A  F00E         	call	PL54	;call to abstracted procedure
  4737                           
  4738                           ; BSR set to: 15
  4739                           ;periph.c: 59: PAPD = 0XFF;
  4740  00226E  688C               	setf	3980,c	;volatile
  4741                           
  4742                           ; BSR set to: 15
  4743                           ;periph.c: 60: PBPD = 0XFF;
  4744                           
  4745                           ;periph.c: 61: PCPD = 0XF7;
  4746                           
  4747                           ; BSR set to: 15
  4748                           ;periph.c: 62: PDPD = 0XFF;
  4749  002270  EC72  F00E         	call	PL82	;call to abstracted procedure
  4750                           
  4751                           ;periph.c: 64: PAPU = 0XdF;
  4752  002274  0EDF               	movlw	223
  4753  002276  6E84               	movwf	3972,c	;volatile
  4754                           
  4755                           ;periph.c: 65: PBPU = 0XFC;
  4756  002278  0EFC               	movlw	252
  4757  00227A  6E85               	movwf	3973,c	;volatile
  4758                           
  4759                           ; BSR set to: 15
  4760                           ;periph.c: 66: PCPU = 0XFF;
  4761  00227C  6886               	setf	3974,c	;volatile
  4762                           
  4763                           ;periph.c: 67: PDPU = 0XFb;
  4764  00227E  0EFB               	movlw	251
  4765  002280  6E87               	movwf	3975,c	;volatile
  4766                           
  4767                           ; BSR set to: 15
  4768                           ;periph.c: 69: PAOD = 0X00;
  4769  002282  6A94               	clrf	3988,c	;volatile
  4770                           
  4771                           ; BSR set to: 15
  4772                           ;periph.c: 70: PBOD = 0X00;
  4773  002284  6A95               	clrf	3989,c	;volatile
  4774                           
  4775                           ;periph.c: 71: PCOD = 0X06;
  4776  002286  0E06               	movlw	6
  4777  002288  6E96               	movwf	3990,c	;volatile
  4778                           
  4779                           ; BSR set to: 15
  4780                           ;periph.c: 72: PDOD = 0X00;
  4781  00228A  6A97               	clrf	3991,c	;volatile
  4782                           
  4783                           ; BSR set to: 15
  4784                           ;periph.c: 74: ANASEL0 = 0X00;
  4785  00228C  6B54               	clrf	84,b	;volatile
  4786                           
  4787                           ;periph.c: 75: ANASEL1 = 0X03;
  4788  00228E  0E03               	movlw	3
  4789  002290  6F53               	movwf	83,b	;volatile
  4790                           
  4791                           ; BSR set to: 15
  4792                           ;periph.c: 76: ANASEL2 = 0X00;
  4793  002292  6B52               	clrf	82,b	;volatile
  4794                           
  4795                           ; BSR set to: 15
  4796                           ;periph.c: 77: ANASEL3 = 0X00;
  4797  002294  6B0D               	clrf	13,b	;volatile
  4798                           
  4799                           ; BSR set to: 15
  4800  002296  0012               	return		;funcret
  4801  002298                     __end_of_GPIO_Init:
  4802                           	opt stack 0
  4803                           tblptru	equ	0xFF8
  4804                           tblptrh	equ	0xFF7
  4805                           tblptrl	equ	0xFF6
  4806                           tablat	equ	0xFF5
  4807                           prodh	equ	0xFF4
  4808                           prodl	equ	0xFF3
  4809                           intcon	equ	0xFF2
  4810                           postinc0	equ	0xFEE
  4811                           wreg	equ	0xFE8
  4812                           postdec1	equ	0xFE5
  4813                           fsr1l	equ	0xFE1
  4814                           indf2	equ	0xFDF
  4815                           postinc2	equ	0xFDE
  4816                           postdec2	equ	0xFDD
  4817                           fsr2h	equ	0xFDA
  4818                           fsr2l	equ	0xFD9
  4819                           status	equ	0xFD8
  4820                           
  4821 ;; *************** function _si_mic_task *****************
  4822 ;; Defined at:
  4823 ;;		line 28 in file ".\src\si_mic.c"
  4824 ;; Parameters:    Size  Location     Type
  4825 ;;  task_           1   55[COMRAM] PTR struct task
  4826 ;;		 -> task_list(80), 
  4827 ;; Auto vars:     Size  Location     Type
  4828 ;;  temp            2   57[COMRAM] unsigned short 
  4829 ;;  tt              4   59[COMRAM] unsigned long 
  4830 ;; Return value:  Size  Location     Type
  4831 ;;                  1    wreg      void 
  4832 ;; Registers used:
  4833 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4834 ;; Tracked objects:
  4835 ;;		On entry : 0/0
  4836 ;;		On exit  : 0/0
  4837 ;;		Unchanged: 0/0
  4838 ;; Data sizes:     COMRAM   BANK0   BANK1
  4839 ;;      Params:         1       0       0
  4840 ;;      Locals:         6       0       0
  4841 ;;      Temps:          1       0       0
  4842 ;;      Totals:         8       0       0
  4843 ;;Total ram usage:        8 bytes
  4844 ;; Hardware stack levels used:    1
  4845 ;; Hardware stack levels required when called:    5
  4846 ;; This function calls:
  4847 ;;		___ftadd
  4848 ;;		___ftmul
  4849 ;;		___fttol
  4850 ;;		___lbtoft
  4851 ;;		___lldiv
  4852 ;;		___lltoft
  4853 ;;		___lmul
  4854 ;;		_add_task_id
  4855 ;;		_pwm_init
  4856 ;;		_timer0_cnt
  4857 ;; This function is called by:
  4858 ;;		_find_task
  4859 ;; This function uses a non-reentrant model
  4860 ;;
  4861                           
  4862                           	psect	text20
  4863  0002A2                     __ptext20:
  4864                           	opt stack 0
  4865  0002A2                     _si_mic_task:
  4866                           	opt stack 1
  4867                           
  4868                           ;si_mic.c: 30: if( sim_mic_o==1 && PINC3==0&&mode==0)
  4869                           
  4870                           ; BSR set to: 15
  4871                           ;incstack = 0
  4872  0002A2  0454               	decf	_sim_mic_o,w,c
  4873  0002A4  E10C               	bnz	l33705
  4874  0002A6  B68A               	btfsc	3978,3,c	;volatile
  4875  0002A8  D00A               	goto	l33705
  4876  0002AA  5069               	movf	_mode,w,c
  4877  0002AC  E108               	bnz	l33705
  4878                           
  4879                           ;si_mic.c: 31: {
  4880                           ;si_mic.c: 32: state_pwm_cnt++;
  4881  0002AE  2A52               	incf	_state_pwm_cnt,f,c
  4882                           
  4883                           ;si_mic.c: 33: if(state_pwm_cnt>=3)
  4884  0002B0  0E02               	movlw	2
  4885  0002B2  6452               	cpfsgt	_state_pwm_cnt,c
  4886  0002B4  D004               	goto	l33705
  4887                           
  4888                           ;si_mic.c: 34: {
  4889                           ;si_mic.c: 35: state_pwm++;
  4890  0002B6  2A53               	incf	_state_pwm,f,c
  4891                           
  4892                           ;si_mic.c: 36: state_pwm&=1;
  4893  0002B8  0E01               	movlw	1
  4894  0002BA  1653               	andwf	_state_pwm,f,c
  4895                           
  4896                           ;si_mic.c: 37: state_pwm_cnt=0;
  4897  0002BC  6A52               	clrf	_state_pwm_cnt,c
  4898  0002BE                     l33705:
  4899                           
  4900                           ;si_mic.c: 38: }
  4901                           ;si_mic.c: 39: }
  4902                           ;si_mic.c: 40: if(sim_mic_o==0 && PINC3==1)
  4903  0002BE  5054               	movf	_sim_mic_o,w,c
  4904  0002C0  E110               	bnz	l20308
  4905  0002C2  A68A               	btfss	3978,3,c	;volatile
  4906  0002C4  D00E               	goto	l20308
  4907                           
  4908                           ;si_mic.c: 41: {
  4909                           ;si_mic.c: 42: PB0AEN=0;
  4910                           
  4911                           ;si_mic.c: 43: PB1AEN=0;
  4912                           
  4913                           ;si_mic.c: 44: PB0PU=0;
  4914                           
  4915                           ;si_mic.c: 45: PB1PU=0;
  4916  0002C6  EC2B  F00B         	call	PL64	;call to abstracted procedure
  4917                           
  4918                           ;si_mic.c: 47: if(PINB0||PINB1)
  4919  0002CA  B089               	btfsc	3977,0,c	;volatile
  4920  0002CC  D002               	goto	l33713
  4921                           
  4922                           ; BSR set to: 15
  4923  0002CE  A289               	btfss	3977,1,c	;volatile
  4924  0002D0  D006               	goto	l33719
  4925  0002D2                     l33713:
  4926                           
  4927                           ; BSR set to: 15
  4928                           ;si_mic.c: 48: {
  4929                           ;si_mic.c: 50: dl0_flag=1;
  4930  0002D2  0E01               	movlw	1
  4931  0002D4  6E63               	movwf	_dl0_flag,c
  4932                           
  4933                           ; BSR set to: 15
  4934                           ;si_mic.c: 51: duty0=0;
  4935  0002D6  6A6F               	clrf	_duty0,c
  4936                           
  4937                           ; BSR set to: 15
  4938                           ;si_mic.c: 52: duty1=0;
  4939  0002D8  6A6E               	clrf	_duty1,c
  4940                           
  4941                           ;si_mic.c: 53: dl_init=1;
  4942  0002DA  0E01               	movlw	1
  4943  0002DC  6E59               	movwf	_dl_init,c
  4944  0002DE                     l33719:
  4945                           
  4946                           ; BSR set to: 15
  4947                           ;si_mic.c: 56: }
  4948                           ;si_mic.c: 57: PB0AEN=1;
  4949  0002DE  8153               	bsf	83,0,b	;volatile
  4950                           
  4951                           ; BSR set to: 15
  4952                           ;si_mic.c: 58: PB1AEN=1;
  4953  0002E0  8353               	bsf	83,1,b	;volatile
  4954  0002E2                     l20308:
  4955                           
  4956                           ;si_mic.c: 59: }
  4957                           ;si_mic.c: 61: sim_mic_o=PINC3;
  4958  0002E2  0E00               	movlw	0
  4959  0002E4  B68A               	btfsc	3978,3,c	;volatile
  4960  0002E6  0E01               	movlw	1
  4961  0002E8  6E54               	movwf	_sim_mic_o,c
  4962                           
  4963                           ;si_mic.c: 63: if(dl0_flag==1 || dl1_flag==1)
  4964  0002EA  0463               	decf	_dl0_flag,w,c
  4965  0002EC  E002               	bz	l33727
  4966  0002EE  0462               	decf	_dl1_flag,w,c
  4967  0002F0  E11B               	bnz	l33749
  4968  0002F2                     l33727:
  4969                           
  4970                           ;si_mic.c: 64: {
  4971                           ;si_mic.c: 65: if(dl_init)
  4972  0002F2  5059               	movf	_dl_init,w,c
  4973  0002F4  E00B               	bz	l33737
  4974                           
  4975                           ;si_mic.c: 66: {
  4976                           ;si_mic.c: 67: breath_state=3;
  4977  0002F6  0E03               	movlw	3
  4978  0002F8  6E7A               	movwf	_breath_state,c
  4979                           
  4980                           ;si_mic.c: 68: state_key=2;
  4981                           
  4982                           ;si_mic.c: 69: state_smo_det=3;
  4983                           
  4984                           ;si_mic.c: 70: state_chrg=3;
  4985  0002FA  D9BC               	call	PL48	;call to abstracted procedure
  4986                           
  4987                           ;si_mic.c: 72: task_list[aip33626_task_id].active=0;
  4988  0002FC  D997               	call	PL10	;call to abstracted procedure
  4989                           
  4990                           ;si_mic.c: 73: add_task_id(1,2,250,
  4991                           ;si_mic.c: 74: 10,aip33626_task_id);
  4992  0002FE  D9C0               	call	PL56	;call to abstracted procedure
  4993  000300  D990               	call	PL8	;call to abstracted procedure
  4994  000302  0E0A               	movlw	10
  4995  000304  D9AF               	call	PL22	;call to abstracted procedure
  4996  000306  ECD1  F00C         	call	_add_task_id
  4997                           
  4998                           ;si_mic.c: 75: dl_init=0;
  4999  00030A  6A59               	clrf	_dl_init,c
  5000  00030C                     l33737:
  5001                           
  5002                           ;si_mic.c: 76: }
  5003                           ;si_mic.c: 77: if(timer0_cnt(1008,1)==1)
  5004  00030C  D9C6               	call	PL86	;call to abstracted procedure
  5005  00030E  0E01               	movlw	1
  5006  000310  6E04               	movwf	timer0_cnt@lab,c
  5007  000312  EC4F  F010         	call	_timer0_cnt	;wreg free
  5008  000316  06E8               	decf	wreg,f,c
  5009  000318  E104               	bnz	l33743
  5010                           
  5011                           ;si_mic.c: 78: {
  5012                           ;si_mic.c: 79: dl0_flag=0;
  5013  00031A  6A63               	clrf	_dl0_flag,c
  5014                           
  5015                           ;si_mic.c: 80: dl1_flag=0;
  5016  00031C  6A62               	clrf	_dl1_flag,c
  5017  00031E                     l33741:
  5018                           
  5019                           ;si_mic.c: 81: breath_init=1;
  5020  00031E  0E01               	movlw	1
  5021  000320  6E72               	movwf	_breath_init,c
  5022  000322                     l33743:
  5023                           
  5024                           ;si_mic.c: 82: }
  5025                           ;si_mic.c: 83: duty0=0;
  5026  000322  6A6F               	clrf	_duty0,c
  5027                           
  5028                           ;si_mic.c: 84: duty1=0;
  5029  000324  6A6E               	clrf	_duty1,c
  5030  000326  0012               	return	
  5031  000328                     l33749:
  5032                           
  5033                           ;si_mic.c: 86: }
  5034                           ;si_mic.c: 89: if(smo_timerout)
  5035  000328  5055               	movf	_smo_timerout,w,c
  5036  00032A  E008               	bz	l20318
  5037                           
  5038                           ;si_mic.c: 90: {
  5039                           ;si_mic.c: 91: if(timer0_cnt(1008,0)==1)
  5040  00032C  D9B6               	call	PL86	;call to abstracted procedure
  5041  00032E  6A04               	clrf	timer0_cnt@lab,c
  5042  000330  EC4F  F010         	call	_timer0_cnt	;wreg free
  5043  000334  06E8               	decf	wreg,f,c
  5044  000336  E1F5               	bnz	l33743
  5045                           
  5046                           ;si_mic.c: 92: {
  5047                           ;si_mic.c: 93: smo_timerout=0;
  5048  000338  6A55               	clrf	_smo_timerout,c
  5049  00033A  D7F1               	goto	l33741
  5050  00033C                     l20318:
  5051                           
  5052                           ;si_mic.c: 100: }
  5053                           ;si_mic.c: 101: if(PINC3&&!PINA4)
  5054  00033C  B68A               	btfsc	3978,3,c	;volatile
  5055  00033E  B888               	btfsc	3976,4,c	;volatile
  5056  000340  D0D4               	goto	l20320
  5057                           
  5058                           ;si_mic.c: 102: {
  5059                           ;si_mic.c: 103: if(low_bat_flag==0)
  5060  000342  5061               	movf	_low_bat_flag,w,c
  5061  000344  E176               	bnz	l20321
  5062                           
  5063                           ;si_mic.c: 104: {
  5064                           ;si_mic.c: 105: u32 tt=409500/temp1;
  5065  000346  0E9C               	movlw	156
  5066  000348  6E02               	movwf	___lldiv@dividend,c
  5067  00034A  0E3F               	movlw	63
  5068  00034C  6E03               	movwf	___lldiv@dividend+1,c
  5069  00034E  0E06               	movlw	6
  5070  000350  6E04               	movwf	___lldiv@dividend+2,c
  5071  000352  6A05               	clrf	___lldiv@dividend+3,c
  5072  000354  C0DE  F006         	movff	_temp1,___lldiv@divisor
  5073  000358  C0DF  F007         	movff	_temp1+1,___lldiv@divisor+1
  5074  00035C  C0E0  F008         	movff	_temp1+2,___lldiv@divisor+2
  5075  000360  C0E1  F009         	movff	_temp1+3,___lldiv@divisor+3
  5076  000364  EC73  F00F         	call	___lldiv	;wreg free
  5077  000368  C002  F03C         	movff	?___lldiv,si_mic_task@tt
  5078  00036C  C003  F03D         	movff	?___lldiv+1,si_mic_task@tt+1
  5079  000370  C004  F03E         	movff	?___lldiv+2,si_mic_task@tt+2
  5080  000374  C005  F03F         	movff	?___lldiv+3,si_mic_task@tt+3
  5081                           
  5082                           ;si_mic.c: 106: tt+=30;
  5083  000378  0E1E               	movlw	30
  5084  00037A  263C               	addwf	si_mic_task@tt,f,c
  5085  00037C  0E00               	movlw	0
  5086  00037E  223D               	addwfc	si_mic_task@tt+1,f,c
  5087  000380  223E               	addwfc	si_mic_task@tt+2,f,c
  5088  000382  223F               	addwfc	si_mic_task@tt+3,f,c
  5089                           
  5090                           ;si_mic.c: 107: if(tt<=280)
  5091  000384  503F               	movf	si_mic_task@tt+3,w,c
  5092  000386  103E               	iorwf	si_mic_task@tt+2,w,c
  5093  000388  E109               	bnz	l33779
  5094  00038A  0E19               	movlw	25
  5095  00038C  5C3C               	subwf	si_mic_task@tt,w,c
  5096  00038E  0E01               	movlw	1
  5097  000390  583D               	subwfb	si_mic_task@tt+1,w,c
  5098  000392  E204               	bc	l33779
  5099                           
  5100                           ;si_mic.c: 108: {
  5101                           ;si_mic.c: 109: duty0=0;
  5102  000394  6A6F               	clrf	_duty0,c
  5103                           
  5104                           ;si_mic.c: 110: duty1=0;
  5105  000396  6A6E               	clrf	_duty1,c
  5106                           
  5107                           ;si_mic.c: 111: mode_dian=1;
  5108                           
  5109                           ;si_mic.c: 112: dian=1;
  5110                           
  5111                           ;si_mic.c: 113: low_bat_flag=1;
  5112  000398  EF2C  F00E         	goto	PL72	;call to abstracted procedure
  5113  00039C                     l33779:
  5114                           
  5115                           ;si_mic.c: 115: }
  5116                           ;si_mic.c: 117: tt*=tt;
  5117  00039C  C03C  F002         	movff	si_mic_task@tt,___lmul@multiplier
  5118  0003A0  C03D  F003         	movff	si_mic_task@tt+1,___lmul@multiplier+1
  5119  0003A4  C03E  F004         	movff	si_mic_task@tt+2,___lmul@multiplier+2
  5120  0003A8  C03F  F005         	movff	si_mic_task@tt+3,___lmul@multiplier+3
  5121  0003AC  C03C  F006         	movff	si_mic_task@tt,___lmul@multiplicand
  5122  0003B0  C03D  F007         	movff	si_mic_task@tt+1,___lmul@multiplicand+1
  5123  0003B4  C03E  F008         	movff	si_mic_task@tt+2,___lmul@multiplicand+2
  5124  0003B8  C03F  F009         	movff	si_mic_task@tt+3,___lmul@multiplicand+3
  5125  0003BC  EC4C  F011         	call	___lmul	;wreg free
  5126  0003C0  C002  F03C         	movff	?___lmul,si_mic_task@tt
  5127  0003C4  C003  F03D         	movff	?___lmul+1,si_mic_task@tt+1
  5128  0003C8  C004  F03E         	movff	?___lmul+2,si_mic_task@tt+2
  5129  0003CC  C005  F03F         	movff	?___lmul+3,si_mic_task@tt+3
  5130                           
  5131                           ;si_mic.c: 118: if(mode==0)
  5132  0003D0  5069               	movf	_mode,w,c
  5133  0003D2  E11F               	bnz	l33789
  5134                           
  5135                           ;si_mic.c: 119: {
  5136                           ;si_mic.c: 120: p0=p[0]/(tt);
  5137  0003D4  0E99               	movlw	low _p
  5138  0003D6  6EF6               	movwf	tblptrl,c
  5139  0003D8                     	if	1	;There is more than 1 active tblptr byte
  5140  0003D8  0E02               	movlw	high _p
  5141  0003DA  6EF7               	movwf	tblptrh,c
  5142  0003DC                     	endif
  5143  0003DC                     	if	0	;There are less than 3 active tblptr bytes
  5144  0003DC  D90D               	call	PL6	;call to abstracted procedure
  5145  0003DE  EC73  F00F         	call	___lldiv	;wreg free
  5146  0003E2  D956               	call	PL84	;call to abstracted procedure
  5147                           
  5148                           ;si_mic.c: 121: p1=p[1]/(tt);
  5149  0003E4  D93A               	call	PL20	;call to abstracted procedure
  5150  0003E6  D908               	call	PL6	;call to abstracted procedure
  5151  0003E8  EC73  F00F         	call	___lldiv	;wreg free
  5152  0003EC  C002  F045         	movff	?___lldiv,_p1
  5153  0003F0  C003  F046         	movff	?___lldiv+1,_p1+1
  5154                           
  5155                           ;si_mic.c: 122: if(state_pwm==1)
  5156  0003F4  0453               	decf	_state_pwm,w,c
  5157  0003F6  E116               	bnz	l33793
  5158                           
  5159                           ;si_mic.c: 123: {
  5160                           ;si_mic.c: 124: u16 temp=p0;
  5161  0003F8  C047  F03A         	movff	_p0,si_mic_task@temp
  5162  0003FC  C048  F03B         	movff	_p0+1,si_mic_task@temp+1
  5163                           
  5164                           ;si_mic.c: 125: p0=p1;
  5165  000400  C045  F047         	movff	_p1,_p0
  5166  000404  C046  F048         	movff	_p1+1,_p0+1
  5167                           
  5168                           ;si_mic.c: 126: p1=temp;
  5169  000408  C03A  F045         	movff	si_mic_task@temp,_p1
  5170  00040C  C03B  F046         	movff	si_mic_task@temp+1,_p1+1
  5171  000410  D009               	goto	l33793
  5172  000412                     l33789:
  5173                           
  5174                           ;si_mic.c: 129: else
  5175                           ;si_mic.c: 130: {
  5176                           ;si_mic.c: 131: p0=p[1]/(tt);
  5177  000412  D923               	call	PL20	;call to abstracted procedure
  5178  000414  D8F1               	call	PL6	;call to abstracted procedure
  5179  000416  EC73  F00F         	call	___lldiv	;wreg free
  5180  00041A  D93A               	call	PL84	;call to abstracted procedure
  5181                           
  5182                           ;si_mic.c: 132: p1=p0;
  5183  00041C  C047  F045         	movff	_p0,_p1
  5184  000420  C048  F046         	movff	_p0+1,_p1+1
  5185  000424                     l33793:
  5186                           
  5187                           ;si_mic.c: 133: }
  5188                           ;si_mic.c: 134: duty0=p0;
  5189  000424  C047  F06F         	movff	_p0,_duty0
  5190                           
  5191                           ;si_mic.c: 135: duty1=p1;
  5192  000428  C045  F06E         	movff	_p1,_duty1
  5193                           
  5194                           ;si_mic.c: 139: pwm_init();
  5195  00042C  EC7F  F010         	call	_pwm_init	;wreg free
  5196                           
  5197                           ;si_mic.c: 145: }
  5198  000430  D002               	goto	l33799
  5199  000432                     l20321:
  5200                           
  5201                           ;si_mic.c: 146: else
  5202                           ;si_mic.c: 147: {
  5203                           ;si_mic.c: 148: duty0=0;
  5204  000432  6A6F               	clrf	_duty0,c
  5205                           
  5206                           ;si_mic.c: 149: duty1=0;
  5207  000434  6A6E               	clrf	_duty1,c
  5208  000436                     l33799:
  5209                           
  5210                           ;si_mic.c: 150: }
  5211                           ;si_mic.c: 151: if(breath_init)
  5212  000436  5072               	movf	_breath_init,w,c
  5213  000438  E02E               	bz	l33835
  5214                           
  5215                           ;si_mic.c: 152: {
  5216                           ;si_mic.c: 153: breath_state=0;
  5217  00043A  6A7A               	clrf	_breath_state,c
  5218                           
  5219                           ;si_mic.c: 154: state_key=2;
  5220                           
  5221                           ;si_mic.c: 155: state_smo_det=3;
  5222                           
  5223                           ;si_mic.c: 156: state_chrg=3;
  5224  00043C  D91B               	call	PL48	;call to abstracted procedure
  5225  00043E  D02B               	goto	l33835
  5226  000440                     l33805:
  5227                           
  5228                           ;si_mic.c: 163: if(breath_init)
  5229  000440  5072               	movf	_breath_init,w,c
  5230  000442  E007               	bz	l33815
  5231                           
  5232                           ;si_mic.c: 164: {
  5233                           ;si_mic.c: 165: mode_sub=0;
  5234  000444  6A6D               	clrf	_mode_sub,c
  5235                           
  5236                           ;si_mic.c: 166: task_list[aip33626_task_id].active=0;
  5237  000446  D8F2               	call	PL10	;call to abstracted procedure
  5238                           
  5239                           ;si_mic.c: 167: add_task_id(1,3,
  5240                           ;si_mic.c: 168: 50,40,aip33626_task_id);
  5241  000448  0E03               	movlw	3
  5242  00044A  D8CB               	call	PL2	;call to abstracted procedure
  5243  00044C  ECD1  F00C         	call	_add_task_id
  5244                           
  5245                           ;si_mic.c: 169: breath_init=0;
  5246  000450  6A72               	clrf	_breath_init,c
  5247  000452                     l33815:
  5248                           
  5249                           ;si_mic.c: 170: }
  5250                           ;si_mic.c: 171: if(task_list[aip33626_task_id].active==0)
  5251  000452  5067               	movf	_aip33626_task_id,w,c
  5252  000454  D8F3               	call	PL12	;call to abstracted procedure
  5253  000456  E125               	bnz	l33837
  5254                           
  5255                           ;si_mic.c: 172: {
  5256                           ;si_mic.c: 173: mode_sub=2;
  5257  000458  0E02               	movlw	2
  5258                           
  5259                           ;si_mic.c: 174: breath_state=1;
  5260  00045A  D908               	call	PL26	;call to abstracted procedure
  5261                           
  5262                           ;si_mic.c: 175: add_task_id(1,4,
  5263                           ;si_mic.c: 176: 250,21,aip33626_task_id);
  5264  00045C  D8FB               	call	PL18	;call to abstracted procedure
  5265  00045E  D8E1               	call	PL8	;call to abstracted procedure
  5266  000460  0E15               	movlw	21
  5267  000462  D900               	call	PL22	;call to abstracted procedure
  5268  000464  ECD1  F00C         	call	_add_task_id
  5269  000468  D01C               	goto	l33837
  5270  00046A                     l33821:
  5271                           
  5272                           ;si_mic.c: 182: if(task_list[aip33626_task_id].active==0)
  5273  00046A  5067               	movf	_aip33626_task_id,w,c
  5274  00046C  D8E7               	call	PL12	;call to abstracted procedure
  5275  00046E  E119               	bnz	l33837
  5276                           
  5277                           ;si_mic.c: 183: {
  5278                           ;si_mic.c: 184: mode_sub=1;
  5279  000470  0E01               	movlw	1
  5280  000472  6E6D               	movwf	_mode_sub,c
  5281                           
  5282                           ;si_mic.c: 185: breath_state=2;
  5283  000474  0E02               	movlw	2
  5284  000476  6E7A               	movwf	_breath_state,c
  5285                           
  5286                           ;si_mic.c: 186: add_task_id(1,3,
  5287                           ;si_mic.c: 187: 50,40,aip33626_task_id);
  5288  000478  0E03               	movlw	3
  5289  00047A  D8B3               	call	PL2	;call to abstracted procedure
  5290  00047C  ECD1  F00C         	call	_add_task_id
  5291  000480  D010               	goto	l33837
  5292  000482                     l33827:
  5293                           
  5294                           ;si_mic.c: 192: if(task_list[aip33626_task_id].active==0)
  5295  000482  5067               	movf	_aip33626_task_id,w,c
  5296  000484  D8DB               	call	PL12	;call to abstracted procedure
  5297  000486  E10D               	bnz	l33837
  5298                           
  5299                           ;si_mic.c: 193: {
  5300                           ;si_mic.c: 194: mode_sub=0;
  5301  000488  6A6D               	clrf	_mode_sub,c
  5302                           
  5303                           ;si_mic.c: 195: breath_state=0;
  5304  00048A  6A7A               	clrf	_breath_state,c
  5305                           
  5306                           ;si_mic.c: 196: add_task_id(1,3,
  5307                           ;si_mic.c: 197: 50,40,aip33626_task_id);
  5308  00048C  0E03               	movlw	3
  5309  00048E  D8A9               	call	PL2	;call to abstracted procedure
  5310  000490  ECD1  F00C         	call	_add_task_id
  5311  000494  D006               	goto	l33837
  5312  000496                     l33835:
  5313  000496  507A               	movf	_breath_state,w,c
  5314                           
  5315                           ; Switch size 1, requested type "space"
  5316                           ; Number of cases is 3, Range of values is 0 to 2
  5317                           ; switch strategies available:
  5318                           ; Name         Instructions Cycles
  5319                           ; simple_byte           10     6 (average)
  5320                           ;	Chosen strategy is simple_byte
  5321  000498  E0D3               	bz	l33805
  5322  00049A  0A01               	xorlw	1	; case 1
  5323  00049C  E0E6               	bz	l33821
  5324  00049E  0A03               	xorlw	3	; case 2
  5325  0004A0  E0F0               	bz	l33827
  5326  0004A2                     l33837:
  5327                           
  5328                           ;si_mic.c: 204: task_->sucCnt++;
  5329  0004A2  5038               	movf	si_mic_task@task_,w,c
  5330  0004A4  D8D2               	call	PL14	;call to abstracted procedure
  5331  0004A6  2ADF               	incf	indf2,f,c
  5332                           
  5333                           ;si_mic.c: 205: if(task_->sucCnt>=200)
  5334  0004A8  5038               	movf	si_mic_task@task_,w,c
  5335  0004AA  D8CF               	call	PL14	;call to abstracted procedure
  5336  0004AC  0EC7               	movlw	199
  5337  0004AE  64DF               	cpfsgt	indf2,c
  5338  0004B0  D083               	goto	l33881
  5339                           
  5340                           ;si_mic.c: 206: {
  5341                           ;si_mic.c: 207: duty0=0;
  5342  0004B2  6A6F               	clrf	_duty0,c
  5343                           
  5344                           ;si_mic.c: 208: duty1=0;
  5345  0004B4  6A6E               	clrf	_duty1,c
  5346                           
  5347                           ;si_mic.c: 209: if(mode==0)
  5348  0004B6  5069               	movf	_mode,w,c
  5349  0004B8  E103               	bnz	l33845
  5350                           
  5351                           ;si_mic.c: 210: {
  5352                           ;si_mic.c: 211: you_cnt+=200;
  5353  0004BA  0EC8               	movlw	200
  5354  0004BC  D8E4               	call	PL78	;call to abstracted procedure
  5355  0004BE  D006               	goto	L2
  5356  0004C0                     l33845:
  5357                           
  5358                           ;si_mic.c: 213: else
  5359                           ;si_mic.c: 214: {
  5360                           ;si_mic.c: 215: you_cnt+=260;
  5361  0004C0  0E04               	movlw	4
  5362  0004C2  0100               	movlb	0	; () banked
  5363  0004C4  2780               	addwf	_you_cnt& (0+255),f,b
  5364  0004C6  0E01               	movlw	1
  5365  0004C8  2381               	addwfc	(_you_cnt+1)& (0+255),f,b
  5366  0004CA  0E00               	movlw	0
  5367  0004CC                     L2:
  5368  0004CC  2382               	addwfc	(_you_cnt+2)& (0+255),f,b
  5369  0004CE  2383               	addwfc	(_you_cnt+3)& (0+255),f,b
  5370                           
  5371                           ; BSR set to: 0
  5372                           ;si_mic.c: 216: }
  5373                           ;si_mic.c: 217: task_->sucCnt=0;
  5374  0004D0  5038               	movf	si_mic_task@task_,w,c
  5375  0004D2  D8BB               	call	PL14	;call to abstracted procedure
  5376  0004D4  6ADF               	clrf	indf2,c
  5377                           
  5378                           ; BSR set to: 0
  5379                           ;si_mic.c: 218: smo_timerout=1;
  5380  0004D6  0E01               	movlw	1
  5381  0004D8  6E55               	movwf	_smo_timerout,c
  5382                           
  5383                           ; BSR set to: 0
  5384                           ;si_mic.c: 219: task_list[aip33626_task_id].active=0;
  5385  0004DA  D8A8               	call	PL10	;call to abstracted procedure
  5386                           
  5387                           ; BSR set to: 0
  5388                           ;si_mic.c: 220: add_task_id(1,2,250,
  5389                           ;si_mic.c: 221: 20,aip33626_task_id);
  5390  0004DC  D8D1               	call	PL56	;call to abstracted procedure
  5391  0004DE  D8A1               	call	PL8	;call to abstracted procedure
  5392  0004E0  0E14               	movlw	20
  5393  0004E2  D8C0               	call	PL22	;call to abstracted procedure
  5394  0004E4  ECD1  F00C         	call	_add_task_id
  5395  0004E8  D067               	goto	l33881
  5396  0004EA                     l20320:
  5397                           
  5398                           ;si_mic.c: 225: else
  5399                           ;si_mic.c: 226: {
  5400                           ;si_mic.c: 227: duty0=0;
  5401  0004EA  6A6F               	clrf	_duty0,c
  5402                           
  5403                           ;si_mic.c: 228: duty1=0;
  5404  0004EC  6A6E               	clrf	_duty1,c
  5405                           
  5406                           ;si_mic.c: 229: if(mode==0)
  5407  0004EE  5069               	movf	_mode,w,c
  5408  0004F0  E107               	bnz	l33859
  5409                           
  5410                           ;si_mic.c: 230: {
  5411                           ;si_mic.c: 231: you_cnt+=task_->sucCnt;
  5412  0004F2  5038               	movf	si_mic_task@task_,w,c
  5413  0004F4  D8AA               	call	PL14	;call to abstracted procedure
  5414  0004F6  50DF               	movf	indf2,w,c
  5415  0004F8  D8C6               	call	PL78	;call to abstracted procedure
  5416  0004FA  2382               	addwfc	(_you_cnt+2)& (0+255),f,b
  5417  0004FC  2383               	addwfc	(_you_cnt+3)& (0+255),f,b
  5418                           
  5419                           ;si_mic.c: 232: }
  5420  0004FE  D03B               	goto	l33861
  5421  000500                     l33859:
  5422                           
  5423                           ;si_mic.c: 233: else
  5424                           ;si_mic.c: 234: {
  5425                           ;si_mic.c: 235: you_cnt+=task_->sucCnt*1.3f;
  5426  000500  0E66               	movlw	102
  5427  000502  6E11               	movwf	___ftmul@f2,c
  5428  000504  0EA6               	movlw	166
  5429  000506  6E12               	movwf	___ftmul@f2+1,c
  5430  000508  0E3F               	movlw	63
  5431  00050A  6E13               	movwf	___ftmul@f2+2,c
  5432  00050C  5038               	movf	si_mic_task@task_,w,c
  5433  00050E  D89D               	call	PL14	;call to abstracted procedure
  5434  000510  50DF               	movf	indf2,w,c
  5435  000512  EC1C  F012         	call	___lbtoft
  5436  000516  C00A  F00E         	movff	?___lbtoft,___ftmul@f1
  5437  00051A  C00B  F00F         	movff	?___lbtoft+1,___ftmul@f1+1
  5438  00051E  C00C  F010         	movff	?___lbtoft+2,___ftmul@f1+2
  5439  000522  EC0C  F00C         	call	___ftmul	;wreg free
  5440  000526  C00E  F020         	movff	?___ftmul,___ftadd@f2
  5441  00052A  C00F  F021         	movff	?___ftmul+1,___ftadd@f2+1
  5442  00052E  C010  F022         	movff	?___ftmul+2,___ftadd@f2+2
  5443  000532  C080  F00A         	movff	_you_cnt,___lltoft@c
  5444  000536  C081  F00B         	movff	_you_cnt+1,___lltoft@c+1
  5445  00053A  C082  F00C         	movff	_you_cnt+2,___lltoft@c+2
  5446  00053E  C083  F00D         	movff	_you_cnt+3,___lltoft@c+3
  5447  000542  EC72  F011         	call	___lltoft	;wreg free
  5448  000546  C00A  F01D         	movff	?___lltoft,___ftadd@f1
  5449  00054A  C00B  F01E         	movff	?___lltoft+1,___ftadd@f1+1
  5450  00054E  C00C  F01F         	movff	?___lltoft+2,___ftadd@f1+2
  5451  000552  EC3F  F008         	call	___ftadd	;wreg free
  5452  000556  C01D  F029         	movff	?___ftadd,___fttol@f1
  5453  00055A  C01E  F02A         	movff	?___ftadd+1,___fttol@f1+1
  5454  00055E  C01F  F02B         	movff	?___ftadd+2,___fttol@f1+2
  5455  000562  EC2E  F00D         	call	___fttol	;wreg free
  5456  000566  C029  F080         	movff	?___fttol,_you_cnt
  5457  00056A  C02A  F081         	movff	?___fttol+1,_you_cnt+1
  5458  00056E  C02B  F082         	movff	?___fttol+2,_you_cnt+2
  5459  000572  C02C  F083         	movff	?___fttol+3,_you_cnt+3
  5460  000576                     l33861:
  5461                           
  5462                           ;si_mic.c: 236: }
  5463                           ;si_mic.c: 237: task_->sucCnt=0;
  5464  000576  5038               	movf	si_mic_task@task_,w,c
  5465  000578  D868               	call	PL14	;call to abstracted procedure
  5466  00057A  6ADF               	clrf	indf2,c
  5467                           
  5468                           ;si_mic.c: 238: breath_init=1;
  5469  00057C  0E01               	movlw	1
  5470  00057E  6E72               	movwf	_breath_init,c
  5471                           
  5472                           ;si_mic.c: 239: switch (breath_state)
  5473  000580  D017               	goto	l33879
  5474  000582                     l33865:
  5475                           
  5476                           ;si_mic.c: 242: if(task_list[aip33626_task_id].active==0)
  5477  000582  5067               	movf	_aip33626_task_id,w,c
  5478  000584  D85B               	call	PL12	;call to abstracted procedure
  5479  000586  E118               	bnz	l33881
  5480                           
  5481                           ;si_mic.c: 243: {
  5482                           ;si_mic.c: 244: mode_sub=2;
  5483  000588  0E02               	movlw	2
  5484                           
  5485                           ;si_mic.c: 245: breath_state=1;
  5486  00058A  D870               	call	PL26	;call to abstracted procedure
  5487                           
  5488                           ;si_mic.c: 246: add_task_id(1,4,
  5489                           ;si_mic.c: 247: 250,21,aip33626_task_id);
  5490  00058C  D863               	call	PL18	;call to abstracted procedure
  5491  00058E  D849               	call	PL8	;call to abstracted procedure
  5492  000590  0E15               	movlw	21
  5493  000592  D868               	call	PL22	;call to abstracted procedure
  5494  000594  ECD1  F00C         	call	_add_task_id
  5495  000598  D00F               	goto	l33881
  5496  00059A                     l33871:
  5497                           
  5498                           ;si_mic.c: 252: if(task_list[aip33626_task_id].active==0)
  5499  00059A  5067               	movf	_aip33626_task_id,w,c
  5500  00059C  D84F               	call	PL12	;call to abstracted procedure
  5501  00059E  E10C               	bnz	l33881
  5502                           
  5503                           ;si_mic.c: 253: {
  5504                           ;si_mic.c: 254: mode_sub=1;
  5505  0005A0  0E01               	movlw	1
  5506  0005A2  6E6D               	movwf	_mode_sub,c
  5507                           
  5508                           ;si_mic.c: 255: breath_state=3;
  5509  0005A4  0E03               	movlw	3
  5510  0005A6  6E7A               	movwf	_breath_state,c
  5511                           
  5512                           ;si_mic.c: 256: add_task_id(1,3,
  5513                           ;si_mic.c: 257: 50,40,aip33626_task_id);
  5514  0005A8  D81C               	call	PL2	;call to abstracted procedure
  5515  0005AA  ECD1  F00C         	call	_add_task_id
  5516  0005AE  D004               	goto	l33881
  5517  0005B0                     l33879:
  5518  0005B0  507A               	movf	_breath_state,w,c
  5519                           
  5520                           ; Switch size 1, requested type "space"
  5521                           ; Number of cases is 2, Range of values is 0 to 1
  5522                           ; switch strategies available:
  5523                           ; Name         Instructions Cycles
  5524                           ; simple_byte            7     4 (average)
  5525                           ;	Chosen strategy is simple_byte
  5526  0005B2  E0E7               	bz	l33865
  5527  0005B4  0A01               	xorlw	1	; case 1
  5528  0005B6  E0F1               	bz	l33871
  5529  0005B8                     l33881:
  5530                           
  5531                           ;si_mic.c: 264: }
  5532                           ;si_mic.c: 265: if(you_cnt>=12500)
  5533  0005B8  0100               	movlb	0	; () banked
  5534  0005BA  5183               	movf	(_you_cnt+3)& (0+255),w,b
  5535  0005BC  1182               	iorwf	(_you_cnt+2)& (0+255),w,b
  5536  0005BE  E106               	bnz	u6140
  5537  0005C0  0ED4               	movlw	212
  5538  0005C2  5D80               	subwf	_you_cnt& (0+255),w,b
  5539  0005C4  0E30               	movlw	48
  5540  0005C6  5981               	subwfb	(_you_cnt+1)& (0+255),w,b
  5541  0005C8  A0D8               	btfss	status,0,c
  5542  0005CA  0012               	return	
  5543  0005CC                     u6140:
  5544                           
  5545                           ; BSR set to: 0
  5546                           ;si_mic.c: 266: {
  5547                           ;si_mic.c: 267: you_cnt=0;
  5548  0005CC  6B80               	clrf	_you_cnt& (0+255),b
  5549  0005CE  6B81               	clrf	(_you_cnt+1)& (0+255),b
  5550  0005D0  6B82               	clrf	(_you_cnt+2)& (0+255),b
  5551  0005D2  6B83               	clrf	(_you_cnt+3)& (0+255),b
  5552                           
  5553                           ; BSR set to: 0
  5554                           ;si_mic.c: 268: if(you==0)
  5555  0005D4  507D               	movf	_you,w,c
  5556  0005D6  E103               	bnz	l33889
  5557                           
  5558                           ; BSR set to: 0
  5559                           ;si_mic.c: 269: {
  5560                           ;si_mic.c: 270: mode_you=1;
  5561  0005D8  0E01               	movlw	1
  5562  0005DA  6E6B               	movwf	_mode_you,c
  5563                           
  5564                           ;si_mic.c: 271: }
  5565  0005DC  0C01               	retlw	1
  5566  0005DE                     l33889:
  5567                           
  5568                           ; BSR set to: 0
  5569                           ;si_mic.c: 272: else
  5570                           ;si_mic.c: 273: {
  5571                           ;si_mic.c: 274: you--;
  5572  0005DE  067D               	decf	_you,f,c
  5573  0005E0  0012               	return		;funcret
  5574  0005E2                     __end_of_si_mic_task:
  5575                           	opt stack 0
  5576  0005E2                     PL2:
  5577                           	opt stack 1
  5578  0005E2  6E02               	movwf	add_task_id@id2,c
  5579  0005E4  0E32               	movlw	50
  5580  0005E6  6E03               	movwf	add_task_id@interval_ms,c
  5581  0005E8  6A04               	clrf	add_task_id@interval_ms+1,c
  5582  0005EA  6A05               	clrf	add_task_id@interval_ms+2,c
  5583  0005EC  6A06               	clrf	add_task_id@interval_ms+3,c
  5584  0005EE  0E28               	movlw	40
  5585  0005F0  6E07               	movwf	add_task_id@suc_max,c
  5586  0005F2  C067  F008         	movff	_aip33626_task_id,add_task_id@task_id
  5587  0005F6  0C01               	retlw	1
  5588  0005F8                     __end_ofPL2:
  5589                           	opt stack 0
  5590  0005F8                     PL6:
  5591                           	opt stack 1
  5592  0005F8                     	endif
  5593  0005F8  0009               	tblrd		*+
  5594  0005FA  CFF5 F002          	movff	tablat,___lldiv@dividend
  5595  0005FE  0009               	tblrd		*+
  5596  000600  CFF5 F003          	movff	tablat,___lldiv@dividend+1
  5597  000604  0009               	tblrd		*+
  5598  000606  CFF5 F004          	movff	tablat,___lldiv@dividend+2
  5599  00060A  000A               	tblrd		*-
  5600  00060C  CFF5 F005          	movff	tablat,___lldiv@dividend+3
  5601  000610  C03C  F006         	movff	si_mic_task@tt,___lldiv@divisor
  5602  000614  C03D  F007         	movff	si_mic_task@tt+1,___lldiv@divisor+1
  5603  000618  C03E  F008         	movff	si_mic_task@tt+2,___lldiv@divisor+2
  5604  00061C  C03F  F009         	movff	si_mic_task@tt+3,___lldiv@divisor+3
  5605  000620  0012               	return	
  5606  000622                     __end_ofPL6:
  5607                           	opt stack 0
  5608  000622                     PL8:
  5609                           	opt stack 1
  5610  000622  6E03               	movwf	add_task_id@interval_ms,c
  5611  000624  6A04               	clrf	add_task_id@interval_ms+1,c
  5612  000626  6A05               	clrf	add_task_id@interval_ms+2,c
  5613  000628  6A06               	clrf	add_task_id@interval_ms+3,c
  5614  00062A  0012               	return	
  5615  00062C                     __end_ofPL8:
  5616                           	opt stack 0
  5617  00062C                     PL10:
  5618                           	opt stack 1
  5619  00062C  5067               	movf	_aip33626_task_id,w,c
  5620  00062E  0D0A               	mullw	10
  5621  000630  50F3               	movf	prodl,w,c
  5622  000632  0F8C               	addlw	low (_task_list+6)
  5623  000634  6ED9               	movwf	fsr2l,c
  5624  000636  6ADA               	clrf	fsr2h,c
  5625  000638  6ADF               	clrf	indf2,c
  5626  00063A  0012               	return	
  5627  00063C                     __end_ofPL10:
  5628                           	opt stack 0
  5629  00063C                     PL12:
  5630                           	opt stack 1
  5631  00063C  0D0A               	mullw	10
  5632  00063E  50F3               	movf	prodl,w,c
  5633  000640  0F8C               	addlw	low (_task_list+6)
  5634  000642  6ED9               	movwf	fsr2l,c
  5635  000644  6ADA               	clrf	fsr2h,c
  5636  000646  50DF               	movf	indf2,w,c
  5637  000648  0012               	return	
  5638  00064A                     __end_ofPL12:
  5639                           	opt stack 0
  5640  00064A                     PL14:
  5641                           	opt stack 1
  5642  00064A  6ED9               	movwf	fsr2l,c
  5643  00064C  6ADA               	clrf	fsr2h,c
  5644  00064E  0E09               	movlw	9
  5645  000650  26D9               	addwf	fsr2l,f,c
  5646  000652  0C09               	retlw	9
  5647  000654                     __end_ofPL14:
  5648                           	opt stack 0
  5649  000654                     PL18:
  5650                           	opt stack 1
  5651  000654  0E04               	movlw	4
  5652  000656  6E02               	movwf	add_task_id@id2,c
  5653  000658  0CFA               	retlw	250
  5654  00065A                     __end_ofPL18:
  5655                           	opt stack 0
  5656  00065A                     PL20:
  5657                           	opt stack 1
  5658  00065A  0E9D               	movlw	low (_p+4)
  5659  00065C  6EF6               	movwf	tblptrl,c
  5660  00065E                     	if	1	;There is more than 1 active tblptr byte
  5661  00065E  0E02               	movlw	high __smallconst
  5662  000660  6EF7               	movwf	tblptrh,c
  5663  000662                     	endif
  5664  000662                     	if	0	;tblptru may be non-zero
  5665  000662                     	endif
  5666  000662                     	if	0	;tblptru may be non-zero
  5667  000662  0012               	return	
  5668  000664                     __end_ofPL20:
  5669                           	opt stack 0
  5670  000664                     PL22:
  5671                           	opt stack 1
  5672  000664  6E07               	movwf	add_task_id@suc_max,c
  5673  000666  C067  F008         	movff	_aip33626_task_id,add_task_id@task_id
  5674  00066A  0C01               	retlw	1
  5675  00066C                     __end_ofPL22:
  5676                           	opt stack 0
  5677  00066C                     PL26:
  5678                           	opt stack 1
  5679  00066C  6E6D               	movwf	_mode_sub,c
  5680  00066E  0E01               	movlw	1
  5681  000670  6E7A               	movwf	_breath_state,c
  5682  000672  0C01               	retlw	1
  5683  000674                     __end_ofPL26:
  5684                           	opt stack 0
  5685  000674                     PL48:
  5686                           	opt stack 1
  5687  000674  0E02               	movlw	2
  5688  000676  6E79               	movwf	_state_key,c
  5689  000678  0E03               	movlw	3
  5690  00067A  6E78               	movwf	_state_smo_det,c
  5691  00067C  6E77               	movwf	_state_chrg,c
  5692  00067E  0C03               	retlw	3
  5693  000680                     __end_ofPL48:
  5694                           	opt stack 0
  5695  000680                     PL56:
  5696                           	opt stack 1
  5697  000680  0E02               	movlw	2
  5698  000682  6E02               	movwf	add_task_id@id2,c
  5699  000684  0CFA               	retlw	250
  5700  000686                     __end_ofPL56:
  5701                           	opt stack 0
  5702  000686                     PL78:
  5703                           	opt stack 1
  5704  000686  0100               	movlb	0	; () banked
  5705  000688  2780               	addwf	_you_cnt& (0+255),f,b
  5706  00068A  0E00               	movlw	0
  5707  00068C  2381               	addwfc	(_you_cnt+1)& (0+255),f,b
  5708  00068E  0C00               	retlw	0
  5709  000690                     __end_ofPL78:
  5710                           	opt stack 0
  5711  000690                     PL84:
  5712                           	opt stack 1
  5713  000690  C002  F047         	movff	?___lldiv,_p0
  5714  000694  C003  F048         	movff	?___lldiv+1,_p0+1
  5715  000698  0012               	return	
  5716  00069A                     __end_ofPL84:
  5717                           	opt stack 0
  5718  00069A                     PL86:
  5719                           	opt stack 1
  5720  00069A  0E03               	movlw	3
  5721  00069C  6E03               	movwf	timer0_cnt@ms+1,c
  5722  00069E  0EF0               	movlw	240
  5723  0006A0  6E02               	movwf	timer0_cnt@ms,c
  5724  0006A2  0CF0               	retlw	240
  5725  0006A4                     __end_ofPL86:
  5726                           	opt stack 0
  5727                           tblptru	equ	0xFF8
  5728                           tblptrh	equ	0xFF7
  5729                           tblptrl	equ	0xFF6
  5730                           tablat	equ	0xFF5
  5731                           prodh	equ	0xFF4
  5732                           prodl	equ	0xFF3
  5733                           intcon	equ	0xFF2
  5734                           postinc0	equ	0xFEE
  5735                           wreg	equ	0xFE8
  5736                           postdec1	equ	0xFE5
  5737                           fsr1l	equ	0xFE1
  5738                           indf2	equ	0xFDF
  5739                           postinc2	equ	0xFDE
  5740                           postdec2	equ	0xFDD
  5741                           fsr2h	equ	0xFDA
  5742                           fsr2l	equ	0xFD9
  5743                           status	equ	0xFD8
  5744                           
  5745 ;; *************** function _timer0_cnt *****************
  5746 ;; Defined at:
  5747 ;;		line 162 in file ".\src\periph.c"
  5748 ;; Parameters:    Size  Location     Type
  5749 ;;  ms              2    1[COMRAM] unsigned int 
  5750 ;;  lab             1    3[COMRAM] unsigned char 
  5751 ;; Auto vars:     Size  Location     Type
  5752 ;;		None
  5753 ;; Return value:  Size  Location     Type
  5754 ;;                  1    wreg      unsigned char 
  5755 ;; Registers used:
  5756 ;;		wreg, status,2, status,0
  5757 ;; Tracked objects:
  5758 ;;		On entry : 0/0
  5759 ;;		On exit  : 0/0
  5760 ;;		Unchanged: 0/0
  5761 ;; Data sizes:     COMRAM   BANK0   BANK1
  5762 ;;      Params:         3       0       0
  5763 ;;      Locals:         0       0       0
  5764 ;;      Temps:          2       0       0
  5765 ;;      Totals:         5       0       0
  5766 ;;Total ram usage:        5 bytes
  5767 ;; Hardware stack levels used:    1
  5768 ;; Hardware stack levels required when called:    3
  5769 ;; This function calls:
  5770 ;;		Nothing
  5771 ;; This function is called by:
  5772 ;;		_si_mic_task
  5773 ;; This function uses a non-reentrant model
  5774 ;;
  5775                           
  5776                           	psect	text21
  5777  00209E                     __ptext21:
  5778                           	opt stack 0
  5779  00209E                     _timer0_cnt:
  5780                           	opt stack 2
  5781                           
  5782                           ;periph.c: 164: static unsigned char init_flag=1;
  5783                           ;periph.c: 165: static unsigned char ls_lab=0;
  5784                           ;periph.c: 166: if(ls_lab!=lab)
  5785                           
  5786                           ;incstack = 0
  5787  00209E  5004               	movf	timer0_cnt@lab,w,c
  5788  0020A0  1856               	xorwf	timer0_cnt@ls_lab,w,c
  5789  0020A2  E004               	bz	l15809
  5790                           
  5791                           ;periph.c: 167: {
  5792                           ;periph.c: 168: init_flag=1;
  5793  0020A4  0E01               	movlw	1
  5794  0020A6  6E73               	movwf	timer0_cnt@init_flag,c
  5795                           
  5796                           ;periph.c: 169: ls_lab=lab;
  5797  0020A8  C004  F056         	movff	timer0_cnt@lab,timer0_cnt@ls_lab
  5798  0020AC                     l15809:
  5799                           
  5800                           ;periph.c: 170: }
  5801                           ;periph.c: 172: if(init_flag)
  5802  0020AC  5073               	movf	timer0_cnt@init_flag,w,c
  5803  0020AE  E020               	bz	l33053
  5804                           
  5805                           ;periph.c: 173: {
  5806                           ;periph.c: 174: tim0flag=0;
  5807  0020B0  6A58               	clrf	_tim0flag,c
  5808                           
  5809                           ;periph.c: 175: cnt0=0;
  5810  0020B2  6A4D               	clrf	_cnt0,c
  5811  0020B4  6A4E               	clrf	_cnt0+1,c
  5812                           
  5813                           ;periph.c: 176: timer0cnt=ms>>3;
  5814  0020B6  C002  F005         	movff	timer0_cnt@ms,??_timer0_cnt
  5815  0020BA  C003  F006         	movff	timer0_cnt@ms+1,??_timer0_cnt+1
  5816  0020BE  90D8               	bcf	status,0,c
  5817  0020C0  3206               	rrcf	??_timer0_cnt+1,f,c
  5818  0020C2  3205               	rrcf	??_timer0_cnt,f,c
  5819  0020C4  90D8               	bcf	status,0,c
  5820  0020C6  3206               	rrcf	??_timer0_cnt+1,f,c
  5821  0020C8  3205               	rrcf	??_timer0_cnt,f,c
  5822  0020CA  90D8               	bcf	status,0,c
  5823  0020CC  3206               	rrcf	??_timer0_cnt+1,f,c
  5824  0020CE  3205               	rrcf	??_timer0_cnt,f,c
  5825  0020D0  C005  F084         	movff	??_timer0_cnt,_timer0cnt
  5826  0020D4  C006  F085         	movff	??_timer0_cnt+1,_timer0cnt+1
  5827                           
  5828                           ;periph.c: 177: T0CLKEN=1;
  5829  0020D8  010F               	movlb	15	; () banked
  5830  0020DA  8162               	bsf	98,0,b	;volatile
  5831                           
  5832                           ; BSR set to: 15
  5833                           ;periph.c: 179: TMR0=0;
  5834  0020DC  6AD5               	clrf	4053,c	;volatile
  5835                           
  5836                           ; BSR set to: 15
  5837                           ;periph.c: 181: PR0 = 250-1;
  5838  0020DE  0EF9               	movlw	249
  5839  0020E0  6ED6               	movwf	4054,c	;volatile
  5840                           
  5841                           ; BSR set to: 15
  5842                           ;periph.c: 183: T0CON=0x07;
  5843  0020E2  0E07               	movlw	7
  5844  0020E4  6ED7               	movwf	4055,c	;volatile
  5845                           
  5846                           ; BSR set to: 15
  5847                           ;periph.c: 185: TMR0IF=0;
  5848  0020E6  90A2               	bcf	4002,0,c	;volatile
  5849                           
  5850                           ; BSR set to: 15
  5851                           ;periph.c: 186: TMR0IE=1;
  5852  0020E8  80A1               	bsf	4001,0,c	;volatile
  5853                           
  5854                           ; BSR set to: 15
  5855                           ;periph.c: 187: GIE=1;
  5856  0020EA  8EF2               	bsf	intcon,7,c	;volatile
  5857                           
  5858                           ; BSR set to: 15
  5859                           ;periph.c: 189: init_flag=0;
  5860  0020EC  6A73               	clrf	timer0_cnt@init_flag,c
  5861                           
  5862                           ; BSR set to: 15
  5863                           ;periph.c: 190: return -1;
  5864  0020EE  0CFF               	retlw	255
  5865  0020F0                     l33053:
  5866                           
  5867                           ;periph.c: 191: }
  5868                           ;periph.c: 193: if(tim0flag)
  5869  0020F0  5058               	movf	_tim0flag,w,c
  5870  0020F2  E004               	bz	l33063
  5871                           
  5872                           ;periph.c: 194: {
  5873                           ;periph.c: 195: tim0flag=0;
  5874  0020F4  6A58               	clrf	_tim0flag,c
  5875                           
  5876                           ;periph.c: 196: init_flag=1;
  5877  0020F6  0E01               	movlw	1
  5878  0020F8  6E73               	movwf	timer0_cnt@init_flag,c
  5879                           
  5880                           ;periph.c: 197: return 1;
  5881  0020FA  0C01               	retlw	1
  5882  0020FC                     l33063:
  5883                           
  5884                           ;periph.c: 198: }
  5885                           ;periph.c: 200: return 0;
  5886  0020FC  0C00               	retlw	0	;funcret
  5887  0020FE                     __end_of_timer0_cnt:
  5888                           	opt stack 0
  5889                           tblptru	equ	0xFF8
  5890                           tblptrh	equ	0xFF7
  5891                           tblptrl	equ	0xFF6
  5892                           tablat	equ	0xFF5
  5893                           prodh	equ	0xFF4
  5894                           prodl	equ	0xFF3
  5895                           intcon	equ	0xFF2
  5896                           postinc0	equ	0xFEE
  5897                           wreg	equ	0xFE8
  5898                           postdec1	equ	0xFE5
  5899                           fsr1l	equ	0xFE1
  5900                           indf2	equ	0xFDF
  5901                           postinc2	equ	0xFDE
  5902                           postdec2	equ	0xFDD
  5903                           fsr2h	equ	0xFDA
  5904                           fsr2l	equ	0xFD9
  5905                           status	equ	0xFD8
  5906                           
  5907 ;; *************** function _pwm_init *****************
  5908 ;; Defined at:
  5909 ;;		line 117 in file ".\src\pwm.c"
  5910 ;; Parameters:    Size  Location     Type
  5911 ;;		None
  5912 ;; Auto vars:     Size  Location     Type
  5913 ;;		None
  5914 ;; Return value:  Size  Location     Type
  5915 ;;                  1    wreg      void 
  5916 ;; Registers used:
  5917 ;;		wreg, status,2, status,0, prodl, prodh
  5918 ;; Tracked objects:
  5919 ;;		On entry : 0/0
  5920 ;;		On exit  : 0/0
  5921 ;;		Unchanged: 0/0
  5922 ;; Data sizes:     COMRAM   BANK0   BANK1
  5923 ;;      Params:         0       0       0
  5924 ;;      Locals:         0       0       0
  5925 ;;      Temps:          0       0       0
  5926 ;;      Totals:         0       0       0
  5927 ;;Total ram usage:        0 bytes
  5928 ;; Hardware stack levels used:    1
  5929 ;; Hardware stack levels required when called:    3
  5930 ;; This function calls:
  5931 ;;		Nothing
  5932 ;; This function is called by:
  5933 ;;		_si_mic_task
  5934 ;; This function uses a non-reentrant model
  5935 ;;
  5936                           
  5937                           	psect	text22
  5938  0020FE                     __ptext22:
  5939                           	opt stack 0
  5940  0020FE                     _pwm_init:
  5941                           	opt stack 2
  5942                           
  5943                           ;pwm.c: 119: if(duty0&&duty1)
  5944                           
  5945                           ;incstack = 0
  5946  0020FE  506F               	movf	_duty0,w,c
  5947  002100  B4D8               	btfsc	status,2,c
  5948  002102  0012               	return	
  5949  002104  506E               	movf	_duty1,w,c
  5950  002106  B4D8               	btfsc	status,2,c
  5951  002108  0012               	return	
  5952                           
  5953                           ;pwm.c: 120: {
  5954                           ;pwm.c: 121: if(duty0<100&&duty1<100)
  5955  00210A  0E64               	movlw	100
  5956  00210C  606F               	cpfslt	_duty0,c
  5957  00210E  D004               	goto	l33077
  5958  002110  606E               	cpfslt	_duty1,c
  5959  002112  D002               	goto	l33077
  5960                           
  5961                           ;pwm.c: 122: {
  5962                           ;pwm.c: 123: t_pwm=5*(u16)duty0-1;
  5963  002114  D818               	call	PL40	;call to abstracted procedure
  5964                           
  5965                           ;pwm.c: 124: t_pwm_=5*(u16)duty1-1;
  5966                           
  5967                           ;pwm.c: 125: }
  5968  002116  D00E               	goto	PL38	;call to abstracted procedure
  5969  002118                     l33077:
  5970                           
  5971                           ;pwm.c: 126: else if(duty0>=100 && duty1<100)
  5972  002118  0E63               	movlw	99
  5973  00211A  646F               	cpfsgt	_duty0,c
  5974  00211C  D004               	goto	l33083
  5975  00211E  0E64               	movlw	100
  5976  002120  606E               	cpfslt	_duty1,c
  5977  002122  D001               	goto	l33083
  5978                           
  5979                           ;pwm.c: 127: {
  5980                           ;pwm.c: 128: t_pwm_=5*(u16)duty1-1;
  5981                           
  5982                           ;pwm.c: 129: }
  5983  002124  D007               	goto	PL38	;call to abstracted procedure
  5984  002126                     l33083:
  5985                           
  5986                           ;pwm.c: 130: else if(duty1>=100 && duty0<100)
  5987  002126  0E63               	movlw	99
  5988  002128  646E               	cpfsgt	_duty1,c
  5989  00212A  0C63               	retlw	99
  5990  00212C  0E64               	movlw	100
  5991  00212E  606F               	cpfslt	_duty0,c
  5992  002130  0C64               	retlw	100
  5993                           
  5994                           ;pwm.c: 131: {
  5995                           ;pwm.c: 132: t_pwm=5*(u16)duty0-1;
  5996  002132  D009               	goto	PL40	;call to abstracted procedure
  5997  002134                     __end_of_pwm_init:
  5998                           	opt stack 0
  5999  002134                     PL38:
  6000                           	opt stack 2
  6001  002134  506E               	movf	_duty1,w,c
  6002  002136  0D05               	mullw	5
  6003  002138  0EFF               	movlw	255
  6004  00213A  24F3               	addwf	prodl,w,c
  6005  00213C  6E49               	movwf	_t_pwm_,c
  6006  00213E  0EFF               	movlw	255
  6007  002140  20F4               	addwfc	prodh,w,c
  6008  002142  6E4A               	movwf	_t_pwm_+1,c
  6009  002144  0012               	return	
  6010  002146                     __end_ofPL38:
  6011                           	opt stack 0
  6012  002146                     PL40:
  6013                           	opt stack 2
  6014  002146  506F               	movf	_duty0,w,c
  6015  002148  0D05               	mullw	5
  6016  00214A  0EFF               	movlw	255
  6017  00214C  24F3               	addwf	prodl,w,c
  6018  00214E  6E4B               	movwf	_t_pwm,c
  6019  002150  0EFF               	movlw	255
  6020  002152  20F4               	addwfc	prodh,w,c
  6021  002154  6E4C               	movwf	_t_pwm+1,c
  6022  002156  0012               	return	
  6023  002158                     __end_ofPL40:
  6024                           	opt stack 0
  6025                           tblptru	equ	0xFF8
  6026                           tblptrh	equ	0xFF7
  6027                           tblptrl	equ	0xFF6
  6028                           tablat	equ	0xFF5
  6029                           prodh	equ	0xFF4
  6030                           prodl	equ	0xFF3
  6031                           intcon	equ	0xFF2
  6032                           postinc0	equ	0xFEE
  6033                           wreg	equ	0xFE8
  6034                           postdec1	equ	0xFE5
  6035                           fsr1l	equ	0xFE1
  6036                           indf2	equ	0xFDF
  6037                           postinc2	equ	0xFDE
  6038                           postdec2	equ	0xFDD
  6039                           fsr2h	equ	0xFDA
  6040                           fsr2l	equ	0xFD9
  6041                           status	equ	0xFD8
  6042                           
  6043 ;; *************** function ___lmul *****************
  6044 ;; Defined at:
  6045 ;;		line 15 in file "c:\Users\Administrator\.vscode\extensions\ad.adide-1.1.4\resource\Microchip\xc8\v1.41\sources\commo
      +n\Umul32.c"
  6046 ;; Parameters:    Size  Location     Type
  6047 ;;  multiplier      4    1[COMRAM] unsigned long 
  6048 ;;  multiplicand    4    5[COMRAM] unsigned long 
  6049 ;; Auto vars:     Size  Location     Type
  6050 ;;  product         4    9[COMRAM] unsigned long 
  6051 ;; Return value:  Size  Location     Type
  6052 ;;                  4    1[COMRAM] unsigned long 
  6053 ;; Registers used:
  6054 ;;		wreg, status,2, status,0
  6055 ;; Tracked objects:
  6056 ;;		On entry : 0/0
  6057 ;;		On exit  : 0/0
  6058 ;;		Unchanged: 0/0
  6059 ;; Data sizes:     COMRAM   BANK0   BANK1
  6060 ;;      Params:         8       0       0
  6061 ;;      Locals:         4       0       0
  6062 ;;      Temps:          0       0       0
  6063 ;;      Totals:        12       0       0
  6064 ;;Total ram usage:       12 bytes
  6065 ;; Hardware stack levels used:    1
  6066 ;; Hardware stack levels required when called:    3
  6067 ;; This function calls:
  6068 ;;		Nothing
  6069 ;; This function is called by:
  6070 ;;		_si_mic_task
  6071 ;; This function uses a non-reentrant model
  6072 ;;
  6073                           
  6074                           	psect	text23
  6075  002298                     __ptext23:
  6076                           	opt stack 0
  6077  002298                     ___lmul:
  6078                           	opt stack 2
  6079                           
  6080                           ;incstack = 0
  6081  002298  6A0A               	clrf	___lmul@product,c
  6082  00229A  6A0B               	clrf	___lmul@product+1,c
  6083  00229C  6A0C               	clrf	___lmul@product+2,c
  6084  00229E  6A0D               	clrf	___lmul@product+3,c
  6085  0022A0                     l29239:
  6086  0022A0  A002               	btfss	___lmul@multiplier,0,c
  6087  0022A2  D008               	goto	l33183
  6088  0022A4  5006               	movf	___lmul@multiplicand,w,c
  6089  0022A6  260A               	addwf	___lmul@product,f,c
  6090  0022A8  5007               	movf	___lmul@multiplicand+1,w,c
  6091  0022AA  220B               	addwfc	___lmul@product+1,f,c
  6092  0022AC  5008               	movf	___lmul@multiplicand+2,w,c
  6093  0022AE  220C               	addwfc	___lmul@product+2,f,c
  6094  0022B0  5009               	movf	___lmul@multiplicand+3,w,c
  6095  0022B2  220D               	addwfc	___lmul@product+3,f,c
  6096  0022B4                     l33183:
  6097  0022B4  90D8               	bcf	status,0,c
  6098  0022B6  3606               	rlcf	___lmul@multiplicand,f,c
  6099  0022B8  3607               	rlcf	___lmul@multiplicand+1,f,c
  6100  0022BA  3608               	rlcf	___lmul@multiplicand+2,f,c
  6101  0022BC  3609               	rlcf	___lmul@multiplicand+3,f,c
  6102  0022BE  90D8               	bcf	status,0,c
  6103  0022C0  3205               	rrcf	___lmul@multiplier+3,f,c
  6104  0022C2  3204               	rrcf	___lmul@multiplier+2,f,c
  6105  0022C4  3203               	rrcf	___lmul@multiplier+1,f,c
  6106  0022C6  3202               	rrcf	___lmul@multiplier,f,c
  6107  0022C8  5002               	movf	___lmul@multiplier,w,c
  6108  0022CA  1003               	iorwf	___lmul@multiplier+1,w,c
  6109  0022CC  1004               	iorwf	___lmul@multiplier+2,w,c
  6110  0022CE  1005               	iorwf	___lmul@multiplier+3,w,c
  6111  0022D0  E1E7               	bnz	l29239
  6112  0022D2  C00A  F002         	movff	___lmul@product,?___lmul
  6113  0022D6  C00B  F003         	movff	___lmul@product+1,?___lmul+1
  6114  0022DA  C00C  F004         	movff	___lmul@product+2,?___lmul+2
  6115  0022DE  C00D  F005         	movff	___lmul@product+3,?___lmul+3
  6116  0022E2  0012               	return		;funcret
  6117  0022E4                     __end_of___lmul:
  6118                           	opt stack 0
  6119                           tblptru	equ	0xFF8
  6120                           tblptrh	equ	0xFF7
  6121                           tblptrl	equ	0xFF6
  6122                           tablat	equ	0xFF5
  6123                           prodh	equ	0xFF4
  6124                           prodl	equ	0xFF3
  6125                           intcon	equ	0xFF2
  6126                           postinc0	equ	0xFEE
  6127                           wreg	equ	0xFE8
  6128                           postdec1	equ	0xFE5
  6129                           fsr1l	equ	0xFE1
  6130                           indf2	equ	0xFDF
  6131                           postinc2	equ	0xFDE
  6132                           postdec2	equ	0xFDD
  6133                           fsr2h	equ	0xFDA
  6134                           fsr2l	equ	0xFD9
  6135                           status	equ	0xFD8
  6136                           
  6137 ;; *************** function ___lltoft *****************
  6138 ;; Defined at:
  6139 ;;		line 35 in file "c:\Users\Administrator\.vscode\extensions\ad.adide-1.1.4\resource\Microchip\xc8\v1.41\sources\commo
      +n\lltoft.c"
  6140 ;; Parameters:    Size  Location     Type
  6141 ;;  c               4    9[COMRAM] unsigned long 
  6142 ;; Auto vars:     Size  Location     Type
  6143 ;;  exp             1   17[COMRAM] unsigned char 
  6144 ;; Return value:  Size  Location     Type
  6145 ;;                  3    9[COMRAM] float 
  6146 ;; Registers used:
  6147 ;;		wreg, status,2, status,0, cstack
  6148 ;; Tracked objects:
  6149 ;;		On entry : 0/0
  6150 ;;		On exit  : 0/0
  6151 ;;		Unchanged: 0/0
  6152 ;; Data sizes:     COMRAM   BANK0   BANK1
  6153 ;;      Params:         4       0       0
  6154 ;;      Locals:         1       0       0
  6155 ;;      Temps:          4       0       0
  6156 ;;      Totals:         9       0       0
  6157 ;;Total ram usage:        9 bytes
  6158 ;; Hardware stack levels used:    1
  6159 ;; Hardware stack levels required when called:    4
  6160 ;; This function calls:
  6161 ;;		___ftpack
  6162 ;; This function is called by:
  6163 ;;		_si_mic_task
  6164 ;; This function uses a non-reentrant model
  6165 ;;
  6166                           
  6167                           	psect	text24
  6168  0022E4                     __ptext24:
  6169                           	opt stack 0
  6170  0022E4                     ___lltoft:
  6171                           	opt stack 1
  6172                           
  6173                           ;incstack = 0
  6174  0022E4  0E8E               	movlw	142
  6175  0022E6  6E12               	movwf	___lltoft@exp,c
  6176  0022E8  D006               	goto	l33343
  6177  0022EA                     l33341:
  6178  0022EA  90D8               	bcf	status,0,c
  6179  0022EC  320D               	rrcf	___lltoft@c+3,f,c
  6180  0022EE  320C               	rrcf	___lltoft@c+2,f,c
  6181  0022F0  320B               	rrcf	___lltoft@c+1,f,c
  6182  0022F2  320A               	rrcf	___lltoft@c,f,c
  6183  0022F4  2A12               	incf	___lltoft@exp,f,c
  6184  0022F6                     l33343:
  6185  0022F6  6A0E               	clrf	??___lltoft& (0+255),c
  6186  0022F8  6A0F               	clrf	(??___lltoft+1)& (0+255),c
  6187  0022FA  6A10               	clrf	(??___lltoft+2)& (0+255),c
  6188  0022FC  500D               	movf	___lltoft@c+3,w,c
  6189  0022FE  6E11               	movwf	(??___lltoft+3)& (0+255),c
  6190  002300  500E               	movf	??___lltoft,w,c
  6191  002302  100F               	iorwf	??___lltoft+1,w,c
  6192  002304  1010               	iorwf	??___lltoft+2,w,c
  6193  002306  1011               	iorwf	??___lltoft+3,w,c
  6194  002308  E1F0               	bnz	l33341
  6195  00230A  C00A  F002         	movff	___lltoft@c,___ftpack@arg
  6196  00230E  C00B  F003         	movff	___lltoft@c+1,___ftpack@arg+1
  6197  002312  C00C  F004         	movff	___lltoft@c+2,___ftpack@arg+2
  6198  002316  C012  F005         	movff	___lltoft@exp,___ftpack@exp
  6199  00231A  0E00               	movlw	0
  6200  00231C  6E06               	movwf	___ftpack@sign,c
  6201  00231E  EC77  F00E         	call	___ftpack	;wreg free
  6202  002322  C002  F00A         	movff	?___ftpack,?___lltoft
  6203  002326  C003  F00B         	movff	?___ftpack+1,?___lltoft+1
  6204  00232A  C004  F00C         	movff	?___ftpack+2,?___lltoft+2
  6205  00232E  0012               	return		;funcret
  6206  002330                     __end_of___lltoft:
  6207                           	opt stack 0
  6208                           tblptru	equ	0xFF8
  6209                           tblptrh	equ	0xFF7
  6210                           tblptrl	equ	0xFF6
  6211                           tablat	equ	0xFF5
  6212                           prodh	equ	0xFF4
  6213                           prodl	equ	0xFF3
  6214                           intcon	equ	0xFF2
  6215                           postinc0	equ	0xFEE
  6216                           wreg	equ	0xFE8
  6217                           postdec1	equ	0xFE5
  6218                           fsr1l	equ	0xFE1
  6219                           indf2	equ	0xFDF
  6220                           postinc2	equ	0xFDE
  6221                           postdec2	equ	0xFDD
  6222                           fsr2h	equ	0xFDA
  6223                           fsr2l	equ	0xFD9
  6224                           status	equ	0xFD8
  6225                           
  6226 ;; *************** function ___lbtoft *****************
  6227 ;; Defined at:
  6228 ;;		line 27 in file "c:\Users\Administrator\.vscode\extensions\ad.adide-1.1.4\resource\Microchip\xc8\v1.41\sources\commo
      +n\lbtoft.c"
  6229 ;; Parameters:    Size  Location     Type
  6230 ;;  c               1    wreg     unsigned char 
  6231 ;; Auto vars:     Size  Location     Type
  6232 ;;  c               1   12[COMRAM] unsigned char 
  6233 ;; Return value:  Size  Location     Type
  6234 ;;                  3    9[COMRAM] float 
  6235 ;; Registers used:
  6236 ;;		wreg, status,2, status,0, cstack
  6237 ;; Tracked objects:
  6238 ;;		On entry : 0/0
  6239 ;;		On exit  : 0/0
  6240 ;;		Unchanged: 0/0
  6241 ;; Data sizes:     COMRAM   BANK0   BANK1
  6242 ;;      Params:         3       0       0
  6243 ;;      Locals:         1       0       0
  6244 ;;      Temps:          0       0       0
  6245 ;;      Totals:         4       0       0
  6246 ;;Total ram usage:        4 bytes
  6247 ;; Hardware stack levels used:    1
  6248 ;; Hardware stack levels required when called:    4
  6249 ;; This function calls:
  6250 ;;		___ftpack
  6251 ;; This function is called by:
  6252 ;;		_si_mic_task
  6253 ;; This function uses a non-reentrant model
  6254 ;;
  6255                           
  6256                           	psect	text25
  6257  002438                     __ptext25:
  6258                           	opt stack 0
  6259  002438                     ___lbtoft:
  6260                           	opt stack 1
  6261                           
  6262                           ;incstack = 0
  6263                           ;___lbtoft@c stored from wreg
  6264  002438  6E0D               	movwf	___lbtoft@c,c
  6265  00243A  500D               	movf	___lbtoft@c,w,c
  6266  00243C  6E02               	movwf	___ftpack@arg,c
  6267  00243E  6A03               	clrf	___ftpack@arg+1,c
  6268  002440  6A04               	clrf	___ftpack@arg+2,c
  6269  002442  0E8E               	movlw	142
  6270  002444  6E05               	movwf	___ftpack@exp,c
  6271  002446  0E00               	movlw	0
  6272  002448  6E06               	movwf	___ftpack@sign,c
  6273  00244A  EC77  F00E         	call	___ftpack	;wreg free
  6274  00244E  C002  F00A         	movff	?___ftpack,?___lbtoft
  6275  002452  C003  F00B         	movff	?___ftpack+1,?___lbtoft+1
  6276  002456  C004  F00C         	movff	?___ftpack+2,?___lbtoft+2
  6277  00245A  0012               	return		;funcret
  6278  00245C                     __end_of___lbtoft:
  6279                           	opt stack 0
  6280                           tblptru	equ	0xFF8
  6281                           tblptrh	equ	0xFF7
  6282                           tblptrl	equ	0xFF6
  6283                           tablat	equ	0xFF5
  6284                           prodh	equ	0xFF4
  6285                           prodl	equ	0xFF3
  6286                           intcon	equ	0xFF2
  6287                           postinc0	equ	0xFEE
  6288                           wreg	equ	0xFE8
  6289                           postdec1	equ	0xFE5
  6290                           fsr1l	equ	0xFE1
  6291                           indf2	equ	0xFDF
  6292                           postinc2	equ	0xFDE
  6293                           postdec2	equ	0xFDD
  6294                           fsr2h	equ	0xFDA
  6295                           fsr2l	equ	0xFD9
  6296                           status	equ	0xFD8
  6297                           
  6298 ;; *************** function ___fttol *****************
  6299 ;; Defined at:
  6300 ;;		line 44 in file "c:\Users\Administrator\.vscode\extensions\ad.adide-1.1.4\resource\Microchip\xc8\v1.41\sources\commo
      +n\fttol.c"
  6301 ;; Parameters:    Size  Location     Type
  6302 ;;  f1              3   40[COMRAM] float 
  6303 ;; Auto vars:     Size  Location     Type
  6304 ;;  lval            4   50[COMRAM] unsigned long 
  6305 ;;  exp1            1   54[COMRAM] unsigned char 
  6306 ;;  sign1           1   49[COMRAM] unsigned char 
  6307 ;; Return value:  Size  Location     Type
  6308 ;;                  4   40[COMRAM] long 
  6309 ;; Registers used:
  6310 ;;		wreg, status,2, status,0
  6311 ;; Tracked objects:
  6312 ;;		On entry : 0/0
  6313 ;;		On exit  : 0/0
  6314 ;;		Unchanged: 0/0
  6315 ;; Data sizes:     COMRAM   BANK0   BANK1
  6316 ;;      Params:         4       0       0
  6317 ;;      Locals:         6       0       0
  6318 ;;      Temps:          5       0       0
  6319 ;;      Totals:        15       0       0
  6320 ;;Total ram usage:       15 bytes
  6321 ;; Hardware stack levels used:    1
  6322 ;; Hardware stack levels required when called:    3
  6323 ;; This function calls:
  6324 ;;		Nothing
  6325 ;; This function is called by:
  6326 ;;		_si_mic_task
  6327 ;; This function uses a non-reentrant model
  6328 ;;
  6329                           
  6330                           	psect	text26
  6331  001A5C                     __ptext26:
  6332                           	opt stack 0
  6333  001A5C                     ___fttol:
  6334                           	opt stack 2
  6335                           
  6336                           ;incstack = 0
  6337  001A5C  C02B  F02D         	movff	___fttol@f1+2,??___fttol
  6338  001A60  6A2E               	clrf	(??___fttol+1)& (0+255),c
  6339  001A62  6A2F               	clrf	(??___fttol+2)& (0+255),c
  6340  001A64  342A               	rlcf	___fttol@f1+1,w,c
  6341  001A66  362D               	rlcf	??___fttol& (0+255),f,c
  6342  001A68  E301               	bnc	u5131
  6343  001A6A  802E               	bsf	(??___fttol+1)& (0+255),0,c
  6344  001A6C                     u5131:
  6345  001A6C  502D               	movf	??___fttol,w,c
  6346  001A6E  6E37               	movwf	___fttol@exp1,c
  6347  001A70  5037               	movf	___fttol@exp1,w,c
  6348  001A72  E105               	bnz	l33299
  6349  001A74                     l33297:
  6350  001A74  6A29               	clrf	?___fttol,c
  6351  001A76  6A2A               	clrf	?___fttol+1,c
  6352  001A78  6A2B               	clrf	?___fttol+2,c
  6353  001A7A  6A2C               	clrf	?___fttol+3,c
  6354  001A7C  0012               	return	
  6355  001A7E                     l33299:
  6356  001A7E  0E17               	movlw	23
  6357  001A80  6E2D               	movwf	??___fttol& (0+255),c
  6358  001A82  C029  F02E         	movff	___fttol@f1,??___fttol+1
  6359  001A86  C02A  F02F         	movff	___fttol@f1+1,??___fttol+2
  6360  001A8A  C02B  F030         	movff	___fttol@f1+2,??___fttol+3
  6361  001A8E  282D               	incf	??___fttol,w,c
  6362  001A90  6E31               	movwf	(??___fttol+4)& (0+255),c
  6363  001A92  D004               	goto	u5150
  6364  001A94                     u5155:
  6365  001A94  90D8               	bcf	status,0,c
  6366  001A96  3230               	rrcf	??___fttol+3,f,c
  6367  001A98  322F               	rrcf	??___fttol+2,f,c
  6368  001A9A  322E               	rrcf	??___fttol+1,f,c
  6369  001A9C                     u5150:
  6370  001A9C  2E31               	decfsz	(??___fttol+4)& (0+255),f,c
  6371  001A9E  D7FA               	goto	u5155
  6372  001AA0  502E               	movf	??___fttol+1,w,c
  6373  001AA2  6E32               	movwf	___fttol@sign1,c
  6374  001AA4  8E2A               	bsf	___fttol@f1+1,7,c
  6375  001AA6  6A2B               	clrf	___fttol@f1+2,c
  6376  001AA8  5029               	movf	___fttol@f1,w,c
  6377  001AAA  6E33               	movwf	___fttol@lval,c
  6378  001AAC  502A               	movf	___fttol@f1+1,w,c
  6379  001AAE  6E34               	movwf	___fttol@lval+1,c
  6380  001AB0  502B               	movf	___fttol@f1+2,w,c
  6381  001AB2  6E35               	movwf	___fttol@lval+2,c
  6382  001AB4  6A36               	clrf	___fttol@lval+3,c
  6383  001AB6  0E8E               	movlw	142
  6384  001AB8  5E37               	subwf	___fttol@exp1,f,c
  6385  001ABA  AE37               	btfss	___fttol@exp1,7,c
  6386  001ABC  D00C               	goto	l33319
  6387  001ABE  5037               	movf	___fttol@exp1,w,c
  6388  001AC0  0A80               	xorlw	128
  6389  001AC2  0F8F               	addlw	143
  6390  001AC4  E3D7               	bnc	l33297
  6391  001AC6                     l33315:
  6392  001AC6  90D8               	bcf	status,0,c
  6393  001AC8  3236               	rrcf	___fttol@lval+3,f,c
  6394  001ACA  3235               	rrcf	___fttol@lval+2,f,c
  6395  001ACC  3234               	rrcf	___fttol@lval+1,f,c
  6396  001ACE  3233               	rrcf	___fttol@lval,f,c
  6397  001AD0  3E37               	incfsz	___fttol@exp1,f,c
  6398  001AD2  D7F9               	goto	l33315
  6399  001AD4  D00C               	goto	l33327
  6400  001AD6                     l33319:
  6401  001AD6  0E17               	movlw	23
  6402  001AD8  6437               	cpfsgt	___fttol@exp1,c
  6403  001ADA  D007               	goto	l33325
  6404  001ADC  D7CB               	goto	l33297
  6405  001ADE                     l33323:
  6406  001ADE  90D8               	bcf	status,0,c
  6407  001AE0  3633               	rlcf	___fttol@lval,f,c
  6408  001AE2  3634               	rlcf	___fttol@lval+1,f,c
  6409  001AE4  3635               	rlcf	___fttol@lval+2,f,c
  6410  001AE6  3636               	rlcf	___fttol@lval+3,f,c
  6411  001AE8  0637               	decf	___fttol@exp1,f,c
  6412  001AEA                     l33325:
  6413  001AEA  5037               	movf	___fttol@exp1,w,c
  6414  001AEC  E1F8               	bnz	l33323
  6415  001AEE                     l33327:
  6416  001AEE  5032               	movf	___fttol@sign1,w,c
  6417  001AF0  E008               	bz	l33331
  6418  001AF2  1E36               	comf	___fttol@lval+3,f,c
  6419  001AF4  1E35               	comf	___fttol@lval+2,f,c
  6420  001AF6  1E34               	comf	___fttol@lval+1,f,c
  6421  001AF8  6C33               	negf	___fttol@lval,c
  6422  001AFA  0E00               	movlw	0
  6423  001AFC  2234               	addwfc	___fttol@lval+1,f,c
  6424  001AFE  2235               	addwfc	___fttol@lval+2,f,c
  6425  001B00  2236               	addwfc	___fttol@lval+3,f,c
  6426  001B02                     l33331:
  6427  001B02  C033  F029         	movff	___fttol@lval,?___fttol
  6428  001B06  C034  F02A         	movff	___fttol@lval+1,?___fttol+1
  6429  001B0A  C035  F02B         	movff	___fttol@lval+2,?___fttol+2
  6430  001B0E  C036  F02C         	movff	___fttol@lval+3,?___fttol+3
  6431  001B12  0012               	return		;funcret
  6432  001B14                     __end_of___fttol:
  6433                           	opt stack 0
  6434                           tblptru	equ	0xFF8
  6435                           tblptrh	equ	0xFF7
  6436                           tblptrl	equ	0xFF6
  6437                           tablat	equ	0xFF5
  6438                           prodh	equ	0xFF4
  6439                           prodl	equ	0xFF3
  6440                           intcon	equ	0xFF2
  6441                           postinc0	equ	0xFEE
  6442                           wreg	equ	0xFE8
  6443                           postdec1	equ	0xFE5
  6444                           fsr1l	equ	0xFE1
  6445                           indf2	equ	0xFDF
  6446                           postinc2	equ	0xFDE
  6447                           postdec2	equ	0xFDD
  6448                           fsr2h	equ	0xFDA
  6449                           fsr2l	equ	0xFD9
  6450                           status	equ	0xFD8
  6451                           
  6452 ;; *************** function ___ftmul *****************
  6453 ;; Defined at:
  6454 ;;		line 62 in file "c:\Users\Administrator\.vscode\extensions\ad.adide-1.1.4\resource\Microchip\xc8\v1.41\sources\commo
      +n\ftmul.c"
  6455 ;; Parameters:    Size  Location     Type
  6456 ;;  f1              3   13[COMRAM] float 
  6457 ;;  f2              3   16[COMRAM] float 
  6458 ;; Auto vars:     Size  Location     Type
  6459 ;;  f3_as_produc    3   23[COMRAM] unsigned um
  6460 ;;  sign            1   27[COMRAM] unsigned char 
  6461 ;;  cntr            1   26[COMRAM] unsigned char 
  6462 ;;  exp             1   22[COMRAM] unsigned char 
  6463 ;; Return value:  Size  Location     Type
  6464 ;;                  3   13[COMRAM] float 
  6465 ;; Registers used:
  6466 ;;		wreg, status,2, status,0, cstack
  6467 ;; Tracked objects:
  6468 ;;		On entry : 0/0
  6469 ;;		On exit  : 0/0
  6470 ;;		Unchanged: 0/0
  6471 ;; Data sizes:     COMRAM   BANK0   BANK1
  6472 ;;      Params:         6       0       0
  6473 ;;      Locals:         6       0       0
  6474 ;;      Temps:          3       0       0
  6475 ;;      Totals:        15       0       0
  6476 ;;Total ram usage:       15 bytes
  6477 ;; Hardware stack levels used:    1
  6478 ;; Hardware stack levels required when called:    4
  6479 ;; This function calls:
  6480 ;;		___ftpack
  6481 ;; This function is called by:
  6482 ;;		_si_mic_task
  6483 ;; This function uses a non-reentrant model
  6484 ;;
  6485                           
  6486                           	psect	text27
  6487  001818                     __ptext27:
  6488                           	opt stack 0
  6489  001818                     ___ftmul:
  6490                           	opt stack 1
  6491                           
  6492                           ;incstack = 0
  6493  001818  C010  F014         	movff	___ftmul@f1+2,??___ftmul
  6494  00181C  6A15               	clrf	(??___ftmul+1)& (0+255),c
  6495  00181E  6A16               	clrf	(??___ftmul+2)& (0+255),c
  6496  001820  340F               	rlcf	___ftmul@f1+1,w,c
  6497  001822  3614               	rlcf	??___ftmul& (0+255),f,c
  6498  001824  E301               	bnc	u5071
  6499  001826  8015               	bsf	(??___ftmul+1)& (0+255),0,c
  6500  001828                     u5071:
  6501  001828  5014               	movf	??___ftmul,w,c
  6502  00182A  6E17               	movwf	___ftmul@exp,c
  6503  00182C  5017               	movf	___ftmul@exp,w,c
  6504  00182E  E101               	bnz	l33255
  6505  001830  D053               	goto	PL88	;call to abstracted procedure
  6506  001832                     l33255:
  6507  001832  C013  F014         	movff	___ftmul@f2+2,??___ftmul
  6508  001836  6A15               	clrf	(??___ftmul+1)& (0+255),c
  6509  001838  6A16               	clrf	(??___ftmul+2)& (0+255),c
  6510  00183A  3412               	rlcf	___ftmul@f2+1,w,c
  6511  00183C  3614               	rlcf	??___ftmul& (0+255),f,c
  6512  00183E  E301               	bnc	u5091
  6513  001840  8015               	bsf	(??___ftmul+1)& (0+255),0,c
  6514  001842                     u5091:
  6515  001842  5014               	movf	??___ftmul,w,c
  6516  001844  6E1C               	movwf	___ftmul@sign,c
  6517  001846  501C               	movf	___ftmul@sign,w,c
  6518  001848  E101               	bnz	l33259
  6519  00184A  D046               	goto	PL88	;call to abstracted procedure
  6520  00184C                     l33259:
  6521  00184C  501C               	movf	___ftmul@sign,w,c
  6522  00184E  0F7B               	addlw	123
  6523  001850  2617               	addwf	___ftmul@exp,f,c
  6524  001852  C010  F01C         	movff	___ftmul@f1+2,___ftmul@sign
  6525  001856  5013               	movf	___ftmul@f2+2,w,c
  6526  001858  1A1C               	xorwf	___ftmul@sign,f,c
  6527  00185A  0E80               	movlw	128
  6528  00185C  161C               	andwf	___ftmul@sign,f,c
  6529  00185E  8E0F               	bsf	___ftmul@f1+1,7,c
  6530  001860  8E12               	bsf	___ftmul@f2+1,7,c
  6531  001862  0E00               	movlw	0
  6532  001864  1613               	andwf	___ftmul@f2+2,f,c
  6533  001866  6A18               	clrf	___ftmul@f3_as_product,c
  6534  001868  6A19               	clrf	___ftmul@f3_as_product+1,c
  6535  00186A  6A1A               	clrf	___ftmul@f3_as_product+2,c
  6536  00186C  0E07               	movlw	7
  6537  00186E  6E1B               	movwf	___ftmul@cntr,c
  6538  001870                     l33273:
  6539  001870  B00E               	btfsc	___ftmul@f1,0,c
  6540  001872  D82B               	call	PL58	;call to abstracted procedure
  6541  001874                     l33277:
  6542  001874  90D8               	bcf	status,0,c
  6543  001876  3210               	rrcf	___ftmul@f1+2,f,c
  6544  001878  320F               	rrcf	___ftmul@f1+1,f,c
  6545  00187A  320E               	rrcf	___ftmul@f1,f,c
  6546  00187C  90D8               	bcf	status,0,c
  6547  00187E  3611               	rlcf	___ftmul@f2,f,c
  6548  001880  3612               	rlcf	___ftmul@f2+1,f,c
  6549  001882  3613               	rlcf	___ftmul@f2+2,f,c
  6550  001884  2E1B               	decfsz	___ftmul@cntr,f,c
  6551  001886  D7F4               	goto	l33273
  6552  001888  0E09               	movlw	9
  6553  00188A  6E1B               	movwf	___ftmul@cntr,c
  6554  00188C                     l33283:
  6555  00188C  B00E               	btfsc	___ftmul@f1,0,c
  6556  00188E  D81D               	call	PL58	;call to abstracted procedure
  6557  001890                     l33287:
  6558  001890  90D8               	bcf	status,0,c
  6559  001892  3210               	rrcf	___ftmul@f1+2,f,c
  6560  001894  320F               	rrcf	___ftmul@f1+1,f,c
  6561  001896  320E               	rrcf	___ftmul@f1,f,c
  6562  001898  90D8               	bcf	status,0,c
  6563  00189A  321A               	rrcf	___ftmul@f3_as_product+2,f,c
  6564  00189C  3219               	rrcf	___ftmul@f3_as_product+1,f,c
  6565  00189E  3218               	rrcf	___ftmul@f3_as_product,f,c
  6566  0018A0  2E1B               	decfsz	___ftmul@cntr,f,c
  6567  0018A2  D7F4               	goto	l33283
  6568  0018A4  C018  F002         	movff	___ftmul@f3_as_product,___ftpack@arg
  6569  0018A8  C019  F003         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6570  0018AC  C01A  F004         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6571  0018B0  C017  F005         	movff	___ftmul@exp,___ftpack@exp
  6572  0018B4  C01C  F006         	movff	___ftmul@sign,___ftpack@sign
  6573  0018B8  EC77  F00E         	call	___ftpack	;wreg free
  6574  0018BC  C002  F00E         	movff	?___ftpack,?___ftmul
  6575  0018C0  C003  F00F         	movff	?___ftpack+1,?___ftmul+1
  6576  0018C4  C004  F010         	movff	?___ftpack+2,?___ftmul+2
  6577  0018C8  0012               	return		;funcret
  6578  0018CA                     __end_of___ftmul:
  6579                           	opt stack 0
  6580  0018CA                     PL58:
  6581                           	opt stack 1
  6582  0018CA  5011               	movf	___ftmul@f2,w,c
  6583  0018CC  2618               	addwf	___ftmul@f3_as_product,f,c
  6584  0018CE  5012               	movf	___ftmul@f2+1,w,c
  6585  0018D0  2219               	addwfc	___ftmul@f3_as_product+1,f,c
  6586  0018D2  5013               	movf	___ftmul@f2+2,w,c
  6587  0018D4  221A               	addwfc	___ftmul@f3_as_product+2,f,c
  6588  0018D6  0012               	return	
  6589  0018D8                     __end_ofPL58:
  6590                           	opt stack 0
  6591  0018D8                     PL88:
  6592                           	opt stack 1
  6593  0018D8  6A0E               	clrf	?___ftmul,c
  6594  0018DA  6A0F               	clrf	?___ftmul+1,c
  6595  0018DC  6A10               	clrf	?___ftmul+2,c
  6596  0018DE  0012               	return	
  6597  0018E0                     __end_ofPL88:
  6598                           	opt stack 0
  6599                           tblptru	equ	0xFF8
  6600                           tblptrh	equ	0xFF7
  6601                           tblptrl	equ	0xFF6
  6602                           tablat	equ	0xFF5
  6603                           prodh	equ	0xFF4
  6604                           prodl	equ	0xFF3
  6605                           intcon	equ	0xFF2
  6606                           postinc0	equ	0xFEE
  6607                           wreg	equ	0xFE8
  6608                           postdec1	equ	0xFE5
  6609                           fsr1l	equ	0xFE1
  6610                           indf2	equ	0xFDF
  6611                           postinc2	equ	0xFDE
  6612                           postdec2	equ	0xFDD
  6613                           fsr2h	equ	0xFDA
  6614                           fsr2l	equ	0xFD9
  6615                           status	equ	0xFD8
  6616                           
  6617 ;; *************** function ___ftadd *****************
  6618 ;; Defined at:
  6619 ;;		line 86 in file "c:\Users\Administrator\.vscode\extensions\ad.adide-1.1.4\resource\Microchip\xc8\v1.41\sources\commo
      +n\ftadd.c"
  6620 ;; Parameters:    Size  Location     Type
  6621 ;;  f1              3   28[COMRAM] float 
  6622 ;;  f2              3   31[COMRAM] float 
  6623 ;; Auto vars:     Size  Location     Type
  6624 ;;  exp1            1   39[COMRAM] unsigned char 
  6625 ;;  exp2            1   38[COMRAM] unsigned char 
  6626 ;;  sign            1   37[COMRAM] unsigned char 
  6627 ;; Return value:  Size  Location     Type
  6628 ;;                  3   28[COMRAM] float 
  6629 ;; Registers used:
  6630 ;;		wreg, status,2, status,0, cstack
  6631 ;; Tracked objects:
  6632 ;;		On entry : 0/0
  6633 ;;		On exit  : 0/0
  6634 ;;		Unchanged: 0/0
  6635 ;; Data sizes:     COMRAM   BANK0   BANK1
  6636 ;;      Params:         6       0       0
  6637 ;;      Locals:         3       0       0
  6638 ;;      Temps:          3       0       0
  6639 ;;      Totals:        12       0       0
  6640 ;;Total ram usage:       12 bytes
  6641 ;; Hardware stack levels used:    1
  6642 ;; Hardware stack levels required when called:    4
  6643 ;; This function calls:
  6644 ;;		___ftpack
  6645 ;; This function is called by:
  6646 ;;		_si_mic_task
  6647 ;; This function uses a non-reentrant model
  6648 ;;
  6649                           
  6650                           	psect	text28
  6651  00107E                     __ptext28:
  6652                           	opt stack 0
  6653  00107E                     ___ftadd:
  6654                           	opt stack 1
  6655                           
  6656                           ;incstack = 0
  6657  00107E  C01F  F023         	movff	___ftadd@f1+2,??___ftadd
  6658  001082  6A24               	clrf	(??___ftadd+1)& (0+255),c
  6659  001084  6A25               	clrf	(??___ftadd+2)& (0+255),c
  6660  001086  341E               	rlcf	___ftadd@f1+1,w,c
  6661  001088  3623               	rlcf	??___ftadd& (0+255),f,c
  6662  00108A  E301               	bnc	u4861
  6663  00108C  8024               	bsf	(??___ftadd+1)& (0+255),0,c
  6664  00108E                     u4861:
  6665  00108E  5023               	movf	??___ftadd,w,c
  6666  001090  6E28               	movwf	___ftadd@exp1,c
  6667  001092  C022  F023         	movff	___ftadd@f2+2,??___ftadd
  6668  001096  6A24               	clrf	(??___ftadd+1)& (0+255),c
  6669  001098  6A25               	clrf	(??___ftadd+2)& (0+255),c
  6670  00109A  3421               	rlcf	___ftadd@f2+1,w,c
  6671  00109C  3623               	rlcf	??___ftadd& (0+255),f,c
  6672  00109E  E301               	bnc	u4871
  6673  0010A0  8024               	bsf	(??___ftadd+1)& (0+255),0,c
  6674  0010A2                     u4871:
  6675  0010A2  5023               	movf	??___ftadd,w,c
  6676  0010A4  6E27               	movwf	___ftadd@exp2,c
  6677  0010A6  5028               	movf	___ftadd@exp1,w,c
  6678  0010A8  E009               	bz	l29475
  6679  0010AA  5027               	movf	___ftadd@exp2,w,c
  6680  0010AC  5C28               	subwf	___ftadd@exp1,w,c
  6681  0010AE  E20D               	bc	l33195
  6682  0010B0  5028               	movf	___ftadd@exp1,w,c
  6683  0010B2  5C27               	subwf	___ftadd@exp2,w,c
  6684  0010B4  6E23               	movwf	??___ftadd& (0+255),c
  6685  0010B6  0E18               	movlw	24
  6686  0010B8  6423               	cpfsgt	??___ftadd,c
  6687  0010BA  D007               	goto	l33195
  6688  0010BC                     l29475:
  6689  0010BC  C020  F01D         	movff	___ftadd@f2,?___ftadd
  6690  0010C0  C021  F01E         	movff	___ftadd@f2+1,?___ftadd+1
  6691  0010C4  C022  F01F         	movff	___ftadd@f2+2,?___ftadd+2
  6692  0010C8  0012               	return	
  6693  0010CA                     l33195:
  6694  0010CA  5027               	movf	___ftadd@exp2,w,c
  6695  0010CC  E009               	bz	l29479
  6696  0010CE  5028               	movf	___ftadd@exp1,w,c
  6697  0010D0  5C27               	subwf	___ftadd@exp2,w,c
  6698  0010D2  E20D               	bc	l33201
  6699  0010D4  5027               	movf	___ftadd@exp2,w,c
  6700  0010D6  5C28               	subwf	___ftadd@exp1,w,c
  6701  0010D8  6E23               	movwf	??___ftadd& (0+255),c
  6702  0010DA  0E18               	movlw	24
  6703  0010DC  6423               	cpfsgt	??___ftadd,c
  6704  0010DE  D007               	goto	l33201
  6705  0010E0                     l29479:
  6706  0010E0  C01D  F01D         	movff	___ftadd@f1,?___ftadd
  6707  0010E4  C01E  F01E         	movff	___ftadd@f1+1,?___ftadd+1
  6708  0010E8  C01F  F01F         	movff	___ftadd@f1+2,?___ftadd+2
  6709  0010EC  0012               	return	
  6710  0010EE                     l33201:
  6711  0010EE  0E06               	movlw	6
  6712  0010F0  6E26               	movwf	___ftadd@sign,c
  6713  0010F2  BE1F               	btfsc	___ftadd@f1+2,7,c
  6714  0010F4  8E26               	bsf	___ftadd@sign,7,c
  6715  0010F6  BE22               	btfsc	___ftadd@f2+2,7,c
  6716  0010F8  8C26               	bsf	___ftadd@sign,6,c
  6717  0010FA  8E1E               	bsf	___ftadd@f1+1,7,c
  6718  0010FC  6A1F               	clrf	___ftadd@f1+2,c
  6719  0010FE  8E21               	bsf	___ftadd@f2+1,7,c
  6720  001100  6A22               	clrf	___ftadd@f2+2,c
  6721  001102  5027               	movf	___ftadd@exp2,w,c
  6722  001104  5C28               	subwf	___ftadd@exp1,w,c
  6723  001106  E214               	bc	l33227
  6724  001108                     l33217:
  6725  001108  90D8               	bcf	status,0,c
  6726  00110A  3620               	rlcf	___ftadd@f2,f,c
  6727  00110C  3621               	rlcf	___ftadd@f2+1,f,c
  6728  00110E  3622               	rlcf	___ftadd@f2+2,f,c
  6729  001110  0627               	decf	___ftadd@exp2,f,c
  6730  001112  5028               	movf	___ftadd@exp1,w,c
  6731  001114  1827               	xorwf	___ftadd@exp2,w,c
  6732  001116  E008               	bz	l33225
  6733  001118  D853               	call	PL74	;call to abstracted procedure
  6734  00111A  E006               	bz	l33225
  6735  00111C  D7F5               	goto	l33217
  6736  00111E                     l33223:
  6737  00111E  90D8               	bcf	status,0,c
  6738  001120  321F               	rrcf	___ftadd@f1+2,f,c
  6739  001122  321E               	rrcf	___ftadd@f1+1,f,c
  6740  001124  321D               	rrcf	___ftadd@f1,f,c
  6741  001126  2A28               	incf	___ftadd@exp1,f,c
  6742  001128                     l33225:
  6743  001128  5027               	movf	___ftadd@exp2,w,c
  6744  00112A  1828               	xorwf	___ftadd@exp1,w,c
  6745  00112C  E017               	bz	l29490
  6746  00112E  D7F7               	goto	l33223
  6747  001130                     l33227:
  6748  001130  5028               	movf	___ftadd@exp1,w,c
  6749  001132  5C27               	subwf	___ftadd@exp2,w,c
  6750  001134  E213               	bc	l29490
  6751  001136                     l33229:
  6752  001136  90D8               	bcf	status,0,c
  6753  001138  361D               	rlcf	___ftadd@f1,f,c
  6754  00113A  361E               	rlcf	___ftadd@f1+1,f,c
  6755  00113C  361F               	rlcf	___ftadd@f1+2,f,c
  6756  00113E  0628               	decf	___ftadd@exp1,f,c
  6757  001140  5028               	movf	___ftadd@exp1,w,c
  6758  001142  1827               	xorwf	___ftadd@exp2,w,c
  6759  001144  E008               	bz	l33237
  6760  001146  D83C               	call	PL74	;call to abstracted procedure
  6761  001148  E006               	bz	l33237
  6762  00114A  D7F5               	goto	l33229
  6763  00114C                     l33235:
  6764  00114C  90D8               	bcf	status,0,c
  6765  00114E  3222               	rrcf	___ftadd@f2+2,f,c
  6766  001150  3221               	rrcf	___ftadd@f2+1,f,c
  6767  001152  3220               	rrcf	___ftadd@f2,f,c
  6768  001154  2A27               	incf	___ftadd@exp2,f,c
  6769  001156                     l33237:
  6770  001156  5027               	movf	___ftadd@exp2,w,c
  6771  001158  1828               	xorwf	___ftadd@exp1,w,c
  6772  00115A  E1F8               	bnz	l33235
  6773  00115C                     l29490:
  6774  00115C  AE26               	btfss	___ftadd@sign,7,c
  6775  00115E  D007               	goto	l29499
  6776  001160  1E1D               	comf	___ftadd@f1,f,c
  6777  001162  1E1E               	comf	___ftadd@f1+1,f,c
  6778  001164  1E1F               	comf	___ftadd@f1+2,f,c
  6779  001166  2A1D               	incf	___ftadd@f1,f,c
  6780  001168  0E00               	movlw	0
  6781  00116A  221E               	addwfc	___ftadd@f1+1,f,c
  6782  00116C  221F               	addwfc	___ftadd@f1+2,f,c
  6783  00116E                     l29499:
  6784  00116E  BC26               	btfsc	___ftadd@sign,6,c
  6785  001170  D81F               	call	PL52	;call to abstracted procedure
  6786  001172                     l29500:
  6787  001172  6A26               	clrf	___ftadd@sign,c
  6788  001174  501D               	movf	___ftadd@f1,w,c
  6789  001176  2620               	addwf	___ftadd@f2,f,c
  6790  001178  501E               	movf	___ftadd@f1+1,w,c
  6791  00117A  2221               	addwfc	___ftadd@f2+1,f,c
  6792  00117C  501F               	movf	___ftadd@f1+2,w,c
  6793  00117E  2222               	addwfc	___ftadd@f2+2,f,c
  6794  001180  AE22               	btfss	___ftadd@f2+2,7,c
  6795  001182  D003               	goto	l33247
  6796  001184  D815               	call	PL52	;call to abstracted procedure
  6797  001186  0E01               	movlw	1
  6798  001188  6E26               	movwf	___ftadd@sign,c
  6799  00118A                     l33247:
  6800  00118A  C020  F002         	movff	___ftadd@f2,___ftpack@arg
  6801  00118E  C021  F003         	movff	___ftadd@f2+1,___ftpack@arg+1
  6802  001192  C022  F004         	movff	___ftadd@f2+2,___ftpack@arg+2
  6803  001196  C028  F005         	movff	___ftadd@exp1,___ftpack@exp
  6804  00119A  C026  F006         	movff	___ftadd@sign,___ftpack@sign
  6805  00119E  EC77  F00E         	call	___ftpack	;wreg free
  6806  0011A2  C002  F01D         	movff	?___ftpack,?___ftadd
  6807  0011A6  C003  F01E         	movff	?___ftpack+1,?___ftadd+1
  6808  0011AA  C004  F01F         	movff	?___ftpack+2,?___ftadd+2
  6809  0011AE  0012               	return		;funcret
  6810  0011B0                     __end_of___ftadd:
  6811                           	opt stack 0
  6812  0011B0                     PL52:
  6813                           	opt stack 1
  6814  0011B0  1E20               	comf	___ftadd@f2,f,c
  6815  0011B2  1E21               	comf	___ftadd@f2+1,f,c
  6816  0011B4  1E22               	comf	___ftadd@f2+2,f,c
  6817  0011B6  2A20               	incf	___ftadd@f2,f,c
  6818  0011B8  0E00               	movlw	0
  6819  0011BA  2221               	addwfc	___ftadd@f2+1,f,c
  6820  0011BC  2222               	addwfc	___ftadd@f2+2,f,c
  6821  0011BE  0C00               	retlw	0
  6822  0011C0                     __end_ofPL52:
  6823                           	opt stack 0
  6824  0011C0                     PL74:
  6825                           	opt stack 1
  6826  0011C0  0626               	decf	___ftadd@sign,f,c
  6827  0011C2  C026  F023         	movff	___ftadd@sign,??___ftadd
  6828  0011C6  0E07               	movlw	7
  6829  0011C8  1623               	andwf	??___ftadd,f,c
  6830  0011CA  0C07               	retlw	7
  6831  0011CC                     __end_ofPL74:
  6832                           	opt stack 0
  6833                           tblptru	equ	0xFF8
  6834                           tblptrh	equ	0xFF7
  6835                           tblptrl	equ	0xFF6
  6836                           tablat	equ	0xFF5
  6837                           prodh	equ	0xFF4
  6838                           prodl	equ	0xFF3
  6839                           intcon	equ	0xFF2
  6840                           postinc0	equ	0xFEE
  6841                           wreg	equ	0xFE8
  6842                           postdec1	equ	0xFE5
  6843                           fsr1l	equ	0xFE1
  6844                           indf2	equ	0xFDF
  6845                           postinc2	equ	0xFDE
  6846                           postdec2	equ	0xFDD
  6847                           fsr2h	equ	0xFDA
  6848                           fsr2l	equ	0xFD9
  6849                           status	equ	0xFD8
  6850                           
  6851 ;; *************** function ___ftpack *****************
  6852 ;; Defined at:
  6853 ;;		line 62 in file "c:\Users\Administrator\.vscode\extensions\ad.adide-1.1.4\resource\Microchip\xc8\v1.41\sources\commo
      +n\float.c"
  6854 ;; Parameters:    Size  Location     Type
  6855 ;;  arg             3    1[COMRAM] unsigned um
  6856 ;;  exp             1    4[COMRAM] unsigned char 
  6857 ;;  sign            1    5[COMRAM] unsigned char 
  6858 ;; Auto vars:     Size  Location     Type
  6859 ;;		None
  6860 ;; Return value:  Size  Location     Type
  6861 ;;                  3    1[COMRAM] float 
  6862 ;; Registers used:
  6863 ;;		wreg, status,2, status,0
  6864 ;; Tracked objects:
  6865 ;;		On entry : 0/0
  6866 ;;		On exit  : 0/0
  6867 ;;		Unchanged: 0/0
  6868 ;; Data sizes:     COMRAM   BANK0   BANK1
  6869 ;;      Params:         5       0       0
  6870 ;;      Locals:         0       0       0
  6871 ;;      Temps:          3       0       0
  6872 ;;      Totals:         8       0       0
  6873 ;;Total ram usage:        8 bytes
  6874 ;; Hardware stack levels used:    1
  6875 ;; Hardware stack levels required when called:    3
  6876 ;; This function calls:
  6877 ;;		Nothing
  6878 ;; This function is called by:
  6879 ;;		___ftadd
  6880 ;;		___ftmul
  6881 ;;		___lbtoft
  6882 ;;		___lltoft
  6883 ;; This function uses a non-reentrant model
  6884 ;;
  6885                           
  6886                           	psect	text29
  6887  001CEE                     __ptext29:
  6888                           	opt stack 0
  6889  001CEE                     ___ftpack:
  6890                           	opt stack 1
  6891                           
  6892                           ;incstack = 0
  6893  001CEE  5005               	movf	___ftpack@exp,w,c
  6894  001CF0  E004               	bz	l29440
  6895  001CF2  5002               	movf	___ftpack@arg,w,c
  6896  001CF4  1003               	iorwf	___ftpack@arg+1,w,c
  6897  001CF6  1004               	iorwf	___ftpack@arg+2,w,c
  6898  001CF8  E106               	bnz	l32515
  6899  001CFA                     l29440:
  6900  001CFA  6A02               	clrf	?___ftpack,c
  6901  001CFC  6A03               	clrf	?___ftpack+1,c
  6902  001CFE  6A04               	clrf	?___ftpack+2,c
  6903  001D00  0012               	return	
  6904  001D02                     l32513:
  6905  001D02  2A05               	incf	___ftpack@exp,f,c
  6906  001D04  D832               	call	PL90	;call to abstracted procedure
  6907  001D06                     l32515:
  6908  001D06  6A07               	clrf	??___ftpack& (0+255),c
  6909  001D08  6A08               	clrf	(??___ftpack+1)& (0+255),c
  6910  001D0A  0EFE               	movlw	254
  6911  001D0C  1404               	andwf	___ftpack@arg+2,w,c
  6912  001D0E  D828               	call	PL80	;call to abstracted procedure
  6913  001D10  E007               	bz	l32521
  6914  001D12  D7F7               	goto	l32513
  6915  001D14                     l32517:
  6916  001D14  2A05               	incf	___ftpack@exp,f,c
  6917  001D16  2A02               	incf	___ftpack@arg,f,c
  6918  001D18  0E00               	movlw	0
  6919  001D1A  2203               	addwfc	___ftpack@arg+1,f,c
  6920  001D1C  2204               	addwfc	___ftpack@arg+2,f,c
  6921  001D1E  D825               	call	PL90	;call to abstracted procedure
  6922  001D20                     l32521:
  6923  001D20  6A07               	clrf	??___ftpack& (0+255),c
  6924  001D22  6A08               	clrf	(??___ftpack+1)& (0+255),c
  6925  001D24  5004               	movf	___ftpack@arg+2,w,c
  6926  001D26  D81C               	call	PL80	;call to abstracted procedure
  6927  001D28  E006               	bz	l32525
  6928  001D2A  D7F4               	goto	l32517
  6929  001D2C                     l32523:
  6930  001D2C  0605               	decf	___ftpack@exp,f,c
  6931  001D2E  90D8               	bcf	status,0,c
  6932  001D30  3602               	rlcf	___ftpack@arg,f,c
  6933  001D32  3603               	rlcf	___ftpack@arg+1,f,c
  6934  001D34  3604               	rlcf	___ftpack@arg+2,f,c
  6935  001D36                     l32525:
  6936  001D36  BE03               	btfsc	___ftpack@arg+1,7,c
  6937  001D38  D003               	goto	l29452
  6938  001D3A  0E02               	movlw	2
  6939  001D3C  6005               	cpfslt	___ftpack@exp,c
  6940  001D3E  D7F6               	goto	l32523
  6941  001D40                     l29452:
  6942  001D40  A005               	btfss	___ftpack@exp,0,c
  6943  001D42  9E03               	bcf	___ftpack@arg+1,7,c
  6944  001D44  90D8               	bcf	status,0,c
  6945  001D46  3205               	rrcf	___ftpack@exp,f,c
  6946  001D48  5005               	movf	___ftpack@exp,w,c
  6947  001D4A  1204               	iorwf	___ftpack@arg+2,f,c
  6948  001D4C  5006               	movf	___ftpack@sign,w,c
  6949  001D4E  E001               	bz	l32539
  6950  001D50  8E04               	bsf	___ftpack@arg+2,7,c
  6951  001D52                     l32539:
  6952  001D52  C002  F002         	movff	___ftpack@arg,?___ftpack
  6953  001D56  C003  F003         	movff	___ftpack@arg+1,?___ftpack+1
  6954  001D5A  C004  F004         	movff	___ftpack@arg+2,?___ftpack+2
  6955  001D5E  0012               	return		;funcret
  6956  001D60                     __end_of___ftpack:
  6957                           	opt stack 0
  6958  001D60                     PL80:
  6959                           	opt stack 1
  6960  001D60  6E09               	movwf	(??___ftpack+2)& (0+255),c
  6961  001D62  5007               	movf	??___ftpack,w,c
  6962  001D64  1008               	iorwf	??___ftpack+1,w,c
  6963  001D66  1009               	iorwf	??___ftpack+2,w,c
  6964  001D68  0012               	return	
  6965  001D6A                     __end_ofPL80:
  6966                           	opt stack 0
  6967  001D6A                     PL90:
  6968                           	opt stack 1
  6969  001D6A  90D8               	bcf	status,0,c
  6970  001D6C  3204               	rrcf	___ftpack@arg+2,f,c
  6971  001D6E  3203               	rrcf	___ftpack@arg+1,f,c
  6972  001D70  3202               	rrcf	___ftpack@arg,f,c
  6973  001D72  0012               	return	
  6974  001D74                     __end_ofPL90:
  6975                           	opt stack 0
  6976                           tblptru	equ	0xFF8
  6977                           tblptrh	equ	0xFF7
  6978                           tblptrl	equ	0xFF6
  6979                           tablat	equ	0xFF5
  6980                           prodh	equ	0xFF4
  6981                           prodl	equ	0xFF3
  6982                           intcon	equ	0xFF2
  6983                           postinc0	equ	0xFEE
  6984                           wreg	equ	0xFE8
  6985                           postdec1	equ	0xFE5
  6986                           fsr1l	equ	0xFE1
  6987                           indf2	equ	0xFDF
  6988                           postinc2	equ	0xFDE
  6989                           postdec2	equ	0xFDD
  6990                           fsr2h	equ	0xFDA
  6991                           fsr2l	equ	0xFD9
  6992                           status	equ	0xFD8
  6993                           
  6994 ;; *************** function _key_timer_task *****************
  6995 ;; Defined at:
  6996 ;;		line 110 in file ".\src\key.c"
  6997 ;; Parameters:    Size  Location     Type
  6998 ;;  task_           1    1[COMRAM] PTR struct task
  6999 ;;		 -> task_list(80), 
  7000 ;; Auto vars:     Size  Location     Type
  7001 ;;		None
  7002 ;; Return value:  Size  Location     Type
  7003 ;;                  1    wreg      void 
  7004 ;; Registers used:
  7005 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7006 ;; Tracked objects:
  7007 ;;		On entry : 0/0
  7008 ;;		On exit  : 0/0
  7009 ;;		Unchanged: 0/0
  7010 ;; Data sizes:     COMRAM   BANK0   BANK1
  7011 ;;      Params:         1       0       0
  7012 ;;      Locals:         0       0       0
  7013 ;;      Temps:          1       0       0
  7014 ;;      Totals:         2       0       0
  7015 ;;Total ram usage:        2 bytes
  7016 ;; Hardware stack levels used:    1
  7017 ;; Hardware stack levels required when called:    3
  7018 ;; This function calls:
  7019 ;;		Nothing
  7020 ;; This function is called by:
  7021 ;;		_find_task
  7022 ;; This function uses a non-reentrant model
  7023 ;;
  7024                           
  7025                           	psect	text30
  7026  002412                     __ptext30:
  7027                           	opt stack 0
  7028  002412                     _key_timer_task:
  7029                           	opt stack 3
  7030                           
  7031                           ;key.c: 112: if(key_timer_flag)
  7032                           
  7033                           ;incstack = 0
  7034  002412  505B               	movf	_key_timer_flag,w,c
  7035  002414  E00C               	bz	l33687
  7036                           
  7037                           ;key.c: 113: {
  7038                           ;key.c: 114: task_->sucCnt++;
  7039  002416  5002               	movf	key_timer_task@task_,w,c
  7040  002418  EC25  F003         	call	PL14	;call to abstracted procedure
  7041  00241C  2ADF               	incf	indf2,f,c
  7042                           
  7043                           ;key.c: 115: if(task_->sucCnt>=14)
  7044  00241E  5002               	movf	key_timer_task@task_,w,c
  7045  002420  EC25  F003         	call	PL14	;call to abstracted procedure
  7046  002424  0E0D               	movlw	13
  7047  002426  64DF               	cpfsgt	indf2,c
  7048  002428  0C0D               	retlw	13
  7049                           
  7050                           ;key.c: 116: {
  7051                           ;key.c: 117: key_timer_flag=0;
  7052  00242A  6A5B               	clrf	_key_timer_flag,c
  7053  00242C  0012               	return	
  7054  00242E                     l33687:
  7055                           
  7056                           ;key.c: 120: else
  7057                           ;key.c: 121: {
  7058                           ;key.c: 122: task_->sucCnt=0;
  7059  00242E  5002               	movf	key_timer_task@task_,w,c
  7060  002430  EC25  F003         	call	PL14	;call to abstracted procedure
  7061  002434  6ADF               	clrf	indf2,c
  7062  002436  0C00               	retlw	0	;funcret
  7063  002438                     __end_of_key_timer_task:
  7064                           	opt stack 0
  7065                           tblptru	equ	0xFF8
  7066                           tblptrh	equ	0xFF7
  7067                           tblptrl	equ	0xFF6
  7068                           tablat	equ	0xFF5
  7069                           prodh	equ	0xFF4
  7070                           prodl	equ	0xFF3
  7071                           intcon	equ	0xFF2
  7072                           postinc0	equ	0xFEE
  7073                           wreg	equ	0xFE8
  7074                           postdec1	equ	0xFE5
  7075                           fsr1l	equ	0xFE1
  7076                           indf2	equ	0xFDF
  7077                           postinc2	equ	0xFDE
  7078                           postdec2	equ	0xFDD
  7079                           fsr2h	equ	0xFDA
  7080                           fsr2l	equ	0xFD9
  7081                           status	equ	0xFD8
  7082                           
  7083 ;; *************** function _key_task *****************
  7084 ;; Defined at:
  7085 ;;		line 16 in file ".\src\key.c"
  7086 ;; Parameters:    Size  Location     Type
  7087 ;;  task_           1   15[COMRAM] PTR struct task
  7088 ;;		 -> task_list(80), 
  7089 ;; Auto vars:     Size  Location     Type
  7090 ;;		None
  7091 ;; Return value:  Size  Location     Type
  7092 ;;                  1    wreg      void 
  7093 ;; Registers used:
  7094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7095 ;; Tracked objects:
  7096 ;;		On entry : 0/0
  7097 ;;		On exit  : 0/0
  7098 ;;		Unchanged: 0/0
  7099 ;; Data sizes:     COMRAM   BANK0   BANK1
  7100 ;;      Params:         1       0       0
  7101 ;;      Locals:         0       0       0
  7102 ;;      Temps:          1       0       0
  7103 ;;      Totals:         2       0       0
  7104 ;;Total ram usage:        2 bytes
  7105 ;; Hardware stack levels used:    1
  7106 ;; Hardware stack levels required when called:    4
  7107 ;; This function calls:
  7108 ;;		_add_task_id
  7109 ;; This function is called by:
  7110 ;;		_find_task
  7111 ;; This function uses a non-reentrant model
  7112 ;;
  7113                           
  7114                           	psect	text31
  7115  0011CC                     __ptext31:
  7116                           	opt stack 0
  7117  0011CC                     _key_task:
  7118                           	opt stack 2
  7119                           
  7120                           ;key.c: 18: if(PIND2==0 && key_o==1)
  7121                           
  7122                           ;incstack = 0
  7123  0011CC  B48B               	btfsc	3979,2,c	;volatile
  7124  0011CE  D016               	goto	l9083
  7125  0011D0  045C               	decf	_key_o,w,c
  7126  0011D2  E114               	bnz	l9083
  7127                           
  7128                           ;key.c: 19: {
  7129                           ;key.c: 20: if(key_timer_flag==1)
  7130  0011D4  045B               	decf	_key_timer_flag,w,c
  7131  0011D6  E10F               	bnz	l33621
  7132                           
  7133                           ;key.c: 21: {
  7134                           ;key.c: 22: t=task_list[key_timer_id].sucCnt;
  7135  0011D8  505A               	movf	_key_timer_id,w,c
  7136  0011DA  EC28  F00D         	call	PL46	;call to abstracted procedure
  7137  0011DE  50DF               	movf	indf2,w,c
  7138  0011E0  6E76               	movwf	_t,c
  7139                           
  7140                           ;key.c: 23: if(t<=13)
  7141  0011E2  0E0E               	movlw	14
  7142  0011E4  6076               	cpfslt	_t,c
  7143  0011E6  D01D               	goto	l33635
  7144                           
  7145                           ;key.c: 24: {
  7146                           ;key.c: 25: mode++;
  7147  0011E8  2A69               	incf	_mode,f,c
  7148                           
  7149                           ;key.c: 26: mode&=1;
  7150  0011EA  0E01               	movlw	1
  7151  0011EC  1669               	andwf	_mode,f,c
  7152                           
  7153                           ;key.c: 32: key_timer_flag=0;
  7154  0011EE  6A5B               	clrf	_key_timer_flag,c
  7155                           
  7156                           ;key.c: 33: t=15;
  7157  0011F0  0E0F               	movlw	15
  7158  0011F2  6E76               	movwf	_t,c
  7159  0011F4  D016               	goto	l33635
  7160  0011F6                     l33621:
  7161                           
  7162                           ;key.c: 36: else
  7163                           ;key.c: 37: {
  7164                           ;key.c: 38: key_timer_flag=1;
  7165  0011F6  0E01               	movlw	1
  7166  0011F8  6E5B               	movwf	_key_timer_flag,c
  7167  0011FA  D013               	goto	l33635
  7168  0011FC                     l9083:
  7169                           
  7170                           ;key.c: 41: else if(PIND2==1&&key_o==0)
  7171  0011FC  A48B               	btfss	3979,2,c	;volatile
  7172  0011FE  D011               	goto	l33635
  7173  001200  505C               	movf	_key_o,w,c
  7174  001202  E10F               	bnz	l33635
  7175                           
  7176                           ;key.c: 42: {
  7177                           ;key.c: 43: if(task_list[aip33626_task_id].active==0 && task_1_7_flag==0)
  7178  001204  5067               	movf	_aip33626_task_id,w,c
  7179  001206  EC1E  F003         	call	PL12	;call to abstracted procedure
  7180  00120A  E10B               	bnz	l33635
  7181  00120C  506C               	movf	_task_1_7_flag,w,c
  7182  00120E  E109               	bnz	l33635
  7183                           
  7184                           ;key.c: 44: {
  7185                           ;key.c: 45: mode_sub=0;
  7186  001210  6A6D               	clrf	_mode_sub,c
  7187                           
  7188                           ;key.c: 46: state_key=0;
  7189  001212  6A79               	clrf	_state_key,c
  7190                           
  7191                           ;key.c: 47: add_task_id(1,3,
  7192                           ;key.c: 48: 50,40,aip33626_task_id);
  7193  001214  0E03               	movlw	3
  7194  001216  ECF1  F002         	call	PL2	;call to abstracted procedure
  7195  00121A  ECD1  F00C         	call	_add_task_id
  7196                           
  7197                           ;key.c: 49: state_chrg=3;
  7198  00121E  0E03               	movlw	3
  7199  001220  6E77               	movwf	_state_chrg,c
  7200  001222                     l33635:
  7201                           
  7202                           ;key.c: 52: }
  7203                           ;key.c: 53: }
  7204                           ;key.c: 54: key_o=PIND2;
  7205  001222  0E00               	movlw	0
  7206  001224  B48B               	btfsc	3979,2,c	;volatile
  7207  001226  0E01               	movlw	1
  7208  001228  6E5C               	movwf	_key_o,c
  7209                           
  7210                           ;key.c: 55: if(PIND2==0)
  7211  00122A  B48B               	btfsc	3979,2,c	;volatile
  7212  00122C  D026               	goto	l33663
  7213                           
  7214                           ;key.c: 56: {
  7215                           ;key.c: 57: task_->sucCnt++;
  7216  00122E  5010               	movf	key_task@task_,w,c
  7217  001230  EC25  F003         	call	PL14	;call to abstracted procedure
  7218  001234  2ADF               	incf	indf2,f,c
  7219                           
  7220                           ;key.c: 58: if(task_->sucCnt>=187)
  7221  001236  5010               	movf	key_task@task_,w,c
  7222  001238  EC25  F003         	call	PL14	;call to abstracted procedure
  7223  00123C  0EBA               	movlw	186
  7224  00123E  64DF               	cpfsgt	indf2,c
  7225  001240  D03F               	goto	l33679
  7226                           
  7227                           ;key.c: 59: {
  7228                           ;key.c: 60: task_->sucCnt=0;
  7229  001242  5010               	movf	key_task@task_,w,c
  7230  001244  EC25  F003         	call	PL14	;call to abstracted procedure
  7231  001248  0E00               	movlw	0
  7232  00124A  6EDF               	movwf	indf2,c
  7233                           
  7234                           ;key.c: 61: if(cr_flag)
  7235  00124C  505D               	movf	_cr_flag,w,c
  7236  00124E  E038               	bz	l33679
  7237                           
  7238                           ;key.c: 62: {
  7239                           ;key.c: 63: cr_flag=0;
  7240  001250  6A5D               	clrf	_cr_flag,c
  7241                           
  7242                           ;key.c: 64: you=6;
  7243  001252  0E06               	movlw	6
  7244  001254  6E7D               	movwf	_you,c
  7245                           
  7246                           ;key.c: 65: mode_you=0;
  7247  001256  6A6B               	clrf	_mode_you,c
  7248                           
  7249                           ;key.c: 66: task_list[aip33626_task_id].active=0;
  7250  001258  EC16  F003         	call	PL10	;call to abstracted procedure
  7251                           
  7252                           ;key.c: 67: add_task_id(1,6,
  7253                           ;key.c: 68: 250,24,aip33626_task_id);
  7254  00125C  0E06               	movlw	6
  7255  00125E  6E02               	movwf	add_task_id@id2,c
  7256  001260  0EFA               	movlw	250
  7257  001262  EC11  F003         	call	PL8	;call to abstracted procedure
  7258  001266  0E18               	movlw	24
  7259  001268  EC32  F003         	call	PL22	;call to abstracted procedure
  7260  00126C  ECD1  F00C         	call	_add_task_id
  7261                           
  7262                           ;key.c: 69: breath_state=3;
  7263  001270  0E03               	movlw	3
  7264  001272  6E7A               	movwf	_breath_state,c
  7265                           
  7266                           ;key.c: 70: state_key=2;
  7267                           
  7268                           ;key.c: 71: state_smo_det=3;
  7269                           
  7270                           ;key.c: 72: state_chrg=3;
  7271  001274  EC3A  F003         	call	PL48	;call to abstracted procedure
  7272  001278  D023               	goto	l33679
  7273  00127A                     l33663:
  7274                           
  7275                           ;key.c: 79: else
  7276                           ;key.c: 80: {
  7277                           ;key.c: 81: task_->sucCnt=0;
  7278  00127A  5010               	movf	key_task@task_,w,c
  7279  00127C  EC25  F003         	call	PL14	;call to abstracted procedure
  7280  001280  6ADF               	clrf	indf2,c
  7281                           
  7282                           ;key.c: 82: }
  7283                           ;key.c: 83: switch (state_key)
  7284  001282  D01E               	goto	l33679
  7285  001284                     l33665:
  7286                           
  7287                           ;key.c: 86: if(task_list[aip33626_task_id].active==0)
  7288  001284  5067               	movf	_aip33626_task_id,w,c
  7289  001286  EC1E  F003         	call	PL12	;call to abstracted procedure
  7290  00128A  A4D8               	btfss	status,2,c
  7291  00128C  0012               	return	
  7292                           
  7293                           ;key.c: 87: {
  7294                           ;key.c: 88: mode_sub=2;
  7295  00128E  0E02               	movlw	2
  7296  001290  6E6D               	movwf	_mode_sub,c
  7297                           
  7298                           ;key.c: 89: state_key=1;
  7299  001292  0E01               	movlw	1
  7300  001294  6E79               	movwf	_state_key,c
  7301                           
  7302                           ;key.c: 90: add_task_id(1,4,
  7303                           ;key.c: 91: 250,21,aip33626_task_id);
  7304  001296  EC2A  F003         	call	PL18	;call to abstracted procedure
  7305  00129A  EC11  F003         	call	PL8	;call to abstracted procedure
  7306  00129E  0E15               	movlw	21
  7307  0012A0  D00B               	goto	L3
  7308  0012A2                     l33671:
  7309                           
  7310                           ;key.c: 95: if(task_list[aip33626_task_id].active==0)
  7311  0012A2  5067               	movf	_aip33626_task_id,w,c
  7312  0012A4  EC1E  F003         	call	PL12	;call to abstracted procedure
  7313  0012A8  A4D8               	btfss	status,2,c
  7314  0012AA  0012               	return	
  7315                           
  7316                           ;key.c: 96: {
  7317                           ;key.c: 97: mode_sub=1;
  7318  0012AC  0E01               	movlw	1
  7319  0012AE  6E6D               	movwf	_mode_sub,c
  7320                           
  7321                           ;key.c: 98: state_key=2;
  7322  0012B0  0E02               	movlw	2
  7323  0012B2  6E79               	movwf	_state_key,c
  7324                           
  7325                           ;key.c: 99: add_task_id(1,3,
  7326                           ;key.c: 100: 50,40,aip33626_task_id);
  7327  0012B4  EC34  F008         	call	PL4	;call to abstracted procedure
  7328  0012B8                     L3:
  7329  0012B8  EC32  F003         	call	PL22	;call to abstracted procedure
  7330  0012BC  EFD1  F00C         	goto	_add_task_id
  7331  0012C0                     l33679:
  7332  0012C0  5079               	movf	_state_key,w,c
  7333                           
  7334                           ; Switch size 1, requested type "space"
  7335                           ; Number of cases is 2, Range of values is 0 to 1
  7336                           ; switch strategies available:
  7337                           ; Name         Instructions Cycles
  7338                           ; simple_byte            7     4 (average)
  7339                           ;	Chosen strategy is simple_byte
  7340  0012C2  E0E0               	bz	l33665
  7341  0012C4  0A01               	xorlw	1	; case 1
  7342  0012C6  E0ED               	bz	l33671
  7343  0012C8  0012               	return		;funcret
  7344  0012CA                     __end_of_key_task:
  7345                           	opt stack 0
  7346                           tblptru	equ	0xFF8
  7347                           tblptrh	equ	0xFF7
  7348                           tblptrl	equ	0xFF6
  7349                           tablat	equ	0xFF5
  7350                           prodh	equ	0xFF4
  7351                           prodl	equ	0xFF3
  7352                           intcon	equ	0xFF2
  7353                           postinc0	equ	0xFEE
  7354                           wreg	equ	0xFE8
  7355                           postdec1	equ	0xFE5
  7356                           fsr1l	equ	0xFE1
  7357                           indf2	equ	0xFDF
  7358                           postinc2	equ	0xFDE
  7359                           postdec2	equ	0xFDD
  7360                           fsr2h	equ	0xFDA
  7361                           fsr2l	equ	0xFD9
  7362                           status	equ	0xFD8
  7363                           
  7364 ;; *************** function _chrg_task *****************
  7365 ;; Defined at:
  7366 ;;		line 17 in file ".\src\chrg.c"
  7367 ;; Parameters:    Size  Location     Type
  7368 ;;  task_           1   24[COMRAM] PTR struct task
  7369 ;;		 -> task_list(80), 
  7370 ;; Auto vars:     Size  Location     Type
  7371 ;;		None
  7372 ;; Return value:  Size  Location     Type
  7373 ;;                  1    wreg      void 
  7374 ;; Registers used:
  7375 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7376 ;; Tracked objects:
  7377 ;;		On entry : 0/0
  7378 ;;		On exit  : 0/0
  7379 ;;		Unchanged: 0/0
  7380 ;; Data sizes:     COMRAM   BANK0   BANK1
  7381 ;;      Params:         1       0       0
  7382 ;;      Locals:         0       0       0
  7383 ;;      Temps:          1       0       0
  7384 ;;      Totals:         2       0       0
  7385 ;;Total ram usage:        2 bytes
  7386 ;; Hardware stack levels used:    1
  7387 ;; Hardware stack levels required when called:    5
  7388 ;; This function calls:
  7389 ;;		_adc_bat
  7390 ;;		_add_task_id
  7391 ;; This function is called by:
  7392 ;;		_find_task
  7393 ;; This function uses a non-reentrant model
  7394 ;;
  7395                           
  7396                           	psect	text32
  7397  000F22                     __ptext32:
  7398                           	opt stack 0
  7399  000F22                     _chrg_task:
  7400                           	opt stack 1
  7401                           
  7402                           ;chrg.c: 19: if(PINA4)
  7403                           
  7404                           ;incstack = 0
  7405  000F22  A888               	btfss	3976,4,c	;volatile
  7406  000F24  D04C               	goto	l33557
  7407                           
  7408                           ;chrg.c: 20: {
  7409                           ;chrg.c: 21: if(state_chrg>=3&&breath_state>=3)
  7410  000F26  0E02               	movlw	2
  7411  000F28  6477               	cpfsgt	_state_chrg,c
  7412  000F2A  D014               	goto	l33525
  7413  000F2C  647A               	cpfsgt	_breath_state,c
  7414  000F2E  D012               	goto	l33525
  7415                           
  7416                           ;chrg.c: 22: {
  7417                           ;chrg.c: 23: if(task_list[aip33626_task_id].active==0 && task_1_7_flag==0)
  7418  000F30  5067               	movf	_aip33626_task_id,w,c
  7419  000F32  EC1E  F003         	call	PL12	;call to abstracted procedure
  7420  000F36  E10E               	bnz	l33525
  7421  000F38  506C               	movf	_task_1_7_flag,w,c
  7422  000F3A  E10C               	bnz	l33525
  7423                           
  7424                           ;chrg.c: 24: {
  7425                           ;chrg.c: 25: mode_sub=0;
  7426  000F3C  6A6D               	clrf	_mode_sub,c
  7427                           
  7428                           ;chrg.c: 26: mode_dian=2;
  7429  000F3E  0E02               	movlw	2
  7430  000F40  6E6A               	movwf	_mode_dian,c
  7431                           
  7432                           ;chrg.c: 27: add_task_id(1,3,
  7433                           ;chrg.c: 28: 50,40,aip33626_task_id);
  7434  000F42  0E03               	movlw	3
  7435  000F44  ECF1  F002         	call	PL2	;call to abstracted procedure
  7436  000F48  ECD1  F00C         	call	_add_task_id
  7437                           
  7438                           ;chrg.c: 30: state_chrg=0;
  7439  000F4C  6A77               	clrf	_state_chrg,c
  7440                           
  7441                           ;chrg.c: 31: state_key=3;
  7442  000F4E  0E03               	movlw	3
  7443  000F50  6E79               	movwf	_state_key,c
  7444                           
  7445                           ;chrg.c: 33: state_smo_det=3;
  7446  000F52  6E78               	movwf	_state_smo_det,c
  7447  000F54                     l33525:
  7448                           
  7449                           ;chrg.c: 34: }
  7450                           ;chrg.c: 35: }
  7451                           ;chrg.c: 36: if(PINA5)
  7452  000F54  AA88               	btfss	3976,5,c	;volatile
  7453  000F56  D006               	goto	l6857
  7454                           
  7455                           ;chrg.c: 37: {
  7456                           ;chrg.c: 38: if(task_1_7_flag==0)
  7457  000F58  506C               	movf	_task_1_7_flag,w,c
  7458  000F5A  E102               	bnz	l6858
  7459                           
  7460                           ;chrg.c: 39: {
  7461                           ;chrg.c: 40: task_1_7_init=1;
  7462  000F5C  0E01               	movlw	1
  7463  000F5E  6E5E               	movwf	_task_1_7_init,c
  7464  000F60                     l6858:
  7465                           
  7466                           ;chrg.c: 41: }
  7467                           ;chrg.c: 42: task_1_7_flag=1;
  7468  000F60  0E01               	movlw	1
  7469  000F62  6E6C               	movwf	_task_1_7_flag,c
  7470  000F64                     l6857:
  7471                           
  7472                           ;chrg.c: 44: }
  7473                           ;chrg.c: 45: if(task_1_7_init)
  7474  000F64  505E               	movf	_task_1_7_init,w,c
  7475  000F66  E013               	bz	l33541
  7476                           
  7477                           ;chrg.c: 46: {
  7478                           ;chrg.c: 47: task_1_7_init=0;
  7479  000F68  6A5E               	clrf	_task_1_7_init,c
  7480                           
  7481                           ;chrg.c: 48: dian=6;
  7482  000F6A  0E06               	movlw	6
  7483  000F6C  6E7C               	movwf	_dian,c
  7484                           
  7485                           ;chrg.c: 49: mode_dian=0;
  7486  000F6E  6A6A               	clrf	_mode_dian,c
  7487                           
  7488                           ;chrg.c: 50: state_chrg=3;
  7489  000F70  0E03               	movlw	3
  7490  000F72  6E77               	movwf	_state_chrg,c
  7491                           
  7492                           ;chrg.c: 51: task_list[aip33626_task_id].active=0;
  7493  000F74  EC16  F003         	call	PL10	;call to abstracted procedure
  7494                           
  7495                           ;chrg.c: 52: add_task_id(1,7,
  7496                           ;chrg.c: 53: 8,1,aip33626_task_id);
  7497  000F78  0E07               	movlw	7
  7498  000F7A  6E02               	movwf	add_task_id@id2,c
  7499  000F7C  0E08               	movlw	8
  7500  000F7E  EC11  F003         	call	PL8	;call to abstracted procedure
  7501  000F82  0E01               	movlw	1
  7502  000F84  6E07               	movwf	add_task_id@suc_max,c
  7503  000F86  C067  F008         	movff	_aip33626_task_id,add_task_id@task_id
  7504  000F8A  ECD1  F00C         	call	_add_task_id
  7505  000F8E                     l33541:
  7506                           
  7507                           ;chrg.c: 54: }
  7508                           ;chrg.c: 55: task_->sucCnt++;
  7509  000F8E  5019               	movf	chrg_task@task_,w,c
  7510  000F90  EC25  F003         	call	PL14	;call to abstracted procedure
  7511  000F94  2ADF               	incf	indf2,f,c
  7512                           
  7513                           ;chrg.c: 56: if(task_->sucCnt>=240)
  7514  000F96  5019               	movf	chrg_task@task_,w,c
  7515  000F98  EC25  F003         	call	PL14	;call to abstracted procedure
  7516  000F9C  0EEF               	movlw	239
  7517  000F9E  64DF               	cpfsgt	indf2,c
  7518  000FA0  D013               	goto	l33561
  7519                           
  7520                           ;chrg.c: 57: {
  7521                           ;chrg.c: 58: task_->sucCnt=0;
  7522  000FA2  5019               	movf	chrg_task@task_,w,c
  7523  000FA4  EC25  F003         	call	PL14	;call to abstracted procedure
  7524  000FA8  6ADF               	clrf	indf2,c
  7525                           
  7526                           ;chrg.c: 59: cd_fz++;
  7527  000FAA  2A5F               	incf	_cd_fz,f,c
  7528                           
  7529                           ;chrg.c: 60: if(cd_fz>=13)
  7530  000FAC  0E0C               	movlw	12
  7531  000FAE  645F               	cpfsgt	_cd_fz,c
  7532  000FB0  D00B               	goto	l33561
  7533                           
  7534                           ;chrg.c: 61: {
  7535                           ;chrg.c: 62: if(dian<5)
  7536  000FB2  0E05               	movlw	5
  7537  000FB4  607C               	cpfslt	_dian,c
  7538  000FB6  D001               	goto	l33555
  7539                           
  7540                           ;chrg.c: 63: {
  7541                           ;chrg.c: 64: dian++;
  7542  000FB8  2A7C               	incf	_dian,f,c
  7543  000FBA                     l33555:
  7544                           
  7545                           ;chrg.c: 65: }
  7546                           ;chrg.c: 66: cd_fz=0;
  7547  000FBA  6A5F               	clrf	_cd_fz,c
  7548  000FBC  D005               	goto	l33561
  7549  000FBE                     l33557:
  7550                           
  7551                           ;chrg.c: 70: else
  7552                           ;chrg.c: 71: {
  7553                           ;chrg.c: 72: task_->sucCnt=0;
  7554  000FBE  5019               	movf	chrg_task@task_,w,c
  7555  000FC0  EC25  F003         	call	PL14	;call to abstracted procedure
  7556  000FC4  6ADF               	clrf	indf2,c
  7557  000FC6  D7F9               	goto	l33555
  7558  000FC8                     l33561:
  7559                           
  7560                           ;chrg.c: 74: }
  7561                           ;chrg.c: 75: if(PINA4==0 && usb_det_o)
  7562  000FC8  B888               	btfsc	3976,4,c	;volatile
  7563  000FCA  D017               	goto	l33575
  7564  000FCC  5060               	movf	_usb_det_o,w,c
  7565  000FCE  E015               	bz	l33575
  7566                           
  7567                           ;chrg.c: 76: {
  7568                           ;chrg.c: 77: task_list[aip33626_task_id].active=0;
  7569  000FD0  EC16  F003         	call	PL10	;call to abstracted procedure
  7570                           
  7571                           ;chrg.c: 78: add_task_id(1,8,
  7572                           ;chrg.c: 79: 250,7,aip33626_task_id);
  7573  000FD4  0E08               	movlw	8
  7574  000FD6  6E02               	movwf	add_task_id@id2,c
  7575  000FD8  0EFA               	movlw	250
  7576  000FDA  EC11  F003         	call	PL8	;call to abstracted procedure
  7577  000FDE  0E07               	movlw	7
  7578  000FE0  6E07               	movwf	add_task_id@suc_max,c
  7579  000FE2  D84A               	call	PL30	;call to abstracted procedure
  7580  000FE4  ECD1  F00C         	call	_add_task_id
  7581                           
  7582                           ;chrg.c: 80: state_chrg=3;
  7583  000FE8  0E03               	movlw	3
  7584  000FEA  6E77               	movwf	_state_chrg,c
  7585                           
  7586                           ;chrg.c: 81: task_1_7_flag=0;
  7587  000FEC  6A6C               	clrf	_task_1_7_flag,c
  7588                           
  7589                           ;chrg.c: 83: bat=adc_bat();
  7590  000FEE  ECBA  F00E         	call	_adc_bat	;wreg free
  7591  000FF2  C00F  F070         	movff	?_adc_bat,_bat
  7592  000FF6  C010  F071         	movff	?_adc_bat+1,_bat+1
  7593  000FFA                     l33575:
  7594                           
  7595                           ;chrg.c: 84: }
  7596                           ;chrg.c: 86: usb_det_o=PINA4;
  7597  000FFA  0E00               	movlw	0
  7598  000FFC  B888               	btfsc	3976,4,c	;volatile
  7599  000FFE  0E01               	movlw	1
  7600  001000  6E60               	movwf	_usb_det_o,c
  7601                           
  7602                           ;chrg.c: 87: switch (state_chrg)
  7603  001002  D02B               	goto	l33601
  7604  001004                     l33577:
  7605                           
  7606                           ;chrg.c: 90: if(task_list[aip33626_task_id].active==0)
  7607  001004  5067               	movf	_aip33626_task_id,w,c
  7608  001006  EC1E  F003         	call	PL12	;call to abstracted procedure
  7609  00100A  A4D8               	btfss	status,2,c
  7610  00100C  0012               	return	
  7611                           
  7612                           ;chrg.c: 91: {
  7613                           ;chrg.c: 92: mode_sub=2;
  7614  00100E  0E02               	movlw	2
  7615  001010  6E6D               	movwf	_mode_sub,c
  7616                           
  7617                           ;chrg.c: 93: state_chrg=1;
  7618  001012  0E01               	movlw	1
  7619  001014  6E77               	movwf	_state_chrg,c
  7620                           
  7621                           ;chrg.c: 94: mode_dian=0;
  7622  001016  6A6A               	clrf	_mode_dian,c
  7623                           
  7624                           ;chrg.c: 95: add_task_id(1,4,
  7625                           ;chrg.c: 96: 250,21,aip33626_task_id);
  7626  001018  EC2A  F003         	call	PL18	;call to abstracted procedure
  7627  00101C  EC11  F003         	call	PL8	;call to abstracted procedure
  7628  001020  0E15               	movlw	21
  7629  001022  D00B               	goto	L4
  7630  001024                     l33585:
  7631                           
  7632                           ;chrg.c: 101: if(task_list[aip33626_task_id].active==0)
  7633  001024  5067               	movf	_aip33626_task_id,w,c
  7634  001026  EC1E  F003         	call	PL12	;call to abstracted procedure
  7635  00102A  A4D8               	btfss	status,2,c
  7636  00102C  0012               	return	
  7637                           
  7638                           ;chrg.c: 102: {
  7639                           ;chrg.c: 103: mode_sub=1;
  7640  00102E  0E01               	movlw	1
  7641  001030  6E6D               	movwf	_mode_sub,c
  7642                           
  7643                           ;chrg.c: 104: state_chrg=2;
  7644  001032  0E02               	movlw	2
  7645  001034  6E77               	movwf	_state_chrg,c
  7646  001036  D00F               	goto	L5
  7647  001038                     l33589:
  7648                           
  7649                           ;chrg.c: 106: add_task_id(1,3,
  7650                           ;chrg.c: 107: 50,40,aip33626_task_id);
  7651  001038  D817               	call	PL4	;call to abstracted procedure
  7652  00103A                     L4:
  7653  00103A  6E07               	movwf	add_task_id@suc_max,c
  7654  00103C  D81D               	call	PL30	;call to abstracted procedure
  7655  00103E  EFD1  F00C         	goto	_add_task_id
  7656  001042                     l6871:
  7657                           
  7658                           ;chrg.c: 111: if(PINA4&&task_list[aip33626_task_id].active==0)
  7659  001042  A888               	btfss	3976,4,c	;volatile
  7660  001044  0012               	return	
  7661  001046  5067               	movf	_aip33626_task_id,w,c
  7662  001048  EC1E  F003         	call	PL12	;call to abstracted procedure
  7663  00104C  A4D8               	btfss	status,2,c
  7664  00104E  0012               	return	
  7665                           
  7666                           ;chrg.c: 112: {
  7667                           ;chrg.c: 113: mode_sub=0;
  7668  001050  6A6D               	clrf	_mode_sub,c
  7669                           
  7670                           ;chrg.c: 114: state_chrg=0;
  7671  001052  6A77               	clrf	_state_chrg,c
  7672                           
  7673                           ;chrg.c: 115: mode_dian=2;
  7674  001054  0E02               	movlw	2
  7675  001056                     L5:
  7676  001056  6E6A               	movwf	_mode_dian,c
  7677  001058  D7EF               	goto	l33589
  7678  00105A                     l33601:
  7679  00105A  5077               	movf	_state_chrg,w,c
  7680                           
  7681                           ; Switch size 1, requested type "space"
  7682                           ; Number of cases is 3, Range of values is 0 to 2
  7683                           ; switch strategies available:
  7684                           ; Name         Instructions Cycles
  7685                           ; simple_byte           10     6 (average)
  7686                           ;	Chosen strategy is simple_byte
  7687  00105C  E0D3               	bz	l33577
  7688  00105E  0A01               	xorlw	1	; case 1
  7689  001060  E0E1               	bz	l33585
  7690  001062  0A03               	xorlw	3	; case 2
  7691  001064  E0EE               	bz	l6871
  7692  001066  0012               	return		;funcret
  7693  001068                     __end_of_chrg_task:
  7694                           	opt stack 0
  7695  001068                     PL4:
  7696                           	opt stack 2
  7697  001068  0E03               	movlw	3
  7698  00106A  6E02               	movwf	add_task_id@id2,c
  7699  00106C  0E32               	movlw	50
  7700  00106E  6E03               	movwf	add_task_id@interval_ms,c
  7701  001070  6A04               	clrf	add_task_id@interval_ms+1,c
  7702  001072  6A05               	clrf	add_task_id@interval_ms+2,c
  7703  001074  6A06               	clrf	add_task_id@interval_ms+3,c
  7704  001076  0C28               	retlw	40
  7705  001078                     __end_ofPL4:
  7706                           	opt stack 0
  7707  001078                     PL30:
  7708                           	opt stack 1
  7709  001078  C067  F008         	movff	_aip33626_task_id,add_task_id@task_id
  7710  00107C  0C01               	retlw	1
  7711  00107E                     __end_ofPL30:
  7712                           	opt stack 0
  7713                           tblptru	equ	0xFF8
  7714                           tblptrh	equ	0xFF7
  7715                           tblptrl	equ	0xFF6
  7716                           tablat	equ	0xFF5
  7717                           prodh	equ	0xFF4
  7718                           prodl	equ	0xFF3
  7719                           intcon	equ	0xFF2
  7720                           postinc0	equ	0xFEE
  7721                           wreg	equ	0xFE8
  7722                           postdec1	equ	0xFE5
  7723                           fsr1l	equ	0xFE1
  7724                           indf2	equ	0xFDF
  7725                           postinc2	equ	0xFDE
  7726                           postdec2	equ	0xFDD
  7727                           fsr2h	equ	0xFDA
  7728                           fsr2l	equ	0xFD9
  7729                           status	equ	0xFD8
  7730                           
  7731 ;; *************** function _add_task_id *****************
  7732 ;; Defined at:
  7733 ;;		line 47 in file ".\src\task.c"
  7734 ;; Parameters:    Size  Location     Type
  7735 ;;  id1             1    wreg     unsigned char 
  7736 ;;  id2             1    1[COMRAM] unsigned char 
  7737 ;;  interval_ms     4    2[COMRAM] unsigned long 
  7738 ;;  suc_max         1    6[COMRAM] unsigned char 
  7739 ;;  task_id         1    7[COMRAM] unsigned char 
  7740 ;; Auto vars:     Size  Location     Type
  7741 ;;  id1             1   12[COMRAM] unsigned char 
  7742 ;;  interval_tic    2   13[COMRAM] unsigned int 
  7743 ;; Return value:  Size  Location     Type
  7744 ;;                  1    wreg      unsigned char 
  7745 ;; Registers used:
  7746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7747 ;; Tracked objects:
  7748 ;;		On entry : 0/F
  7749 ;;		On exit  : 0/0
  7750 ;;		Unchanged: 0/0
  7751 ;; Data sizes:     COMRAM   BANK0   BANK1
  7752 ;;      Params:         7       0       0
  7753 ;;      Locals:         3       0       0
  7754 ;;      Temps:          4       0       0
  7755 ;;      Totals:        14       0       0
  7756 ;;Total ram usage:       14 bytes
  7757 ;; Hardware stack levels used:    1
  7758 ;; Hardware stack levels required when called:    3
  7759 ;; This function calls:
  7760 ;;		Nothing
  7761 ;; This function is called by:
  7762 ;;		_chrg_task
  7763 ;;		_key_task
  7764 ;;		_main
  7765 ;;		_si_mic_task
  7766 ;;		_smo_det_task
  7767 ;; This function uses a non-reentrant model
  7768 ;;
  7769                           
  7770                           	psect	text33
  7771  0019A2                     __ptext33:
  7772                           	opt stack 0
  7773  0019A2                     _add_task_id:
  7774                           	opt stack 2
  7775                           
  7776                           ;incstack = 0
  7777                           ;add_task_id@id1 stored from wreg
  7778  0019A2  6E0D               	movwf	add_task_id@id1,c
  7779                           
  7780                           ;task.c: 48: unsigned int interval_ticks = interval_ms >>3;
  7781  0019A4  C003  F009         	movff	add_task_id@interval_ms,??_add_task_id
  7782  0019A8  C004  F00A         	movff	add_task_id@interval_ms+1,??_add_task_id+1
  7783  0019AC  C005  F00B         	movff	add_task_id@interval_ms+2,??_add_task_id+2
  7784  0019B0  C006  F00C         	movff	add_task_id@interval_ms+3,??_add_task_id+3
  7785  0019B4  0E04               	movlw	4
  7786  0019B6  D005               	goto	u4670
  7787  0019B8                     u4675:
  7788  0019B8  90D8               	bcf	status,0,c
  7789  0019BA  320C               	rrcf	??_add_task_id+3,f,c
  7790  0019BC  320B               	rrcf	??_add_task_id+2,f,c
  7791  0019BE  320A               	rrcf	??_add_task_id+1,f,c
  7792  0019C0  3209               	rrcf	??_add_task_id,f,c
  7793  0019C2                     u4670:
  7794  0019C2  2EE8               	decfsz	wreg,f,c
  7795  0019C4  D7F9               	goto	u4675
  7796  0019C6  C009  F00E         	movff	??_add_task_id,add_task_id@interval_ticks
  7797  0019CA  C00A  F00F         	movff	??_add_task_id+1,add_task_id@interval_ticks+1
  7798                           
  7799                           ;task.c: 51: if(interval_ticks == 0 || id1 == 0 ||id2==0 ||task_id>=8)
  7800  0019CE  500E               	movf	add_task_id@interval_ticks,w,c
  7801  0019D0  100F               	iorwf	add_task_id@interval_ticks+1,w,c
  7802  0019D2  B4D8               	btfsc	status,2,c
  7803  0019D4  0CFF               	retlw	255
  7804  0019D6  500D               	movf	add_task_id@id1,w,c
  7805  0019D8  B4D8               	btfsc	status,2,c
  7806  0019DA  0CFF               	retlw	255
  7807  0019DC  5002               	movf	add_task_id@id2,w,c
  7808  0019DE  B4D8               	btfsc	status,2,c
  7809  0019E0  0CFF               	retlw	255
  7810  0019E2  0E07               	movlw	7
  7811  0019E4  6408               	cpfsgt	add_task_id@task_id,c
  7812  0019E6  D001               	goto	l32923
  7813  0019E8  0CFF               	retlw	255
  7814  0019EA                     l32923:
  7815                           
  7816                           ;task.c: 54: }
  7817                           ;task.c: 58: if(!task_list[task_id].active) {
  7818  0019EA  5008               	movf	add_task_id@task_id,w,c
  7819  0019EC  EC1E  F003         	call	PL12	;call to abstracted procedure
  7820  0019F0  A4D8               	btfss	status,2,c
  7821  0019F2  0CFF               	retlw	255
  7822                           
  7823                           ;task.c: 60: TMR1IE=0;
  7824  0019F4  92A1               	bcf	4001,1,c	;volatile
  7825                           
  7826                           ;task.c: 62: task_list[task_id].id1 = id1;
  7827  0019F6  5008               	movf	add_task_id@task_id,w,c
  7828  0019F8  ECC9  F009         	call	PL66	;call to abstracted procedure
  7829  0019FC  C00D  FFDF         	movff	add_task_id@id1,indf2
  7830                           
  7831                           ;task.c: 63: task_list[task_id].id2 = id2;
  7832  001A00  5008               	movf	add_task_id@task_id,w,c
  7833  001A02  ECCF  F009         	call	PL68	;call to abstracted procedure
  7834  001A06  C002  FFDF         	movff	add_task_id@id2,indf2
  7835                           
  7836                           ;task.c: 64: task_list[task_id].interval = interval_ticks;
  7837  001A0A  5008               	movf	add_task_id@task_id,w,c
  7838  001A0C  ECDB  F009         	call	PL76	;call to abstracted procedure
  7839                           
  7840                           ;task.c: 65: task_list[task_id].counter = interval_ticks;
  7841  001A10  D815               	call	PL34	;call to abstracted procedure
  7842  001A12  0F88               	addlw	low (_task_list+2)
  7843                           
  7844                           ;task.c: 66: task_list[task_id].active = 1;
  7845  001A14  D813               	call	PL34	;call to abstracted procedure
  7846  001A16  0F8C               	addlw	low (_task_list+6)
  7847  001A18  ECC4  F009         	call	PL50	;call to abstracted procedure
  7848                           
  7849                           ;task.c: 67: task_list[task_id].ready = 1;
  7850  001A1C  5008               	movf	add_task_id@task_id,w,c
  7851  001A1E  ECBE  F009         	call	PL44	;call to abstracted procedure
  7852  001A22  0E01               	movlw	1
  7853  001A24  6EDF               	movwf	indf2,c
  7854                           
  7855                           ;task.c: 68: task_list[task_id].maxSuc=suc_max;
  7856  001A26  5008               	movf	add_task_id@task_id,w,c
  7857  001A28  ECD5  F009         	call	PL70	;call to abstracted procedure
  7858  001A2C  C007  FFDF         	movff	add_task_id@suc_max,indf2
  7859                           
  7860                           ;task.c: 69: task_list[task_id].sucCnt=0;
  7861  001A30  5008               	movf	add_task_id@task_id,w,c
  7862  001A32  D80E               	call	PL46	;call to abstracted procedure
  7863  001A34  6ADF               	clrf	indf2,c
  7864                           
  7865                           ;task.c: 71: TMR1IE=1;
  7866  001A36  82A1               	bsf	4001,1,c	;volatile
  7867                           
  7868                           ;task.c: 72: return task_id;
  7869  001A38  5008               	movf	add_task_id@task_id,w,c
  7870  001A3A  0012               	return		;funcret
  7871  001A3C                     __end_of_add_task_id:
  7872                           	opt stack 0
  7873  001A3C                     PL34:
  7874                           	opt stack 2
  7875  001A3C  6ED9               	movwf	fsr2l,c
  7876  001A3E  6ADA               	clrf	fsr2h,c
  7877  001A40  C00E  FFDE         	movff	add_task_id@interval_ticks,postinc2
  7878  001A44  C00F  FFDD         	movff	add_task_id@interval_ticks+1,postdec2
  7879  001A48  5008               	movf	add_task_id@task_id,w,c
  7880  001A4A  0D0A               	mullw	10
  7881  001A4C  50F3               	movf	prodl,w,c
  7882  001A4E  0012               	return	
  7883  001A50                     __end_ofPL34:
  7884                           	opt stack 0
  7885  001A50                     PL46:
  7886                           	opt stack 2
  7887  001A50  0D0A               	mullw	10
  7888  001A52  50F3               	movf	prodl,w,c
  7889  001A54  0F8F               	addlw	low (_task_list+9)
  7890  001A56  6ED9               	movwf	fsr2l,c
  7891  001A58  6ADA               	clrf	fsr2h,c
  7892  001A5A  0012               	return	
  7893  001A5C                     __end_ofPL46:
  7894                           	opt stack 0
  7895                           tblptru	equ	0xFF8
  7896                           tblptrh	equ	0xFF7
  7897                           tblptrl	equ	0xFF6
  7898                           tablat	equ	0xFF5
  7899                           prodh	equ	0xFF4
  7900                           prodl	equ	0xFF3
  7901                           intcon	equ	0xFF2
  7902                           postinc0	equ	0xFEE
  7903                           wreg	equ	0xFE8
  7904                           postdec1	equ	0xFE5
  7905                           fsr1l	equ	0xFE1
  7906                           indf2	equ	0xFDF
  7907                           postinc2	equ	0xFDE
  7908                           postdec2	equ	0xFDD
  7909                           fsr2h	equ	0xFDA
  7910                           fsr2l	equ	0xFD9
  7911                           status	equ	0xFD8
  7912                           
  7913 ;; *************** function _bat_task *****************
  7914 ;; Defined at:
  7915 ;;		line 9 in file ".\src\bat.c"
  7916 ;; Parameters:    Size  Location     Type
  7917 ;;  task_           1   24[COMRAM] PTR struct task
  7918 ;;		 -> task_list(80), 
  7919 ;; Auto vars:     Size  Location     Type
  7920 ;;		None
  7921 ;; Return value:  Size  Location     Type
  7922 ;;                  1    wreg      void 
  7923 ;; Registers used:
  7924 ;;		wreg, status,2, status,0, cstack
  7925 ;; Tracked objects:
  7926 ;;		On entry : 0/0
  7927 ;;		On exit  : 0/0
  7928 ;;		Unchanged: 0/0
  7929 ;; Data sizes:     COMRAM   BANK0   BANK1
  7930 ;;      Params:         1       0       0
  7931 ;;      Locals:         0       0       0
  7932 ;;      Temps:          0       0       0
  7933 ;;      Totals:         1       0       0
  7934 ;;Total ram usage:        1 bytes
  7935 ;; Hardware stack levels used:    1
  7936 ;; Hardware stack levels required when called:    5
  7937 ;; This function calls:
  7938 ;;		_adc_bat
  7939 ;; This function is called by:
  7940 ;;		_find_task
  7941 ;; This function uses a non-reentrant model
  7942 ;;
  7943                           
  7944                           	psect	text34
  7945  001BBC                     __ptext34:
  7946                           	opt stack 0
  7947  001BBC                     _bat_task:
  7948                           	opt stack 1
  7949                           
  7950                           ;bat.c: 11: if(!PINC3&&PD0&&PB3&&!PINA4&&(dl0_flag==0)&&(dl1_flag==0))
  7951                           
  7952                           ;incstack = 0
  7953  001BBC  A68A               	btfss	3978,3,c	;volatile
  7954  001BBE  A083               	btfss	3971,0,c	;volatile
  7955  001BC0  0012               	return	
  7956  001BC2  B681               	btfsc	3969,3,c	;volatile
  7957  001BC4  B888               	btfsc	3976,4,c	;volatile
  7958  001BC6  0012               	return	
  7959  001BC8  5063               	movf	_dl0_flag,w,c
  7960  001BCA  A4D8               	btfss	status,2,c
  7961  001BCC  0012               	return	
  7962  001BCE  5062               	movf	_dl1_flag,w,c
  7963  001BD0  A4D8               	btfss	status,2,c
  7964  001BD2  0012               	return	
  7965                           
  7966                           ;bat.c: 12: {
  7967                           ;bat.c: 14: bat_o=adc_bat();
  7968  001BD4  ECBA  F00E         	call	_adc_bat	;wreg free
  7969  001BD8  C00F  F04F         	movff	?_adc_bat,_bat_o
  7970  001BDC  C010  F050         	movff	?_adc_bat+1,_bat_o+1
  7971                           
  7972                           ;bat.c: 15: if(bat_o<bat)
  7973  001BE0  5070               	movf	_bat,w,c
  7974  001BE2  5C4F               	subwf	_bat_o,w,c
  7975  001BE4  5071               	movf	_bat+1,w,c
  7976  001BE6  5850               	subwfb	_bat_o+1,w,c
  7977  001BE8  E204               	bc	l33455
  7978                           
  7979                           ;bat.c: 16: {
  7980                           ;bat.c: 17: bat=bat_o;
  7981  001BEA  C04F  F070         	movff	_bat_o,_bat
  7982  001BEE  C050  F071         	movff	_bat_o+1,_bat+1
  7983  001BF2                     l33455:
  7984                           
  7985                           ;bat.c: 18: }
  7986                           ;bat.c: 20: if(bat<=334)
  7987  001BF2  0E4F               	movlw	79
  7988  001BF4  5C70               	subwf	_bat,w,c
  7989  001BF6  0E01               	movlw	1
  7990  001BF8  5871               	subwfb	_bat+1,w,c
  7991  001BFA  E201               	bc	l33459
  7992                           
  7993                           ;bat.c: 21: {
  7994                           ;bat.c: 22: mode_dian=1;
  7995                           
  7996                           ;bat.c: 23: dian=1;
  7997                           
  7998                           ;bat.c: 24: low_bat_flag=1;
  7999                           
  8000                           ;bat.c: 25: }
  8001  001BFC  D02D               	goto	PL72	;call to abstracted procedure
  8002  001BFE                     l33459:
  8003                           
  8004                           ;bat.c: 26: else if(bat<340)
  8005  001BFE  0E54               	movlw	84
  8006  001C00  5C70               	subwf	_bat,w,c
  8007  001C02  0E01               	movlw	1
  8008  001C04  5871               	subwfb	_bat+1,w,c
  8009  001C06  E205               	bc	l33467
  8010                           
  8011                           ;bat.c: 27: {
  8012                           ;bat.c: 28: mode_dian=0;
  8013  001C08  6A6A               	clrf	_mode_dian,c
  8014                           
  8015                           ;bat.c: 29: dian=1;
  8016  001C0A  0E01               	movlw	1
  8017  001C0C                     L6:
  8018  001C0C  6E7C               	movwf	_dian,c
  8019                           
  8020                           ;bat.c: 30: low_bat_flag=0;
  8021  001C0E  6A61               	clrf	_low_bat_flag,c
  8022                           
  8023                           ;bat.c: 31: }
  8024  001C10  0012               	return	
  8025  001C12                     l33467:
  8026                           
  8027                           ;bat.c: 32: else if(bat<350)
  8028  001C12  0E5E               	movlw	94
  8029  001C14  5C70               	subwf	_bat,w,c
  8030  001C16  0E01               	movlw	1
  8031  001C18  5871               	subwfb	_bat+1,w,c
  8032  001C1A  E203               	bc	l33475
  8033                           
  8034                           ;bat.c: 33: {
  8035                           ;bat.c: 34: mode_dian=0;
  8036  001C1C  6A6A               	clrf	_mode_dian,c
  8037                           
  8038                           ;bat.c: 35: dian=2;
  8039  001C1E  0E02               	movlw	2
  8040  001C20  D7F5               	goto	L6
  8041  001C22                     l33475:
  8042                           
  8043                           ;bat.c: 38: else if(bat<360)
  8044  001C22  0E68               	movlw	104
  8045  001C24  5C70               	subwf	_bat,w,c
  8046  001C26  0E01               	movlw	1
  8047  001C28  5871               	subwfb	_bat+1,w,c
  8048  001C2A  E203               	bc	l33483
  8049                           
  8050                           ;bat.c: 39: {
  8051                           ;bat.c: 40: mode_dian=0;
  8052  001C2C  6A6A               	clrf	_mode_dian,c
  8053                           
  8054                           ;bat.c: 41: dian=3;
  8055  001C2E  0E03               	movlw	3
  8056  001C30  D7ED               	goto	L6
  8057  001C32                     l33483:
  8058                           
  8059                           ;bat.c: 44: else if(bat<370)
  8060  001C32  0E72               	movlw	114
  8061  001C34  5C70               	subwf	_bat,w,c
  8062  001C36  0E01               	movlw	1
  8063  001C38  5871               	subwfb	_bat+1,w,c
  8064  001C3A  E203               	bc	l33491
  8065                           
  8066                           ;bat.c: 45: {
  8067                           ;bat.c: 46: mode_dian=0;
  8068  001C3C  6A6A               	clrf	_mode_dian,c
  8069                           
  8070                           ;bat.c: 47: dian=4;
  8071  001C3E  0E04               	movlw	4
  8072  001C40  D7E5               	goto	L6
  8073  001C42                     l33491:
  8074                           
  8075                           ;bat.c: 50: else if(bat<380)
  8076  001C42  0E7C               	movlw	124
  8077  001C44  5C70               	subwf	_bat,w,c
  8078  001C46  0E01               	movlw	1
  8079  001C48  5871               	subwfb	_bat+1,w,c
  8080  001C4A  E203               	bc	l4645
  8081                           
  8082                           ;bat.c: 51: {
  8083                           ;bat.c: 52: mode_dian=0;
  8084  001C4C  6A6A               	clrf	_mode_dian,c
  8085                           
  8086                           ;bat.c: 53: dian=5;
  8087  001C4E  0E05               	movlw	5
  8088  001C50  D7DD               	goto	L6
  8089  001C52                     l4645:
  8090                           
  8091                           ;bat.c: 56: else
  8092                           ;bat.c: 57: {
  8093                           ;bat.c: 58: mode_dian=0;
  8094  001C52  6A6A               	clrf	_mode_dian,c
  8095                           
  8096                           ;bat.c: 59: dian=6;
  8097  001C54  0E06               	movlw	6
  8098  001C56  D7DA               	goto	L6
  8099  001C58                     __end_of_bat_task:
  8100                           	opt stack 0
  8101  001C58                     PL72:
  8102                           	opt stack 1
  8103  001C58  0E01               	movlw	1
  8104  001C5A  6E6A               	movwf	_mode_dian,c
  8105  001C5C  6E7C               	movwf	_dian,c
  8106  001C5E  6E61               	movwf	_low_bat_flag,c
  8107  001C60  0C01               	retlw	1
  8108  001C62                     __end_ofPL72:
  8109                           	opt stack 0
  8110                           tblptru	equ	0xFF8
  8111                           tblptrh	equ	0xFF7
  8112                           tblptrl	equ	0xFF6
  8113                           tablat	equ	0xFF5
  8114                           prodh	equ	0xFF4
  8115                           prodl	equ	0xFF3
  8116                           intcon	equ	0xFF2
  8117                           postinc0	equ	0xFEE
  8118                           wreg	equ	0xFE8
  8119                           postdec1	equ	0xFE5
  8120                           fsr1l	equ	0xFE1
  8121                           indf2	equ	0xFDF
  8122                           postinc2	equ	0xFDE
  8123                           postdec2	equ	0xFDD
  8124                           fsr2h	equ	0xFDA
  8125                           fsr2l	equ	0xFD9
  8126                           status	equ	0xFD8
  8127                           
  8128 ;; *************** function _adc_bat *****************
  8129 ;; Defined at:
  8130 ;;		line 303 in file ".\src\periph.c"
  8131 ;; Parameters:    Size  Location     Type
  8132 ;;		None
  8133 ;; Auto vars:     Size  Location     Type
  8134 ;;  t_              4   20[COMRAM] unsigned long 
  8135 ;;  t               2   18[COMRAM] unsigned short 
  8136 ;; Return value:  Size  Location     Type
  8137 ;;                  2   14[COMRAM] unsigned short 
  8138 ;; Registers used:
  8139 ;;		wreg, status,2, status,0, cstack
  8140 ;; Tracked objects:
  8141 ;;		On entry : 0/0
  8142 ;;		On exit  : 0/0
  8143 ;;		Unchanged: 0/0
  8144 ;; Data sizes:     COMRAM   BANK0   BANK1
  8145 ;;      Params:         2       0       0
  8146 ;;      Locals:         6       0       0
  8147 ;;      Temps:          2       0       0
  8148 ;;      Totals:        10       0       0
  8149 ;;Total ram usage:       10 bytes
  8150 ;; Hardware stack levels used:    1
  8151 ;; Hardware stack levels required when called:    4
  8152 ;; This function calls:
  8153 ;;		___lldiv
  8154 ;; This function is called by:
  8155 ;;		_bat_task
  8156 ;;		_chrg_task
  8157 ;; This function uses a non-reentrant model
  8158 ;;
  8159                           
  8160                           	psect	text35
  8161  001D74                     __ptext35:
  8162                           	opt stack 0
  8163  001D74                     _adc_bat:
  8164                           	opt stack 1
  8165                           
  8166                           ;periph.c: 305: u16 t;
  8167                           ;periph.c: 306: u32 t_=409500ul;
  8168                           
  8169                           ;incstack = 0
  8170  001D74  0E9C               	movlw	156
  8171  001D76  6E15               	movwf	adc_bat@t_,c
  8172  001D78  0E3F               	movlw	63
  8173  001D7A  6E16               	movwf	adc_bat@t_+1,c
  8174  001D7C  0E06               	movlw	6
  8175  001D7E  6E17               	movwf	adc_bat@t_+2,c
  8176  001D80  6A18               	clrf	adc_bat@t_+3,c
  8177                           
  8178                           ;periph.c: 307: ADCCLKEN = 1;
  8179  001D82  010F               	movlb	15	; () banked
  8180  001D84  8B62               	bsf	98,5,b	;volatile
  8181                           
  8182                           ;periph.c: 308: ADCON0 = 0X3D;
  8183  001D86  0E3D               	movlw	61
  8184  001D88  6EA6               	movwf	4006,c	;volatile
  8185                           
  8186                           ;periph.c: 309: ADCON1 = 0XDC;
  8187  001D8A  0EDC               	movlw	220
  8188  001D8C  6EA5               	movwf	4005,c	;volatile
  8189                           
  8190                           ; BSR set to: 15
  8191                           ;periph.c: 310: ADCON3 = 0x00;
  8192  001D8E  6B13               	clrf	19,b	;volatile
  8193                           
  8194                           ; BSR set to: 15
  8195                           ;periph.c: 311: ADCON4 = 0x00;
  8196  001D90  6B12               	clrf	18,b	;volatile
  8197                           
  8198                           ; BSR set to: 15
  8199                           ;periph.c: 312: ADIF=0;
  8200  001D92  9A9C               	bcf	3996,5,c	;volatile
  8201                           
  8202                           ; BSR set to: 15
  8203                           ;periph.c: 313: ADIE=0;
  8204  001D94  9A9B               	bcf	3995,5,c	;volatile
  8205                           
  8206                           ; BSR set to: 15
  8207                           ;periph.c: 314: _delay((unsigned long)((10)*(16000000/4000000.0)));
  8208  001D96  0E0D               	movlw	13
  8209  001D98                     u7497:
  8210  001D98  2EE8               	decfsz	wreg,f,c
  8211  001D9A  D7FE               	bra	u7497
  8212  001D9C  F000               	nop	
  8213                           
  8214                           ;periph.c: 315: GO=1;
  8215  001D9E  82A6               	bsf	4006,1,c	;volatile
  8216  001DA0                     l15832:
  8217  001DA0  B2A6               	btfsc	4006,1,c	;volatile
  8218  001DA2  D7FE               	goto	l15832
  8219                           
  8220                           ;periph.c: 317: ADIF=0;
  8221  001DA4  9A9C               	bcf	3996,5,c	;volatile
  8222                           
  8223                           ;periph.c: 318: t=((ADRESH&0x0f)<<8)|ADRESL;
  8224  001DA6  50A8               	movf	4008,w,c	;volatile
  8225  001DA8  0B0F               	andlw	15
  8226  001DAA  6E12               	movwf	(??_adc_bat+1)& (0+255),c
  8227  001DAC  6A11               	clrf	??_adc_bat& (0+255),c
  8228  001DAE  50A7               	movf	4007,w,c	;volatile
  8229  001DB0  1011               	iorwf	??_adc_bat,w,c
  8230  001DB2  6E13               	movwf	adc_bat@t,c
  8231  001DB4  5012               	movf	??_adc_bat+1,w,c
  8232  001DB6  6E14               	movwf	adc_bat@t+1,c
  8233                           
  8234                           ;periph.c: 320: t_=t_/t;
  8235  001DB8  C015  F002         	movff	adc_bat@t_,___lldiv@dividend
  8236  001DBC  C016  F003         	movff	adc_bat@t_+1,___lldiv@dividend+1
  8237  001DC0  C017  F004         	movff	adc_bat@t_+2,___lldiv@dividend+2
  8238  001DC4  C018  F005         	movff	adc_bat@t_+3,___lldiv@dividend+3
  8239  001DC8  C013  F006         	movff	adc_bat@t,___lldiv@divisor
  8240  001DCC  C014  F007         	movff	adc_bat@t+1,___lldiv@divisor+1
  8241  001DD0  6A08               	clrf	___lldiv@divisor+2,c
  8242  001DD2  6A09               	clrf	___lldiv@divisor+3,c
  8243  001DD4  EC73  F00F         	call	___lldiv	;wreg free
  8244  001DD8  C002  F015         	movff	?___lldiv,adc_bat@t_
  8245  001DDC  C003  F016         	movff	?___lldiv+1,adc_bat@t_+1
  8246  001DE0  C004  F017         	movff	?___lldiv+2,adc_bat@t_+2
  8247  001DE4  C005  F018         	movff	?___lldiv+3,adc_bat@t_+3
  8248                           
  8249                           ;periph.c: 326: return t_;
  8250  001DE8  C015  F00F         	movff	adc_bat@t_,?_adc_bat
  8251  001DEC  C016  F010         	movff	adc_bat@t_+1,?_adc_bat+1
  8252  001DF0  0012               	return		;funcret
  8253  001DF2                     __end_of_adc_bat:
  8254                           	opt stack 0
  8255                           tblptru	equ	0xFF8
  8256                           tblptrh	equ	0xFF7
  8257                           tblptrl	equ	0xFF6
  8258                           tablat	equ	0xFF5
  8259                           prodh	equ	0xFF4
  8260                           prodl	equ	0xFF3
  8261                           intcon	equ	0xFF2
  8262                           postinc0	equ	0xFEE
  8263                           wreg	equ	0xFE8
  8264                           postdec1	equ	0xFE5
  8265                           fsr1l	equ	0xFE1
  8266                           indf2	equ	0xFDF
  8267                           postinc2	equ	0xFDE
  8268                           postdec2	equ	0xFDD
  8269                           fsr2h	equ	0xFDA
  8270                           fsr2l	equ	0xFD9
  8271                           status	equ	0xFD8
  8272                           
  8273 ;; *************** function ___lldiv *****************
  8274 ;; Defined at:
  8275 ;;		line 8 in file "c:\Users\Administrator\.vscode\extensions\ad.adide-1.1.4\resource\Microchip\xc8\v1.41\sources\common
      +\lldiv.c"
  8276 ;; Parameters:    Size  Location     Type
  8277 ;;  dividend        4    1[COMRAM] unsigned long 
  8278 ;;  divisor         4    5[COMRAM] unsigned long 
  8279 ;; Auto vars:     Size  Location     Type
  8280 ;;  quotient        4    9[COMRAM] unsigned long 
  8281 ;;  counter         1   13[COMRAM] unsigned char 
  8282 ;; Return value:  Size  Location     Type
  8283 ;;                  4    1[COMRAM] unsigned long 
  8284 ;; Registers used:
  8285 ;;		wreg, status,2, status,0
  8286 ;; Tracked objects:
  8287 ;;		On entry : 0/0
  8288 ;;		On exit  : 0/0
  8289 ;;		Unchanged: 0/0
  8290 ;; Data sizes:     COMRAM   BANK0   BANK1
  8291 ;;      Params:         8       0       0
  8292 ;;      Locals:         5       0       0
  8293 ;;      Temps:          0       0       0
  8294 ;;      Totals:        13       0       0
  8295 ;;Total ram usage:       13 bytes
  8296 ;; Hardware stack levels used:    1
  8297 ;; Hardware stack levels required when called:    3
  8298 ;; This function calls:
  8299 ;;		Nothing
  8300 ;; This function is called by:
  8301 ;;		_adc_bat
  8302 ;;		_si_mic_task
  8303 ;; This function uses a non-reentrant model
  8304 ;;
  8305                           
  8306                           	psect	text36
  8307  001EE6                     __ptext36:
  8308                           	opt stack 0
  8309  001EE6                     ___lldiv:
  8310                           	opt stack 2
  8311                           
  8312                           ;incstack = 0
  8313  001EE6  6A0A               	clrf	___lldiv@quotient,c
  8314  001EE8  6A0B               	clrf	___lldiv@quotient+1,c
  8315  001EEA  6A0C               	clrf	___lldiv@quotient+2,c
  8316  001EEC  6A0D               	clrf	___lldiv@quotient+3,c
  8317  001EEE  5006               	movf	___lldiv@divisor,w,c
  8318  001EF0  1007               	iorwf	___lldiv@divisor+1,w,c
  8319  001EF2  1008               	iorwf	___lldiv@divisor+2,w,c
  8320  001EF4  1009               	iorwf	___lldiv@divisor+3,w,c
  8321  001EF6  E029               	bz	l29577
  8322  001EF8  0E01               	movlw	1
  8323  001EFA  6E0E               	movwf	___lldiv@counter,c
  8324  001EFC  D006               	goto	l32551
  8325  001EFE                     l32549:
  8326  001EFE  90D8               	bcf	status,0,c
  8327  001F00  3606               	rlcf	___lldiv@divisor,f,c
  8328  001F02  3607               	rlcf	___lldiv@divisor+1,f,c
  8329  001F04  3608               	rlcf	___lldiv@divisor+2,f,c
  8330  001F06  3609               	rlcf	___lldiv@divisor+3,f,c
  8331  001F08  2A0E               	incf	___lldiv@counter,f,c
  8332  001F0A                     l32551:
  8333  001F0A  AE09               	btfss	___lldiv@divisor+3,7,c
  8334  001F0C  D7F8               	goto	l32549
  8335  001F0E                     l32553:
  8336  001F0E  90D8               	bcf	status,0,c
  8337  001F10  360A               	rlcf	___lldiv@quotient,f,c
  8338  001F12  360B               	rlcf	___lldiv@quotient+1,f,c
  8339  001F14  360C               	rlcf	___lldiv@quotient+2,f,c
  8340  001F16  360D               	rlcf	___lldiv@quotient+3,f,c
  8341  001F18  5006               	movf	___lldiv@divisor,w,c
  8342  001F1A  5C02               	subwf	___lldiv@dividend,w,c
  8343  001F1C  5007               	movf	___lldiv@divisor+1,w,c
  8344  001F1E  5803               	subwfb	___lldiv@dividend+1,w,c
  8345  001F20  5008               	movf	___lldiv@divisor+2,w,c
  8346  001F22  5804               	subwfb	___lldiv@dividend+2,w,c
  8347  001F24  5009               	movf	___lldiv@divisor+3,w,c
  8348  001F26  5805               	subwfb	___lldiv@dividend+3,w,c
  8349  001F28  E309               	bnc	l32561
  8350  001F2A  5006               	movf	___lldiv@divisor,w,c
  8351  001F2C  5E02               	subwf	___lldiv@dividend,f,c
  8352  001F2E  5007               	movf	___lldiv@divisor+1,w,c
  8353  001F30  5A03               	subwfb	___lldiv@dividend+1,f,c
  8354  001F32  5008               	movf	___lldiv@divisor+2,w,c
  8355  001F34  5A04               	subwfb	___lldiv@dividend+2,f,c
  8356  001F36  5009               	movf	___lldiv@divisor+3,w,c
  8357  001F38  5A05               	subwfb	___lldiv@dividend+3,f,c
  8358  001F3A  800A               	bsf	___lldiv@quotient,0,c
  8359  001F3C                     l32561:
  8360  001F3C  90D8               	bcf	status,0,c
  8361  001F3E  3209               	rrcf	___lldiv@divisor+3,f,c
  8362  001F40  3208               	rrcf	___lldiv@divisor+2,f,c
  8363  001F42  3207               	rrcf	___lldiv@divisor+1,f,c
  8364  001F44  3206               	rrcf	___lldiv@divisor,f,c
  8365  001F46  2E0E               	decfsz	___lldiv@counter,f,c
  8366  001F48  D7E2               	goto	l32553
  8367  001F4A                     l29577:
  8368  001F4A  C00A  F002         	movff	___lldiv@quotient,?___lldiv
  8369  001F4E  C00B  F003         	movff	___lldiv@quotient+1,?___lldiv+1
  8370  001F52  C00C  F004         	movff	___lldiv@quotient+2,?___lldiv+2
  8371  001F56  C00D  F005         	movff	___lldiv@quotient+3,?___lldiv+3
  8372  001F5A  0012               	return		;funcret
  8373  001F5C                     __end_of___lldiv:
  8374                           	opt stack 0
  8375                           tblptru	equ	0xFF8
  8376                           tblptrh	equ	0xFF7
  8377                           tblptrl	equ	0xFF6
  8378                           tablat	equ	0xFF5
  8379                           prodh	equ	0xFF4
  8380                           prodl	equ	0xFF3
  8381                           intcon	equ	0xFF2
  8382                           postinc0	equ	0xFEE
  8383                           wreg	equ	0xFE8
  8384                           postdec1	equ	0xFE5
  8385                           fsr1l	equ	0xFE1
  8386                           indf2	equ	0xFDF
  8387                           postinc2	equ	0xFDE
  8388                           postdec2	equ	0xFDD
  8389                           fsr2h	equ	0xFDA
  8390                           fsr2l	equ	0xFD9
  8391                           status	equ	0xFD8
  8392                           
  8393 ;; *************** function _aip33626_sys_begin *****************
  8394 ;; Defined at:
  8395 ;;		line 916 in file ".\src\aip33626.c"
  8396 ;; Parameters:    Size  Location     Type
  8397 ;;  task_           1   10[COMRAM] PTR struct task
  8398 ;;		 -> task_list(80), 
  8399 ;; Auto vars:     Size  Location     Type
  8400 ;;		None
  8401 ;; Return value:  Size  Location     Type
  8402 ;;                  1    wreg      void 
  8403 ;; Registers used:
  8404 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8405 ;; Tracked objects:
  8406 ;;		On entry : 0/0
  8407 ;;		On exit  : 0/0
  8408 ;;		Unchanged: 0/0
  8409 ;; Data sizes:     COMRAM   BANK0   BANK1
  8410 ;;      Params:         1       0       0
  8411 ;;      Locals:         0       0       0
  8412 ;;      Temps:          1       0       0
  8413 ;;      Totals:         2       0       0
  8414 ;;Total ram usage:        2 bytes
  8415 ;; Hardware stack levels used:    1
  8416 ;; Hardware stack levels required when called:    7
  8417 ;; This function calls:
  8418 ;;		_aip33626_allDisplay_
  8419 ;; This function is called by:
  8420 ;;		_find_task
  8421 ;; This function uses a non-reentrant model
  8422 ;;
  8423                           
  8424                           	psect	text37
  8425  002558                     __ptext37:
  8426                           	opt stack 0
  8427  002558                     _aip33626_sys_begin:
  8428                           	opt stack 0
  8429                           
  8430                           ;aip33626.c: 918: if(task_->sucCnt==2)
  8431                           
  8432                           ;incstack = 0
  8433 ;; hardware stack exceeded
  8434  002558  500B               	movf	aip33626_sys_begin@task_,w,c
  8435  00255A  6ED9               	movwf	fsr2l,c
  8436  00255C  6ADA               	clrf	fsr2h,c
  8437  00255E  0E09               	movlw	9
  8438  002560  26D9               	addwf	fsr2l,f,c
  8439  002562  0E02               	movlw	2
  8440  002564  18DE               	xorwf	postinc2,w,c
  8441  002566  E103               	bnz	l33355
  8442                           
  8443                           ;aip33626.c: 919: {
  8444                           ;aip33626.c: 920: aip33626_allDisplay_(0);
  8445  002568  0E00               	movlw	0
  8446  00256A  EFD8  F011         	goto	_aip33626_allDisplay_
  8447  00256E                     l33355:
  8448                           
  8449                           ;aip33626.c: 922: }
  8450                           ;aip33626.c: 923: aip33626_allDisplay_(255);
  8451  00256E  0EFF               	movlw	255
  8452  002570  EFD8  F011         	goto	_aip33626_allDisplay_
  8453  002574                     __end_of_aip33626_sys_begin:
  8454                           	opt stack 0
  8455                           tblptru	equ	0xFF8
  8456                           tblptrh	equ	0xFF7
  8457                           tblptrl	equ	0xFF6
  8458                           tablat	equ	0xFF5
  8459                           prodh	equ	0xFF4
  8460                           prodl	equ	0xFF3
  8461                           intcon	equ	0xFF2
  8462                           postinc0	equ	0xFEE
  8463                           wreg	equ	0xFE8
  8464                           postdec1	equ	0xFE5
  8465                           fsr1l	equ	0xFE1
  8466                           indf2	equ	0xFDF
  8467                           postinc2	equ	0xFDE
  8468                           postdec2	equ	0xFDD
  8469                           fsr2h	equ	0xFDA
  8470                           fsr2l	equ	0xFD9
  8471                           status	equ	0xFD8
  8472                           
  8473 ;; *************** function _aip33626_smo_reset *****************
  8474 ;; Defined at:
  8475 ;;		line 1061 in file ".\src\aip33626.c"
  8476 ;; Parameters:    Size  Location     Type
  8477 ;;  task_           1   11[COMRAM] PTR struct task
  8478 ;;		 -> task_list(80), 
  8479 ;; Auto vars:     Size  Location     Type
  8480 ;;		None
  8481 ;; Return value:  Size  Location     Type
  8482 ;;                  1    wreg      void 
  8483 ;; Registers used:
  8484 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8485 ;; Tracked objects:
  8486 ;;		On entry : 0/0
  8487 ;;		On exit  : 0/0
  8488 ;;		Unchanged: 0/0
  8489 ;; Data sizes:     COMRAM   BANK0   BANK1
  8490 ;;      Params:         1       0       0
  8491 ;;      Locals:         0       0       0
  8492 ;;      Temps:          1       0       0
  8493 ;;      Totals:         2       0       0
  8494 ;;Total ram usage:        2 bytes
  8495 ;; Hardware stack levels used:    1
  8496 ;; Hardware stack levels required when called:    7
  8497 ;; This function calls:
  8498 ;;		_aip33626_allDisplay
  8499 ;;		_arr_col_init
  8500 ;; This function is called by:
  8501 ;;		_find_task
  8502 ;; This function uses a non-reentrant model
  8503 ;;
  8504                           
  8505                           	psect	text38
  8506  001B14                     __ptext38:
  8507                           	opt stack 0
  8508  001B14                     _aip33626_smo_reset:
  8509                           	opt stack 0
  8510                           
  8511                           ;aip33626.c: 1063: if(task_->sucCnt==0)
  8512                           
  8513                           ;incstack = 0
  8514 ;; hardware stack exceeded
  8515  001B14  500C               	movf	aip33626_smo_reset@task_,w,c
  8516  001B16  6ED9               	movwf	fsr2l,c
  8517  001B18  6ADA               	clrf	fsr2h,c
  8518  001B1A  0E09               	movlw	9
  8519  001B1C  26D9               	addwf	fsr2l,f,c
  8520  001B1E  50DF               	movf	indf2,w,c
  8521  001B20  E103               	bnz	l33405
  8522                           
  8523                           ;aip33626.c: 1064: {
  8524                           ;aip33626.c: 1068: arr_col_init(0);
  8525  001B22  0E00               	movlw	0
  8526  001B24  EC80  F012         	call	_arr_col_init
  8527  001B28                     l33405:
  8528                           
  8529                           ;aip33626.c: 1069: }
  8530                           ;aip33626.c: 1071: if(task_->sucCnt<=19&& !((task_->sucCnt)& 0x01 ))
  8531  001B28  500C               	movf	aip33626_smo_reset@task_,w,c
  8532  001B2A  6ED9               	movwf	fsr2l,c
  8533  001B2C  6ADA               	clrf	fsr2h,c
  8534  001B2E  0E09               	movlw	9
  8535  001B30  26D9               	addwf	fsr2l,f,c
  8536  001B32  0E14               	movlw	20
  8537  001B34  60DF               	cpfslt	indf2,c
  8538  001B36  D00B               	goto	l33411
  8539  001B38  500C               	movf	aip33626_smo_reset@task_,w,c
  8540  001B3A  6ED9               	movwf	fsr2l,c
  8541  001B3C  6ADA               	clrf	fsr2h,c
  8542  001B3E  0E09               	movlw	9
  8543  001B40  26D9               	addwf	fsr2l,f,c
  8544  001B42  B0DF               	btfsc	indf2,0,c
  8545  001B44  D004               	goto	l33411
  8546                           
  8547                           ;aip33626.c: 1072: {
  8548                           ;aip33626.c: 1074: arr_col[0 ]=250;
  8549  001B46  0EFA               	movlw	250
  8550  001B48  0101               	movlb	1	; () banked
  8551  001B4A  6F00               	movwf	_arr_col& (0+255),b
  8552  001B4C  D02B               	goto	L7
  8553  001B4E                     l33411:
  8554                           
  8555                           ;aip33626.c: 1082: else if((task_->sucCnt<=20&&((task_->sucCnt)&0x01))||task_->sucCnt==2
      +                          3)
  8556  001B4E  500C               	movf	aip33626_smo_reset@task_,w,c
  8557  001B50  6ED9               	movwf	fsr2l,c
  8558  001B52  6ADA               	clrf	fsr2h,c
  8559  001B54  0E09               	movlw	9
  8560  001B56  26D9               	addwf	fsr2l,f,c
  8561  001B58  0E15               	movlw	21
  8562  001B5A  60DF               	cpfslt	indf2,c
  8563  001B5C  D007               	goto	l33415
  8564  001B5E  500C               	movf	aip33626_smo_reset@task_,w,c
  8565  001B60  6ED9               	movwf	fsr2l,c
  8566  001B62  6ADA               	clrf	fsr2h,c
  8567  001B64  0E09               	movlw	9
  8568  001B66  26D9               	addwf	fsr2l,f,c
  8569  001B68  B0DF               	btfsc	indf2,0,c
  8570  001B6A  D008               	goto	l2408
  8571  001B6C                     l33415:
  8572  001B6C  500C               	movf	aip33626_smo_reset@task_,w,c
  8573  001B6E  6ED9               	movwf	fsr2l,c
  8574  001B70  6ADA               	clrf	fsr2h,c
  8575  001B72  0E09               	movlw	9
  8576  001B74  26D9               	addwf	fsr2l,f,c
  8577  001B76  0E17               	movlw	23
  8578  001B78  18DE               	xorwf	postinc2,w,c
  8579  001B7A  E109               	bnz	l33417
  8580  001B7C                     l2408:
  8581                           
  8582                           ;aip33626.c: 1083: {
  8583                           ;aip33626.c: 1084: arr_col[0 ]=0;
  8584  001B7C  0101               	movlb	1	; () banked
  8585  001B7E  6B00               	clrf	_arr_col& (0+255),b
  8586                           
  8587                           ;aip33626.c: 1085: arr_col[16]=0;
  8588  001B80  6B10               	clrf	(_arr_col+16)& (0+255),b
  8589                           
  8590                           ;aip33626.c: 1086: arr_col[32]=0;
  8591  001B82  6B20               	clrf	(_arr_col+32)& (0+255),b
  8592                           
  8593                           ;aip33626.c: 1087: arr_col[48]=0;
  8594  001B84  6B30               	clrf	(_arr_col+48)& (0+255),b
  8595                           
  8596                           ;aip33626.c: 1088: arr_col[64]=0;
  8597  001B86  6B40               	clrf	(_arr_col+64)& (0+255),b
  8598                           
  8599                           ;aip33626.c: 1089: arr_col[80]=0;
  8600  001B88  6B50               	clrf	(_arr_col+80)& (0+255),b
  8601                           
  8602                           ;aip33626.c: 1090: arr_col[96]=0;
  8603  001B8A  6B60               	clrf	(_arr_col+96)& (0+255),b
  8604                           
  8605                           ;aip33626.c: 1091: }
  8606  001B8C  D011               	goto	l33423
  8607  001B8E                     l33417:
  8608                           
  8609                           ;aip33626.c: 1092: else if(task_->sucCnt==20)
  8610  001B8E  500C               	movf	aip33626_smo_reset@task_,w,c
  8611  001B90  6ED9               	movwf	fsr2l,c
  8612  001B92  6ADA               	clrf	fsr2h,c
  8613  001B94  0E09               	movlw	9
  8614  001B96  26D9               	addwf	fsr2l,f,c
  8615  001B98  0E14               	movlw	20
  8616  001B9A  18DE               	xorwf	postinc2,w,c
  8617  001B9C  E109               	bnz	l33423
  8618                           
  8619                           ;aip33626.c: 1093: {
  8620                           ;aip33626.c: 1094: arr_col[0 ]=0;
  8621  001B9E  0101               	movlb	1	; () banked
  8622  001BA0  6B00               	clrf	_arr_col& (0+255),b
  8623                           
  8624                           ; BSR set to: 1
  8625                           ;aip33626.c: 1095: arr_col[16]=250;
  8626  001BA2  0EFA               	movlw	250
  8627  001BA4                     L7:
  8628  001BA4  6F10               	movwf	(_arr_col+16)& (0+255),b
  8629                           
  8630                           ;aip33626.c: 1096: arr_col[32]=250;
  8631  001BA6  6F20               	movwf	(_arr_col+32)& (0+255),b
  8632                           
  8633                           ;aip33626.c: 1097: arr_col[48]=250;
  8634  001BA8  6F30               	movwf	(_arr_col+48)& (0+255),b
  8635                           
  8636                           ;aip33626.c: 1098: arr_col[64]=250;
  8637  001BAA  6F40               	movwf	(_arr_col+64)& (0+255),b
  8638                           
  8639                           ;aip33626.c: 1099: arr_col[80]=250;
  8640  001BAC  6F50               	movwf	(_arr_col+80)& (0+255),b
  8641                           
  8642                           ;aip33626.c: 1100: arr_col[96]=250;
  8643  001BAE  6F60               	movwf	(_arr_col+96)& (0+255),b
  8644  001BB0                     l33423:
  8645                           
  8646                           ;aip33626.c: 1101: }
  8647                           ;aip33626.c: 1102: aip33626_allDisplay(arr_col);
  8648  001BB0  0E00               	movlw	low _arr_col
  8649  001BB2  6E09               	movwf	aip33626_allDisplay@num,c
  8650  001BB4  0E01               	movlw	high _arr_col
  8651  001BB6  6E0A               	movwf	aip33626_allDisplay@num+1,c
  8652  001BB8  EF98  F011         	goto	_aip33626_allDisplay	;wreg free
  8653  001BBC                     __end_of_aip33626_smo_reset:
  8654                           	opt stack 0
  8655                           tblptru	equ	0xFF8
  8656                           tblptrh	equ	0xFF7
  8657                           tblptrl	equ	0xFF6
  8658                           tablat	equ	0xFF5
  8659                           prodh	equ	0xFF4
  8660                           prodl	equ	0xFF3
  8661                           intcon	equ	0xFF2
  8662                           postinc0	equ	0xFEE
  8663                           wreg	equ	0xFE8
  8664                           postdec1	equ	0xFE5
  8665                           fsr1l	equ	0xFE1
  8666                           indf2	equ	0xFDF
  8667                           postinc2	equ	0xFDE
  8668                           postdec2	equ	0xFDD
  8669                           fsr2h	equ	0xFDA
  8670                           fsr2l	equ	0xFD9
  8671                           status	equ	0xFD8
  8672                           
  8673 ;; *************** function _aip33626_freeChrg *****************
  8674 ;; Defined at:
  8675 ;;		line 1157 in file ".\src\aip33626.c"
  8676 ;; Parameters:    Size  Location     Type
  8677 ;;  task_           1   13[COMRAM] PTR struct task
  8678 ;;		 -> task_list(80), 
  8679 ;; Auto vars:     Size  Location     Type
  8680 ;;		None
  8681 ;; Return value:  Size  Location     Type
  8682 ;;                  1    wreg      void 
  8683 ;; Registers used:
  8684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8685 ;; Tracked objects:
  8686 ;;		On entry : 0/0
  8687 ;;		On exit  : 0/0
  8688 ;;		Unchanged: 0/0
  8689 ;; Data sizes:     COMRAM   BANK0   BANK1
  8690 ;;      Params:         1       0       0
  8691 ;;      Locals:         0       0       0
  8692 ;;      Temps:          0       0       0
  8693 ;;      Totals:         1       0       0
  8694 ;;Total ram usage:        1 bytes
  8695 ;; Hardware stack levels used:    1
  8696 ;; Hardware stack levels required when called:    8
  8697 ;; This function calls:
  8698 ;;		_aip33626_allDisplay
  8699 ;;		_aip33626_allDisplay_
  8700 ;;		_aip33626_batFull
  8701 ;; This function is called by:
  8702 ;;		_find_task
  8703 ;; This function uses a non-reentrant model
  8704 ;;
  8705                           
  8706                           	psect	text39
  8707  002158                     __ptext39:
  8708                           	opt stack 0
  8709  002158                     _aip33626_freeChrg:
  8710                           	opt stack 0
  8711                           
  8712                           ;aip33626.c: 1159: if(task_->sucCnt&0x01)
  8713                           
  8714                           ;incstack = 0
  8715 ;; hardware stack exceeded
  8716  002158  500E               	movf	aip33626_freeChrg@task_,w,c
  8717  00215A  6ED9               	movwf	fsr2l,c
  8718  00215C  6ADA               	clrf	fsr2h,c
  8719  00215E  0E09               	movlw	9
  8720  002160  26D9               	addwf	fsr2l,f,c
  8721  002162  A0DF               	btfss	indf2,0,c
  8722  002164  D022               	goto	l33435
  8723                           
  8724                           ;aip33626.c: 1160: {
  8725                           ;aip33626.c: 1161: aip33626_batFull(task_);
  8726  002166  C00E  F00C         	movff	aip33626_freeChrg@task_,aip33626_batFull@task_
  8727  00216A  ECE7  F00F         	call	_aip33626_batFull	;wreg free
  8728                           
  8729                           ;aip33626.c: 1162: switch (dian)
  8730  00216E  D00B               	goto	l33431
  8731  002170                     l2433:
  8732                           
  8733                           ;aip33626.c: 1165: arr_col[33]=0;
  8734  002170  0101               	movlb	1	; () banked
  8735  002172  6B21               	clrf	(_arr_col+33)& (0+255),b
  8736  002174                     l2434:
  8737                           
  8738                           ;aip33626.c: 1167: arr_col[49]=0;
  8739  002174  0101               	movlb	1	; () banked
  8740  002176  6B31               	clrf	(_arr_col+49)& (0+255),b
  8741  002178                     l2435:
  8742                           
  8743                           ;aip33626.c: 1169: arr_col[65]=0;
  8744  002178  0101               	movlb	1	; () banked
  8745  00217A  6B41               	clrf	(_arr_col+65)& (0+255),b
  8746  00217C                     l2436:
  8747                           
  8748                           ;aip33626.c: 1171: arr_col[81]=0;
  8749  00217C  0101               	movlb	1	; () banked
  8750  00217E  6B51               	clrf	(_arr_col+81)& (0+255),b
  8751  002180                     l2437:
  8752                           
  8753                           ;aip33626.c: 1173: arr_col[97]=0;
  8754  002180  0101               	movlb	1	; () banked
  8755  002182  6B61               	clrf	(_arr_col+97)& (0+255),b
  8756  002184  D00C               	goto	l33433
  8757  002186                     l33431:
  8758  002186  507C               	movf	_dian,w,c
  8759                           
  8760                           ; Switch size 1, requested type "space"
  8761                           ; Number of cases is 6, Range of values is 1 to 6
  8762                           ; switch strategies available:
  8763                           ; Name         Instructions Cycles
  8764                           ; simple_byte           19    10 (average)
  8765                           ;	Chosen strategy is simple_byte
  8766  002188  0A01               	xorlw	1	; case 1
  8767  00218A  E0F2               	bz	l2433
  8768  00218C  0A03               	xorlw	3	; case 2
  8769  00218E  E0F2               	bz	l2434
  8770  002190  0A01               	xorlw	1	; case 3
  8771  002192  E0F2               	bz	l2435
  8772  002194  0A07               	xorlw	7	; case 4
  8773  002196  E0F2               	bz	l2436
  8774  002198  0A01               	xorlw	1	; case 5
  8775  00219A  E0F2               	bz	l2437
  8776  00219C  0A03               	xorlw	3	; case 6
  8777  00219E                     l33433:
  8778                           
  8779                           ;aip33626.c: 1180: aip33626_allDisplay(arr_col);
  8780  00219E  0E00               	movlw	low _arr_col
  8781  0021A0  6E09               	movwf	aip33626_allDisplay@num,c
  8782  0021A2  0E01               	movlw	high _arr_col
  8783  0021A4  6E0A               	movwf	aip33626_allDisplay@num+1,c
  8784  0021A6  EF98  F011         	goto	_aip33626_allDisplay	;wreg free
  8785  0021AA                     l33435:
  8786                           
  8787                           ;aip33626.c: 1182: else
  8788                           ;aip33626.c: 1183: {
  8789                           ;aip33626.c: 1184: aip33626_allDisplay_(0);
  8790  0021AA  0E00               	movlw	0
  8791  0021AC  EFD8  F011         	goto	_aip33626_allDisplay_
  8792  0021B0                     __end_of_aip33626_freeChrg:
  8793                           	opt stack 0
  8794                           tblptru	equ	0xFF8
  8795                           tblptrh	equ	0xFF7
  8796                           tblptrl	equ	0xFF6
  8797                           tablat	equ	0xFF5
  8798                           prodh	equ	0xFF4
  8799                           prodl	equ	0xFF3
  8800                           intcon	equ	0xFF2
  8801                           postinc0	equ	0xFEE
  8802                           wreg	equ	0xFE8
  8803                           postdec1	equ	0xFE5
  8804                           fsr1l	equ	0xFE1
  8805                           indf2	equ	0xFDF
  8806                           postinc2	equ	0xFDE
  8807                           postdec2	equ	0xFDD
  8808                           fsr2h	equ	0xFDA
  8809                           fsr2l	equ	0xFD9
  8810                           status	equ	0xFD8
  8811                           
  8812 ;; *************** function _aip33626_batFull *****************
  8813 ;; Defined at:
  8814 ;;		line 1106 in file ".\src\aip33626.c"
  8815 ;; Parameters:    Size  Location     Type
  8816 ;;  task_           1   11[COMRAM] PTR struct task
  8817 ;;		 -> task_list(80), 
  8818 ;; Auto vars:     Size  Location     Type
  8819 ;;		None
  8820 ;; Return value:  Size  Location     Type
  8821 ;;                  1    wreg      void 
  8822 ;; Registers used:
  8823 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8824 ;; Tracked objects:
  8825 ;;		On entry : 0/0
  8826 ;;		On exit  : 0/0
  8827 ;;		Unchanged: 0/0
  8828 ;; Data sizes:     COMRAM   BANK0   BANK1
  8829 ;;      Params:         1       0       0
  8830 ;;      Locals:         0       0       0
  8831 ;;      Temps:          1       0       0
  8832 ;;      Totals:         2       0       0
  8833 ;;Total ram usage:        2 bytes
  8834 ;; Hardware stack levels used:    1
  8835 ;; Hardware stack levels required when called:    7
  8836 ;; This function calls:
  8837 ;;		_aip33626_allDisplay
  8838 ;;		_arr_col_init
  8839 ;; This function is called by:
  8840 ;;		_aip33626_freeChrg
  8841 ;;		_find_task
  8842 ;; This function uses a non-reentrant model
  8843 ;;
  8844                           
  8845                           	psect	text40
  8846  001FCE                     __ptext40:
  8847                           	opt stack 0
  8848  001FCE                     _aip33626_batFull:
  8849                           	opt stack 0
  8850                           
  8851                           ;aip33626.c: 1109: arr_col_init(250);
  8852                           
  8853                           ;incstack = 0
  8854 ;; hardware stack exceeded
  8855  001FCE  0EFA               	movlw	250
  8856  001FD0  EC80  F012         	call	_arr_col_init
  8857                           
  8858                           ;aip33626.c: 1110: arr_col[0]=0;
  8859  001FD4  0101               	movlb	1	; () banked
  8860  001FD6  6B00               	clrf	_arr_col& (0+255),b
  8861                           
  8862                           ;aip33626.c: 1111: switch (you)
  8863  001FD8  D006               	goto	l32877
  8864  001FDA                     l2417:
  8865                           
  8866                           ; BSR set to: 1
  8867                           ;aip33626.c: 1114: arr_col[32]=0;
  8868  001FDA  6B20               	clrf	(_arr_col+32)& (0+255),b
  8869  001FDC                     l2418:
  8870                           
  8871                           ; BSR set to: 1
  8872                           ;aip33626.c: 1116: arr_col[48]=0;
  8873  001FDC  6B30               	clrf	(_arr_col+48)& (0+255),b
  8874  001FDE                     l2419:
  8875                           
  8876                           ; BSR set to: 1
  8877                           ;aip33626.c: 1118: arr_col[64]=0;
  8878  001FDE  6B40               	clrf	(_arr_col+64)& (0+255),b
  8879  001FE0                     l2420:
  8880                           
  8881                           ; BSR set to: 1
  8882                           ;aip33626.c: 1120: arr_col[80]=0;
  8883  001FE0  6B50               	clrf	(_arr_col+80)& (0+255),b
  8884  001FE2                     l2421:
  8885                           
  8886                           ; BSR set to: 1
  8887                           ;aip33626.c: 1122: arr_col[96]=0;
  8888  001FE2  6B60               	clrf	(_arr_col+96)& (0+255),b
  8889                           
  8890                           ;aip33626.c: 1123: break;
  8891  001FE4  D00C               	goto	l2422
  8892  001FE6                     l32877:
  8893                           
  8894                           ; BSR set to: 1
  8895  001FE6  507D               	movf	_you,w,c
  8896                           
  8897                           ; Switch size 1, requested type "space"
  8898                           ; Number of cases is 6, Range of values is 1 to 6
  8899                           ; switch strategies available:
  8900                           ; Name         Instructions Cycles
  8901                           ; simple_byte           19    10 (average)
  8902                           ;	Chosen strategy is simple_byte
  8903  001FE8  0A01               	xorlw	1	; case 1
  8904  001FEA  E0F7               	bz	l2417
  8905  001FEC  0A03               	xorlw	3	; case 2
  8906  001FEE  E0F6               	bz	l2418
  8907  001FF0  0A01               	xorlw	1	; case 3
  8908  001FF2  E0F5               	bz	l2419
  8909  001FF4  0A07               	xorlw	7	; case 4
  8910  001FF6  E0F4               	bz	l2420
  8911  001FF8  0A01               	xorlw	1	; case 5
  8912  001FFA  E0F3               	bz	l2421
  8913  001FFC  0A03               	xorlw	3	; case 6
  8914  001FFE                     l2422:
  8915                           
  8916                           ; BSR set to: 1
  8917                           ;aip33626.c: 1132: arr_col[1]=0;
  8918  001FFE  6B01               	clrf	(_arr_col+1)& (0+255),b
  8919                           
  8920                           ; BSR set to: 1
  8921                           ;aip33626.c: 1134: if(mode==0)
  8922  002000  5069               	movf	_mode,w,c
  8923  002002  E105               	bnz	l2425
  8924                           
  8925                           ; BSR set to: 1
  8926                           ;aip33626.c: 1135: {
  8927                           ;aip33626.c: 1136: arr_col[110]=0;
  8928  002004  6B6E               	clrf	(_arr_col+110)& (0+255),b
  8929                           
  8930                           ;aip33626.c: 1137: arr_col[112]=0;
  8931  002006  6B70               	clrf	(_arr_col+112)& (0+255),b
  8932                           
  8933                           ;aip33626.c: 1138: arr_col[113]=0;
  8934  002008  6B71               	clrf	(_arr_col+113)& (0+255),b
  8935                           
  8936                           ;aip33626.c: 1139: arr_col[126]=0;
  8937  00200A  6B7E               	clrf	(_arr_col+126)& (0+255),b
  8938                           
  8939                           ;aip33626.c: 1140: }
  8940  00200C  D006               	goto	l32883
  8941  00200E                     l2425:
  8942                           
  8943                           ; BSR set to: 1
  8944                           ;aip33626.c: 1141: else
  8945                           ;aip33626.c: 1142: {
  8946                           ;aip33626.c: 1143: arr_col[14]=0;
  8947  00200E  6B0E               	clrf	(_arr_col+14)& (0+255),b
  8948                           
  8949                           ;aip33626.c: 1144: arr_col[30]=0;
  8950  002010  6B1E               	clrf	(_arr_col+30)& (0+255),b
  8951                           
  8952                           ;aip33626.c: 1145: arr_col[46]=0;
  8953  002012  6B2E               	clrf	(_arr_col+46)& (0+255),b
  8954                           
  8955                           ;aip33626.c: 1146: arr_col[62]=0;
  8956  002014  6B3E               	clrf	(_arr_col+62)& (0+255),b
  8957                           
  8958                           ;aip33626.c: 1147: arr_col[78]=0;
  8959  002016  6B4E               	clrf	(_arr_col+78)& (0+255),b
  8960                           
  8961                           ;aip33626.c: 1148: arr_col[94]=0;
  8962  002018  6B5E               	clrf	(_arr_col+94)& (0+255),b
  8963  00201A                     l32883:
  8964                           
  8965                           ; BSR set to: 1
  8966                           ;aip33626.c: 1149: }
  8967                           ;aip33626.c: 1150: if(task_->id2==7)
  8968  00201A  500C               	movf	aip33626_batFull@task_,w,c
  8969  00201C  6ED9               	movwf	fsr2l,c
  8970  00201E  6ADA               	clrf	fsr2h,c
  8971  002020  0E05               	movlw	5
  8972  002022  26D9               	addwf	fsr2l,f,c
  8973  002024  0E07               	movlw	7
  8974  002026  18DE               	xorwf	postinc2,w,c
  8975  002028  A4D8               	btfss	status,2,c
  8976  00202A  0012               	return	
  8977                           
  8978                           ; BSR set to: 1
  8979                           ;aip33626.c: 1151: {
  8980                           ;aip33626.c: 1152: aip33626_allDisplay(arr_col);
  8981  00202C  0E00               	movlw	low _arr_col
  8982  00202E  6E09               	movwf	aip33626_allDisplay@num,c
  8983  002030  0E01               	movlw	high _arr_col
  8984  002032  6E0A               	movwf	aip33626_allDisplay@num+1,c
  8985  002034  EF98  F011         	goto	_aip33626_allDisplay	;wreg free
  8986  002038                     __end_of_aip33626_batFull:
  8987                           	opt stack 0
  8988                           tblptru	equ	0xFF8
  8989                           tblptrh	equ	0xFF7
  8990                           tblptrl	equ	0xFF6
  8991                           tablat	equ	0xFF5
  8992                           prodh	equ	0xFF4
  8993                           prodl	equ	0xFF3
  8994                           intcon	equ	0xFF2
  8995                           postinc0	equ	0xFEE
  8996                           wreg	equ	0xFE8
  8997                           postdec1	equ	0xFE5
  8998                           fsr1l	equ	0xFE1
  8999                           indf2	equ	0xFDF
  9000                           postinc2	equ	0xFDE
  9001                           postdec2	equ	0xFDD
  9002                           fsr2h	equ	0xFDA
  9003                           fsr2l	equ	0xFD9
  9004                           status	equ	0xFD8
  9005                           
  9006 ;; *************** function _aip33626_flash *****************
  9007 ;; Defined at:
  9008 ;;		line 929 in file ".\src\aip33626.c"
  9009 ;; Parameters:    Size  Location     Type
  9010 ;;  task_           1   10[COMRAM] PTR struct task
  9011 ;;		 -> task_list(80), 
  9012 ;; Auto vars:     Size  Location     Type
  9013 ;;		None
  9014 ;; Return value:  Size  Location     Type
  9015 ;;                  1    wreg      void 
  9016 ;; Registers used:
  9017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9018 ;; Tracked objects:
  9019 ;;		On entry : 0/0
  9020 ;;		On exit  : 0/0
  9021 ;;		Unchanged: 0/0
  9022 ;; Data sizes:     COMRAM   BANK0   BANK1
  9023 ;;      Params:         1       0       0
  9024 ;;      Locals:         0       0       0
  9025 ;;      Temps:          0       0       0
  9026 ;;      Totals:         1       0       0
  9027 ;;Total ram usage:        1 bytes
  9028 ;; Hardware stack levels used:    1
  9029 ;; Hardware stack levels required when called:    7
  9030 ;; This function calls:
  9031 ;;		_aip33626_allDisplay_
  9032 ;; This function is called by:
  9033 ;;		_find_task
  9034 ;; This function uses a non-reentrant model
  9035 ;;
  9036                           
  9037                           	psect	text41
  9038  002574                     __ptext41:
  9039                           	opt stack 0
  9040  002574                     _aip33626_flash:
  9041                           	opt stack 0
  9042                           
  9043                           ;aip33626.c: 931: if(task_->sucCnt&0x01)
  9044                           
  9045                           ;incstack = 0
  9046 ;; hardware stack exceeded
  9047  002574  500B               	movf	aip33626_flash@task_,w,c
  9048  002576  6ED9               	movwf	fsr2l,c
  9049  002578  6ADA               	clrf	fsr2h,c
  9050  00257A  0E09               	movlw	9
  9051  00257C  26D9               	addwf	fsr2l,f,c
  9052  00257E  A0DF               	btfss	indf2,0,c
  9053  002580  D003               	goto	l33361
  9054                           
  9055                           ;aip33626.c: 932: {
  9056                           ;aip33626.c: 933: aip33626_allDisplay_(0);
  9057  002582  0E00               	movlw	0
  9058  002584  EFD8  F011         	goto	_aip33626_allDisplay_
  9059  002588                     l33361:
  9060                           
  9061                           ;aip33626.c: 935: else
  9062                           ;aip33626.c: 936: {
  9063                           ;aip33626.c: 937: aip33626_allDisplay_(250);
  9064  002588  0EFA               	movlw	250
  9065  00258A  EFD8  F011         	goto	_aip33626_allDisplay_
  9066  00258E                     __end_of_aip33626_flash:
  9067                           	opt stack 0
  9068                           tblptru	equ	0xFF8
  9069                           tblptrh	equ	0xFF7
  9070                           tblptrl	equ	0xFF6
  9071                           tablat	equ	0xFF5
  9072                           prodh	equ	0xFF4
  9073                           prodl	equ	0xFF3
  9074                           intcon	equ	0xFF2
  9075                           postinc0	equ	0xFEE
  9076                           wreg	equ	0xFE8
  9077                           postdec1	equ	0xFE5
  9078                           fsr1l	equ	0xFE1
  9079                           indf2	equ	0xFDF
  9080                           postinc2	equ	0xFDE
  9081                           postdec2	equ	0xFDD
  9082                           fsr2h	equ	0xFDA
  9083                           fsr2l	equ	0xFD9
  9084                           status	equ	0xFD8
  9085                           
  9086 ;; *************** function _aip33626_breath_stop *****************
  9087 ;; Defined at:
  9088 ;;		line 969 in file ".\src\aip33626.c"
  9089 ;; Parameters:    Size  Location     Type
  9090 ;;  task_           1   18[COMRAM] PTR struct task
  9091 ;;		 -> task_list(80), 
  9092 ;; Auto vars:     Size  Location     Type
  9093 ;;		None
  9094 ;; Return value:  Size  Location     Type
  9095 ;;                  1    wreg      void 
  9096 ;; Registers used:
  9097 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9098 ;; Tracked objects:
  9099 ;;		On entry : 0/0
  9100 ;;		On exit  : 0/0
  9101 ;;		Unchanged: 0/0
  9102 ;; Data sizes:     COMRAM   BANK0   BANK1
  9103 ;;      Params:         1       0       0
  9104 ;;      Locals:         0       0       0
  9105 ;;      Temps:          1       0       0
  9106 ;;      Totals:         2       0       0
  9107 ;;Total ram usage:        2 bytes
  9108 ;; Hardware stack levels used:    1
  9109 ;; Hardware stack levels required when called:    7
  9110 ;; This function calls:
  9111 ;;		_aip33626_allDisplay
  9112 ;;		_new_col
  9113 ;; This function is called by:
  9114 ;;		_find_task
  9115 ;; This function uses a non-reentrant model
  9116 ;;
  9117                           
  9118                           	psect	text42
  9119  002372                     __ptext42:
  9120                           	opt stack 0
  9121  002372                     _aip33626_breath_stop:
  9122                           	opt stack 0
  9123                           
  9124                           ;aip33626.c: 971: if(task_->sucCnt==1)
  9125                           
  9126                           ;incstack = 0
  9127 ;; hardware stack exceeded
  9128  002372  5013               	movf	aip33626_breath_stop@task_,w,c
  9129  002374  6ED9               	movwf	fsr2l,c
  9130  002376  6ADA               	clrf	fsr2h,c
  9131  002378  0E09               	movlw	9
  9132  00237A  26D9               	addwf	fsr2l,f,c
  9133  00237C  04DE               	decf	postinc2,w,c
  9134  00237E  E101               	bnz	l33395
  9135  002380  0012               	return	
  9136  002382                     l33395:
  9137                           
  9138                           ;aip33626.c: 974: }
  9139                           ;aip33626.c: 975: col_init=1;
  9140  002382  0E01               	movlw	1
  9141  002384  6E7B               	movwf	_col_init,c
  9142                           
  9143                           ;aip33626.c: 976: col_cnt=39;
  9144  002386  0E27               	movlw	39
  9145  002388  6E68               	movwf	_col_cnt,c
  9146                           
  9147                           ;aip33626.c: 977: new_col(you,dian,mode_you,mode_dian,mode,mode_sub);
  9148  00238A  C07C  F002         	movff	_dian,new_col@dian
  9149  00238E  C06B  F003         	movff	_mode_you,new_col@mode_you
  9150  002392  C06A  F004         	movff	_mode_dian,new_col@mode_dian
  9151  002396  C069  F005         	movff	_mode,new_col@mode
  9152  00239A  C06D  F006         	movff	_mode_sub,new_col@mode_sub
  9153  00239E  507D               	movf	_you,w,c
  9154  0023A0  EC52  F003         	call	_new_col
  9155                           
  9156                           ;aip33626.c: 978: aip33626_allDisplay(arr_col);
  9157  0023A4  0E00               	movlw	low _arr_col
  9158  0023A6  6E09               	movwf	aip33626_allDisplay@num,c
  9159  0023A8  0E01               	movlw	high _arr_col
  9160  0023AA  6E0A               	movwf	aip33626_allDisplay@num+1,c
  9161  0023AC  EF98  F011         	goto	_aip33626_allDisplay	;wreg free
  9162  0023B0                     __end_of_aip33626_breath_stop:
  9163                           	opt stack 0
  9164                           tblptru	equ	0xFF8
  9165                           tblptrh	equ	0xFF7
  9166                           tblptrl	equ	0xFF6
  9167                           tablat	equ	0xFF5
  9168                           prodh	equ	0xFF4
  9169                           prodl	equ	0xFF3
  9170                           intcon	equ	0xFF2
  9171                           postinc0	equ	0xFEE
  9172                           wreg	equ	0xFE8
  9173                           postdec1	equ	0xFE5
  9174                           fsr1l	equ	0xFE1
  9175                           indf2	equ	0xFDF
  9176                           postinc2	equ	0xFDE
  9177                           postdec2	equ	0xFDD
  9178                           fsr2h	equ	0xFDA
  9179                           fsr2l	equ	0xFD9
  9180                           status	equ	0xFD8
  9181                           
  9182 ;; *************** function _aip33626_breath *****************
  9183 ;; Defined at:
  9184 ;;		line 943 in file ".\src\aip33626.c"
  9185 ;; Parameters:    Size  Location     Type
  9186 ;;  task_           1   18[COMRAM] PTR struct task
  9187 ;;		 -> task_list(80), 
  9188 ;; Auto vars:     Size  Location     Type
  9189 ;;		None
  9190 ;; Return value:  Size  Location     Type
  9191 ;;                  1    wreg      void 
  9192 ;; Registers used:
  9193 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9194 ;; Tracked objects:
  9195 ;;		On entry : 0/0
  9196 ;;		On exit  : 0/0
  9197 ;;		Unchanged: 0/0
  9198 ;; Data sizes:     COMRAM   BANK0   BANK1
  9199 ;;      Params:         1       0       0
  9200 ;;      Locals:         0       0       0
  9201 ;;      Temps:          1       0       0
  9202 ;;      Totals:         2       0       0
  9203 ;;Total ram usage:        2 bytes
  9204 ;; Hardware stack levels used:    1
  9205 ;; Hardware stack levels required when called:    7
  9206 ;; This function calls:
  9207 ;;		_aip33626_allDisplay
  9208 ;;		_aip33626_allDisplay_
  9209 ;;		_arr_col_init
  9210 ;;		_new_col
  9211 ;; This function is called by:
  9212 ;;		_find_task
  9213 ;; This function uses a non-reentrant model
  9214 ;;
  9215                           
  9216                           	psect	text43
  9217  001DF2                     __ptext43:
  9218                           	opt stack 0
  9219  001DF2                     _aip33626_breath:
  9220                           	opt stack 0
  9221                           
  9222                           ;aip33626.c: 945: if(mode_sub==0)
  9223                           
  9224                           ;incstack = 0
  9225 ;; hardware stack exceeded
  9226  001DF2  506D               	movf	_mode_sub,w,c
  9227  001DF4  E114               	bnz	l33373
  9228                           
  9229                           ;aip33626.c: 946: {
  9230                           ;aip33626.c: 947: if(task_->sucCnt==0)
  9231  001DF6  5013               	movf	aip33626_breath@task_,w,c
  9232  001DF8  6ED9               	movwf	fsr2l,c
  9233  001DFA  6ADA               	clrf	fsr2h,c
  9234  001DFC  0E09               	movlw	9
  9235  001DFE  26D9               	addwf	fsr2l,f,c
  9236  001E00  50DF               	movf	indf2,w,c
  9237  001E02  E105               	bnz	l33371
  9238                           
  9239                           ;aip33626.c: 948: {
  9240                           ;aip33626.c: 949: col_init=1;
  9241  001E04  0E01               	movlw	1
  9242  001E06  6E7B               	movwf	_col_init,c
  9243                           
  9244                           ;aip33626.c: 950: arr_col_init(0);
  9245  001E08  0E00               	movlw	0
  9246  001E0A  EC80  F012         	call	_arr_col_init
  9247  001E0E                     l33371:
  9248                           
  9249                           ;aip33626.c: 951: }
  9250                           ;aip33626.c: 952: col_cnt=task_->sucCnt;
  9251  001E0E  5013               	movf	aip33626_breath@task_,w,c
  9252  001E10  6ED9               	movwf	fsr2l,c
  9253  001E12  6ADA               	clrf	fsr2h,c
  9254  001E14  0E09               	movlw	9
  9255  001E16  26D9               	addwf	fsr2l,f,c
  9256  001E18  50DF               	movf	indf2,w,c
  9257  001E1A  6E68               	movwf	_col_cnt,c
  9258                           
  9259                           ;aip33626.c: 953: }
  9260  001E1C  D015               	goto	l33387
  9261  001E1E                     l33373:
  9262                           
  9263                           ;aip33626.c: 954: else
  9264                           ;aip33626.c: 955: {
  9265                           ;aip33626.c: 956: col_cnt=39-task_->sucCnt;
  9266  001E1E  5013               	movf	aip33626_breath@task_,w,c
  9267  001E20  6ED9               	movwf	fsr2l,c
  9268  001E22  6ADA               	clrf	fsr2h,c
  9269  001E24  0E09               	movlw	9
  9270  001E26  26D9               	addwf	fsr2l,f,c
  9271  001E28  50DF               	movf	indf2,w,c
  9272  001E2A  6E14               	movwf	??_aip33626_breath& (0+255),c
  9273  001E2C  5014               	movf	??_aip33626_breath,w,c
  9274  001E2E  0827               	sublw	39
  9275  001E30  6E68               	movwf	_col_cnt,c
  9276                           
  9277                           ;aip33626.c: 957: if((col_cnt==0 && PINC3==0 && PINA4==0) ||task_1_7_flag)
  9278  001E32  5068               	movf	_col_cnt,w,c
  9279  001E34  E104               	bnz	l33381
  9280  001E36  B68A               	btfsc	3978,3,c	;volatile
  9281  001E38  D002               	goto	l33381
  9282  001E3A  A888               	btfss	3976,4,c	;volatile
  9283  001E3C  D002               	goto	l33383
  9284  001E3E                     l33381:
  9285  001E3E  506C               	movf	_task_1_7_flag,w,c
  9286  001E40  E003               	bz	l33387
  9287  001E42                     l33383:
  9288                           
  9289                           ;aip33626.c: 958: {
  9290                           ;aip33626.c: 959: aip33626_allDisplay_(0);
  9291  001E42  0E00               	movlw	0
  9292  001E44  EFD8  F011         	goto	_aip33626_allDisplay_
  9293  001E48                     l33387:
  9294                           
  9295                           ;aip33626.c: 961: }
  9296                           ;aip33626.c: 963: }
  9297                           ;aip33626.c: 964: new_col(you,dian,mode_you,mode_dian,mode,mode_sub);
  9298  001E48  C07C  F002         	movff	_dian,new_col@dian
  9299  001E4C  C06B  F003         	movff	_mode_you,new_col@mode_you
  9300  001E50  C06A  F004         	movff	_mode_dian,new_col@mode_dian
  9301  001E54  C069  F005         	movff	_mode,new_col@mode
  9302  001E58  C06D  F006         	movff	_mode_sub,new_col@mode_sub
  9303  001E5C  507D               	movf	_you,w,c
  9304  001E5E  EC52  F003         	call	_new_col
  9305                           
  9306                           ;aip33626.c: 965: aip33626_allDisplay(arr_col);
  9307  001E62  0E00               	movlw	low _arr_col
  9308  001E64  6E09               	movwf	aip33626_allDisplay@num,c
  9309  001E66  0E01               	movlw	high _arr_col
  9310  001E68  6E0A               	movwf	aip33626_allDisplay@num+1,c
  9311  001E6A  EF98  F011         	goto	_aip33626_allDisplay	;wreg free
  9312  001E6E                     __end_of_aip33626_breath:
  9313                           	opt stack 0
  9314                           tblptru	equ	0xFF8
  9315                           tblptrh	equ	0xFF7
  9316                           tblptrl	equ	0xFF6
  9317                           tablat	equ	0xFF5
  9318                           prodh	equ	0xFF4
  9319                           prodl	equ	0xFF3
  9320                           intcon	equ	0xFF2
  9321                           postinc0	equ	0xFEE
  9322                           wreg	equ	0xFE8
  9323                           postdec1	equ	0xFE5
  9324                           fsr1l	equ	0xFE1
  9325                           indf2	equ	0xFDF
  9326                           postinc2	equ	0xFDE
  9327                           postdec2	equ	0xFDD
  9328                           fsr2h	equ	0xFDA
  9329                           fsr2l	equ	0xFD9
  9330                           status	equ	0xFD8
  9331                           
  9332 ;; *************** function _new_col *****************
  9333 ;; Defined at:
  9334 ;;		line 486 in file ".\src\aip33626.c"
  9335 ;; Parameters:    Size  Location     Type
  9336 ;;  you             1    wreg     unsigned char 
  9337 ;;  dian            1    1[COMRAM] unsigned char 
  9338 ;;  mode_you        1    2[COMRAM] unsigned char 
  9339 ;;  mode_dian       1    3[COMRAM] unsigned char 
  9340 ;;  mode            1    4[COMRAM] unsigned char 
  9341 ;;  mode_sub        1    5[COMRAM] unsigned char 
  9342 ;; Auto vars:     Size  Location     Type
  9343 ;;  you             1   15[COMRAM] unsigned char 
  9344 ;;  i               1   17[COMRAM] unsigned char 
  9345 ;;  t               1   16[COMRAM] unsigned char 
  9346 ;;  t2              1   14[COMRAM] unsigned char 
  9347 ;; Return value:  Size  Location     Type
  9348 ;;                  1    wreg      void 
  9349 ;; Registers used:
  9350 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  9351 ;; Tracked objects:
  9352 ;;		On entry : 0/0
  9353 ;;		On exit  : 0/0
  9354 ;;		Unchanged: 0/0
  9355 ;; Data sizes:     COMRAM   BANK0   BANK1
  9356 ;;      Params:         5       0       0
  9357 ;;      Locals:         6       0       0
  9358 ;;      Temps:          6       0       0
  9359 ;;      Totals:        17       0       0
  9360 ;;Total ram usage:       17 bytes
  9361 ;; Hardware stack levels used:    1
  9362 ;; Hardware stack levels required when called:    3
  9363 ;; This function calls:
  9364 ;;		Nothing
  9365 ;; This function is called by:
  9366 ;;		_aip33626_breath
  9367 ;;		_aip33626_breath_stop
  9368 ;; This function uses a non-reentrant model
  9369 ;;
  9370                           
  9371                           	psect	text44
  9372  0006A4                     __ptext44:
  9373                           	opt stack 0
  9374  0006A4                     _new_col:
  9375                           	opt stack 2
  9376                           
  9377                           ;incstack = 0
  9378                           ;new_col@you stored from wreg
  9379  0006A4  6E10               	movwf	new_col@you,c
  9380  0006A6  6A11               	clrf	new_col@t,c
  9381                           
  9382                           ;aip33626.c: 489: static u8 mode_sub_2=0;
  9383                           ;aip33626.c: 491: if(mode_sub!=2)
  9384  0006A8  0E02               	movlw	2
  9385  0006AA  1806               	xorwf	new_col@mode_sub,w,c
  9386  0006AC  E03B               	bz	l32639
  9387                           
  9388                           ;aip33626.c: 492: {
  9389                           ;aip33626.c: 493: mode_sub_2=0;
  9390  0006AE  6A64               	clrf	new_col@mode_sub_2,c
  9391                           
  9392                           ;aip33626.c: 494: for(i=0;i<128;i++)
  9393  0006B0  6A12               	clrf	new_col@i,c
  9394  0006B2                     l32611:
  9395                           
  9396                           ;aip33626.c: 495: {
  9397                           ;aip33626.c: 497: if(t>=4 && t<=12)
  9398  0006B2  0E03               	movlw	3
  9399  0006B4  6411               	cpfsgt	new_col@t,c
  9400  0006B6  D023               	goto	l32627
  9401  0006B8  0E0D               	movlw	13
  9402  0006BA  6011               	cpfslt	new_col@t,c
  9403  0006BC  D020               	goto	l32627
  9404                           
  9405                           ;aip33626.c: 498: {
  9406                           ;aip33626.c: 499: if(arr_cnt[i]<=col_cnt && arr_cnt[i]+9>=col_cnt)
  9407  0006BE  5012               	movf	new_col@i,w,c
  9408  0006C0  0F01               	addlw	low _arr_cnt
  9409  0006C2  D99D               	call	PL28	;call to abstracted procedure
  9410  0006C4  0009               	tblrd		*+
  9411  0006C6  50F5               	movf	tablat,w,c
  9412  0006C8  5C68               	subwf	_col_cnt,w,c
  9413  0006CA  E311               	bnc	l32621
  9414  0006CC  D96C               	call	PL16	;call to abstracted procedure
  9415  0006CE  E30F               	bnc	l32621
  9416                           
  9417                           ;aip33626.c: 500: {
  9418                           ;aip33626.c: 501: arr_col[i]=(col_cnt+1-arr_cnt[i])*25;
  9419  0006D0  5012               	movf	new_col@i,w,c
  9420  0006D2  0F01               	addlw	low _arr_cnt
  9421  0006D4  D994               	call	PL28	;call to abstracted procedure
  9422  0006D6  0008               	tblrd		*
  9423  0006D8  CFF5 F008          	movff	tablat,??_new_col+1
  9424  0006DC  5008               	movf	??_new_col+1,w,c
  9425  0006DE  5C68               	subwf	_col_cnt,w,c
  9426  0006E0  6E09               	movwf	(??_new_col+2)& (0+255),c
  9427  0006E2  2809               	incf	??_new_col+2,w,c
  9428  0006E4  0D19               	mullw	25
  9429  0006E6  D991               	call	PL32	;call to abstracted procedure
  9430  0006E8  CFF3 FFDF          	movff	prodl,indf2
  9431                           
  9432                           ;aip33626.c: 502: }
  9433  0006EC  D008               	goto	l32627
  9434  0006EE                     l32621:
  9435                           
  9436                           ;aip33626.c: 503: else if(arr_cnt[i]+9<col_cnt)
  9437  0006EE  D95B               	call	PL16	;call to abstracted procedure
  9438  0006F0  E204               	bc	l32625
  9439                           
  9440                           ;aip33626.c: 504: {
  9441                           ;aip33626.c: 505: arr_col[i]=250;
  9442  0006F2  D98B               	call	PL32	;call to abstracted procedure
  9443  0006F4  0EFA               	movlw	250
  9444  0006F6  6EDF               	movwf	indf2,c
  9445                           
  9446                           ;aip33626.c: 506: }
  9447  0006F8  D002               	goto	l32627
  9448  0006FA                     l32625:
  9449                           
  9450                           ;aip33626.c: 507: else
  9451                           ;aip33626.c: 508: {
  9452                           ;aip33626.c: 509: arr_col[i]=0;
  9453  0006FA  D987               	call	PL32	;call to abstracted procedure
  9454  0006FC  6ADF               	clrf	indf2,c
  9455  0006FE                     l32627:
  9456                           
  9457                           ;aip33626.c: 510: }
  9458                           ;aip33626.c: 512: }
  9459                           ;aip33626.c: 514: t++;
  9460  0006FE  2A11               	incf	new_col@t,f,c
  9461                           
  9462                           ;aip33626.c: 515: if(t>=16)
  9463  000700  0E0F               	movlw	15
  9464  000702  6411               	cpfsgt	new_col@t,c
  9465  000704  D001               	goto	l32633
  9466                           
  9467                           ;aip33626.c: 516: {
  9468                           ;aip33626.c: 517: t=0;
  9469  000706  6A11               	clrf	new_col@t,c
  9470  000708                     l32633:
  9471  000708  2A12               	incf	new_col@i,f,c
  9472  00070A  0E7F               	movlw	127
  9473  00070C  6412               	cpfsgt	new_col@i,c
  9474  00070E  D7D1               	goto	l32611
  9475                           
  9476                           ;aip33626.c: 518: }
  9477                           ;aip33626.c: 520: }
  9478                           ;aip33626.c: 521: arr_col[24]=250;
  9479  000710  0EFA               	movlw	250
  9480  000712  0101               	movlb	1	; () banked
  9481  000714  6F18               	movwf	(_arr_col+24)& (0+255),b
  9482                           
  9483                           ;aip33626.c: 522: arr_col[40]=250;
  9484  000716  6F28               	movwf	(_arr_col+40)& (0+255),b
  9485                           
  9486                           ;aip33626.c: 523: arr_col[56]=250;
  9487  000718  6F38               	movwf	(_arr_col+56)& (0+255),b
  9488                           
  9489                           ;aip33626.c: 524: arr_col[71]=250;
  9490  00071A  6F47               	movwf	(_arr_col+71)& (0+255),b
  9491                           
  9492                           ;aip33626.c: 525: arr_col[87]=250;
  9493  00071C  6F57               	movwf	(_arr_col+87)& (0+255),b
  9494                           
  9495                           ;aip33626.c: 526: arr_col[104]=250;
  9496  00071E  6F68               	movwf	(_arr_col+104)& (0+255),b
  9497                           
  9498                           ;aip33626.c: 527: arr_col[120]=250;
  9499  000720  6F78               	movwf	(_arr_col+120)& (0+255),b
  9500                           
  9501                           ;aip33626.c: 528: }
  9502  000722  D001               	goto	l32641
  9503  000724                     l32639:
  9504                           
  9505                           ;aip33626.c: 529: else{
  9506                           ;aip33626.c: 530: mode_sub_2++;
  9507  000724  2A64               	incf	new_col@mode_sub_2,f,c
  9508  000726                     l32641:
  9509                           
  9510                           ;aip33626.c: 531: }
  9511                           ;aip33626.c: 532: if(mode_you==0)
  9512  000726  5003               	movf	new_col@mode_you,w,c
  9513  000728  E112               	bnz	l32653
  9514                           
  9515                           ;aip33626.c: 533: {
  9516                           ;aip33626.c: 534: if(col_init==1)
  9517  00072A  047B               	decf	_col_init,w,c
  9518  00072C  E146               	bnz	l32687
  9519                           
  9520                           ;aip33626.c: 535: {
  9521                           ;aip33626.c: 536: arr_col[0]=0;
  9522  00072E  0101               	movlb	1	; () banked
  9523  000730  6B00               	clrf	_arr_col& (0+255),b
  9524                           
  9525                           ;aip33626.c: 537: switch (you)
  9526  000732  D036               	goto	l32685
  9527  000734                     l32647:
  9528                           
  9529                           ; BSR set to: 1
  9530                           ;aip33626.c: 540: arr_col[96]=250;
  9531  000734  0EFA               	movlw	250
  9532  000736  6F60               	movwf	(_arr_col+96)& (0+255),b
  9533  000738                     l2256:
  9534                           
  9535                           ; BSR set to: 1
  9536                           ;aip33626.c: 542: arr_col[80]=250;
  9537  000738  0EFA               	movlw	250
  9538  00073A  6F50               	movwf	(_arr_col+80)& (0+255),b
  9539  00073C                     l2257:
  9540                           
  9541                           ; BSR set to: 1
  9542                           ;aip33626.c: 544: arr_col[64]=250;
  9543  00073C  0EFA               	movlw	250
  9544  00073E  6F40               	movwf	(_arr_col+64)& (0+255),b
  9545  000740                     l2258:
  9546                           
  9547                           ; BSR set to: 1
  9548                           ;aip33626.c: 546: arr_col[48]=250;
  9549  000740  0EFA               	movlw	250
  9550  000742  6F30               	movwf	(_arr_col+48)& (0+255),b
  9551  000744                     l2259:
  9552                           
  9553                           ; BSR set to: 1
  9554                           ;aip33626.c: 548: arr_col[32]=250;
  9555  000744  0EFA               	movlw	250
  9556  000746  6F20               	movwf	(_arr_col+32)& (0+255),b
  9557  000748                     l2260:
  9558                           
  9559                           ; BSR set to: 1
  9560                           ;aip33626.c: 550: arr_col[16]=250;
  9561  000748  0EFA               	movlw	250
  9562  00074A  6F10               	movwf	(_arr_col+16)& (0+255),b
  9563                           
  9564                           ;aip33626.c: 552: break;
  9565  00074C  D036               	goto	l32687
  9566  00074E                     l32653:
  9567                           
  9568                           ;aip33626.c: 560: else
  9569                           ;aip33626.c: 561: {
  9570                           ;aip33626.c: 562: if(mode_sub!=2)
  9571  00074E  0E02               	movlw	2
  9572  000750  1806               	xorwf	new_col@mode_sub,w,c
  9573  000752  E021               	bz	l2264
  9574                           
  9575                           ;aip33626.c: 563: {
  9576                           ;aip33626.c: 564: if(col_cnt==0 || col_cnt==10 || col_cnt==20||col_cnt==30)
  9577  000754  5068               	movf	_col_cnt,w,c
  9578  000756  E021               	bz	L9
  9579  000758  0E0A               	movlw	10
  9580  00075A  1868               	xorwf	_col_cnt,w,c
  9581  00075C  E01E               	bz	L9
  9582  00075E  0E14               	movlw	20
  9583  000760  1868               	xorwf	_col_cnt,w,c
  9584  000762  E01B               	bz	L9
  9585  000764  0E1E               	movlw	30
  9586  000766  1868               	xorwf	_col_cnt,w,c
  9587  000768  E101               	bnz	l32671
  9588  00076A  D017               	goto	L9
  9589  00076C                     l32671:
  9590                           
  9591                           ;aip33626.c: 588: else if(col_cnt==5 || col_cnt==15 || col_cnt==25||col_cnt==35)
  9592  00076C  0E05               	movlw	5
  9593  00076E  1868               	xorwf	_col_cnt,w,c
  9594  000770  E009               	bz	l2280
  9595  000772  0E0F               	movlw	15
  9596  000774  1868               	xorwf	_col_cnt,w,c
  9597  000776  E006               	bz	l2280
  9598  000778  0E19               	movlw	25
  9599  00077A  1868               	xorwf	_col_cnt,w,c
  9600  00077C  E003               	bz	l2280
  9601  00077E  0E23               	movlw	35
  9602  000780  1868               	xorwf	_col_cnt,w,c
  9603  000782  E11B               	bnz	l32687
  9604  000784                     l2280:
  9605                           
  9606                           ;aip33626.c: 589: {
  9607                           ;aip33626.c: 590: arr_col[0 ]=0;
  9608  000784  0101               	movlb	1	; () banked
  9609  000786  6B00               	clrf	_arr_col& (0+255),b
  9610                           
  9611                           ;aip33626.c: 591: arr_col[16]=0;
  9612  000788  6B10               	clrf	(_arr_col+16)& (0+255),b
  9613                           
  9614                           ;aip33626.c: 592: arr_col[32]=0;
  9615  00078A  6B20               	clrf	(_arr_col+32)& (0+255),b
  9616                           
  9617                           ;aip33626.c: 593: arr_col[48]=0;
  9618  00078C  6B30               	clrf	(_arr_col+48)& (0+255),b
  9619                           
  9620                           ;aip33626.c: 594: arr_col[64]=0;
  9621  00078E  6B40               	clrf	(_arr_col+64)& (0+255),b
  9622                           
  9623                           ;aip33626.c: 595: arr_col[80]=0;
  9624  000790  6B50               	clrf	(_arr_col+80)& (0+255),b
  9625                           
  9626                           ;aip33626.c: 596: arr_col[96]=0;
  9627  000792  6B60               	clrf	(_arr_col+96)& (0+255),b
  9628  000794  D012               	goto	l32687
  9629  000796                     l2264:
  9630                           
  9631                           ;aip33626.c: 600: else
  9632                           ;aip33626.c: 601: {
  9633                           ;aip33626.c: 602: if(mode_sub_2&0x01)
  9634  000796  A064               	btfss	new_col@mode_sub_2,0,c
  9635  000798  D7F5               	goto	l2280
  9636  00079A                     L9:
  9637                           
  9638                           ;aip33626.c: 603: {
  9639                           ;aip33626.c: 604: arr_col[0]=250;
  9640  00079A  0EFA               	movlw	250
  9641  00079C  0101               	movlb	1	; () banked
  9642  00079E  6F00               	movwf	_arr_col& (0+255),b
  9643  0007A0                     l32685:
  9644                           
  9645                           ; BSR set to: 1
  9646  0007A0  5010               	movf	new_col@you,w,c
  9647                           
  9648                           ; Switch size 1, requested type "space"
  9649                           ; Number of cases is 6, Range of values is 1 to 6
  9650                           ; switch strategies available:
  9651                           ; Name         Instructions Cycles
  9652                           ; simple_byte           19    10 (average)
  9653                           ;	Chosen strategy is simple_byte
  9654  0007A2  0A01               	xorlw	1	; case 1
  9655  0007A4  E0D1               	bz	l2260
  9656  0007A6  0A03               	xorlw	3	; case 2
  9657  0007A8  E0CD               	bz	l2259
  9658  0007AA  0A01               	xorlw	1	; case 3
  9659  0007AC  E0C9               	bz	l2258
  9660  0007AE  0A07               	xorlw	7	; case 4
  9661  0007B0  E0C5               	bz	l2257
  9662  0007B2  0A01               	xorlw	1	; case 5
  9663  0007B4  E0C1               	bz	l2256
  9664  0007B6  0A03               	xorlw	3	; case 6
  9665  0007B8  E0BD               	bz	l32647
  9666  0007BA                     l32687:
  9667                           
  9668                           ;aip33626.c: 635: }
  9669                           ;aip33626.c: 636: }
  9670                           ;aip33626.c: 637: }
  9671                           ;aip33626.c: 638: if(mode_dian==0)
  9672  0007BA  5004               	movf	new_col@mode_dian,w,c
  9673  0007BC  E119               	bnz	l32699
  9674                           
  9675                           ;aip33626.c: 639: {
  9676                           ;aip33626.c: 640: if(col_init==1)
  9677  0007BE  047B               	decf	_col_init,w,c
  9678  0007C0  E001 D0A6          	bnz	l32823
  9679                           
  9680                           ;aip33626.c: 641: {
  9681                           ;aip33626.c: 642: arr_col[1]=0;
  9682  0007C4  0101               	movlb	1	; () banked
  9683  0007C6  6B01               	clrf	(_arr_col+1)& (0+255),b
  9684                           
  9685                           ;aip33626.c: 644: arr_col[97]=0;
  9686  0007C8  6B61               	clrf	(_arr_col+97)& (0+255),b
  9687                           
  9688                           ;aip33626.c: 645: arr_col[81]=0;
  9689  0007CA  6B51               	clrf	(_arr_col+81)& (0+255),b
  9690                           
  9691                           ;aip33626.c: 646: arr_col[65]=0;
  9692  0007CC  6B41               	clrf	(_arr_col+65)& (0+255),b
  9693                           
  9694                           ;aip33626.c: 647: arr_col[49]=0;
  9695  0007CE  6B31               	clrf	(_arr_col+49)& (0+255),b
  9696                           
  9697                           ;aip33626.c: 648: arr_col[33]=0;
  9698  0007D0  6B21               	clrf	(_arr_col+33)& (0+255),b
  9699                           
  9700                           ;aip33626.c: 649: arr_col[17]=0;
  9701  0007D2  6B11               	clrf	(_arr_col+17)& (0+255),b
  9702                           
  9703                           ;aip33626.c: 650: switch (dian)
  9704  0007D4  D01E               	goto	l32717
  9705  0007D6                     l32693:
  9706                           
  9707                           ; BSR set to: 1
  9708                           ;aip33626.c: 653: arr_col[97]=250;
  9709  0007D6  0EFA               	movlw	250
  9710  0007D8  6F61               	movwf	(_arr_col+97)& (0+255),b
  9711  0007DA                     l2297:
  9712                           
  9713                           ; BSR set to: 1
  9714                           ;aip33626.c: 655: arr_col[81]=250;
  9715  0007DA  0EFA               	movlw	250
  9716  0007DC  6F51               	movwf	(_arr_col+81)& (0+255),b
  9717  0007DE                     l2298:
  9718                           
  9719                           ; BSR set to: 1
  9720                           ;aip33626.c: 657: arr_col[65]=250;
  9721  0007DE  0EFA               	movlw	250
  9722  0007E0  6F41               	movwf	(_arr_col+65)& (0+255),b
  9723  0007E2                     l2299:
  9724                           
  9725                           ; BSR set to: 1
  9726                           ;aip33626.c: 659: arr_col[49]=250;
  9727  0007E2  0EFA               	movlw	250
  9728  0007E4  6F31               	movwf	(_arr_col+49)& (0+255),b
  9729  0007E6                     l2300:
  9730                           
  9731                           ; BSR set to: 1
  9732                           ;aip33626.c: 661: arr_col[33]=250;
  9733  0007E6  0EFA               	movlw	250
  9734  0007E8  6F21               	movwf	(_arr_col+33)& (0+255),b
  9735  0007EA                     l2301:
  9736                           
  9737                           ; BSR set to: 1
  9738                           ;aip33626.c: 663: arr_col[17]=250;
  9739  0007EA  0EFA               	movlw	250
  9740  0007EC  6F11               	movwf	(_arr_col+17)& (0+255),b
  9741                           
  9742                           ;aip33626.c: 665: break;
  9743  0007EE  D090               	goto	l32823
  9744  0007F0                     l32699:
  9745                           
  9746                           ;aip33626.c: 672: else if(mode_dian==1)
  9747  0007F0  0404               	decf	new_col@mode_dian,w,c
  9748  0007F2  E135               	bnz	l32735
  9749                           
  9750                           ;aip33626.c: 673: {
  9751                           ;aip33626.c: 674: if(mode_sub!=2)
  9752  0007F4  0E02               	movlw	2
  9753  0007F6  1806               	xorwf	new_col@mode_sub,w,c
  9754  0007F8  E02F               	bz	l2306
  9755                           
  9756                           ;aip33626.c: 675: {
  9757                           ;aip33626.c: 676: if(col_cnt==0 || col_cnt==10 || col_cnt==20||col_cnt==30)
  9758  0007FA  5068               	movf	_col_cnt,w,c
  9759  0007FC  E009               	bz	l32711
  9760  0007FE  0E0A               	movlw	10
  9761  000800  1868               	xorwf	_col_cnt,w,c
  9762  000802  E006               	bz	l32711
  9763  000804  0E14               	movlw	20
  9764  000806  1868               	xorwf	_col_cnt,w,c
  9765  000808  E003               	bz	l32711
  9766  00080A  0E1E               	movlw	30
  9767  00080C  1868               	xorwf	_col_cnt,w,c
  9768  00080E  E10F               	bnz	l32719
  9769  000810                     l32711:
  9770                           
  9771                           ;aip33626.c: 677: {
  9772                           ;aip33626.c: 678: arr_col[1]=250;
  9773  000810  D908               	call	PL92	;call to abstracted procedure
  9774  000812                     l32717:
  9775                           
  9776                           ; BSR set to: 1
  9777  000812  5002               	movf	new_col@dian,w,c
  9778                           
  9779                           ; Switch size 1, requested type "space"
  9780                           ; Number of cases is 6, Range of values is 1 to 6
  9781                           ; switch strategies available:
  9782                           ; Name         Instructions Cycles
  9783                           ; simple_byte           19    10 (average)
  9784                           ;	Chosen strategy is simple_byte
  9785  000814  0A01               	xorlw	1	; case 1
  9786  000816  E0E9               	bz	l2301
  9787  000818  0A03               	xorlw	3	; case 2
  9788  00081A  E0E5               	bz	l2300
  9789  00081C  0A01               	xorlw	1	; case 3
  9790  00081E  E0E1               	bz	l2299
  9791  000820  0A07               	xorlw	7	; case 4
  9792  000822  E0DD               	bz	l2298
  9793  000824  0A01               	xorlw	1	; case 5
  9794  000826  E0D9               	bz	l2297
  9795  000828  0A03               	xorlw	3	; case 6
  9796  00082A  E0D5               	bz	l32693
  9797  00082C  D071               	goto	l32823
  9798  00082E                     l32719:
  9799                           
  9800                           ;aip33626.c: 700: else if(col_cnt==5 || col_cnt==15 || col_cnt==25||col_cnt==35)
  9801  00082E  0E05               	movlw	5
  9802  000830  1868               	xorwf	_col_cnt,w,c
  9803  000832  E009               	bz	l2322
  9804  000834  0E0F               	movlw	15
  9805  000836  1868               	xorwf	_col_cnt,w,c
  9806  000838  E006               	bz	l2322
  9807  00083A  0E19               	movlw	25
  9808  00083C  1868               	xorwf	_col_cnt,w,c
  9809  00083E  E003               	bz	l2322
  9810  000840  0E23               	movlw	35
  9811  000842  1868               	xorwf	_col_cnt,w,c
  9812  000844  E165               	bnz	l32823
  9813  000846                     l2322:
  9814                           
  9815                           ;aip33626.c: 701: {
  9816                           ;aip33626.c: 702: arr_col[1 ]=0;
  9817  000846  0101               	movlb	1	; () banked
  9818  000848  6B01               	clrf	(_arr_col+1)& (0+255),b
  9819                           
  9820                           ;aip33626.c: 703: arr_col[17]=0;
  9821  00084A  6B11               	clrf	(_arr_col+17)& (0+255),b
  9822                           
  9823                           ;aip33626.c: 704: arr_col[33]=0;
  9824  00084C  6B21               	clrf	(_arr_col+33)& (0+255),b
  9825                           
  9826                           ;aip33626.c: 705: arr_col[49]=0;
  9827  00084E  6B31               	clrf	(_arr_col+49)& (0+255),b
  9828                           
  9829                           ;aip33626.c: 706: arr_col[65]=0;
  9830  000850  6B41               	clrf	(_arr_col+65)& (0+255),b
  9831                           
  9832                           ;aip33626.c: 707: arr_col[81]=0;
  9833  000852  6B51               	clrf	(_arr_col+81)& (0+255),b
  9834                           
  9835                           ;aip33626.c: 708: arr_col[97]=0;
  9836  000854  6B61               	clrf	(_arr_col+97)& (0+255),b
  9837  000856  D05C               	goto	l32823
  9838  000858                     l2306:
  9839                           
  9840                           ;aip33626.c: 711: else
  9841                           ;aip33626.c: 712: {
  9842                           ;aip33626.c: 713: if(mode_sub_2&0x01)
  9843  000858  A064               	btfss	new_col@mode_sub_2,0,c
  9844  00085A  D7F5               	goto	l2322
  9845  00085C  D7D9               	goto	l32711
  9846  00085E                     l32735:
  9847                           
  9848                           ;aip33626.c: 751: else
  9849                           ;aip33626.c: 752: {
  9850                           ;aip33626.c: 753: if(col_cnt==0 || col_cnt==10 || col_cnt==20||col_cnt==30)
  9851  00085E  5068               	movf	_col_cnt,w,c
  9852  000860  E009               	bz	l32743
  9853  000862  0E0A               	movlw	10
  9854  000864  1868               	xorwf	_col_cnt,w,c
  9855  000866  E006               	bz	l32743
  9856  000868  0E14               	movlw	20
  9857  00086A  1868               	xorwf	_col_cnt,w,c
  9858  00086C  E003               	bz	l32743
  9859  00086E  0E1E               	movlw	30
  9860  000870  1868               	xorwf	_col_cnt,w,c
  9861  000872  E102               	bnz	l32745
  9862  000874                     l32743:
  9863                           
  9864                           ;aip33626.c: 754: {
  9865                           ;aip33626.c: 755: arr_col[1 ]=250;
  9866  000874  D8D6               	call	PL92	;call to abstracted procedure
  9867                           
  9868                           ;aip33626.c: 757: }
  9869  000876  D00E               	goto	l32753
  9870  000878                     l32745:
  9871                           
  9872                           ;aip33626.c: 758: else if(col_cnt==5 || col_cnt==15 || col_cnt==25||col_cnt==35)
  9873  000878  0E05               	movlw	5
  9874  00087A  1868               	xorwf	_col_cnt,w,c
  9875  00087C  E009               	bz	l2342
  9876  00087E  0E0F               	movlw	15
  9877  000880  1868               	xorwf	_col_cnt,w,c
  9878  000882  E006               	bz	l2342
  9879  000884  0E19               	movlw	25
  9880  000886  1868               	xorwf	_col_cnt,w,c
  9881  000888  E003               	bz	l2342
  9882  00088A  0E23               	movlw	35
  9883  00088C  1868               	xorwf	_col_cnt,w,c
  9884  00088E  E102               	bnz	l32753
  9885  000890                     l2342:
  9886                           
  9887                           ;aip33626.c: 759: {
  9888                           ;aip33626.c: 760: arr_col[1 ]=0;
  9889  000890  0101               	movlb	1	; () banked
  9890  000892  6B01               	clrf	(_arr_col+1)& (0+255),b
  9891  000894                     l32753:
  9892                           
  9893                           ;aip33626.c: 761: }
  9894                           ;aip33626.c: 763: if(mode_sub==1)
  9895  000894  0406               	decf	new_col@mode_sub,w,c
  9896  000896  E104               	bnz	l2343
  9897                           
  9898                           ;aip33626.c: 764: {
  9899                           ;aip33626.c: 765: t2=39-col_cnt;
  9900  000898  5068               	movf	_col_cnt,w,c
  9901  00089A  0827               	sublw	39
  9902  00089C  6E0F               	movwf	new_col@t2,c
  9903                           
  9904                           ;aip33626.c: 766: }
  9905  00089E  D002               	goto	l2344
  9906  0008A0                     l2343:
  9907                           
  9908                           ;aip33626.c: 767: else
  9909                           ;aip33626.c: 768: {
  9910                           ;aip33626.c: 769: t2=col_cnt;
  9911  0008A0  C068  F00F         	movff	_col_cnt,new_col@t2
  9912  0008A4                     l2344:
  9913                           
  9914                           ;aip33626.c: 770: }
  9915                           ;aip33626.c: 771: if((t2&0x01)==0)
  9916  0008A4  B00F               	btfsc	new_col@t2,0,c
  9917  0008A6  D034               	goto	l32823
  9918                           
  9919                           ;aip33626.c: 772: {
  9920                           ;aip33626.c: 775: if(t1==0)
  9921  0008A8  5066               	movf	_t1,w,c
  9922  0008AA  E109               	bnz	l32771
  9923                           
  9924                           ;aip33626.c: 777: {
  9925                           ;aip33626.c: 778: arr_col[17]=250;
  9926  0008AC  0EFA               	movlw	250
  9927  0008AE  0101               	movlb	1	; () banked
  9928  0008B0  6F11               	movwf	(_arr_col+17)& (0+255),b
  9929                           
  9930                           ; BSR set to: 1
  9931                           ;aip33626.c: 779: arr_col[33]=0;
  9932  0008B2  6B21               	clrf	(_arr_col+33)& (0+255),b
  9933  0008B4                     l32763:
  9934                           
  9935                           ; BSR set to: 1
  9936                           ;aip33626.c: 780: arr_col[49]=0;
  9937  0008B4  6B31               	clrf	(_arr_col+49)& (0+255),b
  9938  0008B6                     l32765:
  9939                           
  9940                           ; BSR set to: 1
  9941                           ;aip33626.c: 781: arr_col[65]=0;
  9942  0008B6  6B41               	clrf	(_arr_col+65)& (0+255),b
  9943  0008B8                     l32767:
  9944                           
  9945                           ; BSR set to: 1
  9946                           ;aip33626.c: 782: arr_col[81]=0;
  9947  0008B8  6B51               	clrf	(_arr_col+81)& (0+255),b
  9948  0008BA                     l32769:
  9949                           
  9950                           ; BSR set to: 1
  9951                           ;aip33626.c: 783: arr_col[97]=0;
  9952  0008BA  6B61               	clrf	(_arr_col+97)& (0+255),b
  9953                           
  9954                           ;aip33626.c: 784: }
  9955  0008BC  D024               	goto	l32817
  9956  0008BE                     l32771:
  9957                           
  9958                           ;aip33626.c: 785: else if(t1==1)
  9959  0008BE  0466               	decf	_t1,w,c
  9960  0008C0  E105               	bnz	l32785
  9961                           
  9962                           ;aip33626.c: 787: {
  9963                           ;aip33626.c: 788: arr_col[17]=0;
  9964  0008C2  0101               	movlb	1	; () banked
  9965  0008C4  6B11               	clrf	(_arr_col+17)& (0+255),b
  9966                           
  9967                           ; BSR set to: 1
  9968                           ;aip33626.c: 789: arr_col[33]=250;
  9969  0008C6  0EFA               	movlw	250
  9970  0008C8  6F21               	movwf	(_arr_col+33)& (0+255),b
  9971  0008CA  D7F4               	goto	l32763
  9972  0008CC                     l32785:
  9973                           
  9974                           ;aip33626.c: 795: else if(t1==2)
  9975  0008CC  0E02               	movlw	2
  9976  0008CE  1866               	xorwf	_t1,w,c
  9977  0008D0  E106               	bnz	l32797
  9978                           
  9979                           ;aip33626.c: 797: {
  9980                           ;aip33626.c: 798: arr_col[17]=0;
  9981  0008D2  0101               	movlb	1	; () banked
  9982  0008D4  6B11               	clrf	(_arr_col+17)& (0+255),b
  9983                           
  9984                           ;aip33626.c: 799: arr_col[33]=0;
  9985  0008D6  6B21               	clrf	(_arr_col+33)& (0+255),b
  9986                           
  9987                           ; BSR set to: 1
  9988                           ;aip33626.c: 800: arr_col[49]=250;
  9989  0008D8  0EFA               	movlw	250
  9990  0008DA  6F31               	movwf	(_arr_col+49)& (0+255),b
  9991  0008DC  D7EC               	goto	l32765
  9992  0008DE                     l32797:
  9993                           
  9994                           ;aip33626.c: 805: else if(t1==3)
  9995  0008DE  0E03               	movlw	3
  9996  0008E0  1866               	xorwf	_t1,w,c
  9997  0008E2  E104               	bnz	l32807
  9998                           
  9999                           ;aip33626.c: 807: {
 10000                           ;aip33626.c: 808: arr_col[17]=0;
 10001                           
 10002                           ;aip33626.c: 809: arr_col[33]=0;
 10003                           
 10004                           ;aip33626.c: 810: arr_col[49]=0;
 10005  0008E4  D899               	call	PL60	;call to abstracted procedure
 10006                           
 10007                           ; BSR set to: 1
 10008                           ;aip33626.c: 811: arr_col[65]=250;
 10009  0008E6  0EFA               	movlw	250
 10010  0008E8  6F41               	movwf	(_arr_col+65)& (0+255),b
 10011  0008EA  D7E6               	goto	l32767
 10012  0008EC                     l32807:
 10013                           
 10014                           ;aip33626.c: 815: else if(t1==4)
 10015  0008EC  0E04               	movlw	4
 10016  0008EE  1866               	xorwf	_t1,w,c
 10017  0008F0  E105               	bnz	l2354
 10018                           
 10019                           ;aip33626.c: 817: {
 10020                           ;aip33626.c: 818: arr_col[17]=0;
 10021                           
 10022                           ;aip33626.c: 819: arr_col[33]=0;
 10023                           
 10024                           ;aip33626.c: 820: arr_col[49]=0;
 10025  0008F2  D892               	call	PL60	;call to abstracted procedure
 10026                           
 10027                           ;aip33626.c: 821: arr_col[65]=0;
 10028  0008F4  6B41               	clrf	(_arr_col+65)& (0+255),b
 10029                           
 10030                           ; BSR set to: 1
 10031                           ;aip33626.c: 822: arr_col[81]=250;
 10032  0008F6  0EFA               	movlw	250
 10033  0008F8  6F51               	movwf	(_arr_col+81)& (0+255),b
 10034  0008FA  D7DF               	goto	l32769
 10035  0008FC                     l2354:
 10036                           
 10037                           ;aip33626.c: 825: else
 10038                           ;aip33626.c: 827: {
 10039                           ;aip33626.c: 828: arr_col[17]=0;
 10040                           
 10041                           ;aip33626.c: 829: arr_col[33]=0;
 10042                           
 10043                           ;aip33626.c: 830: arr_col[49]=0;
 10044  0008FC  D88D               	call	PL60	;call to abstracted procedure
 10045                           
 10046                           ;aip33626.c: 831: arr_col[65]=0;
 10047  0008FE  6B41               	clrf	(_arr_col+65)& (0+255),b
 10048                           
 10049                           ;aip33626.c: 832: arr_col[81]=0;
 10050  000900  6B51               	clrf	(_arr_col+81)& (0+255),b
 10051                           
 10052                           ; BSR set to: 1
 10053                           ;aip33626.c: 833: arr_col[97]=250;
 10054  000902  0EFA               	movlw	250
 10055  000904  6F61               	movwf	(_arr_col+97)& (0+255),b
 10056  000906                     l32817:
 10057                           
 10058                           ; BSR set to: 1
 10059                           ;aip33626.c: 834: }
 10060                           ;aip33626.c: 835: t1++;
 10061  000906  2A66               	incf	_t1,f,c
 10062                           
 10063                           ; BSR set to: 1
 10064                           ;aip33626.c: 836: if(t1>=6)
 10065  000908  0E05               	movlw	5
 10066  00090A  6466               	cpfsgt	_t1,c
 10067  00090C  D001               	goto	l32823
 10068                           
 10069                           ; BSR set to: 1
 10070                           ;aip33626.c: 837: {
 10071                           ;aip33626.c: 838: t1=0;
 10072  00090E  6A66               	clrf	_t1,c
 10073  000910                     l32823:
 10074                           
 10075                           ;aip33626.c: 839: }
 10076                           ;aip33626.c: 840: }
 10077                           ;aip33626.c: 843: }
 10078                           ;aip33626.c: 844: if(mode_sub<=2)
 10079  000910  0E03               	movlw	3
 10080  000912  6006               	cpfslt	new_col@mode_sub,c
 10081  000914  D018               	goto	l32841
 10082                           
 10083                           ;aip33626.c: 845: {
 10084                           ;aip33626.c: 846: arr_col[arr_q[state_q]]=250;
 10085  000916  5065               	movf	_state_q,w,c
 10086  000918  D861               	call	PL24	;call to abstracted procedure
 10087  00091A  0EFA               	movlw	250
 10088  00091C  6EDF               	movwf	indf2,c
 10089                           
 10090                           ;aip33626.c: 856: arr_col[arr_q[state_q==0?23:(state_q-1)]]=0;
 10091  00091E  5065               	movf	_state_q,w,c
 10092  000920  E007               	bz	l32831
 10093  000922  0EFF               	movlw	255
 10094  000924  2465               	addwf	_state_q,w,c
 10095  000926  6E0D               	movwf	_new_col$1181,c
 10096  000928  6A0E               	clrf	_new_col$1181+1,c
 10097  00092A  0EFF               	movlw	255
 10098  00092C  220E               	addwfc	_new_col$1181+1,f,c
 10099  00092E  D003               	goto	l32833
 10100  000930                     l32831:
 10101  000930  6A0E               	clrf	_new_col$1181+1,c
 10102  000932  0E17               	movlw	23
 10103  000934  6E0D               	movwf	_new_col$1181,c
 10104  000936                     l32833:
 10105  000936  500D               	movf	_new_col$1181,w,c
 10106  000938  D851               	call	PL24	;call to abstracted procedure
 10107  00093A  6ADF               	clrf	indf2,c
 10108                           
 10109                           ;aip33626.c: 858: state_q++;
 10110  00093C  2A65               	incf	_state_q,f,c
 10111                           
 10112                           ;aip33626.c: 859: if(state_q>=24)
 10113  00093E  0E17               	movlw	23
 10114  000940  6465               	cpfsgt	_state_q,c
 10115  000942  D001               	goto	l32841
 10116                           
 10117                           ;aip33626.c: 860: {
 10118                           ;aip33626.c: 861: state_q=0;
 10119  000944  6A65               	clrf	_state_q,c
 10120  000946                     l32841:
 10121                           
 10122                           ;aip33626.c: 862: }
 10123                           ;aip33626.c: 863: }
 10124                           ;aip33626.c: 866: if(col_init==1||col_cnt==15||col_cnt==30||col_cnt==5)
 10125  000946  047B               	decf	_col_init,w,c
 10126  000948  E009               	bz	l32849
 10127  00094A  0E0F               	movlw	15
 10128  00094C  1868               	xorwf	_col_cnt,w,c
 10129  00094E  E006               	bz	l32849
 10130  000950  0E1E               	movlw	30
 10131  000952  1868               	xorwf	_col_cnt,w,c
 10132  000954  E003               	bz	l32849
 10133  000956  0E05               	movlw	5
 10134  000958  1868               	xorwf	_col_cnt,w,c
 10135  00095A  E11B               	bnz	l32863
 10136  00095C                     l32849:
 10137                           
 10138                           ;aip33626.c: 867: {
 10139                           ;aip33626.c: 869: if(mode==0)
 10140  00095C  5005               	movf	new_col@mode,w,c
 10141  00095E  E10D               	bnz	l2366
 10142                           
 10143                           ;aip33626.c: 870: {
 10144                           ;aip33626.c: 871: arr_col[14]=250;
 10145  000960  0EFA               	movlw	250
 10146  000962  0101               	movlb	1	; () banked
 10147  000964  6F0E               	movwf	(_arr_col+14)& (0+255),b
 10148                           
 10149                           ;aip33626.c: 872: arr_col[30]=250;
 10150  000966  6F1E               	movwf	(_arr_col+30)& (0+255),b
 10151                           
 10152                           ;aip33626.c: 873: arr_col[46]=250;
 10153  000968  6F2E               	movwf	(_arr_col+46)& (0+255),b
 10154                           
 10155                           ;aip33626.c: 874: arr_col[62]=250;
 10156  00096A  6F3E               	movwf	(_arr_col+62)& (0+255),b
 10157                           
 10158                           ;aip33626.c: 875: arr_col[78]=250;
 10159  00096C  6F4E               	movwf	(_arr_col+78)& (0+255),b
 10160                           
 10161                           ;aip33626.c: 876: arr_col[94]=250;
 10162  00096E  6F5E               	movwf	(_arr_col+94)& (0+255),b
 10163                           
 10164                           ; BSR set to: 1
 10165                           ;aip33626.c: 878: arr_col[110]=0;
 10166  000970  6B6E               	clrf	(_arr_col+110)& (0+255),b
 10167                           
 10168                           ; BSR set to: 1
 10169                           ;aip33626.c: 879: arr_col[126]=0;
 10170  000972  6B7E               	clrf	(_arr_col+126)& (0+255),b
 10171                           
 10172                           ; BSR set to: 1
 10173                           ;aip33626.c: 880: arr_col[112]=0;
 10174  000974  6B70               	clrf	(_arr_col+112)& (0+255),b
 10175                           
 10176                           ; BSR set to: 1
 10177                           ;aip33626.c: 881: arr_col[113]=0;
 10178  000976  6B71               	clrf	(_arr_col+113)& (0+255),b
 10179                           
 10180                           ;aip33626.c: 882: }
 10181  000978  D00C               	goto	l32863
 10182  00097A                     l2366:
 10183                           
 10184                           ;aip33626.c: 883: else
 10185                           ;aip33626.c: 884: {
 10186                           ;aip33626.c: 885: arr_col[14]=0;
 10187  00097A  0101               	movlb	1	; () banked
 10188  00097C  6B0E               	clrf	(_arr_col+14)& (0+255),b
 10189                           
 10190                           ;aip33626.c: 886: arr_col[30]=0;
 10191  00097E  6B1E               	clrf	(_arr_col+30)& (0+255),b
 10192                           
 10193                           ;aip33626.c: 887: arr_col[46]=0;
 10194  000980  6B2E               	clrf	(_arr_col+46)& (0+255),b
 10195                           
 10196                           ;aip33626.c: 888: arr_col[62]=0;
 10197  000982  6B3E               	clrf	(_arr_col+62)& (0+255),b
 10198                           
 10199                           ;aip33626.c: 889: arr_col[78]=0;
 10200  000984  6B4E               	clrf	(_arr_col+78)& (0+255),b
 10201                           
 10202                           ;aip33626.c: 890: arr_col[94]=0;
 10203  000986  6B5E               	clrf	(_arr_col+94)& (0+255),b
 10204                           
 10205                           ; BSR set to: 1
 10206                           ;aip33626.c: 892: arr_col[110]=250;
 10207  000988  0EFA               	movlw	250
 10208  00098A  6F6E               	movwf	(_arr_col+110)& (0+255),b
 10209                           
 10210                           ;aip33626.c: 893: arr_col[126]=250;
 10211  00098C  6F7E               	movwf	(_arr_col+126)& (0+255),b
 10212                           
 10213                           ;aip33626.c: 894: arr_col[112]=250;
 10214  00098E  6F70               	movwf	(_arr_col+112)& (0+255),b
 10215                           
 10216                           ;aip33626.c: 895: arr_col[113]=250;
 10217  000990  6F71               	movwf	(_arr_col+113)& (0+255),b
 10218  000992                     l32863:
 10219                           
 10220                           ;aip33626.c: 896: }
 10221                           ;aip33626.c: 897: }
 10222                           ;aip33626.c: 898: if(col_init==1)
 10223  000992  047B               	decf	_col_init,w,c
 10224  000994  E101               	bnz	l32867
 10225                           
 10226                           ;aip33626.c: 899: {
 10227                           ;aip33626.c: 900: col_init=0;
 10228  000996  6A7B               	clrf	_col_init,c
 10229  000998                     l32867:
 10230                           
 10231                           ;aip33626.c: 901: }
 10232                           ;aip33626.c: 902: if(col_cnt==39)
 10233  000998  0E27               	movlw	39
 10234  00099A  1868               	xorwf	_col_cnt,w,c
 10235  00099C  A4D8               	btfss	status,2,c
 10236  00099E  0012               	return	
 10237                           
 10238                           ;aip33626.c: 903: {
 10239                           ;aip33626.c: 904: col_init=1;
 10240  0009A0  0E01               	movlw	1
 10241  0009A2  6E7B               	movwf	_col_init,c
 10242  0009A4  0C01               	retlw	1	;funcret
 10243  0009A6                     __end_of_new_col:
 10244                           	opt stack 0
 10245  0009A6                     PL16:
 10246                           	opt stack 2
 10247  0009A6  5068               	movf	_col_cnt,w,c
 10248  0009A8  6E07               	movwf	??_new_col& (0+255),c
 10249  0009AA  6A08               	clrf	(??_new_col+1)& (0+255),c
 10250  0009AC  5012               	movf	new_col@i,w,c
 10251  0009AE  0F01               	addlw	low _arr_cnt
 10252  0009B0  6E09               	movwf	(??_new_col+2)& (0+255),c
 10253  0009B2  C009  FFF6         	movff	??_new_col+2,tblptrl
 10254  0009B6                     	if	1	;There is more than 1 active tblptr byte
 10255  0009B6  0E02               	movlw	high __smallconst
 10256  0009B8  6EF7               	movwf	tblptrh,c
 10257  0009BA                     	endif
 10258  0009BA                     	if	0	;tblptru may be non-zero
 10259  0009BA                     	endif
 10260  0009BA                     	if	0	;tblptru may be non-zero
 10261  0009BA                     	endif
 10262  0009BA  0008               	tblrd		*
 10263  0009BC  50F5               	movf	tablat,w,c
 10264  0009BE  6E0A               	movwf	(??_new_col+3)& (0+255),c
 10265  0009C0  6A0B               	clrf	(??_new_col+4)& (0+255),c
 10266  0009C2  0E09               	movlw	9
 10267  0009C4  260A               	addwf	??_new_col+3,f,c
 10268  0009C6  0E00               	movlw	0
 10269  0009C8  220B               	addwfc	??_new_col+4,f,c
 10270  0009CA  5007               	movf	??_new_col,w,c
 10271  0009CC  5C0A               	subwf	??_new_col+3,w,c
 10272  0009CE  500B               	movf	??_new_col+4,w,c
 10273  0009D0  0A80               	xorlw	128
 10274  0009D2  6E0C               	movwf	(??_new_col+5)& (0+255),c
 10275  0009D4  5008               	movf	??_new_col+1,w,c
 10276  0009D6  0A80               	xorlw	128
 10277  0009D8  580C               	subwfb	(??_new_col+5)& (0+255),w,c
 10278  0009DA  0012               	return	
 10279  0009DC                     __end_ofPL16:
 10280                           	opt stack 0
 10281  0009DC                     PL24:
 10282                           	opt stack 2
 10283  0009DC  0F81               	addlw	low _arr_q
 10284  0009DE  6E07               	movwf	??_new_col& (0+255),c
 10285  0009E0  C007  FFF6         	movff	??_new_col,tblptrl
 10286  0009E4                     	if	1	;There is more than 1 active tblptr byte
 10287  0009E4  0E02               	movlw	high __smallconst
 10288  0009E6  6EF7               	movwf	tblptrh,c
 10289  0009E8                     	endif
 10290  0009E8                     	if	0	;tblptru may be non-zero
 10291  0009E8                     	endif
 10292  0009E8                     	if	0	;tblptru may be non-zero
 10293  0009E8                     	endif
 10294  0009E8  0008               	tblrd		*
 10295  0009EA  50F5               	movf	tablat,w,c
 10296  0009EC  6E08               	movwf	(??_new_col+1)& (0+255),c
 10297  0009EE  6A09               	clrf	(??_new_col+2)& (0+255),c
 10298  0009F0  0E00               	movlw	low _arr_col
 10299  0009F2  2408               	addwf	??_new_col+1,w,c
 10300  0009F4  6ED9               	movwf	fsr2l,c
 10301  0009F6  0E01               	movlw	high _arr_col
 10302  0009F8  2009               	addwfc	??_new_col+2,w,c
 10303  0009FA  6EDA               	movwf	fsr2h,c
 10304  0009FC  0012               	return	
 10305  0009FE                     __end_ofPL24:
 10306                           	opt stack 0
 10307  0009FE                     PL28:
 10308                           	opt stack 2
 10309  0009FE  6E07               	movwf	??_new_col& (0+255),c
 10310  000A00  C007  FFF6         	movff	??_new_col,tblptrl
 10311  000A04                     	if	1	;There is more than 1 active tblptr byte
 10312  000A04  0E02               	movlw	high __smallconst
 10313  000A06  6EF7               	movwf	tblptrh,c
 10314  000A08                     	endif
 10315  000A08                     	if	0	;tblptru may be non-zero
 10316  000A08                     	endif
 10317  000A08                     	if	0	;tblptru may be non-zero
 10318  000A08                     	endif
 10319  000A08  0012               	return	
 10320  000A0A                     __end_ofPL28:
 10321                           	opt stack 0
 10322  000A0A                     PL32:
 10323                           	opt stack 2
 10324  000A0A  0E00               	movlw	low _arr_col
 10325  000A0C  2412               	addwf	new_col@i,w,c
 10326  000A0E  6ED9               	movwf	fsr2l,c
 10327  000A10  6ADA               	clrf	fsr2h,c
 10328  000A12  0E01               	movlw	high _arr_col
 10329  000A14  22DA               	addwfc	fsr2h,f,c
 10330  000A16  0012               	return	
 10331  000A18                     __end_ofPL32:
 10332                           	opt stack 0
 10333  000A18                     PL60:
 10334                           	opt stack 2
 10335  000A18  0101               	movlb	1	; () banked
 10336  000A1A  6B11               	clrf	(_arr_col+17)& (0+255),b
 10337  000A1C  6B21               	clrf	(_arr_col+33)& (0+255),b
 10338  000A1E  6B31               	clrf	(_arr_col+49)& (0+255),b
 10339  000A20  0012               	return	
 10340  000A22                     __end_ofPL60:
 10341                           	opt stack 0
 10342  000A22                     PL92:
 10343                           	opt stack 2
 10344  000A22  0EFA               	movlw	250
 10345  000A24  0101               	movlb	1	; () banked
 10346  000A26  6F01               	movwf	(_arr_col+1)& (0+255),b
 10347  000A28  0CFA               	retlw	250
 10348  000A2A                     __end_ofPL92:
 10349                           	opt stack 0
 10350                           tblptru	equ	0xFF8
 10351                           tblptrh	equ	0xFF7
 10352                           tblptrl	equ	0xFF6
 10353                           tablat	equ	0xFF5
 10354                           prodh	equ	0xFF4
 10355                           prodl	equ	0xFF3
 10356                           intcon	equ	0xFF2
 10357                           postinc0	equ	0xFEE
 10358                           wreg	equ	0xFE8
 10359                           postdec1	equ	0xFE5
 10360                           fsr1l	equ	0xFE1
 10361                           indf2	equ	0xFDF
 10362                           postinc2	equ	0xFDE
 10363                           postdec2	equ	0xFDD
 10364                           fsr2h	equ	0xFDA
 10365                           fsr2l	equ	0xFD9
 10366                           status	equ	0xFD8
 10367                           
 10368 ;; *************** function _arr_col_init *****************
 10369 ;; Defined at:
 10370 ;;		line 84 in file ".\src\aip33626.c"
 10371 ;; Parameters:    Size  Location     Type
 10372 ;;  num             1    wreg     unsigned char 
 10373 ;; Auto vars:     Size  Location     Type
 10374 ;;  num             1    1[COMRAM] unsigned char 
 10375 ;;  i               1    2[COMRAM] unsigned char 
 10376 ;; Return value:  Size  Location     Type
 10377 ;;                  1    wreg      void 
 10378 ;; Registers used:
 10379 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10380 ;; Tracked objects:
 10381 ;;		On entry : 0/0
 10382 ;;		On exit  : 0/0
 10383 ;;		Unchanged: 0/0
 10384 ;; Data sizes:     COMRAM   BANK0   BANK1
 10385 ;;      Params:         0       0       0
 10386 ;;      Locals:         2       0       0
 10387 ;;      Temps:          0       0       0
 10388 ;;      Totals:         2       0       0
 10389 ;;Total ram usage:        2 bytes
 10390 ;; Hardware stack levels used:    1
 10391 ;; Hardware stack levels required when called:    3
 10392 ;; This function calls:
 10393 ;;		Nothing
 10394 ;; This function is called by:
 10395 ;;		_aip33626_breath
 10396 ;;		_aip33626_smo_reset
 10397 ;;		_aip33626_batFull
 10398 ;; This function uses a non-reentrant model
 10399 ;;
 10400                           
 10401                           	psect	text45
 10402  002500                     __ptext45:
 10403                           	opt stack 0
 10404  002500                     _arr_col_init:
 10405                           	opt stack 2
 10406                           
 10407                           ;incstack = 0
 10408                           ;arr_col_init@num stored from wreg
 10409  002500  6E02               	movwf	arr_col_init@num,c
 10410                           
 10411                           ;aip33626.c: 86: u8 i;
 10412                           ;aip33626.c: 87: for(i=0;i<128;i++)
 10413  002502  6A03               	clrf	arr_col_init@i,c
 10414  002504                     l32313:
 10415                           
 10416                           ;aip33626.c: 88: {
 10417                           ;aip33626.c: 89: arr_col[i]=num;
 10418  002504  0E00               	movlw	low _arr_col
 10419  002506  2403               	addwf	arr_col_init@i,w,c
 10420  002508  6ED9               	movwf	fsr2l,c
 10421  00250A  6ADA               	clrf	fsr2h,c
 10422  00250C  0E01               	movlw	high _arr_col
 10423  00250E  22DA               	addwfc	fsr2h,f,c
 10424  002510  C002  FFDF         	movff	arr_col_init@num,indf2
 10425  002514  2A03               	incf	arr_col_init@i,f,c
 10426  002516  0E7F               	movlw	127
 10427  002518  6403               	cpfsgt	arr_col_init@i,c
 10428  00251A  D7F4               	goto	l32313
 10429  00251C  0C7F               	retlw	127
 10430  00251E                     __end_of_arr_col_init:
 10431                           	opt stack 0
 10432                           tblptru	equ	0xFF8
 10433                           tblptrh	equ	0xFF7
 10434                           tblptrl	equ	0xFF6
 10435                           tablat	equ	0xFF5
 10436                           prodh	equ	0xFF4
 10437                           prodl	equ	0xFF3
 10438                           intcon	equ	0xFF2
 10439                           postinc0	equ	0xFEE
 10440                           wreg	equ	0xFE8
 10441                           postdec1	equ	0xFE5
 10442                           fsr1l	equ	0xFE1
 10443                           indf2	equ	0xFDF
 10444                           postinc2	equ	0xFDE
 10445                           postdec2	equ	0xFDD
 10446                           fsr2h	equ	0xFDA
 10447                           fsr2l	equ	0xFD9
 10448                           status	equ	0xFD8
 10449                           
 10450 ;; *************** function _aip33626_allDisplay_ *****************
 10451 ;; Defined at:
 10452 ;;		line 42 in file ".\src\aip33626.c"
 10453 ;; Parameters:    Size  Location     Type
 10454 ;;  num             1    wreg     unsigned char 
 10455 ;; Auto vars:     Size  Location     Type
 10456 ;;  num             1    8[COMRAM] unsigned char 
 10457 ;;  i               1    9[COMRAM] unsigned char 
 10458 ;; Return value:  Size  Location     Type
 10459 ;;                  1    wreg      void 
 10460 ;; Registers used:
 10461 ;;		wreg, status,2, status,0, cstack
 10462 ;; Tracked objects:
 10463 ;;		On entry : 0/0
 10464 ;;		On exit  : 0/0
 10465 ;;		Unchanged: 0/0
 10466 ;; Data sizes:     COMRAM   BANK0   BANK1
 10467 ;;      Params:         0       0       0
 10468 ;;      Locals:         2       0       0
 10469 ;;      Temps:          0       0       0
 10470 ;;      Totals:         2       0       0
 10471 ;;Total ram usage:        2 bytes
 10472 ;; Hardware stack levels used:    1
 10473 ;; Hardware stack levels required when called:    6
 10474 ;; This function calls:
 10475 ;;		_aip33626_sursor
 10476 ;;		_myi2c_reciveack
 10477 ;;		_myi2c_sendbyte
 10478 ;;		_myi2c_start
 10479 ;;		_myi2c_stop
 10480 ;; This function is called by:
 10481 ;;		_aip33626_sys_begin
 10482 ;;		_aip33626_flash
 10483 ;;		_aip33626_breath
 10484 ;;		_aip33626_freeChrg
 10485 ;; This function uses a non-reentrant model
 10486 ;;
 10487                           
 10488                           	psect	text46
 10489  0023B0                     __ptext46:
 10490                           	opt stack 0
 10491  0023B0                     _aip33626_allDisplay_:
 10492                           	opt stack 0
 10493                           
 10494                           ;incstack = 0
 10495 ;; hardware stack exceeded
 10496                           ;aip33626_allDisplay_@num stored from wreg
 10497  0023B0  6E09               	movwf	aip33626_allDisplay_@num,c
 10498                           
 10499                           ;aip33626.c: 45: aip33626_sursor(0x00);
 10500  0023B2  0E00               	movlw	0
 10501  0023B4  ECD2  F012         	call	_aip33626_sursor
 10502                           
 10503                           ;aip33626.c: 46: myi2c_start();
 10504  0023B8  ECF4  F011         	call	_myi2c_start	;wreg free
 10505                           
 10506                           ;aip33626.c: 47: myi2c_sendbyte(0x78);
 10507  0023BC  0E78               	movlw	120
 10508  0023BE  ECFF  F010         	call	_myi2c_sendbyte
 10509                           
 10510                           ;aip33626.c: 48: myi2c_reciveack();
 10511  0023C2  EC61  F012         	call	_myi2c_reciveack	;wreg free
 10512                           
 10513                           ;aip33626.c: 49: myi2c_sendbyte(0x00);
 10514  0023C6  0E00               	movlw	0
 10515  0023C8  ECFF  F010         	call	_myi2c_sendbyte
 10516                           
 10517                           ;aip33626.c: 50: myi2c_reciveack();
 10518  0023CC  EC61  F012         	call	_myi2c_reciveack	;wreg free
 10519                           
 10520                           ;aip33626.c: 51: for(i=0;i<128;i++)
 10521  0023D0  6A0A               	clrf	aip33626_allDisplay_@i,c
 10522  0023D2                     l32591:
 10523                           
 10524                           ;aip33626.c: 52: {
 10525                           ;aip33626.c: 53: myi2c_sendbyte(num);
 10526  0023D2  5009               	movf	aip33626_allDisplay_@num,w,c
 10527  0023D4  ECFF  F010         	call	_myi2c_sendbyte
 10528                           
 10529                           ;aip33626.c: 54: myi2c_reciveack();
 10530  0023D8  EC61  F012         	call	_myi2c_reciveack	;wreg free
 10531  0023DC  2A0A               	incf	aip33626_allDisplay_@i,f,c
 10532  0023DE  0E7F               	movlw	127
 10533  0023E0  640A               	cpfsgt	aip33626_allDisplay_@i,c
 10534  0023E2  D7F7               	goto	l32591
 10535  0023E4  EF50  F012         	goto	_myi2c_stop
 10536  0023E8                     __end_of_aip33626_allDisplay_:
 10537                           	opt stack 0
 10538                           tblptru	equ	0xFF8
 10539                           tblptrh	equ	0xFF7
 10540                           tblptrl	equ	0xFF6
 10541                           tablat	equ	0xFF5
 10542                           prodh	equ	0xFF4
 10543                           prodl	equ	0xFF3
 10544                           intcon	equ	0xFF2
 10545                           postinc0	equ	0xFEE
 10546                           wreg	equ	0xFE8
 10547                           postdec1	equ	0xFE5
 10548                           fsr1l	equ	0xFE1
 10549                           indf2	equ	0xFDF
 10550                           postinc2	equ	0xFDE
 10551                           postdec2	equ	0xFDD
 10552                           fsr2h	equ	0xFDA
 10553                           fsr2l	equ	0xFD9
 10554                           status	equ	0xFD8
 10555                           
 10556 ;; *************** function _aip33626_allDisplay *****************
 10557 ;; Defined at:
 10558 ;;		line 59 in file ".\src\aip33626.c"
 10559 ;; Parameters:    Size  Location     Type
 10560 ;;  num             2    8[COMRAM] PTR unsigned char 
 10561 ;;		 -> arr_col(128), 
 10562 ;; Auto vars:     Size  Location     Type
 10563 ;;  i               1   10[COMRAM] unsigned char 
 10564 ;; Return value:  Size  Location     Type
 10565 ;;                  1    wreg      void 
 10566 ;; Registers used:
 10567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10568 ;; Tracked objects:
 10569 ;;		On entry : 0/1
 10570 ;;		On exit  : 0/0
 10571 ;;		Unchanged: 0/0
 10572 ;; Data sizes:     COMRAM   BANK0   BANK1
 10573 ;;      Params:         2       0       0
 10574 ;;      Locals:         1       0       0
 10575 ;;      Temps:          0       0       0
 10576 ;;      Totals:         3       0       0
 10577 ;;Total ram usage:        3 bytes
 10578 ;; Hardware stack levels used:    1
 10579 ;; Hardware stack levels required when called:    6
 10580 ;; This function calls:
 10581 ;;		_aip33626_sursor
 10582 ;;		_myi2c_reciveack
 10583 ;;		_myi2c_sendbyte
 10584 ;;		_myi2c_start
 10585 ;;		_myi2c_stop
 10586 ;; This function is called by:
 10587 ;;		_aip33626_breath
 10588 ;;		_aip33626_breath_stop
 10589 ;;		_aip33626_smo_reset
 10590 ;;		_aip33626_batFull
 10591 ;;		_aip33626_freeChrg
 10592 ;; This function uses a non-reentrant model
 10593 ;;
 10594                           
 10595                           	psect	text47
 10596  002330                     __ptext47:
 10597                           	opt stack 0
 10598  002330                     _aip33626_allDisplay:
 10599                           	opt stack 0
 10600                           
 10601                           ;aip33626.c: 62: aip33626_sursor(0x00);
 10602                           
 10603                           ;incstack = 0
 10604 ;; hardware stack exceeded
 10605  002330  0E00               	movlw	0
 10606  002332  ECD2  F012         	call	_aip33626_sursor
 10607                           
 10608                           ;aip33626.c: 63: myi2c_start();
 10609  002336  ECF4  F011         	call	_myi2c_start	;wreg free
 10610                           
 10611                           ;aip33626.c: 64: myi2c_sendbyte(0x78);
 10612  00233A  0E78               	movlw	120
 10613  00233C  ECFF  F010         	call	_myi2c_sendbyte
 10614                           
 10615                           ;aip33626.c: 65: myi2c_reciveack();
 10616  002340  EC61  F012         	call	_myi2c_reciveack	;wreg free
 10617                           
 10618                           ;aip33626.c: 66: myi2c_sendbyte(0x00);
 10619  002344  0E00               	movlw	0
 10620  002346  ECFF  F010         	call	_myi2c_sendbyte
 10621                           
 10622                           ;aip33626.c: 67: myi2c_reciveack();
 10623  00234A  EC61  F012         	call	_myi2c_reciveack	;wreg free
 10624                           
 10625                           ;aip33626.c: 68: for(i=0;i<128;i++)
 10626  00234E  6A0B               	clrf	aip33626_allDisplay@i,c
 10627  002350                     l32297:
 10628                           
 10629                           ;aip33626.c: 69: {
 10630                           ;aip33626.c: 70: myi2c_sendbyte(num[i]);
 10631  002350  500B               	movf	aip33626_allDisplay@i,w,c
 10632  002352  2409               	addwf	aip33626_allDisplay@num,w,c
 10633  002354  6ED9               	movwf	fsr2l,c
 10634  002356  0E00               	movlw	0
 10635  002358  200A               	addwfc	aip33626_allDisplay@num+1,w,c
 10636  00235A  6EDA               	movwf	fsr2h,c
 10637  00235C  50DF               	movf	indf2,w,c
 10638  00235E  ECFF  F010         	call	_myi2c_sendbyte
 10639                           
 10640                           ;aip33626.c: 71: myi2c_reciveack();
 10641  002362  EC61  F012         	call	_myi2c_reciveack	;wreg free
 10642  002366  2A0B               	incf	aip33626_allDisplay@i,f,c
 10643  002368  0E7F               	movlw	127
 10644  00236A  640B               	cpfsgt	aip33626_allDisplay@i,c
 10645  00236C  D7F1               	goto	l32297
 10646  00236E  EF50  F012         	goto	_myi2c_stop
 10647  002372                     __end_of_aip33626_allDisplay:
 10648                           	opt stack 0
 10649                           tblptru	equ	0xFF8
 10650                           tblptrh	equ	0xFF7
 10651                           tblptrl	equ	0xFF6
 10652                           tablat	equ	0xFF5
 10653                           prodh	equ	0xFF4
 10654                           prodl	equ	0xFF3
 10655                           intcon	equ	0xFF2
 10656                           postinc0	equ	0xFEE
 10657                           wreg	equ	0xFE8
 10658                           postdec1	equ	0xFE5
 10659                           fsr1l	equ	0xFE1
 10660                           indf2	equ	0xFDF
 10661                           postinc2	equ	0xFDE
 10662                           postdec2	equ	0xFDD
 10663                           fsr2h	equ	0xFDA
 10664                           fsr2l	equ	0xFD9
 10665                           status	equ	0xFD8
 10666                           
 10667 ;; *************** function _aip33626_sursor *****************
 10668 ;; Defined at:
 10669 ;;		line 15 in file ".\src\aip33626.c"
 10670 ;; Parameters:    Size  Location     Type
 10671 ;;  site            1    wreg     unsigned char 
 10672 ;; Auto vars:     Size  Location     Type
 10673 ;;  site            1    7[COMRAM] unsigned char 
 10674 ;; Return value:  Size  Location     Type
 10675 ;;                  1    wreg      void 
 10676 ;; Registers used:
 10677 ;;		wreg, status,2, status,0, cstack
 10678 ;; Tracked objects:
 10679 ;;		On entry : 0/0
 10680 ;;		On exit  : 0/0
 10681 ;;		Unchanged: 0/0
 10682 ;; Data sizes:     COMRAM   BANK0   BANK1
 10683 ;;      Params:         0       0       0
 10684 ;;      Locals:         1       0       0
 10685 ;;      Temps:          0       0       0
 10686 ;;      Totals:         1       0       0
 10687 ;;Total ram usage:        1 bytes
 10688 ;; Hardware stack levels used:    1
 10689 ;; Hardware stack levels required when called:    5
 10690 ;; This function calls:
 10691 ;;		_aip33626_sendcmd
 10692 ;; This function is called by:
 10693 ;;		_aip33626_allDisplay_
 10694 ;;		_aip33626_allDisplay
 10695 ;; This function uses a non-reentrant model
 10696 ;;
 10697                           
 10698                           	psect	text48
 10699  0025A4                     __ptext48:
 10700                           	opt stack 0
 10701  0025A4                     _aip33626_sursor:
 10702                           	opt stack 0
 10703                           
 10704                           ;incstack = 0
 10705 ;; hardware stack exceeded
 10706                           ;aip33626_sursor@site stored from wreg
 10707  0025A4  6E08               	movwf	aip33626_sursor@site,c
 10708                           
 10709                           ;aip33626.c: 17: aip33626_sendcmd(0xc0|(site>>4));
 10710  0025A6  3808               	swapf	aip33626_sursor@site,w,c
 10711  0025A8  0B0F               	andlw	15
 10712  0025AA  09C0               	iorlw	192
 10713  0025AC  EC8F  F012         	call	_aip33626_sendcmd
 10714                           
 10715                           ;aip33626.c: 18: aip33626_sendcmd(0xe0|(site&0x0f));
 10716  0025B0  5008               	movf	aip33626_sursor@site,w,c
 10717  0025B2  0B0F               	andlw	15
 10718  0025B4  09E0               	iorlw	224
 10719  0025B6  EF8F  F012         	goto	_aip33626_sendcmd
 10720  0025BA                     __end_of_aip33626_sursor:
 10721                           	opt stack 0
 10722                           tblptru	equ	0xFF8
 10723                           tblptrh	equ	0xFF7
 10724                           tblptrl	equ	0xFF6
 10725                           tablat	equ	0xFF5
 10726                           prodh	equ	0xFF4
 10727                           prodl	equ	0xFF3
 10728                           intcon	equ	0xFF2
 10729                           postinc0	equ	0xFEE
 10730                           wreg	equ	0xFE8
 10731                           postdec1	equ	0xFE5
 10732                           fsr1l	equ	0xFE1
 10733                           indf2	equ	0xFDF
 10734                           postinc2	equ	0xFDE
 10735                           postdec2	equ	0xFDD
 10736                           fsr2h	equ	0xFDA
 10737                           fsr2l	equ	0xFD9
 10738                           status	equ	0xFD8
 10739                           
 10740 ;; *************** function _aip33626_sendcmd *****************
 10741 ;; Defined at:
 10742 ;;		line 5 in file ".\src\aip33626.c"
 10743 ;; Parameters:    Size  Location     Type
 10744 ;;  cmd             1    wreg     unsigned char 
 10745 ;; Auto vars:     Size  Location     Type
 10746 ;;  cmd             1    6[COMRAM] unsigned char 
 10747 ;; Return value:  Size  Location     Type
 10748 ;;                  1    wreg      void 
 10749 ;; Registers used:
 10750 ;;		wreg, status,2, status,0, cstack
 10751 ;; Tracked objects:
 10752 ;;		On entry : 0/F
 10753 ;;		On exit  : 0/0
 10754 ;;		Unchanged: 0/0
 10755 ;; Data sizes:     COMRAM   BANK0   BANK1
 10756 ;;      Params:         0       0       0
 10757 ;;      Locals:         1       0       0
 10758 ;;      Temps:          0       0       0
 10759 ;;      Totals:         1       0       0
 10760 ;;Total ram usage:        1 bytes
 10761 ;; Hardware stack levels used:    1
 10762 ;; Hardware stack levels required when called:    4
 10763 ;; This function calls:
 10764 ;;		_myi2c_reciveack
 10765 ;;		_myi2c_sendbyte
 10766 ;;		_myi2c_start
 10767 ;;		_myi2c_stop
 10768 ;; This function is called by:
 10769 ;;		_aip33626_sursor
 10770 ;;		_aip33626_init
 10771 ;; This function uses a non-reentrant model
 10772 ;;
 10773                           
 10774                           	psect	text49
 10775  00251E                     __ptext49:
 10776                           	opt stack 0
 10777  00251E                     _aip33626_sendcmd:
 10778                           	opt stack 0
 10779                           
 10780                           ;incstack = 0
 10781                           ;aip33626_sendcmd@cmd stored from wreg
 10782  00251E  6E07               	movwf	aip33626_sendcmd@cmd,c
 10783                           
 10784                           ;aip33626.c: 7: myi2c_start();
 10785  002520  ECF4  F011         	call	_myi2c_start	;wreg free
 10786                           
 10787                           ;aip33626.c: 8: myi2c_sendbyte(0x78);
 10788  002524  0E78               	movlw	120
 10789  002526  ECFF  F010         	call	_myi2c_sendbyte
 10790                           
 10791                           ;aip33626.c: 9: myi2c_reciveack();
 10792  00252A  EC61  F012         	call	_myi2c_reciveack	;wreg free
 10793                           
 10794                           ;aip33626.c: 10: myi2c_sendbyte(cmd);
 10795  00252E  5007               	movf	aip33626_sendcmd@cmd,w,c
 10796  002530  ECFF  F010         	call	_myi2c_sendbyte
 10797                           
 10798                           ;aip33626.c: 11: myi2c_reciveack();
 10799  002534  EC61  F012         	call	_myi2c_reciveack	;wreg free
 10800                           
 10801                           ;aip33626.c: 12: myi2c_stop();
 10802  002538  EF50  F012         	goto	_myi2c_stop	;wreg free
 10803  00253C                     __end_of_aip33626_sendcmd:
 10804                           	opt stack 0
 10805                           tblptru	equ	0xFF8
 10806                           tblptrh	equ	0xFF7
 10807                           tblptrl	equ	0xFF6
 10808                           tablat	equ	0xFF5
 10809                           prodh	equ	0xFF4
 10810                           prodl	equ	0xFF3
 10811                           intcon	equ	0xFF2
 10812                           postinc0	equ	0xFEE
 10813                           wreg	equ	0xFE8
 10814                           postdec1	equ	0xFE5
 10815                           fsr1l	equ	0xFE1
 10816                           indf2	equ	0xFDF
 10817                           postinc2	equ	0xFDE
 10818                           postdec2	equ	0xFDD
 10819                           fsr2h	equ	0xFDA
 10820                           fsr2l	equ	0xFD9
 10821                           status	equ	0xFD8
 10822                           
 10823 ;; *************** function _myi2c_stop *****************
 10824 ;; Defined at:
 10825 ;;		line 47 in file ".\src\myi2c.c"
 10826 ;; Parameters:    Size  Location     Type
 10827 ;;		None
 10828 ;; Auto vars:     Size  Location     Type
 10829 ;;		None
 10830 ;; Return value:  Size  Location     Type
 10831 ;;                  1    wreg      void 
 10832 ;; Registers used:
 10833 ;;		None
 10834 ;; Tracked objects:
 10835 ;;		On entry : 0/0
 10836 ;;		On exit  : 0/0
 10837 ;;		Unchanged: 0/0
 10838 ;; Data sizes:     COMRAM   BANK0   BANK1
 10839 ;;      Params:         0       0       0
 10840 ;;      Locals:         0       0       0
 10841 ;;      Temps:          0       0       0
 10842 ;;      Totals:         0       0       0
 10843 ;;Total ram usage:        0 bytes
 10844 ;; Hardware stack levels used:    1
 10845 ;; Hardware stack levels required when called:    3
 10846 ;; This function calls:
 10847 ;;		Nothing
 10848 ;; This function is called by:
 10849 ;;		_aip33626_sendcmd
 10850 ;;		_aip33626_allDisplay_
 10851 ;;		_aip33626_allDisplay
 10852 ;; This function uses a non-reentrant model
 10853 ;;
 10854                           
 10855                           	psect	text50
 10856  0024A0                     __ptext50:
 10857                           	opt stack 0
 10858  0024A0                     _myi2c_stop:
 10859                           	opt stack 0
 10860                           
 10861                           ;myi2c.c: 49: PC2=0;
 10862                           
 10863                           ;incstack = 0
 10864  0024A0  9482               	bcf	3970,2,c	;volatile
 10865                           
 10866                           ;myi2c.c: 50: _delay((unsigned long)((2)*(16000000/4000000.0)));
 10867  0024A2  D000               	nop2		;2 cycle nop
 10868  0024A4  D000               	nop2		;2 cycle nop
 10869  0024A6  D000               	nop2		;2 cycle nop
 10870  0024A8  D000               	nop2		;2 cycle nop
 10871                           
 10872                           ;myi2c.c: 51: PC1=0;
 10873  0024AA  9282               	bcf	3970,1,c	;volatile
 10874                           
 10875                           ;myi2c.c: 52: _delay((unsigned long)((2)*(16000000/4000000.0)));
 10876  0024AC  D000               	nop2		;2 cycle nop
 10877  0024AE  D000               	nop2		;2 cycle nop
 10878  0024B0  D000               	nop2		;2 cycle nop
 10879  0024B2  D000               	nop2		;2 cycle nop
 10880                           
 10881                           ;myi2c.c: 53: PC1=1;
 10882  0024B4  8282               	bsf	3970,1,c	;volatile
 10883                           
 10884                           ;myi2c.c: 54: _delay((unsigned long)((2)*(16000000/4000000.0)));
 10885  0024B6  D000               	nop2		;2 cycle nop
 10886  0024B8  D000               	nop2		;2 cycle nop
 10887  0024BA  D000               	nop2		;2 cycle nop
 10888  0024BC  D000               	nop2		;2 cycle nop
 10889                           
 10890                           ;myi2c.c: 55: PC2=1;
 10891  0024BE  8482               	bsf	3970,2,c	;volatile
 10892  0024C0  0012               	return		;funcret
 10893  0024C2                     __end_of_myi2c_stop:
 10894                           	opt stack 0
 10895                           tblptru	equ	0xFF8
 10896                           tblptrh	equ	0xFF7
 10897                           tblptrl	equ	0xFF6
 10898                           tablat	equ	0xFF5
 10899                           prodh	equ	0xFF4
 10900                           prodl	equ	0xFF3
 10901                           intcon	equ	0xFF2
 10902                           postinc0	equ	0xFEE
 10903                           wreg	equ	0xFE8
 10904                           postdec1	equ	0xFE5
 10905                           fsr1l	equ	0xFE1
 10906                           indf2	equ	0xFDF
 10907                           postinc2	equ	0xFDE
 10908                           postdec2	equ	0xFDD
 10909                           fsr2h	equ	0xFDA
 10910                           fsr2l	equ	0xFD9
 10911                           status	equ	0xFD8
 10912                           
 10913 ;; *************** function _myi2c_start *****************
 10914 ;; Defined at:
 10915 ;;		line 36 in file ".\src\myi2c.c"
 10916 ;; Parameters:    Size  Location     Type
 10917 ;;		None
 10918 ;; Auto vars:     Size  Location     Type
 10919 ;;		None
 10920 ;; Return value:  Size  Location     Type
 10921 ;;                  1    wreg      void 
 10922 ;; Registers used:
 10923 ;;		None
 10924 ;; Tracked objects:
 10925 ;;		On entry : 0/0
 10926 ;;		On exit  : 0/0
 10927 ;;		Unchanged: 0/0
 10928 ;; Data sizes:     COMRAM   BANK0   BANK1
 10929 ;;      Params:         0       0       0
 10930 ;;      Locals:         0       0       0
 10931 ;;      Temps:          0       0       0
 10932 ;;      Totals:         0       0       0
 10933 ;;Total ram usage:        0 bytes
 10934 ;; Hardware stack levels used:    1
 10935 ;; Hardware stack levels required when called:    3
 10936 ;; This function calls:
 10937 ;;		Nothing
 10938 ;; This function is called by:
 10939 ;;		_aip33626_sendcmd
 10940 ;;		_aip33626_allDisplay_
 10941 ;;		_aip33626_allDisplay
 10942 ;; This function uses a non-reentrant model
 10943 ;;
 10944                           
 10945                           	psect	text51
 10946  0023E8                     __ptext51:
 10947                           	opt stack 0
 10948  0023E8                     _myi2c_start:
 10949                           	opt stack 0
 10950                           
 10951                           ;myi2c.c: 38: PC2=1;
 10952                           
 10953                           ;incstack = 0
 10954  0023E8  8482               	bsf	3970,2,c	;volatile
 10955                           
 10956                           ;myi2c.c: 39: _delay((unsigned long)((2)*(16000000/4000000.0)));
 10957  0023EA  D000               	nop2		;2 cycle nop
 10958  0023EC  D000               	nop2		;2 cycle nop
 10959  0023EE  D000               	nop2		;2 cycle nop
 10960  0023F0  D000               	nop2		;2 cycle nop
 10961                           
 10962                           ;myi2c.c: 40: PC1=1;
 10963  0023F2  8282               	bsf	3970,1,c	;volatile
 10964                           
 10965                           ;myi2c.c: 41: _delay((unsigned long)((2)*(16000000/4000000.0)));
 10966  0023F4  D000               	nop2		;2 cycle nop
 10967  0023F6  D000               	nop2		;2 cycle nop
 10968  0023F8  D000               	nop2		;2 cycle nop
 10969  0023FA  D000               	nop2		;2 cycle nop
 10970                           
 10971                           ;myi2c.c: 42: PC2=0;
 10972  0023FC  9482               	bcf	3970,2,c	;volatile
 10973                           
 10974                           ;myi2c.c: 43: _delay((unsigned long)((2)*(16000000/4000000.0)));
 10975  0023FE  D000               	nop2		;2 cycle nop
 10976  002400  D000               	nop2		;2 cycle nop
 10977  002402  D000               	nop2		;2 cycle nop
 10978  002404  D000               	nop2		;2 cycle nop
 10979                           
 10980                           ;myi2c.c: 44: PC1=0;
 10981  002406  9282               	bcf	3970,1,c	;volatile
 10982                           
 10983                           ;myi2c.c: 45: _delay((unsigned long)((2)*(16000000/4000000.0)));
 10984  002408  D000               	nop2		;2 cycle nop
 10985  00240A  D000               	nop2		;2 cycle nop
 10986  00240C  D000               	nop2		;2 cycle nop
 10987  00240E  D000               	nop2		;2 cycle nop
 10988  002410  0012               	return		;funcret
 10989  002412                     __end_of_myi2c_start:
 10990                           	opt stack 0
 10991                           tblptru	equ	0xFF8
 10992                           tblptrh	equ	0xFF7
 10993                           tblptrl	equ	0xFF6
 10994                           tablat	equ	0xFF5
 10995                           prodh	equ	0xFF4
 10996                           prodl	equ	0xFF3
 10997                           intcon	equ	0xFF2
 10998                           postinc0	equ	0xFEE
 10999                           wreg	equ	0xFE8
 11000                           postdec1	equ	0xFE5
 11001                           fsr1l	equ	0xFE1
 11002                           indf2	equ	0xFDF
 11003                           postinc2	equ	0xFDE
 11004                           postdec2	equ	0xFDD
 11005                           fsr2h	equ	0xFDA
 11006                           fsr2l	equ	0xFD9
 11007                           status	equ	0xFD8
 11008                           
 11009 ;; *************** function _myi2c_sendbyte *****************
 11010 ;; Defined at:
 11011 ;;		line 58 in file ".\src\myi2c.c"
 11012 ;; Parameters:    Size  Location     Type
 11013 ;;  by              1    wreg     unsigned char 
 11014 ;; Auto vars:     Size  Location     Type
 11015 ;;  by              1    4[COMRAM] unsigned char 
 11016 ;;  i               1    5[COMRAM] unsigned char 
 11017 ;; Return value:  Size  Location     Type
 11018 ;;                  1    wreg      void 
 11019 ;; Registers used:
 11020 ;;		wreg, status,2, status,0
 11021 ;; Tracked objects:
 11022 ;;		On entry : 0/0
 11023 ;;		On exit  : 0/0
 11024 ;;		Unchanged: 0/0
 11025 ;; Data sizes:     COMRAM   BANK0   BANK1
 11026 ;;      Params:         0       0       0
 11027 ;;      Locals:         2       0       0
 11028 ;;      Temps:          3       0       0
 11029 ;;      Totals:         5       0       0
 11030 ;;Total ram usage:        5 bytes
 11031 ;; Hardware stack levels used:    1
 11032 ;; Hardware stack levels required when called:    3
 11033 ;; This function calls:
 11034 ;;		Nothing
 11035 ;; This function is called by:
 11036 ;;		_aip33626_sendcmd
 11037 ;;		_aip33626_allDisplay_
 11038 ;;		_aip33626_allDisplay
 11039 ;; This function uses a non-reentrant model
 11040 ;;
 11041                           
 11042                           	psect	text52
 11043  0021FE                     __ptext52:
 11044                           	opt stack 0
 11045  0021FE                     _myi2c_sendbyte:
 11046                           	opt stack 0
 11047                           
 11048                           ;incstack = 0
 11049                           ;myi2c_sendbyte@by stored from wreg
 11050  0021FE  6E05               	movwf	myi2c_sendbyte@by,c
 11051                           
 11052                           ;myi2c.c: 60: u8 i;
 11053                           ;myi2c.c: 61: for(i=0;i<8;i++)
 11054  002200  6A06               	clrf	myi2c_sendbyte@i,c
 11055  002202                     l32189:
 11056                           
 11057                           ;myi2c.c: 62: {
 11058                           ;myi2c.c: 63: if(by & (0x80>>i))
 11059  002202  C006  F002         	movff	myi2c_sendbyte@i,??_myi2c_sendbyte
 11060  002206  0E80               	movlw	128
 11061  002208  6E03               	movwf	(??_myi2c_sendbyte+1)& (0+255),c
 11062  00220A  6A04               	clrf	(??_myi2c_sendbyte+2)& (0+255),c
 11063  00220C  2A02               	incf	??_myi2c_sendbyte,f,c
 11064  00220E  D003               	goto	u3664
 11065  002210                     u3665:
 11066  002210  3404               	rlcf	??_myi2c_sendbyte+2,w,c
 11067  002212  3204               	rrcf	??_myi2c_sendbyte+2,f,c
 11068  002214  3203               	rrcf	??_myi2c_sendbyte+1,f,c
 11069  002216                     u3664:
 11070  002216  2E02               	decfsz	??_myi2c_sendbyte,f,c
 11071  002218  D7FB               	goto	u3665
 11072  00221A  5003               	movf	??_myi2c_sendbyte+1,w,c
 11073  00221C  1405               	andwf	myi2c_sendbyte@by,w,c
 11074  00221E  E002               	bz	l13601
 11075                           
 11076                           ;myi2c.c: 64: {
 11077                           ;myi2c.c: 65: PC2=1;
 11078  002220  8482               	bsf	3970,2,c	;volatile
 11079                           
 11080                           ;myi2c.c: 66: }
 11081  002222  D001               	goto	l13602
 11082  002224                     l13601:
 11083                           
 11084                           ;myi2c.c: 67: else
 11085                           ;myi2c.c: 68: {
 11086                           ;myi2c.c: 69: PC2=0;
 11087  002224  9482               	bcf	3970,2,c	;volatile
 11088  002226                     l13602:
 11089                           
 11090                           ;myi2c.c: 70: }
 11091                           ;myi2c.c: 71: _delay((unsigned long)((2)*(16000000/4000000.0)));
 11092  002226  D000               	nop2		;2 cycle nop
 11093  002228  D000               	nop2		;2 cycle nop
 11094  00222A  D000               	nop2		;2 cycle nop
 11095  00222C  D000               	nop2		;2 cycle nop
 11096                           
 11097                           ;myi2c.c: 72: PC1=1;
 11098  00222E  8282               	bsf	3970,1,c	;volatile
 11099                           
 11100                           ;myi2c.c: 73: _delay((unsigned long)((2)*(16000000/4000000.0)));
 11101  002230  D000               	nop2		;2 cycle nop
 11102  002232  D000               	nop2		;2 cycle nop
 11103  002234  D000               	nop2		;2 cycle nop
 11104  002236  D000               	nop2		;2 cycle nop
 11105                           
 11106                           ;myi2c.c: 74: PC1=0;
 11107  002238  9282               	bcf	3970,1,c	;volatile
 11108                           
 11109                           ;myi2c.c: 75: _delay((unsigned long)((2)*(16000000/4000000.0)));
 11110  00223A  D000               	nop2		;2 cycle nop
 11111  00223C  D000               	nop2		;2 cycle nop
 11112  00223E  D000               	nop2		;2 cycle nop
 11113  002240  D000               	nop2		;2 cycle nop
 11114  002242  2A06               	incf	myi2c_sendbyte@i,f,c
 11115  002244  0E07               	movlw	7
 11116  002246  6406               	cpfsgt	myi2c_sendbyte@i,c
 11117  002248  D7DC               	goto	l32189
 11118  00224A  0C07               	retlw	7
 11119  00224C                     __end_of_myi2c_sendbyte:
 11120                           	opt stack 0
 11121                           tblptru	equ	0xFF8
 11122                           tblptrh	equ	0xFF7
 11123                           tblptrl	equ	0xFF6
 11124                           tablat	equ	0xFF5
 11125                           prodh	equ	0xFF4
 11126                           prodl	equ	0xFF3
 11127                           intcon	equ	0xFF2
 11128                           postinc0	equ	0xFEE
 11129                           wreg	equ	0xFE8
 11130                           postdec1	equ	0xFE5
 11131                           fsr1l	equ	0xFE1
 11132                           indf2	equ	0xFDF
 11133                           postinc2	equ	0xFDE
 11134                           postdec2	equ	0xFDD
 11135                           fsr2h	equ	0xFDA
 11136                           fsr2l	equ	0xFD9
 11137                           status	equ	0xFD8
 11138                           
 11139 ;; *************** function _myi2c_reciveack *****************
 11140 ;; Defined at:
 11141 ;;		line 114 in file ".\src\myi2c.c"
 11142 ;; Parameters:    Size  Location     Type
 11143 ;;		None
 11144 ;; Auto vars:     Size  Location     Type
 11145 ;;  byte            1    0        unsigned char 
 11146 ;;  cnt             1    0        unsigned char 
 11147 ;; Return value:  Size  Location     Type
 11148 ;;                  1    wreg      unsigned char 
 11149 ;; Registers used:
 11150 ;;		wreg, status,2
 11151 ;; Tracked objects:
 11152 ;;		On entry : 0/0
 11153 ;;		On exit  : 0/0
 11154 ;;		Unchanged: 0/0
 11155 ;; Data sizes:     COMRAM   BANK0   BANK1
 11156 ;;      Params:         0       0       0
 11157 ;;      Locals:         1       0       0
 11158 ;;      Temps:          0       0       0
 11159 ;;      Totals:         1       0       0
 11160 ;;Total ram usage:        1 bytes
 11161 ;; Hardware stack levels used:    1
 11162 ;; Hardware stack levels required when called:    3
 11163 ;; This function calls:
 11164 ;;		Nothing
 11165 ;; This function is called by:
 11166 ;;		_aip33626_sendcmd
 11167 ;;		_aip33626_allDisplay_
 11168 ;;		_aip33626_allDisplay
 11169 ;; This function uses a non-reentrant model
 11170 ;;
 11171                           
 11172                           	psect	text53
 11173  0024C2                     __ptext53:
 11174                           	opt stack 0
 11175  0024C2                     _myi2c_reciveack:
 11176                           	opt stack 0
 11177                           
 11178                           ;myi2c.c: 117: PC2=1;
 11179                           
 11180                           ;incstack = 0
 11181  0024C2  8482               	bsf	3970,2,c	;volatile
 11182                           
 11183                           ;myi2c.c: 118: _delay((unsigned long)((2)*(16000000/4000000.0)));
 11184  0024C4  D000               	nop2		;2 cycle nop
 11185  0024C6  D000               	nop2		;2 cycle nop
 11186  0024C8  D000               	nop2		;2 cycle nop
 11187  0024CA  D000               	nop2		;2 cycle nop
 11188                           
 11189                           ;myi2c.c: 120: PC1=1;
 11190  0024CC  8282               	bsf	3970,1,c	;volatile
 11191                           
 11192                           ;myi2c.c: 121: _delay((unsigned long)((2)*(16000000/4000000.0)));
 11193  0024CE  D000               	nop2		;2 cycle nop
 11194  0024D0  D000               	nop2		;2 cycle nop
 11195  0024D2  D000               	nop2		;2 cycle nop
 11196  0024D4  D000               	nop2		;2 cycle nop
 11197                           
 11198                           ;myi2c.c: 135: }
 11199                           ;myi2c.c: 136: PC1=0;
 11200                           
 11201                           ;myi2c.c: 132: if(PC2!=0)
 11202  0024D6  9282               	bcf	3970,1,c	;volatile
 11203                           
 11204                           ;myi2c.c: 137: _delay((unsigned long)((2)*(16000000/4000000.0)));
 11205  0024D8  D000               	nop2		;2 cycle nop
 11206  0024DA  D000               	nop2		;2 cycle nop
 11207  0024DC  D000               	nop2		;2 cycle nop
 11208  0024DE  D000               	nop2		;2 cycle nop
 11209  0024E0  0012               	return		;funcret
 11210  0024E2                     __end_of_myi2c_reciveack:
 11211                           	opt stack 0
 11212                           tblptru	equ	0xFF8
 11213                           tblptrh	equ	0xFF7
 11214                           tblptrl	equ	0xFF6
 11215                           tablat	equ	0xFF5
 11216                           prodh	equ	0xFF4
 11217                           prodl	equ	0xFF3
 11218                           intcon	equ	0xFF2
 11219                           postinc0	equ	0xFEE
 11220                           wreg	equ	0xFE8
 11221                           postdec1	equ	0xFE5
 11222                           fsr1l	equ	0xFE1
 11223                           indf2	equ	0xFDF
 11224                           postinc2	equ	0xFDE
 11225                           postdec2	equ	0xFDD
 11226                           fsr2h	equ	0xFDA
 11227                           fsr2l	equ	0xFD9
 11228                           status	equ	0xFD8
 11229                           
 11230 ;; *************** function _add_task *****************
 11231 ;; Defined at:
 11232 ;;		line 15 in file ".\src\task.c"
 11233 ;; Parameters:    Size  Location     Type
 11234 ;;  id1             1    wreg     unsigned char 
 11235 ;;  id2             1    1[COMRAM] unsigned char 
 11236 ;;  interval_ms     4    2[COMRAM] unsigned long 
 11237 ;;  suc_max         1    6[COMRAM] unsigned char 
 11238 ;; Auto vars:     Size  Location     Type
 11239 ;;  id1             1   11[COMRAM] unsigned char 
 11240 ;;  i               2   14[COMRAM] int 
 11241 ;;  interval_tic    2   12[COMRAM] unsigned int 
 11242 ;; Return value:  Size  Location     Type
 11243 ;;                  1    wreg      unsigned char 
 11244 ;; Registers used:
 11245 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11246 ;; Tracked objects:
 11247 ;;		On entry : 0/F
 11248 ;;		On exit  : 0/0
 11249 ;;		Unchanged: 0/0
 11250 ;; Data sizes:     COMRAM   BANK0   BANK1
 11251 ;;      Params:         6       0       0
 11252 ;;      Locals:         5       0       0
 11253 ;;      Temps:          4       0       0
 11254 ;;      Totals:        15       0       0
 11255 ;;Total ram usage:       15 bytes
 11256 ;; Hardware stack levels used:    1
 11257 ;; Hardware stack levels required when called:    3
 11258 ;; This function calls:
 11259 ;;		Nothing
 11260 ;; This function is called by:
 11261 ;;		_main
 11262 ;; This function uses a non-reentrant model
 11263 ;;
 11264                           
 11265                           	psect	text54
 11266  0012CA                     __ptext54:
 11267                           	opt stack 0
 11268  0012CA                     _add_task:
 11269                           	opt stack 4
 11270                           
 11271                           ;incstack = 0
 11272                           ;add_task@id1 stored from wreg
 11273  0012CA  6E0C               	movwf	add_task@id1,c
 11274                           
 11275                           ;task.c: 16: unsigned int interval_ticks = interval_ms >>3;
 11276  0012CC  C003  F008         	movff	add_task@interval_ms,??_add_task
 11277  0012D0  C004  F009         	movff	add_task@interval_ms+1,??_add_task+1
 11278  0012D4  C005  F00A         	movff	add_task@interval_ms+2,??_add_task+2
 11279  0012D8  C006  F00B         	movff	add_task@interval_ms+3,??_add_task+3
 11280  0012DC  0E04               	movlw	4
 11281  0012DE  D005               	goto	u6340
 11282  0012E0                     u6345:
 11283  0012E0  90D8               	bcf	status,0,c
 11284  0012E2  320B               	rrcf	??_add_task+3,f,c
 11285  0012E4  320A               	rrcf	??_add_task+2,f,c
 11286  0012E6  3209               	rrcf	??_add_task+1,f,c
 11287  0012E8  3208               	rrcf	??_add_task,f,c
 11288  0012EA                     u6340:
 11289  0012EA  2EE8               	decfsz	wreg,f,c
 11290  0012EC  D7F9               	goto	u6345
 11291  0012EE  C008  F00D         	movff	??_add_task,add_task@interval_ticks
 11292  0012F2  C009  F00E         	movff	??_add_task+1,add_task@interval_ticks+1
 11293                           
 11294                           ;task.c: 19: if(interval_ticks == 0 || id1 == 0 ||id2==0)
 11295  0012F6  500D               	movf	add_task@interval_ticks,w,c
 11296  0012F8  100E               	iorwf	add_task@interval_ticks+1,w,c
 11297  0012FA  B4D8               	btfsc	status,2,c
 11298  0012FC  0CFF               	retlw	255
 11299  0012FE  500C               	movf	add_task@id1,w,c
 11300  001300  B4D8               	btfsc	status,2,c
 11301  001302  0CFF               	retlw	255
 11302  001304  5002               	movf	add_task@id2,w,c
 11303  001306  E101               	bnz	l26976
 11304  001308                     l33997:
 11305                           
 11306                           ;task.c: 20: {
 11307                           ;task.c: 21: return -1;
 11308  001308  0CFF               	retlw	255
 11309  00130A                     l26976:
 11310                           
 11311                           ;task.c: 22: }
 11312                           ;task.c: 25: for(int i=0; i<8; i++) {
 11313  00130A  6A0F               	clrf	add_task@i,c
 11314  00130C  6A10               	clrf	add_task@i+1,c
 11315  00130E                     l34005:
 11316                           
 11317                           ;task.c: 26: if(!task_list[i].active) {
 11318  00130E  500F               	movf	add_task@i,w,c
 11319  001310  EC1E  F003         	call	PL12	;call to abstracted procedure
 11320  001314  E11F               	bnz	l34017
 11321                           
 11322                           ;task.c: 28: TMR1IE=0;
 11323  001316  92A1               	bcf	4001,1,c	;volatile
 11324                           
 11325                           ;task.c: 30: task_list[i].id1 = id1;
 11326  001318  500F               	movf	add_task@i,w,c
 11327  00131A  D83B               	call	PL66	;call to abstracted procedure
 11328  00131C  C00C  FFDF         	movff	add_task@id1,indf2
 11329                           
 11330                           ;task.c: 31: task_list[i].id2 = id2;
 11331  001320  500F               	movf	add_task@i,w,c
 11332  001322  D83D               	call	PL68	;call to abstracted procedure
 11333  001324  C002  FFDF         	movff	add_task@id2,indf2
 11334                           
 11335                           ;task.c: 32: task_list[i].interval = interval_ticks;
 11336  001328  500F               	movf	add_task@i,w,c
 11337  00132A  D845               	call	PL76	;call to abstracted procedure
 11338                           
 11339                           ;task.c: 33: task_list[i].counter = interval_ticks;
 11340  00132C  D81D               	call	PL36	;call to abstracted procedure
 11341  00132E  0F88               	addlw	low (_task_list+2)
 11342                           
 11343                           ;task.c: 34: task_list[i].active = 1;
 11344  001330  D81B               	call	PL36	;call to abstracted procedure
 11345  001332  0F8C               	addlw	low (_task_list+6)
 11346  001334  D829               	call	PL50	;call to abstracted procedure
 11347                           
 11348                           ;task.c: 35: task_list[i].ready = 1;
 11349  001336  500F               	movf	add_task@i,w,c
 11350  001338  D821               	call	PL44	;call to abstracted procedure
 11351  00133A  0E01               	movlw	1
 11352  00133C  6EDF               	movwf	indf2,c
 11353                           
 11354                           ;task.c: 36: task_list[i].maxSuc=suc_max;
 11355  00133E  500F               	movf	add_task@i,w,c
 11356  001340  D834               	call	PL70	;call to abstracted procedure
 11357  001342  C007  FFDF         	movff	add_task@suc_max,indf2
 11358                           
 11359                           ;task.c: 37: task_list[i].sucCnt=0;
 11360  001346  500F               	movf	add_task@i,w,c
 11361  001348  EC28  F00D         	call	PL46	;call to abstracted procedure
 11362  00134C  6ADF               	clrf	indf2,c
 11363                           
 11364                           ;task.c: 39: TMR1IE=1;
 11365  00134E  82A1               	bsf	4001,1,c	;volatile
 11366                           
 11367                           ;task.c: 40: return i;
 11368  001350  500F               	movf	add_task@i,w,c
 11369  001352  0012               	return	
 11370  001354                     l34017:
 11371  001354  4A0F               	infsnz	add_task@i,f,c
 11372  001356  2A10               	incf	add_task@i+1,f,c
 11373  001358  BE10               	btfsc	add_task@i+1,7,c
 11374  00135A  D7D9               	goto	l34005
 11375  00135C  5010               	movf	add_task@i+1,w,c
 11376  00135E  E1D4               	bnz	l33997
 11377  001360  0E08               	movlw	8
 11378  001362  5C0F               	subwf	add_task@i,w,c
 11379  001364  E3D4               	bnc	l34005
 11380  001366  0CFF               	retlw	255
 11381  001368                     __end_of_add_task:
 11382                           	opt stack 0
 11383  001368                     PL36:
 11384                           	opt stack 4
 11385  001368  6ED9               	movwf	fsr2l,c
 11386  00136A  6ADA               	clrf	fsr2h,c
 11387  00136C  C00D  FFDE         	movff	add_task@interval_ticks,postinc2
 11388  001370  C00E  FFDD         	movff	add_task@interval_ticks+1,postdec2
 11389  001374  500F               	movf	add_task@i,w,c
 11390  001376  0D0A               	mullw	10
 11391  001378  50F3               	movf	prodl,w,c
 11392  00137A  0012               	return	
 11393  00137C                     __end_ofPL36:
 11394                           	opt stack 0
 11395  00137C                     PL44:
 11396                           	opt stack 2
 11397  00137C  0D0A               	mullw	10
 11398  00137E  50F3               	movf	prodl,w,c
 11399  001380  0F8D               	addlw	low (_task_list+7)
 11400  001382  6ED9               	movwf	fsr2l,c
 11401  001384  6ADA               	clrf	fsr2h,c
 11402  001386  0012               	return	
 11403  001388                     __end_ofPL44:
 11404                           	opt stack 0
 11405  001388                     PL50:
 11406                           	opt stack 2
 11407  001388  6ED9               	movwf	fsr2l,c
 11408  00138A  6ADA               	clrf	fsr2h,c
 11409  00138C  0E01               	movlw	1
 11410  00138E  6EDF               	movwf	indf2,c
 11411  001390  0C01               	retlw	1
 11412  001392                     __end_ofPL50:
 11413                           	opt stack 0
 11414  001392                     PL66:
 11415                           	opt stack 2
 11416  001392  0D0A               	mullw	10
 11417  001394  50F3               	movf	prodl,w,c
 11418  001396  0F8A               	addlw	low (_task_list+4)
 11419  001398  6ED9               	movwf	fsr2l,c
 11420  00139A  6ADA               	clrf	fsr2h,c
 11421  00139C  0012               	return	
 11422  00139E                     __end_ofPL66:
 11423                           	opt stack 0
 11424  00139E                     PL68:
 11425                           	opt stack 2
 11426  00139E  0D0A               	mullw	10
 11427  0013A0  50F3               	movf	prodl,w,c
 11428  0013A2  0F8B               	addlw	low (_task_list+5)
 11429  0013A4  6ED9               	movwf	fsr2l,c
 11430  0013A6  6ADA               	clrf	fsr2h,c
 11431  0013A8  0012               	return	
 11432  0013AA                     __end_ofPL68:
 11433                           	opt stack 0
 11434  0013AA                     PL70:
 11435                           	opt stack 2
 11436  0013AA  0D0A               	mullw	10
 11437  0013AC  50F3               	movf	prodl,w,c
 11438  0013AE  0F8E               	addlw	low (_task_list+8)
 11439  0013B0  6ED9               	movwf	fsr2l,c
 11440  0013B2  6ADA               	clrf	fsr2h,c
 11441  0013B4  0012               	return	
 11442  0013B6                     __end_ofPL70:
 11443                           	opt stack 0
 11444  0013B6                     PL76:
 11445                           	opt stack 2
 11446  0013B6  0D0A               	mullw	10
 11447  0013B8  50F3               	movf	prodl,w,c
 11448  0013BA  0F86               	addlw	low _task_list
 11449  0013BC  0012               	return	
 11450  0013BE                     __end_ofPL76:
 11451                           	opt stack 0
 11452                           tblptru	equ	0xFF8
 11453                           tblptrh	equ	0xFF7
 11454                           tblptrl	equ	0xFF6
 11455                           tablat	equ	0xFF5
 11456                           prodh	equ	0xFF4
 11457                           prodl	equ	0xFF3
 11458                           intcon	equ	0xFF2
 11459                           postinc0	equ	0xFEE
 11460                           wreg	equ	0xFE8
 11461                           postdec1	equ	0xFE5
 11462                           fsr1l	equ	0xFE1
 11463                           indf2	equ	0xFDF
 11464                           postinc2	equ	0xFDE
 11465                           postdec2	equ	0xFDD
 11466                           fsr2h	equ	0xFDA
 11467                           fsr2l	equ	0xFD9
 11468                           status	equ	0xFD8
 11469                           
 11470 ;; *************** function _ISR_l *****************
 11471 ;; Defined at:
 11472 ;;		line 250 in file ".\src\main.c"
 11473 ;; Parameters:    Size  Location     Type
 11474 ;;		None
 11475 ;; Auto vars:     Size  Location     Type
 11476 ;;		None
 11477 ;; Return value:  Size  Location     Type
 11478 ;;                  1    wreg      void 
 11479 ;; Registers used:
 11480 ;;		None
 11481 ;; Tracked objects:
 11482 ;;		On entry : 0/0
 11483 ;;		On exit  : 0/0
 11484 ;;		Unchanged: 0/0
 11485 ;; Data sizes:     COMRAM   BANK0   BANK1
 11486 ;;      Params:         0       0       0
 11487 ;;      Locals:         0       0       0
 11488 ;;      Temps:          1       0       0
 11489 ;;      Totals:         1       0       0
 11490 ;;Total ram usage:        1 bytes
 11491 ;; Hardware stack levels used:    1
 11492 ;; Hardware stack levels required when called:    2
 11493 ;; This function calls:
 11494 ;;		Nothing
 11495 ;; This function is called by:
 11496 ;;		Interrupt level 1
 11497 ;; This function uses a non-reentrant model
 11498 ;;
 11499                           
 11500                           	psect	intcodelo
 11501  000018                     __pintcodelo:
 11502                           	opt stack 0
 11503  000018                     _ISR_l:
 11504                           	opt stack 0
 11505                           
 11506                           ;incstack = 0
 11507 ;; hardware stack exceeded
 11508  000018  807E               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 11509  00001A  CFE0 F001          	movff	bsr,??_ISR_l
 11510  00001E  C001  FFE0         	movff	??_ISR_l,bsr
 11511  000022  907E               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 11512  000024  0010               	retfie	
 11513  000026                     __end_of_ISR_l:
 11514                           	opt stack 0
 11515                           tblptru	equ	0xFF8
 11516                           tblptrh	equ	0xFF7
 11517                           tblptrl	equ	0xFF6
 11518                           tablat	equ	0xFF5
 11519                           prodh	equ	0xFF4
 11520                           prodl	equ	0xFF3
 11521                           intcon	equ	0xFF2
 11522                           postinc0	equ	0xFEE
 11523                           wreg	equ	0xFE8
 11524                           postdec1	equ	0xFE5
 11525                           fsr1l	equ	0xFE1
 11526                           bsr	equ	0xFE0
 11527                           indf2	equ	0xFDF
 11528                           postinc2	equ	0xFDE
 11529                           postdec2	equ	0xFDD
 11530                           fsr2h	equ	0xFDA
 11531                           fsr2l	equ	0xFD9
 11532                           status	equ	0xFD8
 11533                           
 11534 ;; *************** function _ISR_h *****************
 11535 ;; Defined at:
 11536 ;;		line 150 in file ".\src\main.c"
 11537 ;; Parameters:    Size  Location     Type
 11538 ;;		None
 11539 ;; Auto vars:     Size  Location     Type
 11540 ;;		None
 11541 ;; Return value:  Size  Location     Type
 11542 ;;                  1    wreg      void 
 11543 ;; Registers used:
 11544 ;;		wreg, status,2, status,0, cstack
 11545 ;; Tracked objects:
 11546 ;;		On entry : 0/0
 11547 ;;		On exit  : 0/0
 11548 ;;		Unchanged: 0/0
 11549 ;; Data sizes:     COMRAM   BANK0   BANK1
 11550 ;;      Params:         0       0       0
 11551 ;;      Locals:         0       0       0
 11552 ;;      Temps:          0       0       0
 11553 ;;      Totals:         0       0       0
 11554 ;;Total ram usage:        0 bytes
 11555 ;; Hardware stack levels used:    1
 11556 ;; Hardware stack levels required when called:    1
 11557 ;; This function calls:
 11558 ;;		_pwm_task
 11559 ;; This function is called by:
 11560 ;;		Interrupt level 2
 11561 ;; This function uses a non-reentrant model
 11562 ;;
 11563                           
 11564                           	psect	intcode
 11565  000008                     __pintcode:
 11566                           	opt stack 0
 11567  000008                     _ISR_h:
 11568                           	opt stack 0
 11569                           
 11570                           ;incstack = 0
 11571 ;; hardware stack exceeded
 11572  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11573  00000A  ED90  F006         	call	int_func,f	;refresh shadow registers
 11574                           tblptru	equ	0xFF8
 11575                           tblptrh	equ	0xFF7
 11576                           tblptrl	equ	0xFF6
 11577                           tablat	equ	0xFF5
 11578                           prodh	equ	0xFF4
 11579                           prodl	equ	0xFF3
 11580                           intcon	equ	0xFF2
 11581                           postinc0	equ	0xFEE
 11582                           wreg	equ	0xFE8
 11583                           postdec1	equ	0xFE5
 11584                           fsr1l	equ	0xFE1
 11585                           bsr	equ	0xFE0
 11586                           indf2	equ	0xFDF
 11587                           postinc2	equ	0xFDE
 11588                           postdec2	equ	0xFDD
 11589                           fsr2h	equ	0xFDA
 11590                           fsr2l	equ	0xFD9
 11591                           status	equ	0xFD8
 11592                           
 11593                           	psect	intcode_body
 11594  000D20                     __pintcode_body:
 11595                           	opt stack 0
 11596  000D20                     int_func:
 11597                           	opt stack 0
 11598  000D20  0006               	pop		; remove dummy address from shadow register refresh
 11599                           
 11600                           ;main.c: 154: if(CMP1IF &&CMP1IE)
 11601  000D22  B29F               	btfsc	3999,1,c	;volatile
 11602  000D24  A29E               	btfss	3998,1,c	;volatile
 11603  000D26  D00B               	goto	i2l34381
 11604                           
 11605                           ;main.c: 155: {
 11606                           ;main.c: 156: CMP1IF=0;
 11607  000D28  929F               	bcf	3999,1,c	;volatile
 11608                           
 11609                           ;main.c: 157: if(CMP1OUT)
 11610  000D2A  010F               	movlb	15	; () banked
 11611  000D2C  AD77               	btfss	119,6,b	;volatile
 11612  000D2E  D007               	goto	i2l34381
 11613                           
 11614                           ; BSR set to: 15
 11615                           ;main.c: 158: {
 11616                           ;main.c: 159: PB3=1;
 11617  000D30  8681               	bsf	3969,3,c	;volatile
 11618                           
 11619                           ; BSR set to: 15
 11620                           ;main.c: 160: dl1_flag=1;
 11621  000D32  0E01               	movlw	1
 11622  000D34  6E62               	movwf	_dl1_flag,c
 11623                           
 11624                           ; BSR set to: 15
 11625                           ;main.c: 161: duty0=0;
 11626  000D36  6A6F               	clrf	_duty0,c
 11627                           
 11628                           ; BSR set to: 15
 11629                           ;main.c: 162: duty1=0;
 11630  000D38  6A6E               	clrf	_duty1,c
 11631                           
 11632                           ;main.c: 163: dl_init=1;
 11633  000D3A  0E01               	movlw	1
 11634  000D3C  6E59               	movwf	_dl_init,c
 11635  000D3E                     i2l34381:
 11636                           
 11637                           ;main.c: 168: }
 11638                           ;main.c: 169: }
 11639                           ;main.c: 170: if(CMP0IF&&CMP0IE)
 11640  000D3E  B09F               	btfsc	3999,0,c	;volatile
 11641  000D40  A09E               	btfss	3998,0,c	;volatile
 11642  000D42  D00B               	goto	i2l34395
 11643                           
 11644                           ;main.c: 171: {
 11645                           ;main.c: 172: CMP0IF=0;
 11646  000D44  909F               	bcf	3999,0,c	;volatile
 11647                           
 11648                           ;main.c: 173: if(CMP0OUT)
 11649  000D46  010F               	movlb	15	; () banked
 11650  000D48  AD78               	btfss	120,6,b	;volatile
 11651  000D4A  D007               	goto	i2l34395
 11652                           
 11653                           ; BSR set to: 15
 11654                           ;main.c: 174: {
 11655                           ;main.c: 175: PD0=1;
 11656  000D4C  8083               	bsf	3971,0,c	;volatile
 11657                           
 11658                           ; BSR set to: 15
 11659                           ;main.c: 176: dl0_flag=1;
 11660  000D4E  0E01               	movlw	1
 11661  000D50  6E63               	movwf	_dl0_flag,c
 11662                           
 11663                           ; BSR set to: 15
 11664                           ;main.c: 177: duty0=0;
 11665  000D52  6A6F               	clrf	_duty0,c
 11666                           
 11667                           ; BSR set to: 15
 11668                           ;main.c: 178: duty1=0;
 11669  000D54  6A6E               	clrf	_duty1,c
 11670                           
 11671                           ;main.c: 179: dl_init=1;
 11672  000D56  0E01               	movlw	1
 11673  000D58  6E59               	movwf	_dl_init,c
 11674  000D5A                     i2l34395:
 11675                           
 11676                           ;main.c: 184: }
 11677                           ;main.c: 185: }
 11678                           ;main.c: 187: if((TMR1IF==1) && (TMR1IE==1) )
 11679  000D5A  B2A2               	btfsc	4002,1,c	;volatile
 11680  000D5C  A2A1               	btfss	4001,1,c	;volatile
 11681  000D5E  D074               	goto	i2l34469
 11682                           
 11683                           ;main.c: 188: {
 11684                           ;main.c: 189: TMR1IF = 0;
 11685  000D60  92A2               	bcf	4002,1,c	;volatile
 11686                           
 11687                           ;main.c: 190: if(task_list[0].active) { task_list[0].counter--; if(task_list[0].counter 
      +                          == 0) { task_list[0].ready = 1; task_list[0].counter = task_list[0].interval; } } if(tas
      +                          k_list[1].active) { task_list[1].counter--; if(task_list[1].counter == 0) { task_list[1]
 11688  000D62  0100               	movlb	0	; () banked
 11689  000D64  518C               	movf	(_task_list+6)& (0+255),w,b
 11690  000D66  E00C               	bz	i2l11387
 11691                           
 11692                           ; BSR set to: 0
 11693  000D68  0788               	decf	(_task_list+2)& (0+255),f,b
 11694  000D6A  A0D8               	btfss	status,0,c
 11695  000D6C  0789               	decf	(_task_list+3)& (0+255),f,b
 11696                           
 11697                           ; BSR set to: 0
 11698  000D6E  5188               	movf	(_task_list+2)& (0+255),w,b
 11699  000D70  1189               	iorwf	(_task_list+3)& (0+255),w,b
 11700  000D72  E106               	bnz	i2l11387
 11701                           
 11702                           ; BSR set to: 0
 11703  000D74  0E01               	movlw	1
 11704  000D76  6F8D               	movwf	(_task_list+7)& (0+255),b
 11705                           
 11706                           ; BSR set to: 0
 11707  000D78  C086  F088         	movff	_task_list,_task_list+2
 11708  000D7C  C087  F089         	movff	_task_list+1,_task_list+3
 11709  000D80                     i2l11387:
 11710                           
 11711                           ; BSR set to: 0
 11712  000D80  5196               	movf	(_task_list+16)& (0+255),w,b
 11713  000D82  E00C               	bz	i2l11389
 11714                           
 11715                           ; BSR set to: 0
 11716  000D84  0792               	decf	(_task_list+12)& (0+255),f,b
 11717  000D86  A0D8               	btfss	status,0,c
 11718  000D88  0793               	decf	(_task_list+13)& (0+255),f,b
 11719                           
 11720                           ; BSR set to: 0
 11721  000D8A  5192               	movf	(_task_list+12)& (0+255),w,b
 11722  000D8C  1193               	iorwf	(_task_list+13)& (0+255),w,b
 11723  000D8E  E106               	bnz	i2l11389
 11724                           
 11725                           ; BSR set to: 0
 11726  000D90  0E01               	movlw	1
 11727  000D92  6F97               	movwf	(_task_list+17)& (0+255),b
 11728                           
 11729                           ; BSR set to: 0
 11730  000D94  C090  F092         	movff	_task_list+10,_task_list+12
 11731  000D98  C091  F093         	movff	_task_list+11,_task_list+13
 11732  000D9C                     i2l11389:
 11733                           
 11734                           ; BSR set to: 0
 11735  000D9C  51A0               	movf	(_task_list+26)& (0+255),w,b
 11736  000D9E  E00C               	bz	i2l11391
 11737                           
 11738                           ; BSR set to: 0
 11739  000DA0  079C               	decf	(_task_list+22)& (0+255),f,b
 11740  000DA2  A0D8               	btfss	status,0,c
 11741  000DA4  079D               	decf	(_task_list+23)& (0+255),f,b
 11742                           
 11743                           ; BSR set to: 0
 11744  000DA6  519C               	movf	(_task_list+22)& (0+255),w,b
 11745  000DA8  119D               	iorwf	(_task_list+23)& (0+255),w,b
 11746  000DAA  E106               	bnz	i2l11391
 11747                           
 11748                           ; BSR set to: 0
 11749  000DAC  0E01               	movlw	1
 11750  000DAE  6FA1               	movwf	(_task_list+27)& (0+255),b
 11751                           
 11752                           ; BSR set to: 0
 11753  000DB0  C09A  F09C         	movff	_task_list+20,_task_list+22
 11754  000DB4  C09B  F09D         	movff	_task_list+21,_task_list+23
 11755  000DB8                     i2l11391:
 11756                           
 11757                           ; BSR set to: 0
 11758  000DB8  51AA               	movf	(_task_list+36)& (0+255),w,b
 11759  000DBA  E00C               	bz	i2l11393
 11760                           
 11761                           ; BSR set to: 0
 11762  000DBC  07A6               	decf	(_task_list+32)& (0+255),f,b
 11763  000DBE  A0D8               	btfss	status,0,c
 11764  000DC0  07A7               	decf	(_task_list+33)& (0+255),f,b
 11765                           
 11766                           ; BSR set to: 0
 11767  000DC2  51A6               	movf	(_task_list+32)& (0+255),w,b
 11768  000DC4  11A7               	iorwf	(_task_list+33)& (0+255),w,b
 11769  000DC6  E106               	bnz	i2l11393
 11770                           
 11771                           ; BSR set to: 0
 11772  000DC8  0E01               	movlw	1
 11773  000DCA  6FAB               	movwf	(_task_list+37)& (0+255),b
 11774                           
 11775                           ; BSR set to: 0
 11776  000DCC  C0A4  F0A6         	movff	_task_list+30,_task_list+32
 11777  000DD0  C0A5  F0A7         	movff	_task_list+31,_task_list+33
 11778  000DD4                     i2l11393:
 11779                           
 11780                           ; BSR set to: 0
 11781  000DD4  51B4               	movf	(_task_list+46)& (0+255),w,b
 11782  000DD6  E00C               	bz	i2l11395
 11783                           
 11784                           ; BSR set to: 0
 11785  000DD8  07B0               	decf	(_task_list+42)& (0+255),f,b
 11786  000DDA  A0D8               	btfss	status,0,c
 11787  000DDC  07B1               	decf	(_task_list+43)& (0+255),f,b
 11788                           
 11789                           ; BSR set to: 0
 11790  000DDE  51B0               	movf	(_task_list+42)& (0+255),w,b
 11791  000DE0  11B1               	iorwf	(_task_list+43)& (0+255),w,b
 11792  000DE2  E106               	bnz	i2l11395
 11793                           
 11794                           ; BSR set to: 0
 11795  000DE4  0E01               	movlw	1
 11796  000DE6  6FB5               	movwf	(_task_list+47)& (0+255),b
 11797                           
 11798                           ; BSR set to: 0
 11799  000DE8  C0AE  F0B0         	movff	_task_list+40,_task_list+42
 11800  000DEC  C0AF  F0B1         	movff	_task_list+41,_task_list+43
 11801  000DF0                     i2l11395:
 11802                           
 11803                           ; BSR set to: 0
 11804  000DF0  51BE               	movf	(_task_list+56)& (0+255),w,b
 11805  000DF2  E00C               	bz	i2l11397
 11806                           
 11807                           ; BSR set to: 0
 11808  000DF4  07BA               	decf	(_task_list+52)& (0+255),f,b
 11809  000DF6  A0D8               	btfss	status,0,c
 11810  000DF8  07BB               	decf	(_task_list+53)& (0+255),f,b
 11811                           
 11812                           ; BSR set to: 0
 11813  000DFA  51BA               	movf	(_task_list+52)& (0+255),w,b
 11814  000DFC  11BB               	iorwf	(_task_list+53)& (0+255),w,b
 11815  000DFE  E106               	bnz	i2l11397
 11816                           
 11817                           ; BSR set to: 0
 11818  000E00  0E01               	movlw	1
 11819  000E02  6FBF               	movwf	(_task_list+57)& (0+255),b
 11820                           
 11821                           ; BSR set to: 0
 11822  000E04  C0B8  F0BA         	movff	_task_list+50,_task_list+52
 11823  000E08  C0B9  F0BB         	movff	_task_list+51,_task_list+53
 11824  000E0C                     i2l11397:
 11825                           
 11826                           ; BSR set to: 0
 11827  000E0C  51C8               	movf	(_task_list+66)& (0+255),w,b
 11828  000E0E  E00C               	bz	i2l11399
 11829                           
 11830                           ; BSR set to: 0
 11831  000E10  07C4               	decf	(_task_list+62)& (0+255),f,b
 11832  000E12  A0D8               	btfss	status,0,c
 11833  000E14  07C5               	decf	(_task_list+63)& (0+255),f,b
 11834                           
 11835                           ; BSR set to: 0
 11836  000E16  51C4               	movf	(_task_list+62)& (0+255),w,b
 11837  000E18  11C5               	iorwf	(_task_list+63)& (0+255),w,b
 11838  000E1A  E106               	bnz	i2l11399
 11839                           
 11840                           ; BSR set to: 0
 11841  000E1C  0E01               	movlw	1
 11842  000E1E  6FC9               	movwf	(_task_list+67)& (0+255),b
 11843                           
 11844                           ; BSR set to: 0
 11845  000E20  C0C2  F0C4         	movff	_task_list+60,_task_list+62
 11846  000E24  C0C3  F0C5         	movff	_task_list+61,_task_list+63
 11847  000E28                     i2l11399:
 11848                           
 11849                           ; BSR set to: 0
 11850  000E28  51D2               	movf	(_task_list+76)& (0+255),w,b
 11851  000E2A  E00C               	bz	i2l34467
 11852                           
 11853                           ; BSR set to: 0
 11854  000E2C  07CE               	decf	(_task_list+72)& (0+255),f,b
 11855  000E2E  A0D8               	btfss	status,0,c
 11856  000E30  07CF               	decf	(_task_list+73)& (0+255),f,b
 11857                           
 11858                           ; BSR set to: 0
 11859  000E32  51CE               	movf	(_task_list+72)& (0+255),w,b
 11860  000E34  11CF               	iorwf	(_task_list+73)& (0+255),w,b
 11861  000E36  E106               	bnz	i2l34467
 11862                           
 11863                           ; BSR set to: 0
 11864  000E38  0E01               	movlw	1
 11865  000E3A  6FD3               	movwf	(_task_list+77)& (0+255),b
 11866                           
 11867                           ; BSR set to: 0
 11868  000E3C  C0CC  F0CE         	movff	_task_list+70,_task_list+72
 11869  000E40  C0CD  F0CF         	movff	_task_list+71,_task_list+73
 11870  000E44                     i2l34467:
 11871                           
 11872                           ; BSR set to: 0
 11873                           ;main.c: 195: pwm_task();
 11874  000E44  EC53  F00A         	call	_pwm_task	;wreg free
 11875  000E48                     i2l34469:
 11876                           
 11877                           ;main.c: 203: }
 11878                           ;main.c: 204: if((TMR0IF==1) && (TMR0IE==1))
 11879  000E48  B0A2               	btfsc	4002,0,c	;volatile
 11880  000E4A  A0A1               	btfss	4001,0,c	;volatile
 11881  000E4C  D010               	goto	i2l34487
 11882                           
 11883                           ;main.c: 205: {
 11884                           ;main.c: 206: TMR0IF = 0;
 11885  000E4E  90A2               	bcf	4002,0,c	;volatile
 11886                           
 11887                           ;main.c: 207: cnt0++; if(cnt0>=timer0cnt) { tim0flag=1; cnt0=0; T0CS0=1; T0CLKEN=0; };
 11888  000E50  4A4D               	infsnz	_cnt0,f,c
 11889  000E52  2A4E               	incf	_cnt0+1,f,c
 11890  000E54  0100               	movlb	0	; () banked
 11891  000E56  5184               	movf	_timer0cnt& (0+255),w,b
 11892  000E58  5C4D               	subwf	_cnt0,w,c
 11893  000E5A  5185               	movf	(_timer0cnt+1)& (0+255),w,b
 11894  000E5C  584E               	subwfb	_cnt0+1,w,c
 11895  000E5E  E307               	bnc	i2l34487
 11896                           
 11897                           ; BSR set to: 0
 11898  000E60  0E01               	movlw	1
 11899  000E62  6E58               	movwf	_tim0flag,c
 11900                           
 11901                           ; BSR set to: 0
 11902  000E64  6A4D               	clrf	_cnt0,c
 11903  000E66  6A4E               	clrf	_cnt0+1,c
 11904                           
 11905                           ; BSR set to: 0
 11906  000E68  8AD7               	bsf	4055,5,c	;volatile
 11907                           
 11908                           ; BSR set to: 0
 11909  000E6A  010F               	movlb	15	; () banked
 11910  000E6C  9162               	bcf	98,0,b	;volatile
 11911  000E6E                     i2l34487:
 11912                           
 11913                           ;main.c: 209: }
 11914                           ;main.c: 210: if((TMR2IF==1) && (TMR2IE==1))
 11915  000E6E  B4A2               	btfsc	4002,2,c	;volatile
 11916  000E70  A4A1               	btfss	4001,2,c	;volatile
 11917  000E72  D004               	goto	i2l11405
 11918                           
 11919                           ;main.c: 211: {
 11920                           ;main.c: 212: TMR2IF = 0;
 11921  000E74  94A2               	bcf	4002,2,c	;volatile
 11922                           
 11923                           ;main.c: 213: CMP0IE=0;
 11924  000E76  909E               	bcf	3998,0,c	;volatile
 11925                           
 11926                           ;main.c: 214: PD0=1;
 11927  000E78  8083               	bsf	3971,0,c	;volatile
 11928                           
 11929                           ;main.c: 215: TMR2ON=0;
 11930  000E7A  94C9               	bcf	4041,2,c	;volatile
 11931  000E7C                     i2l11405:
 11932                           
 11933                           ;main.c: 217: }
 11934                           ;main.c: 218: if((TMR3IF==1) && (TMR3IE==1))
 11935  000E7C  B6A2               	btfsc	4002,3,c	;volatile
 11936  000E7E  A6A1               	btfss	4001,3,c	;volatile
 11937  000E80  D004               	goto	i2l11406
 11938                           
 11939                           ;main.c: 219: {
 11940                           ;main.c: 220: TMR3IF = 0;
 11941  000E82  96A2               	bcf	4002,3,c	;volatile
 11942                           
 11943                           ;main.c: 221: CMP1IE=0;
 11944  000E84  929E               	bcf	3998,1,c	;volatile
 11945                           
 11946                           ;main.c: 222: PB3=1;
 11947  000E86  8681               	bsf	3969,3,c	;volatile
 11948                           
 11949                           ;main.c: 223: TMR3ON=0;
 11950  000E88  94BC               	bcf	4028,2,c	;volatile
 11951  000E8A                     i2l11406:
 11952                           
 11953                           ;main.c: 224: }
 11954                           ;main.c: 225: if(ADIE && ADIF)
 11955  000E8A  BA9B               	btfsc	3995,5,c	;volatile
 11956  000E8C  AA9C               	btfss	3996,5,c	;volatile
 11957  000E8E  D003               	goto	i2l34503
 11958                           
 11959                           ;main.c: 226: {
 11960                           ;main.c: 227: ADIF=0;
 11961  000E90  9A9C               	bcf	3996,5,c	;volatile
 11962                           
 11963                           ;main.c: 228: adc_ok=1;
 11964  000E92  0E01               	movlw	1
 11965  000E94  6E57               	movwf	_adc_ok,c
 11966  000E96                     i2l34503:
 11967                           
 11968                           ;main.c: 229: }
 11969                           ;main.c: 230: if((PAIE == 1) && (PAIF == 1))
 11970  000E96  BA9E               	btfsc	3998,5,c	;volatile
 11971  000E98  AA9F               	btfss	3999,5,c	;volatile
 11972  000E9A  D00E               	goto	i2l11408
 11973                           
 11974                           ;main.c: 231: {
 11975                           ;main.c: 232: PA4MSK=0; PB0MSK=0; PB1MSK=0; PC3MSK=0; PD2MSK=0; PAIE=0; PBIE=0; PCIE=0; 
      +                          PDIE=0; PAIF=0; PBIF=0; PCIF=0; PDIF=0;
 11976  000E9C  010F               	movlb	15	; () banked
 11977  000E9E  9960               	bcf	96,4,b	;volatile
 11978  000EA0  915F               	bcf	95,0,b	;volatile
 11979  000EA2  935F               	bcf	95,1,b	;volatile
 11980  000EA4  975E               	bcf	94,3,b	;volatile
 11981  000EA6  955D               	bcf	93,2,b	;volatile
 11982  000EA8  9A9E               	bcf	3998,5,c	;volatile
 11983  000EAA  9C9E               	bcf	3998,6,c	;volatile
 11984  000EAC  9E9E               	bcf	3998,7,c	;volatile
 11985  000EAE  9EA1               	bcf	4001,7,c	;volatile
 11986  000EB0  9A9F               	bcf	3999,5,c	;volatile
 11987  000EB2  9C9F               	bcf	3999,6,c	;volatile
 11988  000EB4  9E9F               	bcf	3999,7,c	;volatile
 11989  000EB6  9EA2               	bcf	4002,7,c	;volatile
 11990  000EB8                     i2l11408:
 11991                           
 11992                           ;main.c: 234: }
 11993                           ;main.c: 235: if(PBIE&&PBIF)
 11994  000EB8  BC9E               	btfsc	3998,6,c	;volatile
 11995  000EBA  AC9F               	btfss	3999,6,c	;volatile
 11996  000EBC  D00E               	goto	i2l11409
 11997                           
 11998                           ;main.c: 236: {
 11999                           ;main.c: 237: PA4MSK=0; PB0MSK=0; PB1MSK=0; PC3MSK=0; PD2MSK=0; PAIE=0; PBIE=0; PCIE=0; 
      +                          PDIE=0; PAIF=0; PBIF=0; PCIF=0; PDIF=0;
 12000  000EBE  010F               	movlb	15	; () banked
 12001  000EC0  9960               	bcf	96,4,b	;volatile
 12002  000EC2  915F               	bcf	95,0,b	;volatile
 12003  000EC4  935F               	bcf	95,1,b	;volatile
 12004  000EC6  975E               	bcf	94,3,b	;volatile
 12005  000EC8  955D               	bcf	93,2,b	;volatile
 12006  000ECA  9A9E               	bcf	3998,5,c	;volatile
 12007  000ECC  9C9E               	bcf	3998,6,c	;volatile
 12008  000ECE  9E9E               	bcf	3998,7,c	;volatile
 12009  000ED0  9EA1               	bcf	4001,7,c	;volatile
 12010  000ED2  9A9F               	bcf	3999,5,c	;volatile
 12011  000ED4  9C9F               	bcf	3999,6,c	;volatile
 12012  000ED6  9E9F               	bcf	3999,7,c	;volatile
 12013  000ED8  9EA2               	bcf	4002,7,c	;volatile
 12014  000EDA                     i2l11409:
 12015                           
 12016                           ;main.c: 238: }
 12017                           ;main.c: 239: if((PDIE == 1) && (PDIF == 1))
 12018  000EDA  BEA1               	btfsc	4001,7,c	;volatile
 12019  000EDC  AEA2               	btfss	4002,7,c	;volatile
 12020  000EDE  D00E               	goto	i2l11410
 12021                           
 12022                           ;main.c: 240: {
 12023                           ;main.c: 241: PA4MSK=0; PB0MSK=0; PB1MSK=0; PC3MSK=0; PD2MSK=0; PAIE=0; PBIE=0; PCIE=0; 
      +                          PDIE=0; PAIF=0; PBIF=0; PCIF=0; PDIF=0;
 12024  000EE0  010F               	movlb	15	; () banked
 12025  000EE2  9960               	bcf	96,4,b	;volatile
 12026  000EE4  915F               	bcf	95,0,b	;volatile
 12027  000EE6  935F               	bcf	95,1,b	;volatile
 12028  000EE8  975E               	bcf	94,3,b	;volatile
 12029  000EEA  955D               	bcf	93,2,b	;volatile
 12030  000EEC  9A9E               	bcf	3998,5,c	;volatile
 12031  000EEE  9C9E               	bcf	3998,6,c	;volatile
 12032  000EF0  9E9E               	bcf	3998,7,c	;volatile
 12033  000EF2  9EA1               	bcf	4001,7,c	;volatile
 12034  000EF4  9A9F               	bcf	3999,5,c	;volatile
 12035  000EF6  9C9F               	bcf	3999,6,c	;volatile
 12036  000EF8  9E9F               	bcf	3999,7,c	;volatile
 12037  000EFA  9EA2               	bcf	4002,7,c	;volatile
 12038  000EFC                     i2l11410:
 12039                           
 12040                           ;main.c: 242: }
 12041                           ;main.c: 243: if(PCIE&&PCIF)
 12042  000EFC  BE9E               	btfsc	3998,7,c	;volatile
 12043  000EFE  AE9F               	btfss	3999,7,c	;volatile
 12044  000F00  D00E               	goto	i2l11412
 12045                           
 12046                           ;main.c: 244: {
 12047                           ;main.c: 245: PA4MSK=0; PB0MSK=0; PB1MSK=0; PC3MSK=0; PD2MSK=0; PAIE=0; PBIE=0; PCIE=0; 
      +                          PDIE=0; PAIF=0; PBIF=0; PCIF=0; PDIF=0;
 12048  000F02  010F               	movlb	15	; () banked
 12049  000F04  9960               	bcf	96,4,b	;volatile
 12050  000F06  915F               	bcf	95,0,b	;volatile
 12051  000F08  935F               	bcf	95,1,b	;volatile
 12052  000F0A  975E               	bcf	94,3,b	;volatile
 12053  000F0C  955D               	bcf	93,2,b	;volatile
 12054  000F0E  9A9E               	bcf	3998,5,c	;volatile
 12055  000F10  9C9E               	bcf	3998,6,c	;volatile
 12056  000F12  9E9E               	bcf	3998,7,c	;volatile
 12057  000F14  9EA1               	bcf	4001,7,c	;volatile
 12058  000F16  9A9F               	bcf	3999,5,c	;volatile
 12059  000F18  9C9F               	bcf	3999,6,c	;volatile
 12060  000F1A  9E9F               	bcf	3999,7,c	;volatile
 12061  000F1C  9EA2               	bcf	4002,7,c	;volatile
 12062  000F1E                     i2l11412:
 12063  000F1E  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12064  000F20  0011               	retfie		f
 12065  000F22                     __end_of_ISR_h:
 12066                           	opt stack 0
 12067                           tblptru	equ	0xFF8
 12068                           tblptrh	equ	0xFF7
 12069                           tblptrl	equ	0xFF6
 12070                           tablat	equ	0xFF5
 12071                           prodh	equ	0xFF4
 12072                           prodl	equ	0xFF3
 12073                           intcon	equ	0xFF2
 12074                           postinc0	equ	0xFEE
 12075                           wreg	equ	0xFE8
 12076                           postdec1	equ	0xFE5
 12077                           fsr1l	equ	0xFE1
 12078                           bsr	equ	0xFE0
 12079                           indf2	equ	0xFDF
 12080                           postinc2	equ	0xFDE
 12081                           postdec2	equ	0xFDD
 12082                           fsr2h	equ	0xFDA
 12083                           fsr2l	equ	0xFD9
 12084                           status	equ	0xFD8
 12085                           
 12086 ;; *************** function _pwm_task *****************
 12087 ;; Defined at:
 12088 ;;		line 138 in file ".\src\pwm.c"
 12089 ;; Parameters:    Size  Location     Type
 12090 ;;		None
 12091 ;; Auto vars:     Size  Location     Type
 12092 ;;		None
 12093 ;; Return value:  Size  Location     Type
 12094 ;;                  1    wreg      void 
 12095 ;; Registers used:
 12096 ;;		wreg, status,2, status,0
 12097 ;; Tracked objects:
 12098 ;;		On entry : 3F/0
 12099 ;;		On exit  : 30/0
 12100 ;;		Unchanged: 0/0
 12101 ;; Data sizes:     COMRAM   BANK0   BANK1
 12102 ;;      Params:         0       0       0
 12103 ;;      Locals:         0       0       0
 12104 ;;      Temps:          0       0       0
 12105 ;;      Totals:         0       0       0
 12106 ;;Total ram usage:        0 bytes
 12107 ;; Hardware stack levels used:    1
 12108 ;; This function calls:
 12109 ;;		Nothing
 12110 ;; This function is called by:
 12111 ;;		_ISR_h
 12112 ;; This function uses a non-reentrant model
 12113 ;;
 12114                           
 12115                           	psect	text57
 12116  0014A6                     __ptext57:
 12117                           	opt stack 0
 12118  0014A6                     _pwm_task:
 12119                           	opt stack 0
 12120                           
 12121                           ; BSR set to: 0
 12122                           ;pwm.c: 140: if(duty0&&duty1)
 12123                           
 12124                           ;incstack = 0
 12125 ;; hardware stack exceeded
 12126  0014A6  506F               	movf	_duty0,w,c
 12127  0014A8  E069               	bz	i2l18061
 12128                           
 12129                           ; BSR set to: 0
 12130  0014AA  506E               	movf	_duty1,w,c
 12131  0014AC  E067               	bz	i2l18061
 12132                           
 12133                           ; BSR set to: 0
 12134                           ;pwm.c: 141: {
 12135                           ;pwm.c: 142: if(duty0<100&&duty1<100)
 12136  0014AE  0E64               	movlw	100
 12137  0014B0  606F               	cpfslt	_duty0,c
 12138  0014B2  D022               	goto	i2l34119
 12139                           
 12140                           ; BSR set to: 0
 12141  0014B4  606E               	cpfslt	_duty1,c
 12142  0014B6  D020               	goto	i2l34119
 12143                           
 12144                           ; BSR set to: 0
 12145                           ;pwm.c: 143: {
 12146                           ;pwm.c: 145: T2CLKEN=1;
 12147  0014B8  010F               	movlb	15	; () banked
 12148  0014BA  8562               	bsf	98,2,b	;volatile
 12149                           
 12150                           ;pwm.c: 146: TMR2H=0x00;
 12151  0014BC  6ACC               	clrf	4044,c	;volatile
 12152                           
 12153                           ;pwm.c: 147: TMR2L=0x00;
 12154  0014BE  6ACD               	clrf	4045,c	;volatile
 12155                           
 12156                           ;pwm.c: 149: PR2H=t_pwm>>8;
 12157  0014C0  C04C  FFCA         	movff	_t_pwm+1,4042	;volatile
 12158                           
 12159                           ;pwm.c: 150: PR2L=(u8)t_pwm;
 12160  0014C4  C04B  FFCB         	movff	_t_pwm,4043	;volatile
 12161                           
 12162                           ; BSR set to: 15
 12163                           ;pwm.c: 152: T2CON=0x7b;
 12164  0014C8  0E7B               	movlw	123
 12165  0014CA  6EC9               	movwf	4041,c	;volatile
 12166                           
 12167                           ; BSR set to: 15
 12168                           ;pwm.c: 154: TMR2IF=0;
 12169  0014CC  94A2               	bcf	4002,2,c	;volatile
 12170                           
 12171                           ; BSR set to: 15
 12172                           ;pwm.c: 155: TMR2IE=1;
 12173  0014CE  84A1               	bsf	4001,2,c	;volatile
 12174                           
 12175                           ; BSR set to: 15
 12176                           ;pwm.c: 158: T3CLKEN=1;
 12177  0014D0  8762               	bsf	98,3,b	;volatile
 12178                           
 12179                           ; BSR set to: 15
 12180                           ;pwm.c: 159: TMR3H=0x00;
 12181  0014D2  6ABB               	clrf	4027,c	;volatile
 12182                           
 12183                           ; BSR set to: 15
 12184                           ;pwm.c: 160: TMR3L=0x00;
 12185  0014D4  6ABA               	clrf	4026,c	;volatile
 12186                           
 12187                           ; BSR set to: 15
 12188                           ;pwm.c: 162: PR3H=t_pwm_>>8;
 12189  0014D6  C04A  FFB9         	movff	_t_pwm_+1,4025	;volatile
 12190                           
 12191                           ; BSR set to: 15
 12192                           ;pwm.c: 163: PR3L=(u8)t_pwm_;
 12193  0014DA  C049  FFB8         	movff	_t_pwm_,4024	;volatile
 12194                           
 12195                           ;pwm.c: 165: T3CON=0x7b;
 12196  0014DE  0E7B               	movlw	123
 12197  0014E0  6EBC               	movwf	4028,c	;volatile
 12198                           
 12199                           ; BSR set to: 15
 12200                           ;pwm.c: 167: TMR3IF=0;
 12201  0014E2  96A2               	bcf	4002,3,c	;volatile
 12202                           
 12203                           ; BSR set to: 15
 12204                           ;pwm.c: 168: TMR3IE=1;
 12205  0014E4  86A1               	bsf	4001,3,c	;volatile
 12206                           
 12207                           ; BSR set to: 15
 12208                           ;pwm.c: 170: PB3=0;
 12209  0014E6  9681               	bcf	3969,3,c	;volatile
 12210                           
 12211                           ; BSR set to: 15
 12212                           ;pwm.c: 171: TMR3ON=1;
 12213  0014E8  84BC               	bsf	4028,2,c	;volatile
 12214                           
 12215                           ; BSR set to: 15
 12216                           ;pwm.c: 172: CMP1IF=0; CMP1IE=1;
 12217  0014EA  929F               	bcf	3999,1,c	;volatile
 12218                           
 12219                           ; BSR set to: 15
 12220  0014EC  829E               	bsf	3998,1,c	;volatile
 12221                           
 12222                           ; BSR set to: 15
 12223                           ;pwm.c: 173: PD0=0;
 12224  0014EE  9083               	bcf	3971,0,c	;volatile
 12225                           
 12226                           ; BSR set to: 15
 12227                           ;pwm.c: 174: TMR2ON=1;
 12228  0014F0  84C9               	bsf	4041,2,c	;volatile
 12229                           
 12230                           ; BSR set to: 15
 12231                           ;pwm.c: 175: CMP0IF=0; CMP0IE=1;
 12232  0014F2  909F               	bcf	3999,0,c	;volatile
 12233                           
 12234                           ; BSR set to: 15
 12235  0014F4  809E               	bsf	3998,0,c	;volatile
 12236                           
 12237                           ;pwm.c: 177: }
 12238  0014F6  D033               	goto	i2l18063
 12239  0014F8                     i2l34119:
 12240                           
 12241                           ; BSR set to: 0
 12242                           ;pwm.c: 178: else if(duty0>=100 && duty1<100)
 12243  0014F8  0E63               	movlw	99
 12244  0014FA  646F               	cpfsgt	_duty0,c
 12245  0014FC  D015               	goto	i2l34145
 12246                           
 12247                           ; BSR set to: 0
 12248  0014FE  0E64               	movlw	100
 12249  001500  606E               	cpfslt	_duty1,c
 12250  001502  D012               	goto	i2l34145
 12251                           
 12252                           ; BSR set to: 0
 12253                           ;pwm.c: 179: {
 12254                           ;pwm.c: 183: T3CLKEN=1;
 12255  001504  010F               	movlb	15	; () banked
 12256  001506  8762               	bsf	98,3,b	;volatile
 12257                           
 12258                           ;pwm.c: 184: TMR3H=0x00;
 12259  001508  6ABB               	clrf	4027,c	;volatile
 12260                           
 12261                           ;pwm.c: 185: TMR3L=0x00;
 12262  00150A  6ABA               	clrf	4026,c	;volatile
 12263                           
 12264                           ;pwm.c: 187: PR3H=t_pwm_>>8;
 12265  00150C  C04A  FFB9         	movff	_t_pwm_+1,4025	;volatile
 12266                           
 12267                           ;pwm.c: 188: PR3L=(u8)t_pwm_;
 12268  001510  C049  FFB8         	movff	_t_pwm_,4024	;volatile
 12269                           
 12270                           ; BSR set to: 15
 12271                           ;pwm.c: 190: T3CON=0x7b;
 12272  001514  0E7B               	movlw	123
 12273  001516  6EBC               	movwf	4028,c	;volatile
 12274                           
 12275                           ; BSR set to: 15
 12276                           ;pwm.c: 192: TMR3IF=0;
 12277  001518  96A2               	bcf	4002,3,c	;volatile
 12278                           
 12279                           ; BSR set to: 15
 12280                           ;pwm.c: 193: TMR3IE=1;
 12281  00151A  86A1               	bsf	4001,3,c	;volatile
 12282                           
 12283                           ; BSR set to: 15
 12284                           ;pwm.c: 195: PD0=0;
 12285  00151C  9083               	bcf	3971,0,c	;volatile
 12286                           
 12287                           ; BSR set to: 15
 12288                           ;pwm.c: 196: CMP0IF=0; CMP0IE=1;
 12289  00151E  909F               	bcf	3999,0,c	;volatile
 12290                           
 12291                           ; BSR set to: 15
 12292  001520  809E               	bsf	3998,0,c	;volatile
 12293                           
 12294                           ; BSR set to: 15
 12295                           ;pwm.c: 197: PB3=0;
 12296  001522  9681               	bcf	3969,3,c	;volatile
 12297                           
 12298                           ; BSR set to: 15
 12299                           ;pwm.c: 198: TMR3ON=1;
 12300  001524  84BC               	bsf	4028,2,c	;volatile
 12301  001526  D019               	goto	L10
 12302  001528                     i2l34145:
 12303                           
 12304                           ; BSR set to: 0
 12305                           ;pwm.c: 203: else if(duty1>=100 && duty0<100)
 12306  001528  0E63               	movlw	99
 12307  00152A  646E               	cpfsgt	_duty1,c
 12308  00152C  D012               	goto	i2l18066
 12309                           
 12310                           ; BSR set to: 0
 12311  00152E  0E64               	movlw	100
 12312  001530  606F               	cpfslt	_duty0,c
 12313  001532  D00F               	goto	i2l18066
 12314                           
 12315                           ; BSR set to: 0
 12316                           ;pwm.c: 204: {
 12317                           ;pwm.c: 205: T2CLKEN=1;
 12318  001534  010F               	movlb	15	; () banked
 12319  001536  8562               	bsf	98,2,b	;volatile
 12320                           
 12321                           ;pwm.c: 206: TMR2H=0x00;
 12322  001538  6ACC               	clrf	4044,c	;volatile
 12323                           
 12324                           ;pwm.c: 207: TMR2L=0x00;
 12325  00153A  6ACD               	clrf	4045,c	;volatile
 12326                           
 12327                           ;pwm.c: 209: PR2H=t_pwm>>8;
 12328  00153C  C04C  FFCA         	movff	_t_pwm+1,4042	;volatile
 12329                           
 12330                           ;pwm.c: 210: PR2L=(u8)t_pwm;
 12331  001540  C04B  FFCB         	movff	_t_pwm,4043	;volatile
 12332                           
 12333                           ; BSR set to: 15
 12334                           ;pwm.c: 212: T2CON=0x7b;
 12335  001544  0E7B               	movlw	123
 12336  001546  6EC9               	movwf	4041,c	;volatile
 12337                           
 12338                           ; BSR set to: 15
 12339                           ;pwm.c: 214: TMR2IF=0;
 12340  001548  94A2               	bcf	4002,2,c	;volatile
 12341                           
 12342                           ; BSR set to: 15
 12343                           ;pwm.c: 215: TMR2IE=1;
 12344  00154A  84A1               	bsf	4001,2,c	;volatile
 12345                           
 12346                           ; BSR set to: 15
 12347                           ;pwm.c: 218: PD0=0;
 12348  00154C  9083               	bcf	3971,0,c	;volatile
 12349                           
 12350                           ; BSR set to: 15
 12351                           ;pwm.c: 219: TMR2ON=1;
 12352  00154E  84C9               	bsf	4041,2,c	;volatile
 12353  001550  D001               	goto	L11
 12354  001552                     i2l18066:
 12355                           
 12356                           ; BSR set to: 0
 12357                           ;pwm.c: 224: else
 12358                           ;pwm.c: 225: {
 12359                           ;pwm.c: 226: PD0=0;
 12360  001552  9083               	bcf	3971,0,c	;volatile
 12361  001554                     L11:
 12362                           
 12363                           ;pwm.c: 227: CMP0IF=0; CMP0IE=1;
 12364  001554  909F               	bcf	3999,0,c	;volatile
 12365  001556  809E               	bsf	3998,0,c	;volatile
 12366                           
 12367                           ;pwm.c: 228: PB3=0;
 12368  001558  9681               	bcf	3969,3,c	;volatile
 12369  00155A                     L10:
 12370                           
 12371                           ;pwm.c: 229: CMP1IF=0; CMP1IE=1;
 12372  00155A  929F               	bcf	3999,1,c	;volatile
 12373  00155C  829E               	bsf	3998,1,c	;volatile
 12374  00155E                     i2l18063:
 12375                           
 12376                           ;pwm.c: 230: }
 12377                           ;pwm.c: 232: ADCCLKEN=1;
 12378  00155E  010F               	movlb	15	; () banked
 12379  001560  8B62               	bsf	98,5,b	;volatile
 12380                           
 12381                           ; BSR set to: 15
 12382                           ;pwm.c: 233: ADCON0=0x3d;
 12383  001562  0E3D               	movlw	61
 12384  001564  6EA6               	movwf	4006,c	;volatile
 12385                           
 12386                           ;pwm.c: 234: ADCON1=0xdc;
 12387  001566  0EDC               	movlw	220
 12388  001568  6EA5               	movwf	4005,c	;volatile
 12389                           
 12390                           ;pwm.c: 235: ADCON3=0x47;
 12391  00156A  0E47               	movlw	71
 12392  00156C  6F13               	movwf	19,b	;volatile
 12393                           
 12394                           ;pwm.c: 236: ADCON4=0x50;
 12395  00156E  0E50               	movlw	80
 12396  001570  6F12               	movwf	18,b	;volatile
 12397                           
 12398                           ; BSR set to: 15
 12399                           ;pwm.c: 237: GO=1;
 12400  001572  82A6               	bsf	4006,1,c	;volatile
 12401                           
 12402                           ; BSR set to: 15
 12403                           ;pwm.c: 238: ADIF=0;
 12404  001574  9A9C               	bcf	3996,5,c	;volatile
 12405                           
 12406                           ; BSR set to: 15
 12407                           ;pwm.c: 239: ADIE=1;
 12408  001576  8A9B               	bsf	3995,5,c	;volatile
 12409                           
 12410                           ; BSR set to: 15
 12411                           ;pwm.c: 240: GIE=1;
 12412  001578  8EF2               	bsf	intcon,7,c	;volatile
 12413                           
 12414                           ;pwm.c: 242: }
 12415  00157A  0C50               	retlw	80
 12416  00157C                     i2l18061:
 12417                           
 12418                           ; BSR set to: 0
 12419                           ;pwm.c: 243: else
 12420                           ;pwm.c: 244: {
 12421                           ;pwm.c: 245: CMP0IE=0;
 12422  00157C  909E               	bcf	3998,0,c	;volatile
 12423                           
 12424                           ;pwm.c: 246: CMP1IE=0;
 12425  00157E  929E               	bcf	3998,1,c	;volatile
 12426                           
 12427                           ;pwm.c: 247: PD0=1;
 12428  001580  8083               	bsf	3971,0,c	;volatile
 12429                           
 12430                           ;pwm.c: 248: PB3=1;
 12431  001582  8681               	bsf	3969,3,c	;volatile
 12432  001584  0012               	return		;funcret
 12433  001586                     __end_of_pwm_task:
 12434                           	opt stack 0
 12435                           tblptru	equ	0xFF8
 12436                           tblptrh	equ	0xFF7
 12437                           tblptrl	equ	0xFF6
 12438                           tablat	equ	0xFF5
 12439                           prodh	equ	0xFF4
 12440                           prodl	equ	0xFF3
 12441                           intcon	equ	0xFF2
 12442                           postinc0	equ	0xFEE
 12443                           wreg	equ	0xFE8
 12444                           postdec1	equ	0xFE5
 12445                           fsr1l	equ	0xFE1
 12446                           bsr	equ	0xFE0
 12447                           indf2	equ	0xFDF
 12448                           postinc2	equ	0xFDE
 12449                           postdec2	equ	0xFDD
 12450                           fsr2h	equ	0xFDA
 12451                           fsr2l	equ	0xFD9
 12452                           status	equ	0xFD8
 12453                           tblptru	equ	0xFF8
 12454                           tblptrh	equ	0xFF7
 12455                           tblptrl	equ	0xFF6
 12456                           tablat	equ	0xFF5
 12457                           prodh	equ	0xFF4
 12458                           prodl	equ	0xFF3
 12459                           intcon	equ	0xFF2
 12460                           postinc0	equ	0xFEE
 12461                           wreg	equ	0xFE8
 12462                           postdec1	equ	0xFE5
 12463                           fsr1l	equ	0xFE1
 12464                           bsr	equ	0xFE0
 12465                           indf2	equ	0xFDF
 12466                           postinc2	equ	0xFDE
 12467                           postdec2	equ	0xFDD
 12468                           fsr2h	equ	0xFDA
 12469                           fsr2l	equ	0xFD9
 12470                           status	equ	0xFD8
 12471                           
 12472                           	psect	rparam
 12473  0000                     tblptru	equ	0xFF8
 12474                           tblptrh	equ	0xFF7
 12475                           tblptrl	equ	0xFF6
 12476                           tablat	equ	0xFF5
 12477                           prodh	equ	0xFF4
 12478                           prodl	equ	0xFF3
 12479                           intcon	equ	0xFF2
 12480                           postinc0	equ	0xFEE
 12481                           wreg	equ	0xFE8
 12482                           postdec1	equ	0xFE5
 12483                           fsr1l	equ	0xFE1
 12484                           bsr	equ	0xFE0
 12485                           indf2	equ	0xFDF
 12486                           postinc2	equ	0xFDE
 12487                           postdec2	equ	0xFDD
 12488                           fsr2h	equ	0xFDA
 12489                           fsr2l	equ	0xFD9
 12490                           status	equ	0xFD8
 12491                           
 12492                           	psect	temp
 12493  00007E                     btemp:
 12494                           	opt stack 0
 12495  00007E                     	ds	1
 12496  0000                     int$flags	set	btemp
 12497                           tblptru	equ	0xFF8
 12498                           tblptrh	equ	0xFF7
 12499                           tblptrl	equ	0xFF6
 12500                           tablat	equ	0xFF5
 12501                           prodh	equ	0xFF4
 12502                           prodl	equ	0xFF3
 12503                           intcon	equ	0xFF2
 12504                           postinc0	equ	0xFEE
 12505                           wreg	equ	0xFE8
 12506                           postdec1	equ	0xFE5
 12507                           fsr1l	equ	0xFE1
 12508                           bsr	equ	0xFE0
 12509                           indf2	equ	0xFDF
 12510                           postinc2	equ	0xFDE
 12511                           postdec2	equ	0xFDD
 12512                           fsr2h	equ	0xFDA
 12513                           fsr2l	equ	0xFD9
 12514                           status	equ	0xFD8
 12515                           tblptru	equ	0xFF8
 12516                           tblptrh	equ	0xFF7
 12517                           tblptrl	equ	0xFF6
 12518                           tablat	equ	0xFF5
 12519                           prodh	equ	0xFF4
 12520                           prodl	equ	0xFF3
 12521                           intcon	equ	0xFF2
 12522                           postinc0	equ	0xFEE
 12523                           wreg	equ	0xFE8
 12524                           postdec1	equ	0xFE5
 12525                           fsr1l	equ	0xFE1
 12526                           bsr	equ	0xFE0
 12527                           indf2	equ	0xFDF
 12528                           postinc2	equ	0xFDE
 12529                           postdec2	equ	0xFDD
 12530                           fsr2h	equ	0xFDA
 12531                           fsr2l	equ	0xFD9
 12532                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    160
    Data        26
    BSS         257
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     68     125
    BANK0           128      0      98
    BANK1           256      0     128

Pointer List with Targets:

    bat_task@task_	PTR struct task size(1) Largest target is 80
		 -> task_list(BANK0[80]), 

    smo_det_task@task_	PTR struct task size(1) Largest target is 80
		 -> task_list(BANK0[80]), 

    find_task@task_	PTR struct task size(1) Largest target is 80
		 -> task_list(BANK0[80]), 

    sleep_task@task_	PTR struct task size(1) Largest target is 80
		 -> task_list(BANK0[80]), 

    si_mic_task@task_	PTR struct task size(1) Largest target is 80
		 -> task_list(BANK0[80]), 

    key_timer_task@task_	PTR struct task size(1) Largest target is 80
		 -> task_list(BANK0[80]), 

    key_task@task_	PTR struct task size(1) Largest target is 80
		 -> task_list(BANK0[80]), 

    chrg_task@task_	PTR struct task size(1) Largest target is 80
		 -> task_list(BANK0[80]), 

    aip33626_freeChrg@task_	PTR struct task size(1) Largest target is 80
		 -> task_list(BANK0[80]), 

    aip33626_batFull@task_	PTR struct task size(1) Largest target is 80
		 -> task_list(BANK0[80]), 

    aip33626_smo_reset@task_	PTR struct task size(1) Largest target is 80
		 -> task_list(BANK0[80]), 

    aip33626_breath_stop@task_	PTR struct task size(1) Largest target is 80
		 -> task_list(BANK0[80]), 

    aip33626_breath@task_	PTR struct task size(1) Largest target is 80
		 -> task_list(BANK0[80]), 

    aip33626_flash@task_	PTR struct task size(1) Largest target is 80
		 -> task_list(BANK0[80]), 

    aip33626_sys_begin@task_	PTR struct task size(1) Largest target is 80
		 -> task_list(BANK0[80]), 

    aip33626_allDisplay@num	PTR unsigned char  size(2) Largest target is 128
		 -> arr_col(BANK1[128]), 


Critical Paths under _main in COMRAM

    _main->_find_task
    _find_task->_si_mic_task
    _smo_det_task->_add_task_id
    _fvr_init->_FVR_CAL
    _FVR_CAL->___awdiv
    _cmp_init->_CMP0_cal
    _cmp_init->_CMP1_cal
    _CMP1_cal->___awdiv
    _CMP0_cal->___awdiv
    _aip33626_init->_aip33626_sendcmd
    _si_mic_task->___fttol
    ___lltoft->___ftpack
    ___lbtoft->___ftpack
    ___fttol->___ftadd
    ___ftmul->___lbtoft
    ___ftadd->___ftmul
    _key_task->_add_task_id
    _chrg_task->_adc_bat
    _bat_task->_adc_bat
    _adc_bat->___lldiv
    _aip33626_sys_begin->_aip33626_allDisplay_
    _aip33626_smo_reset->_aip33626_allDisplay
    _aip33626_freeChrg->_aip33626_batFull
    _aip33626_batFull->_aip33626_allDisplay
    _aip33626_flash->_aip33626_allDisplay_
    _aip33626_breath_stop->_new_col
    _aip33626_breath->_new_col
    _aip33626_allDisplay_->_aip33626_sursor
    _aip33626_allDisplay->_aip33626_sursor
    _aip33626_sursor->_aip33626_sendcmd
    _aip33626_sendcmd->_myi2c_sendbyte

Critical Paths under _ISR_l in COMRAM

    None.

Critical Paths under _ISR_h in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR_l in BANK0

    None.

Critical Paths under _ISR_h in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_l in BANK1

    None.

Critical Paths under _ISR_h in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   65670
                                             66 COMRAM     2     2      0
                          _GPIO_Init
                           _add_task
                        _add_task_id
                      _aip33626_init
                           _cmp_init
                           _dac_init
                          _find_task
                           _fvr_init
                          _task_init
                        _timer1_init
 ---------------------------------------------------------------------------------
 (1) _task_init                                            1     1      0      90
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _find_task                                            3     1      2   54432
                                             63 COMRAM     3     1      2
                   _aip33626_batFull
                    _aip33626_breath
               _aip33626_breath_stop
                     _aip33626_flash
                  _aip33626_freeChrg
                 _aip33626_smo_reset
                 _aip33626_sys_begin
                           _bat_task
                          _chrg_task
                           _key_task
                     _key_timer_task
                        _si_mic_task
                         _sleep_task
                       _smo_det_task
 ---------------------------------------------------------------------------------
 (2) _smo_det_task                                         1     0      1    6393
                                             15 COMRAM     1     0      1
                        _add_task_id
 ---------------------------------------------------------------------------------
 (2) _sleep_task                                           2     1      1    3354
                                             14 COMRAM     2     1      1
                          _GPIO_Init
                      _aip33626_init
                           _cmp_init
                           _dac_init
                           _fvr_init
                         _sleep_mode
                        _timer1_init
 ---------------------------------------------------------------------------------
 (1) _timer1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _sleep_mode                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fvr_init                                             0     0      0    1028
                            _FVR_CAL
 ---------------------------------------------------------------------------------
 (2) _FVR_CAL                                              5     5      0    1028
                                              9 COMRAM     5     5      0
                         _FVR_Offset
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) _FVR_Offset                                           2     2      0      46
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _dac_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _cmp_init                                             0     0      0    2054
                           _CMP0_cal
                           _CMP1_cal
 ---------------------------------------------------------------------------------
 (4) _CMP1_cal                                             5     5      0    1027
                                              9 COMRAM     5     5      0
                        _CMP1_offset
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) _CMP1_offset                                          2     2      0      46
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _CMP0_cal                                             5     5      0    1027
                                              9 COMRAM     5     5      0
                        _CMP0_offset
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     684
                                              1 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) _CMP0_offset                                          2     2      0      46
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _aip33626_init                                        0     0      0     120
                   _aip33626_sendcmd
                         _myi2c_init
 ---------------------------------------------------------------------------------
 (4) _myi2c_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _GPIO_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _si_mic_task                                          8     7      1   18661
                                             55 COMRAM     8     7      1
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lbtoft
                            ___lldiv
                           ___lltoft
                             ___lmul
                        _add_task_id
                           _pwm_init
                         _timer0_cnt
 ---------------------------------------------------------------------------------
 (3) _timer0_cnt                                           5     2      3     322
                                              1 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (3) _pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     322
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2186
                                              9 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             4     1      3    2092
                                              9 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     350
                                             40 COMRAM    15    11      4
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    2696
                                             13 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3208
                                             28 COMRAM    12     6      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2070
                                              1 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _key_timer_task                                       2     1      1     130
                                              1 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _key_task                                             2     1      1    6481
                                             15 COMRAM     2     1      1
                        _add_task_id
 ---------------------------------------------------------------------------------
 (2) _chrg_task                                            2     1      1    7352
                                             24 COMRAM     2     1      1
                            _adc_bat
                        _add_task_id
 ---------------------------------------------------------------------------------
 (3) _add_task_id                                         14     7      7    6329
                                              1 COMRAM    14     7      7
 ---------------------------------------------------------------------------------
 (2) _bat_task                                             1     0      1     935
                                             24 COMRAM     1     0      1
                            _adc_bat
 ---------------------------------------------------------------------------------
 (3) _adc_bat                                             10     8      2     871
                                             14 COMRAM    10     8      2
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     802
                                              1 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _aip33626_sys_begin                                   2     1      1     417
                                             10 COMRAM     2     1      1
               _aip33626_allDisplay_
 ---------------------------------------------------------------------------------
 (2) _aip33626_smo_reset                                   2     1      1    1032
                                             11 COMRAM     2     1      1
                _aip33626_allDisplay
                       _arr_col_init
 ---------------------------------------------------------------------------------
 (2) _aip33626_freeChrg                                    1     0      1    2127
                                             13 COMRAM     1     0      1
                _aip33626_allDisplay
               _aip33626_allDisplay_
                   _aip33626_batFull
 ---------------------------------------------------------------------------------
 (3) _aip33626_batFull                                     2     1      1     964
                                             11 COMRAM     2     1      1
                _aip33626_allDisplay
                       _arr_col_init
 ---------------------------------------------------------------------------------
 (2) _aip33626_flash                                       1     0      1     417
                                             10 COMRAM     1     0      1
               _aip33626_allDisplay_
 ---------------------------------------------------------------------------------
 (2) _aip33626_breath_stop                                 2     1      1    2098
                                             18 COMRAM     2     1      1
                _aip33626_allDisplay
                            _new_col
 ---------------------------------------------------------------------------------
 (2) _aip33626_breath                                      2     1      1    2563
                                             18 COMRAM     2     1      1
                _aip33626_allDisplay
               _aip33626_allDisplay_
                       _arr_col_init
                            _new_col
 ---------------------------------------------------------------------------------
 (3) _new_col                                             17    12      5    1288
                                              1 COMRAM    17    12      5
 ---------------------------------------------------------------------------------
 (3) _arr_col_init                                         2     2      0      90
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _aip33626_allDisplay_                                 2     2      0     331
                                              8 COMRAM     2     2      0
                    _aip33626_sursor
                    _myi2c_reciveack
                     _myi2c_sendbyte
                        _myi2c_start
                         _myi2c_stop
 ---------------------------------------------------------------------------------
 (3) _aip33626_allDisplay                                  3     1      2     724
                                              8 COMRAM     3     1      2
                    _aip33626_sursor
                    _myi2c_reciveack
                     _myi2c_sendbyte
                        _myi2c_start
                         _myi2c_stop
 ---------------------------------------------------------------------------------
 (4) _aip33626_sursor                                      1     1      0     164
                                              7 COMRAM     1     1      0
                   _aip33626_sendcmd
 ---------------------------------------------------------------------------------
 (4) _aip33626_sendcmd                                     1     1      0     120
                                              6 COMRAM     1     1      0
                    _myi2c_reciveack
                     _myi2c_sendbyte
                        _myi2c_start
                         _myi2c_stop
 ---------------------------------------------------------------------------------
 (5) _myi2c_stop                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _myi2c_start                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _myi2c_sendbyte                                       5     5      0      90
                                              1 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (5) _myi2c_reciveack                                      2     2      0       8
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _add_task                                            15     9      6    1617
                                              1 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR_l                                                1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR_h                                                0     0      0       0
                           _pwm_task
 ---------------------------------------------------------------------------------
 (10) _pwm_task                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GPIO_Init
   _add_task
   _add_task_id
   _aip33626_init
     _aip33626_sendcmd
       _myi2c_reciveack
       _myi2c_sendbyte
       _myi2c_start
       _myi2c_stop
     _myi2c_init
   _cmp_init
     _CMP0_cal
       _CMP0_offset
       ___awdiv
     _CMP1_cal
       _CMP1_offset
       ___awdiv
   _dac_init
   _find_task
     _aip33626_batFull
       _aip33626_allDisplay
         _aip33626_sursor
           _aip33626_sendcmd
             _myi2c_reciveack
             _myi2c_sendbyte
             _myi2c_start
             _myi2c_stop
         _myi2c_reciveack
         _myi2c_sendbyte
         _myi2c_start
         _myi2c_stop
       _arr_col_init
     _aip33626_breath
       _aip33626_allDisplay
         _aip33626_sursor
           _aip33626_sendcmd
             _myi2c_reciveack
             _myi2c_sendbyte
             _myi2c_start
             _myi2c_stop
         _myi2c_reciveack
         _myi2c_sendbyte
         _myi2c_start
         _myi2c_stop
       _aip33626_allDisplay_
         _aip33626_sursor
           _aip33626_sendcmd
             _myi2c_reciveack
             _myi2c_sendbyte
             _myi2c_start
             _myi2c_stop
         _myi2c_reciveack
         _myi2c_sendbyte
         _myi2c_start
         _myi2c_stop
       _arr_col_init
       _new_col
     _aip33626_breath_stop
       _aip33626_allDisplay
         _aip33626_sursor
           _aip33626_sendcmd
             _myi2c_reciveack
             _myi2c_sendbyte
             _myi2c_start
             _myi2c_stop
         _myi2c_reciveack
         _myi2c_sendbyte
         _myi2c_start
         _myi2c_stop
       _new_col
     _aip33626_flash
       _aip33626_allDisplay_
         _aip33626_sursor
           _aip33626_sendcmd
             _myi2c_reciveack
             _myi2c_sendbyte
             _myi2c_start
             _myi2c_stop
         _myi2c_reciveack
         _myi2c_sendbyte
         _myi2c_start
         _myi2c_stop
     _aip33626_freeChrg
       _aip33626_allDisplay
         _aip33626_sursor
           _aip33626_sendcmd
             _myi2c_reciveack
             _myi2c_sendbyte
             _myi2c_start
             _myi2c_stop
         _myi2c_reciveack
         _myi2c_sendbyte
         _myi2c_start
         _myi2c_stop
       _aip33626_allDisplay_
         _aip33626_sursor
           _aip33626_sendcmd
             _myi2c_reciveack
             _myi2c_sendbyte
             _myi2c_start
             _myi2c_stop
         _myi2c_reciveack
         _myi2c_sendbyte
         _myi2c_start
         _myi2c_stop
       _aip33626_batFull
         _aip33626_allDisplay
           _aip33626_sursor
             _aip33626_sendcmd
               _myi2c_reciveack
               _myi2c_sendbyte
               _myi2c_start
               _myi2c_stop
           _myi2c_reciveack
           _myi2c_sendbyte
           _myi2c_start
           _myi2c_stop
         _arr_col_init
     _aip33626_smo_reset
       _aip33626_allDisplay
         _aip33626_sursor
           _aip33626_sendcmd
             _myi2c_reciveack
             _myi2c_sendbyte
             _myi2c_start
             _myi2c_stop
         _myi2c_reciveack
         _myi2c_sendbyte
         _myi2c_start
         _myi2c_stop
       _arr_col_init
     _aip33626_sys_begin
       _aip33626_allDisplay_
         _aip33626_sursor
           _aip33626_sendcmd
             _myi2c_reciveack
             _myi2c_sendbyte
             _myi2c_start
             _myi2c_stop
         _myi2c_reciveack
         _myi2c_sendbyte
         _myi2c_start
         _myi2c_stop
     _bat_task
       _adc_bat
         ___lldiv
     _chrg_task
       _adc_bat
         ___lldiv
       _add_task_id
     _key_task
       _add_task_id
     _key_timer_task
     _si_mic_task
       ___ftadd
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___lbtoft
         ___ftpack
       ___lldiv
       ___lltoft
         ___ftpack
       ___lmul
       _add_task_id
       _pwm_init
       _timer0_cnt
     _sleep_task
       _GPIO_Init
       _aip33626_init
         _aip33626_sendcmd
           _myi2c_reciveack
           _myi2c_sendbyte
           _myi2c_start
           _myi2c_stop
         _myi2c_init
       _cmp_init
         _CMP0_cal
           _CMP0_offset
           ___awdiv
         _CMP1_cal
           _CMP1_offset
           ___awdiv
       _dac_init
       _fvr_init
         _FVR_CAL
           _FVR_Offset
           ___awdiv
       _sleep_mode
       _timer1_init
     _smo_det_task
       _add_task_id
   _fvr_init
     _FVR_CAL
       _FVR_Offset
       ___awdiv
   _task_init
   _timer1_init

 _ISR_l (ROOT)

 _ISR_h (ROOT)
   _pwm_task

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0       8        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      80       5       50.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80      0      62       4       76.6%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     44      7D       1       99.2%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     15F       6        0.0%
DATA                 0      0     15F       9        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed May 07 11:28:08 2025

           _aip33626_smo_reset 1B14                              _p 0299                              _t 0076  
         aip33626_breath@task_ 0013                             PL2 05E2                             PL4 1068  
                           PL6 05F8                             PL8 0622                             _p0 0047  
                           _p1 0045                   ___awdiv@sign 0007                             _t1 0066  
                           bsr 000FE0            ?_aip33626_smo_reset 000C               ??_key_timer_task 0003  
                 ___ftadd@exp1 0028                   ___ftadd@exp2 0027                            PL10 062C  
                          PL20 065A                            PL12 063C                            PL30 1078  
                          PL22 0664                            PL14 064A                            PL40 2146  
                          PL32 0A0A                            PL24 09DC                            PL16 09A6  
                          PL50 1388                            PL42 148E                            PL34 1A3C  
                          PL26 066C                            PL18 0654                            PL60 0A18  
                          PL52 11B0                            PL44 137C                            PL36 1368  
                          PL28 09FE                            PL70 13AA                            PL62 149A  
                          PL54 1CD4                            PL46 1A50                            PL38 2134  
                          PL80 1D60                            PL72 1C58                            PL64 1656  
                          PL56 0680                            PL48 0674                            PL90 1D6A  
                          PL82 1CE4                            PL74 11C0                            PL66 1392  
                          PL58 18CA                            PL92 0A22                            PL84 0690  
                          PL76 13B6                            PL68 139E                            PL86 069A  
                          PL78 0686                            PL88 18D8                   ___ftadd@sign 0026  
          aip33626_flash@task_ 000B                            _PC0 007C10      __size_of_aip33626_batFull 006A  
                          _bat 0070             _aip33626_sys_begin 2558                            _you 007D  
                          wreg 000FE8                   find_task@id1 0042                   find_task@id2 0040  
                  config_word1 0000                    config_word2 0002                    config_word3 0004  
                  config_word4 0006           __size_of_add_task_id 009A                 CMP0_offset@tmp 0003  
                         l2300 07E6                           l2301 07EA                           l2322 0846  
                         l2306 0858                           l2260 0748                           l2420 1FE0  
                         l2421 1FE2                           l2342 0890                           l2422 1FFE  
                         l2343 08A0                           l2344 08A4                           l2280 0784  
                         l2264 0796                           l2256 0738                           l2408 1B7C  
                         l2257 073C                           l2425 200E                           l2417 1FDA  
                         l2433 2170                           l2354 08FC                           l2258 0740  
                         l2418 1FDC                           l2434 2174                           l2259 0744  
                         l2419 1FDE                           l2435 2178                           l2436 217C  
                         l2437 2180                           l2366 097A                           l2297 07DA  
                         l2298 07DE                           l2299 07E2                           l4645 1C52  
          ?_aip33626_sys_begin 000B                           l9083 11FC                           l6871 1042  
                         l6857 0F64                           l6858 0F60                __end_of_FVR_CAL 148E  
               ??_arr_col_init 0002                           u5131 1A6C                           u5150 1A9C  
                         u5071 1828                           u5091 1842                           u5155 1A94  
                         u6140 05CC                           u3664 2216                           u3665 2210  
                         u6340 12EA                           u4670 19C2                           u6345 12E0  
                         u4675 19B8                           u4861 108E                           u7317 248C  
                         u4871 10A2                           u7407 21F6                           u7327 2498  
                         u7417 1750                           u7337 13D0                           u7427 177A  
                         u7347 13F0                           u7437 17A8                           u7357 1408  
                         u7447 17CA                           u7367 142E                           u7457 1676  
                         u7377 1448                           u7467 16A0                           u7387 24F8  
                         u7477 16CE                           u7397 21DA                           u7487 16F0  
                         u6880 0D00                           u7497 1D98                           u6891 0D10  
    __size_of_aip33626_sendcmd 001E                  AD18F128@T0CS0 007EBD                  AD18F128@T0CON 000FD7  
         ??_aip33626_smo_reset 000D                  AD18F128@PB0PU 007C28                  AD18F128@T2CON 000FC9  
                AD18F128@PB1PU 007C29                  AD18F128@T3CON 000FBC                           _cnt0 004D  
                         _dian 007C                  AD18F128@FVREN 007B95                  AD18F128@PINB0 007C48  
                AD18F128@PINB1 007C49                  AD18F128@PINA4 007C44                  AD18F128@PINA5 007C45  
                AD18F128@PINC3 007C53                           _main 0A2A                  AD18F128@PIND2 007C5A  
                 ___ftpack@arg 0002                           _mode 0069                   ___ftpack@exp 0005  
                AD18F128@TMR1H 000FD1                  AD18F128@TMR2H 000FCC                  AD18F128@TMR1L 000FD0  
                AD18F128@TMR3H 000FBB                  AD18F128@TMR2L 000FCD                  AD18F128@TMR3L 000FBA  
                AD18F128@PORTA 000F80                           fsr2h 000FDA                  AD18F128@PORTB 000F81  
                AD18F128@PORTC 000F82                           indf2 000FDF                           fsr1l 000FE1  
                AD18F128@PORTD 000F83                           fsr2l 000FD9                           btemp 007E  
                AD18F128@TRISA 000F90                  AD18F128@TRISB 000F91                  AD18F128@TRISC 000F92  
                AD18F128@TRISD 000F93                           prodh 000FF4                           prodl 000FF3  
                         start 0026             __size_of_GPIO_Init 004C             add_task_id@task_id 0008  
                _state_smo_det 0078               __end_of_CMP0_cal 173E               __end_of_CMP1_cal 1818  
                 ___ftmul@cntr 001B                  _state_pwm_cnt 0052                    ?_FVR_Offset 0001  
                 ___param_bank 000000                   ___ftmul@sign 001C             add_task_id@suc_max 0007  
                arr_col_init@i 0003                 CMP1_offset@tmp 0003                   ___fttol@exp1 0037  
         ??_aip33626_sys_begin 000C                   ___fttol@lval 0033                          l20320 04EA  
                        l20321 0432                          l20308 02E2                          l20318 033C  
                        l13601 2224                          l13602 2226                          l32313 2504  
                        l33201 10EE                          l32241 1E80                          l32401 1692  
                        l32331 13E2                          l34005 130E                          l33053 20F0  
                        l32253 1EA0                          l32501 1808                          l32333 13E4  
                        l33223 111E                          l33063 20FC                          l32255 1EA8  
                        l32247 1E90                          l32431 16E4                          l32415 16BA  
                        l32407 1694                          l34031 18F0                          l34017 1354  
                        l32521 1D20                          l32513 1D02                          l33225 1128  
                        l33217 1108                          l32273 1EDC                          l32265 1EC6  
                        l32257 1EAC                          l32505 180E                          l32353 141A  
                        l32345 13FC                          l34041 1918                          l34033 18F8  
                        l32611 06B2                          l33411 1B4E                          l32523 1D2C  
                        l32515 1D06                          l33235 114C                          l33227 1130  
                        l33331 1B02                          l33323 1ADE                          l33315 1AC6  
                        l33083 2126                          l32443 1734                          l32419 16C2  
                        l34051 1956                          l34035 1900                          l32189 2202  
                        l32621 06EE                          l33405 1B28                          l32525 1D36  
                        l32517 1D14                          l33237 1156                          l33229 1136  
                        l33325 1AEA                          l33341 22EA                          l33077 2118  
                        l32269 1ED0                          l32461 176A                          l32381 1484  
                        l32357 1422                          l34061 1976                          l34037 1908  
                        l34029 18E8                          l34045 1920                          l32711 0810  
                        l33431 2186                          l33415 1B6C                          l33423 1BB0  
                        l32551 1F0A                          l33247 118A                          l33255 1832  
                        l33327 1AEE                          l33319 1AD6                          l33343 22F6  
                        l33183 22B4                          l32439 172E                          l32463 176C  
                        l34071 199A                          l34063 197E                          l34055 1964  
                        l34039 1910                          l34047 1948                          l15832 1DA0  
                        l32297 2350                          l32641 0726                          l32633 0708  
                        l32625 06FA                          l33361 2588                          l33433 219E  
                        l33417 1B8E                          l32561 1F3C                          l32553 1F0E  
                        l33601 105A                          l33273 1870                          l15809 20AC  
                        l32481 179C                          l32377 147E                          l32369 143C  
                        l34321 0C2E                          l34305 0C02                          l34241 0B52  
                        l34225 0B24                          l32627 06FE                          l33371 1E0E  
                        l33435 21AA                          l33355 256E                          l32539 1D52  
                        l33195 10CA                          l33283 188C                          l33259 184C  
                        l34067 198C                          l32717 0812                          l32653 074E  
                        l33381 1E3E                          l33373 1E1E                          l32549 1EFE  
                        l33541 0F8E                          l33525 0F54                          l33621 11F6  
                        l33277 1874                          l32493 17BE                          l32477 1794  
                        l32469 176E                          l32591 23D2                          l32831 0930  
                        l32807 08EC                          l32743 0874                          l32719 082E  
                        l32735 085E                          l32823 0910                          l32671 076C  
                        l32647 0734                          l32639 0724                          l33383 1E42  
                        l33455 1BF2                          l33287 1890                          l32399 1690  
                        l32833 0936                          l32841 0946                          l32817 0906  
                        l32753 0894                          l32745 0878                          l33561 0FC8  
                        l33297 1A74                          l33713 02D2                          l33705 02BE  
                        l34361 0D12                          l34353 0C86                          l34337 0C5A  
                        l34273 0BAA                          l34257 0B7E                          l32763 08B4  
                        l32771 08BE                          l33387 1E48                          l33395 2382  
                        l33491 1C42                          l33483 1C32                          l33475 1C22  
                        l33467 1C12                          l33459 1BFE                          l32923 19EA  
                        l33555 0FBA                          l33635 1222                          l33299 1A7E  
                        l24755 15E2                          l24756 15A8                          l32765 08B6  
                        l32693 07D6                          l32685 07A0                          l33557 0FBE  
                        l33821 046A                          l33805 0440                          l33741 031E  
                        l32863 0992                          l32767 08B8                          l32687 07BA  
                        l33575 0FFA                          l33671 12A2                          l33663 127A  
                        l33815 0452                          l33743 0322                          l33727 02F2  
                        l33719 02DE                          l24759 15CE                          l32849 095C  
                        l32785 08CC                          l32769 08BA                          l33585 1024  
                        l33577 1004                          l33665 1284                          l33737 030C  
                        l33913 2090                          l34289 0BD6                          l32867 0998  
                        l32699 07F0                          l32883 201A                          l33827 0482  
                        l33835 0496                          l32797 08DE                          l32877 1FE6  
                        l33589 1038                          l33861 0576                          l33845 04C0  
                        l33837 04A2                          l33749 0328                          l33933 15B6  
                        l33679 12C0                          l33687 242E                          l33871 059A  
                        l33865 0582                          l33881 05B8                          l33793 0424  
                        l33859 0500                          l33779 039C                          l33963 1608  
                        l33939 15C2                          l29500 1172                          l33789 0412  
                        l29239 22A0                          l33879 05B0                          l33799 0436  
                        l29440 1CFA                          l33889 05DE                          l33969 1626  
                        l33977 164C                          l33985 245E                          l29452 1D40  
                        l33997 1308                          l26976 130A                          l29490 115C  
                        l29475 10BC                          l29479 10E0                          l29577 1F4A  
                        l29499 116E                          ?_main 0001                __end_of___awdiv 1EE6  
              __end_of___ftadd 11B0                __end_of___lldiv 1F5C                __end_of_adc_bat 1DF2  
              __end_of___ftmul 18CA                ___awdiv@divisor 0004                __end_of___fttol 1B14  
                        _PINA4 007C44                          _PINC3 007C53                ___awdiv@counter 0006  
                        _ISR_h 0008                          _ISR_l 0018                 AD18F128@DAC0EN 007BA6  
               AD18F128@DAC1EN 007B9E                 AD18F128@ADCON0 000FA6                 AD18F128@ADCON1 000FA5  
               AD18F128@ADCON3 000F13                 AD18F128@ADCON4 000F12            ___lmul@multiplicand 0006  
               AD18F128@ADRESH 000FA8                 AD18F128@ADRESL 000FA7                   ___lltoft@exp 0012  
               AD18F128@CMP0IE 007CF0                 AD18F128@CMP0IF 007CF8                 AD18F128@CMP0EN 007BC7  
               AD18F128@CMP1IE 007CF1                 AD18F128@CMP1IF 007CF9                 AD18F128@CMP1EN 007BBF  
               AD18F128@PB0AEN 007A98                 AD18F128@PB1AEN 007A99                __end_of_arr_cnt 0281  
               AD18F128@CMPCON 000F76                 AD18F128@T1CON0 000FCF                 AD18F128@PB0MSK 007AF8  
               AD18F128@PB1MSK 007AF9                 AD18F128@PA4MSK 007B04                 AD18F128@PC3MSK 007AF3  
               AD18F128@PD2MSK 007AEA                          _cd_fz 005F                          _bat_o 004F  
               AD18F128@FVRCON 000F72                          _arr_q 0281                 AD18F128@FVRPGA 007B96  
                        _duty0 006F                          _duty1 006E                          _key_o 005C  
               AD18F128@OSCCON 000F64                          _temp1 00DE                          _temp2 00DA  
                        _temp3 00D6                          _t_pwm 004B                 AD18F128@TMR0IE 007D08  
               AD18F128@TMR0IF 007D10                 AD18F128@TMR1IE 007D09                 AD18F128@TMR1IF 007D11  
               AD18F128@TMR2IE 007D0A                  ___ftpack@sign 0006                 AD18F128@TMR2IF 007D12  
              __end_of_new_col 09A6                 AD18F128@TMR3IE 007D0B                 AD18F128@TMR3IF 007D13  
               AD18F128@TMR1ON 007E78                 AD18F128@TMR2ON 007E4A                 AD18F128@TMR3ON 007DE2  
                        tablat 000FF5                   ?_myi2c_start 0001                _aip33626_breath 1DF2  
                        status 000FD8                 find_task@task_ 0041                _aip33626_sursor 25A4  
         __size_of_CMP0_offset 0012                     AD18F128@GO 007D31           __size_of_CMP1_offset 0012  
              __initialization 1F5C                   __end_of_main 0D20                         ??_main 0043  
                ___fttol@sign1 0032                  __activetblptr 000002  __size_of_aip33626_allDisplay_ 0038  
                       ?_ISR_h 0001                         ?_ISR_l 0001              __end_of_GPIO_Init 2298  
                    ??_FVR_CAL 000A               ??_myi2c_sendbyte 0002                   ?_si_mic_task 0038  
     __size_of_myi2c_reciveack 0020            __size_of_FVR_Offset 0012               ___awdiv@dividend 0002  
             __end_of___ftpack 1D60               __end_of___lbtoft 245C               __end_of___lltoft 2330  
             __end_of_add_task 1368               __end_of_dac_init 2500               __end_of_bat_task 1C58  
              AD18F128@DAC0CON 000F74                AD18F128@DAC1CON 000F73                AD18F128@ADRESH1 000F17  
              AD18F128@ADRESH2 000F15                AD18F128@ADRESL1 000F16                AD18F128@ADRESL2 000F14  
              AD18F128@ANASEL0 000F54                AD18F128@ANASEL1 000F53                AD18F128@ANASEL2 000F52  
              AD18F128@ANASEL3 000F0D                AD18F128@CLKCFG1 000F63                AD18F128@CMP0POS 007BC5  
              AD18F128@CMP1POS 007BBD                AD18F128@CMP0OUT 007BC6                AD18F128@CMP1OUT 007BBE  
             __end_of_cmp_init 21FE                AD18F128@CMPCON1 000F7D                AD18F128@T0CLKEN 007B10  
              AD18F128@T1CLKEN 007B11                AD18F128@T2CLKEN 007B12                AD18F128@T3CLKEN 007B13  
                       ___lmul 2298                         _adc_ok 0057                      ??___awdiv 0006  
                    ??___ftadd 0023                      ??___lldiv 000A                      ??_adc_bat 0011  
                    ??___ftmul 0014                      ??___fttol 002D                   ?_timer1_init 0001  
              AD18F128@FVRCON1 000F30                AD18F128@FVRPGA1 007986               __end_of_key_task 12CA  
          aip33626_sendcmd@cmd 0007                         clear_0 1FA2                         clear_1 1FAE  
                       clear_2 1FBA                      CMP0_cal@i 000E                  bat_task@task_ 0019  
         __end_of_arr_col_init 251E               ___awdiv@quotient 0008                      CMP1_cal@i 000E  
                       _t_pwm_ 0049               __end_of_fvr_init 24A0          ___ftmul@f3_as_product 0018  
             _aip33626_batFull 1FCE                   __pdataCOMRAM 0070    __end_of_aip33626_allDisplay 2372  
                    ??_new_col 0007                myi2c_sendbyte@i 0006                   __mediumconst 0000  
                FVR_Offset@tmp 0003                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8        __end_of_aip33626_breath 1E6E               __end_of_pwm_init 2134  
             __end_of_pwm_task 1586                      ?_CMP0_cal 0001                      ?_CMP1_cal 0001  
             _aip33626_sendcmd 251E        __end_of_aip33626_sursor 25BA               _aip33626_task_id 0067  
                   __accesstop 0080        __end_of__initialization 1FC0                     ___ftadd@f1 001D  
                   ___ftadd@f2 0020                  ___rparam_used 000001  __size_of_aip33626_breath_stop 003E  
                __end_of_ISR_h 0F22                  __end_of_ISR_l 0026                    AD18F128@GIE 007F97  
                  AD18F128@PC1 007C11                    AD18F128@PB3 007C0B                    AD18F128@PD0 007C18  
                  AD18F128@PC2 007C12                    AD18F128@PR0 000FD6                     ___lbtoft@c 000D  
                   ___ftmul@f1 000E                     ___ftmul@f2 0011                     ___fttol@f1 0029  
               __pcstackCOMRAM 0001                    new_col@dian 0002                   __pidataBANK0 2610  
                  new_col@mode 0005                     ___lltoft@c 000A                  __end_of_arr_q 0299  
            CMP0_offset@OFFSET 0002                     __end_ofPL2 05F8                     __end_ofPL4 1078  
                   __end_ofPL6 0622                     __end_ofPL8 062C                arr_col_init@num 0002  
       aip33626_allDisplay@num 0009             __size_of_chrg_task 0146                        ??_ISR_h 0001  
                      ??_ISR_l 0001             __size_of_find_task 00C2                sleep_task@task_ 000F  
                   ??_CMP0_cal 000A                     ??_CMP1_cal 000A         aip33626_freeChrg@task_ 000E  
        __end_of_aip33626_init 2602                     __pbssBANK0 0080                     __pbssBANK1 0100  
      aip33626_sys_begin@task_ 000B            key_timer_task@task_ 0002              ??_myi2c_reciveack 0002  
         __size_of_myi2c_start 002A                   ??_FVR_Offset 0002                        ?___lmul 0002  
               ___lmul@product 000A                      ?___ftpack 0002                      ?___lbtoft 000A  
           __size_of_task_init 0022                      ?___lltoft 000A                      ?_add_task 0002  
                    ?_dac_init 0001                  ??_add_task_id 0009                new_col@mode_sub 0006  
              new_col@mode_you 0003                        i2l11410 0EFC                        i2l11412 0F1E  
                      i2l11405 0E7C                        i2l11406 0E8A                        i2l11408 0EB8  
                      i2l11409 0EDA                        i2l11391 0DB8                        i2l11393 0DD4  
                      i2l11395 0DF0                        i2l11387 0D80                        i2l11397 0E0C  
                      i2l11389 0D9C                        i2l11399 0E28                        i2l18061 157C  
                      i2l18063 155E                        i2l34119 14F8                        i2l34145 1528  
                      i2l18066 1552                        i2l34503 0E96                        i2l34381 0D3E  
                      i2l34467 0E44                        i2l34395 0D5A                        i2l34469 0E48  
                      i2l34487 0E6E                      ?_bat_task 0019        __size_of_aip33626_flash 001A  
                      _FVR_CAL 13BE               ?_aip33626_breath 0013            add_task@interval_ms 0003  
                    ?_cmp_init 0001             __end_of_FVR_Offset 25CC           __size_of_si_mic_task 0340  
          AD18F128@FVR_A2D_OUT 007987               AD18F128@ADCCLKEN 007B15               ?_aip33626_sursor 0001  
  __size_of_aip33626_smo_reset 00A8                      ?_key_task 0010                      ?_fvr_init 0001  
            __end_of_chrg_task 1068               AD18F128@CMP0CON2 000F33               AD18F128@CMP1CON2 000F32  
             AD18F128@CMP0NCH0 007BC0               AD18F128@CMP0NCH1 007BC1               AD18F128@CMP0PCH0 007BC2  
             AD18F128@CMP1NCH0 007BB8               AD18F128@CMP0PCH1 007BC3               AD18F128@CMP1NCH1 007BB9  
             AD18F128@CMP0PCH2 007BC4               AD18F128@CMP1PCH0 007BBA               AD18F128@CMP1PCH1 007BBB  
             AD18F128@CMP1PCH2 007BBC                        __Hparam 0000                        __Lparam 0000  
        __size_of_arr_col_init 001E               AD18F128@CMPCLKEN 007B17              __end_of_find_task 19A2  
                      ___awdiv 1E6E                __size_of___lmul 004C      add_task_id@interval_ticks 000E  
                      ___ftadd 107E                        ___lldiv 1EE6                        _adc_bat 1D74  
                      ___ftmul 1818                        ___fttol 1A5C                      ?_pwm_init 0001  
                    ?_pwm_task 0001                        _cb_flag 0051                   _breath_state 007A  
  __size_of_aip33626_sys_begin 001C                   __psmallconst 0200            aip33626_sursor@site 0008  
                      __pcinit 1F5C                     ??___ftpack 0007                     ??___lbtoft 000D  
                      __ramtop 0200                        _dl_init 0059                        _cr_flag 005D  
                   ??___lltoft 000E           __size_of_timer1_init 001C                        __ptext0 0A2A  
                      __ptext1 245C                        __ptext2 18E0                        __ptext3 1586  
                      __ptext4 2038                        __ptext5 253C                        __ptext6 1C62  
                      __ptext7 247E                        __ptext8 13BE                        __ptext9 25BA  
                      _col_cnt 0068                     ??_add_task 0008                        _arr_col 0100  
                      _arr_cnt 0201            timer0_cnt@init_flag 0073                     ??_dac_init 0002  
                 FVR_CAL@VOOS1 000C                     _myi2c_init 258E                     _myi2c_stop 24A0  
                   ??_bat_task 001A                  CMP0_cal@VOOS1 000C                        _new_col 06A4  
             timer0_cnt@ls_lab 0056              new_col@mode_sub_2 0064                   FVR_CAL@start 000D  
                      _state_q 0065                     ??_cmp_init 000F                      _GPIO_Init 224C  
               __pintcode_body 0D20            __end_of_add_task_id 1A3C           end_of_initialization 1FC0  
                CMP0_cal@start 000D        __size_of_key_timer_task 0026                  CMP1_cal@VOOS1 000C  
                      _you_cnt 0080                   _arr_col_init 2500              __end_of_task_init 247E  
                __Lmediumconst 0000                     ??_key_task 0011                        int_func 0D20  
                ??_CMP0_offset 0002   __end_of_aip33626_allDisplay_ 23E8                  ??_CMP1_offset 0002  
                   ??_fvr_init 000F       __end_of_aip33626_batFull 2038                  CMP1_cal@start 000D  
             myi2c_sendbyte@by 0005                ___lldiv@divisor 0006                ___lldiv@counter 000E  
            _aip33626_freeChrg 2158                     _timer0_cnt 209E                        postdec1 000FE5  
                      postdec2 000FDD                     _sleep_mode 1C62                     _sleep_task 2038  
                      postinc0 000FEE                        postinc2 000FDE                     ??_pwm_init 0002  
                   ??_pwm_task 0001             ?_aip33626_freeChrg 000E                  ?_smo_det_task 0010  
     __end_of_aip33626_sendcmd 253C      aip33626_breath_stop@task_ 0013                     _smo_det1_o 0075  
                   _smo_det2_o 0074                  si_mic_task@tt 003C            ??_aip33626_freeChrg 000F  
               add_task_id@id1 000D                 add_task_id@id2 0002          aip33626_batFull@task_ 000C  
                   _state_chrg 0077                     ?_GPIO_Init 0001              __size_of_CMP0_cal 00DC  
            __size_of_CMP1_cal 00DA                   AD18F128@ADIE 007CDD                   AD18F128@ADIF 007CE5  
                 AD18F128@ADON 007D30                   AD18F128@PAIE 007CF5                   AD18F128@PAIF 007CFD  
                 AD18F128@PBIE 007CF6                   AD18F128@PBIF 007CFE                   AD18F128@PCIE 007CF7  
                 AD18F128@PCIF 007CFF                   AD18F128@PAOD 000F94                   AD18F128@PDIE 007D0F  
                 AD18F128@PDIF 007D17                   AD18F128@PAPD 000F8C                   AD18F128@PBOD 000F95  
                 AD18F128@PBPD 000F8D                   AD18F128@PCOD 000F96                   AD18F128@PCPD 000F8E  
                 AD18F128@PDOD 000F97                   AD18F128@PR2H 000FCA                   AD18F128@PDPD 000F8F  
                 AD18F128@PR3H 000FB9                   AD18F128@PR2L 000FCB                   AD18F128@PAPU 000F84  
                 AD18F128@PR3L 000FB8                   AD18F128@PBPU 000F85                   AD18F128@PCPU 000F86  
                 AD18F128@PDPU 000F87                   AD18F128@SMCR 000F65                   AD18F128@TMR0 000FD5  
                 AD18F128@SPEN 007A6F                   AD18F128@SMTA 000F98      __end_of_aip33626_freeChrg 21B0  
                  ___ftmul@exp 0017            __end_of_CMP0_offset 25F0            __end_of_CMP1_offset 25DE  
               ??_smo_det_task 0011                  _task_1_7_flag 006C                  _task_1_7_init 005E  
               __end_of___lmul 22E4                  __pidataCOMRAM 2602              CMP1_offset@OFFSET 0002  
               chrg_task@task_ 0019                    ?_myi2c_init 0001   __end_of_aip33626_breath_stop 23B0  
                  ?_myi2c_stop 0001                 _aip33626_flash 2574                    _add_task_id 19A2  
                  __end_ofPL10 063C                    __end_ofPL20 0664                    __end_ofPL12 064A  
                  __end_ofPL30 107E                    __end_ofPL22 066C                    __end_ofPL14 0654  
                  __end_ofPL40 2158                    __end_ofPL32 0A18                    __end_ofPL24 09FE  
                  __end_ofPL16 09DC                    __end_ofPL50 1392                    __end_ofPL42 149A  
                  __end_ofPL34 1A50                    __end_ofPL26 0674                    __end_ofPL18 065A  
                  __end_ofPL60 0A22                    __end_ofPL52 11C0                    __end_ofPL44 1388  
                  __end_ofPL36 137C                    __end_ofPL28 0A0A                    __end_ofPL70 13B6  
                  __end_ofPL62 14A6                    __end_ofPL54 1CE4                    __end_ofPL46 1A5C  
                  __end_ofPL38 2146                    __end_ofPL80 1D6A                    __end_ofPL72 1C62  
                  __end_ofPL64 1662                    __end_ofPL56 0686                    __end_ofPL48 0680  
                  __end_ofPL90 1D74                    __end_ofPL82 1CEE                    __end_ofPL74 11CC  
                  __end_ofPL66 139E                    __end_ofPL58 18D8                    __end_ofPL92 0A2A  
                  __end_ofPL84 069A                    __end_ofPL76 13BE                    __end_ofPL68 13AA  
                  __end_ofPL86 06A4                    __end_ofPL78 0690                    __end_ofPL88 18E0  
          start_initialization 1F5C                _myi2c_reciveack 24C2        aip33626_allDisplay_@num 0009  
 __size_of_aip33626_allDisplay 0042        __size_of_myi2c_sendbyte 004E                    ?_timer0_cnt 0002  
                     ??___lmul 000A                    ?_sleep_mode 0001                    ?_sleep_task 000F  
           AD18F128@CMPFILTER0 007BB4             AD18F128@CMPFILTER1 007BB5             AD18F128@CMPFILTER2 007BB6  
           AD18F128@CMPFILTER3 007BB7                    __pdataBANK0 00D6          AD18F128@FVR_OFFSET_EN 007985  
       __end_of_aip33626_flash 258E              __size_of___ftpack 0072              __size_of___lbtoft 0024  
         _aip33626_allDisplay_ 23B0              __size_of___lltoft 004C                    __pbssCOMRAM 0045  
            __size_of_add_task 009E                       ?_FVR_CAL 0001              __size_of_dac_init 001E  
            __size_of_bat_task 009C                     new_col@you 0010                 _key_timer_flag 005B  
                  ??_GPIO_Init 0002                 _key_timer_task 2412                      __end_of_p 02A1  
        aip33626_allDisplay_@i 000A                  ??_myi2c_start 0002              __size_of_cmp_init 004E  
                     FVR_CAL@i 000E                    _CMP0_offset 25DE                      adc_bat@t_ 0015  
                  _CMP1_offset 25CC                   _key_timer_id 005A     __size_of_aip33626_freeChrg 0058  
          __size_of_myi2c_init 0016              __size_of_key_task 00FE            __size_of_myi2c_stop 0022  
            __size_of_fvr_init 0022                      __pintcode 0008                      add_task@i 000F  
                    _chrg_task 0F22                       ?___awdiv 0002                       ?___ftadd 001D  
                     ?___lldiv 0002                       ?_adc_bat 000F                       ?___ftmul 000E  
                     ?___fttol 0029                    __pintcodelo 0018        __end_of_myi2c_reciveack 24E2  
                    _find_task 18E0         __size_of_aip33626_init 0012                   _new_col$1181 000D  
                  add_task@id1 000C                    add_task@id2 0002                ?_aip33626_flash 000B  
            __size_of_pwm_init 0036              __size_of_pwm_task 00E0          ?_aip33626_allDisplay_ 0001  
                  __smallconst 0200                 __size_of_ISR_h 0F1A                 __size_of_ISR_l 000E  
                     ?_new_col 0002                  ??_si_mic_task 0039         __end_of_key_timer_task 2438  
                  _breath_init 0072                       _CMP0_cal 1662                       _CMP1_cal 173E  
          __size_of_timer0_cnt 0060            __size_of_sleep_mode 0072                     task_init@i 0002  
          __size_of_sleep_task 0066     __end_of_aip33626_smo_reset 1BBC           __end_of_smo_det_task 1656  
                    _mode_dian 006A               new_col@mode_dian 0004       __size_of_aip33626_breath 007C  
            ?_aip33626_batFull 000C           _aip33626_breath_stop 2372                      _task_init 245C  
                    _task_list 0086            __end_of_myi2c_start 2412                      _sim_mic_o 0054  
     __size_of_aip33626_sursor 0016     __end_of_aip33626_sys_begin 2574        aip33626_smo_reset@task_ 000C  
                    _timer0cnt 0084             ??_aip33626_batFull 000D                     ?_chrg_task 0019  
                ??_timer1_init 0002                     ?_find_task 0040              ?_aip33626_sendcmd 0001  
                    _usb_det_o 0060                      _state_key 0079                      _state_pwm 0053  
           ??_aip33626_sendcmd 0007              AD18F128@DAC0VREF0 007BA8              AD18F128@DAC0VREF1 007BA9  
            AD18F128@DAC1VREF0 007BAA              AD18F128@DAC1VREF1 007BAB                ?_key_timer_task 0002  
             __size_of_FVR_CAL 00D0              ___lmul@multiplier 0002                      copy_data0 1F70  
                    copy_data1 1F90                  _aip33626_init 25F0            __end_of_si_mic_task 05E2  
               _myi2c_sendbyte 21FE          ?_aip33626_breath_stop 0013                       __Hrparam 0000  
                   ?_task_init 0001                       __Lrparam 0000                   _low_bat_flag 0061  
                timer0_cnt@lab 0004                       _dl0_flag 0063                       _dl1_flag 0062  
             __size_of___awdiv 0078               __size_of___ftadd 0132               __size_of___lldiv 0076  
          _aip33626_allDisplay 2330               __size_of_adc_bat 007E               __size_of___ftmul 00B2  
             __size_of___fttol 00B8               ?_myi2c_reciveack 0001                       ___ftpack 1CEE  
                     ___lbtoft 2438                      new_col@t2 000F               FVR_Offset@OFFSET 0002  
       ??_aip33626_allDisplay_ 0009                       ___lltoft 22E4                       _add_task 12CA  
         aip33626_allDisplay@i 000B                       _dac_init 24E2                   ??_myi2c_init 0002  
                 ??_myi2c_stop 0002            __end_of_timer1_init 2558                   ?_add_task_id 0002  
                     _bat_task 1BBC                       adc_bat@t 0013               __size_of_new_col 0302  
                     __ptext10 24E2                       __ptext11 21B0                       __ptext20 02A2  
                     __ptext12 173E                       __ptext21 209E                       __ptext13 25CC  
                     __ptext30 2412                       __ptext22 20FE                       __ptext14 1662  
                     __ptext31 11CC                       __ptext23 2298                       __ptext15 1E6E  
                     __ptext40 1FCE                       __ptext32 0F22                       __ptext24 22E4  
                     __ptext16 25DE                       __ptext41 2574                       __ptext33 19A2  
                     __ptext25 2438                       __ptext17 25F0                       __ptext50 24A0  
                     __ptext42 2372                       __ptext34 1BBC                       __ptext26 1A5C  
                     __ptext18 258E                       __ptext51 23E8                       __ptext43 1DF2  
                     __ptext35 1D74                       __ptext27 1818                       __ptext19 224C  
                     __ptext52 21FE                       __ptext44 06A4                       __ptext36 1EE6  
                     __ptext28 107E                       __ptext53 24C2                       __ptext45 2500  
                     __ptext37 2558                       __ptext29 1CEE                       __ptext54 12CA  
                     __ptext46 23B0                       __ptext38 1B14                       __ptext47 2330  
                     __ptext39 2158                       __ptext48 25A4                       __ptext57 14A6  
                     __ptext49 251E                       _col_init 007B                       _cmp_init 21B0  
               ?_aip33626_init 0001           ?_aip33626_allDisplay 0009         __end_of_myi2c_sendbyte 224C  
                  _myi2c_start 23E8                       _key_task 11CC                  __size_of_main 02F6  
                     _tim0flag 0058                       _fvr_init 247E                       _mode_sub 006D  
                     _mode_you 006B              AD18F128@UARTCLKEN 007B1E               si_mic_task@task_ 0038  
           __end_of_myi2c_init 25A4             __end_of_myi2c_stop 24C2                   ??_timer0_cnt 0005  
                 ??_sleep_mode 0002                   ??_sleep_task 0010                    ??_chrg_task 001A  
            ??_aip33626_breath 0014                       int$flags 007E                  key_task@task_ 0010  
            smo_det_task@task_ 0010                       _pwm_init 20FE                       _pwm_task 14A6  
                  ??_find_task 0042              ??_aip33626_sursor 0008          __size_of_smo_det_task 00D0  
                 timer0_cnt@ms 0002                    _si_mic_task 02A2                       new_col@i 0012  
        ??_aip33626_allDisplay 000B                       new_col@t 0011                       intlevel1 0000  
                     intlevel2 0000             __end_of_timer0_cnt 20FE             __end_of_sleep_mode 1CD4  
           __end_of_sleep_task 209E                ?_myi2c_sendbyte 0001               ___lldiv@dividend 0002  
       ??_aip33626_breath_stop 0014                   ?_CMP0_offset 0001                   ?_CMP1_offset 0001  
                  ??_task_init 0002                si_mic_task@temp 003A                     _FVR_Offset 25BA  
             ??_aip33626_flash 000C                    _timer1_init 253C                   _smo_det_task 1586  
             ___lldiv@quotient 000A                add_task@suc_max 0007                ??_aip33626_init 0008  
       add_task@interval_ticks 000D         add_task_id@interval_ms 0003                  ?_arr_col_init 0001  
                 _smo_timerout 0055  
